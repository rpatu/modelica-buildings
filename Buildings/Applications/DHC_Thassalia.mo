within Buildings.Applications;
package DHC_Thassalia
extends Modelica.Icons.VariantsPackage;
  package Controls_a
    extends Modelica.Icons.VariantsPackage;
    model power_meter
      Modelica.Blocks.Interfaces.RealInput T_in
        annotation (Placement(transformation(extent={{-140,40},{-100,80}})));
      Modelica.Blocks.Interfaces.RealInput T_out
        annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
      Modelica.Blocks.Interfaces.RealInput m_flow
        annotation (Placement(transformation(extent={{-140,-80},{-100,-40}})));
      Modelica.Blocks.Interfaces.RealOutput P(final quantity="Power", unit="W") annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={0,110})));

    equation
      P = m_flow / 3600 * abs(T_in - T_out);


      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
            Line(visible=(tau <> 0),
            points={{52,60},{58,74},{66,86},{76,92},{88,96},{98,96}}, color={0,
                  0,127}),
            Ellipse(
              fillColor={245,245,245},
              fillPattern=FillPattern.Solid,
              extent={{-70,-70},{70,70}}),
            Line(points={{0,70},{0,40}}),
            Line(points={{22.9,32.8},{40.2,57.3}}),
            Line(points={{-22.9,32.8},{-40.2,57.3}}),
            Line(points={{37.6,13.7},{65.8,23.9}}),
            Line(points={{-37.6,13.7},{-65.8,23.9}}),
            Ellipse(
              lineColor={64,64,64},
              fillColor={255,255,255},
              extent={{-12,-12},{12,12}}),
            Polygon(
              rotation=-17.5,
              fillColor={64,64,64},
              pattern=LinePattern.None,
              fillPattern=FillPattern.Solid,
              points={{-5.0,0.0},{-2.0,60.0},{0.0,65.0},{2.0,60.0},{5.0,0.0}},
              origin={0,0}),
            Ellipse(
              fillColor={64,64,64},
              pattern=LinePattern.None,
              fillPattern=FillPattern.Solid,
              extent={{-7,-7},{7,7}}),
            Line(points={{0,100},{0,70}}, color={0,0,127}),
            Text(
              extent={{140,120},{-20,90}},
              lineColor={0,0,0},
              textString="P")}), Diagram(coordinateSystem(preserveAspectRatio=false)));
    end power_meter;

    model Control_0
      Modelica.StateGraph.InitialStep initialStep
        annotation (Placement(transformation(extent={{-80,0},{-60,20}})));
      Modelica.Blocks.Interfaces.RealInput u
        annotation (Placement(transformation(extent={{-120,-70},{-80,-30}})));
      inner Modelica.StateGraph.StateGraphRoot stateGraphRoot
        annotation (Placement(transformation(extent={{-100,80},{-80,100}})));
      Modelica.StateGraph.StepWithSignal GF_running
        annotation (Placement(transformation(extent={{0,0},{20,20}})));
      Modelica.Blocks.Interfaces.BooleanOutput GF1 annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=-90,
            origin={10,-110})));
      Modelica.StateGraph.Transition transition(condition=u > 300)
        annotation (Placement(transformation(extent={{-40,0},{-20,20}})));
      Modelica.StateGraph.Transition transition1(condition=u < 200)
        annotation (Placement(transformation(extent={{40,0},{60,20}})));
    equation

      connect(GF_running.active, GF1)
        annotation (Line(points={{10,-1},{10,-110}}, color={255,0,255}));
      connect(initialStep.outPort[1], transition.inPort) annotation (Line(
            points={{-59.5,10},{-46,10},{-46,10},{-34,10}}, color={0,0,0}));
      connect(transition.outPort, GF_running.inPort[1])
        annotation (Line(points={{-28.5,10},{-1,10}}, color={0,0,0}));
      connect(GF_running.outPort[1], transition1.inPort)
        annotation (Line(points={{20.5,10},{46,10}}, color={0,0,0}));
      connect(transition1.outPort, initialStep.inPort[1]) annotation (Line(
            points={{51.5,10},{70,10},{70,40},{-90,40},{-90,10},{-81,10}},
            color={0,0,0}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={28,108,200},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid)}), Diagram(coordinateSystem(
              preserveAspectRatio=false)));
    end Control_0;

    model opposite
      Modelica.Blocks.Interfaces.RealInput u
        annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
      Modelica.Blocks.Interfaces.RealOutput y
        annotation (Placement(transformation(extent={{100,-10},{120,10}})));
    equation
      y = 1-u;
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
            Rectangle(
              extent={{-100,40},{100,-40}},
              lineColor={28,108,200},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Text(
              extent={{-100,40},{100,-40}},
              lineColor={28,108,200},
              fillColor={255,255,255},
              fillPattern=FillPattern.None,
              textString="1-u"),
            Text(
              extent={{-100,100},{100,60}},
              lineColor={28,108,200},
              fillColor={255,255,255},
              fillPattern=FillPattern.None,
              textString="%name")}),                                 Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end opposite;

    block Switch_0 "Switch between two Real signals"
      extends Modelica.Blocks.Icons.PartialBooleanBlock;
      Modelica.Blocks.Interfaces.RealInput u1
        "Connector of first Real input signal"
        annotation (Placement(transformation(extent={{-140,60},{-100,100}})));
      Modelica.Blocks.Interfaces.BooleanInput u2
        "Connector of Boolean input signal"
        annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
      Modelica.Blocks.Interfaces.RealOutput y "Connector of Real output signal"
        annotation (Placement(transformation(extent={{100,-10},{120,10}})));

    equation
      y = if u2 then u1 else 0;
      annotation (
        defaultComponentName="switch1",
        Documentation(info="<html>
<p>The Logical.Switch switches, depending on the
logical connector u2 (the middle connector)
between the two possible input signals
u1 (upper connector) and u3 (lower connector).</p>
<p>If u2 is <strong>true</strong>, the output signal y is set equal to
u1, else it is set equal to u3.</p>
</html>"),
        Icon(coordinateSystem(
            preserveAspectRatio=true,
            extent={{-100,-100},{100,100}}), graphics={
            Line(points={{12,0},{100,0}},
              color={0,0,127}),
            Line(points={{-100,0},{-40,0}},
              color={255,0,255}),
            Line(points={{-40,12},{-40,-12}},
              color={255,0,255}),
            Line(points={{-100,80},{-38,80}},
              color={0,0,127}),
            Line(points=DynamicSelect({{-38,80},{6,2}}, if u2 then {{-38,80},{6,2}} else {{-38,-80},{6,2}}),
              color={0,0,127},
              thickness=1),
            Ellipse(lineColor={0,0,255},
              pattern=LinePattern.None,
              fillPattern=FillPattern.Solid,
              extent={{2,-8},{18,8}}),
            Text(
              extent={{-80,-40},{-40,-80}},
              lineColor={0,0,0},
              textString="0")}));
    end Switch_0;

    model WaitBefore_backup
      parameter Real threshold "time threshold";
      Modelica.Blocks.Logical.Timer timer annotation (Placement(transformation(
                extent={{-10,-10},{10,10}})));
      Modelica.Blocks.Interfaces.BooleanInput
                                     u "Connector of Boolean input signal"
        annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
      Modelica.Blocks.Interfaces.BooleanOutput y
        "Connector of Boolean output signal"
        annotation (Placement(transformation(extent={{100,-10},{120,10}})));
    equation
      y = timer.y >= threshold;
      connect(u, timer.u);
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                                             Rectangle(
              extent={{-100,100},{100,-100}},
              fillColor={210,210,210},
              fillPattern=FillPattern.Solid,
              borderPattern=BorderPattern.Raised),
          Line(points={{-80,-20},{-62,-20},{40,70},{40,-20},{68,-20}},
            color={0,0,127}),
          Line(points={{-80,-80},{20,-80},{20,-36},{40,-36},{40,-80},{66,-80}},
            color={255,0,255},
              thickness=0.5),
          Line(points={{-80,60},{-80,-80}},
            color={192,192,192}),
          Line(points={{-80,-80},{60,-80}},
            color={192,192,192}),
          Polygon(lineColor={192,192,192},
            fillColor={192,192,192},
            fillPattern=FillPattern.Solid,
            points={{-80,80},{-88,60},{-72,60},{-80,80}}),
          Polygon(lineColor={192,192,192},
            fillColor={192,192,192},
            fillPattern=FillPattern.Solid,
            points={{80,-80},{60,-72},{60,-88},{80,-80}}),
            Line(
              points={{20,80},{20,-88}},
              color={0,0,0},
              pattern=LinePattern.Dash),
            Text(
              lineColor={0,0,255},
              extent={{-150,110},{150,150}},
              textString="%name")}),                                 Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end WaitBefore_backup;

    model WaitBefore
      parameter Real t_threshold "time threshold";
      parameter Real threshold "threshold";
      parameter Boolean superior=true "true when superior to threshold";
      Modelica.Blocks.Logical.Timer timer annotation (Placement(transformation(
                extent={{-10,-10},{10,10}})));
      Modelica.Blocks.Interfaces.BooleanOutput y
        "Connector of Boolean output signal"
        annotation (Placement(transformation(extent={{100,-10},{120,10}})));
      Modelica.Blocks.Interfaces.RealInput u
        annotation (Placement(transformation(extent={{-20,-20},{20,20}},
            rotation=0,
            origin={-120,0})));
    equation
      if superior==true then
      timer.u = u >= threshold;
      else
      timer.u = u <= threshold;
      end if;
      y = timer.y >= t_threshold;

      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                                             Rectangle(
              extent={{-100,100},{100,-100}},
              fillColor={210,210,210},
              fillPattern=FillPattern.Solid,
              borderPattern=BorderPattern.Raised),
          Line(points={{-80,-20},{-62,-20},{40,70},{40,-20},{68,-20}},
            color={0,0,127}),
          Line(points={{-80,-80},{20,-80},{20,-36},{40,-36},{40,-80},{66,-80}},
            color={255,0,255},
              thickness=0.5),
          Line(points={{-80,60},{-80,-80}},
            color={192,192,192}),
          Line(points={{-80,-80},{60,-80}},
            color={192,192,192}),
          Polygon(lineColor={192,192,192},
            fillColor={192,192,192},
            fillPattern=FillPattern.Solid,
            points={{-80,80},{-88,60},{-72,60},{-80,80}}),
          Polygon(lineColor={192,192,192},
            fillColor={192,192,192},
            fillPattern=FillPattern.Solid,
            points={{80,-80},{60,-72},{60,-88},{80,-80}}),
            Line(
              points={{20,80},{20,-88}},
              color={0,0,0},
              pattern=LinePattern.Dash),
            Text(
              lineColor={0,0,255},
              extent={{-150,110},{150,150}},
              textString="%name"),
            Line(
              points={{-52,92},{-6,72},{-52,52}},
              thickness=0.5),
            Line(points={{-52,46},{-6,46}},   thickness=0.5),
            Line(
              points={{-10,-22},{-56,-42},{-10,-62}},
              thickness=0.5),
            Line(points={{-56,-68},{-10,-68}},thickness=0.5)}),      Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end WaitBefore;

    model WaitBefore_temp
      parameter Real t_threshold "time threshold";
      parameter Boolean superior=true "true when superior to threshold";
      Modelica.Blocks.Logical.Timer timer annotation (Placement(transformation(
                extent={{-10,-10},{10,10}})));
      Modelica.Blocks.Interfaces.BooleanOutput y
        "Connector of Boolean output signal"
        annotation (Placement(transformation(extent={{100,-10},{120,10}})));
      Modelica.Blocks.Interfaces.RealInput u
        annotation (Placement(transformation(extent={{-20,-20},{20,20}},
            rotation=90,
            origin={0,-120})));
      Modelica.Blocks.Interfaces.RealInput threshold annotation (Placement(
            transformation(
            extent={{-20,-20},{20,20}},
            rotation=0,
            origin={-120,0})));
    equation
      if superior==true then
      timer.u = u >= threshold - 1;
      else
      timer.u = u <= threshold;
      end if;
      y = timer.y >= t_threshold;

      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                                             Rectangle(
              extent={{-100,100},{100,-100}},
              fillColor={210,210,210},
              fillPattern=FillPattern.Solid,
              borderPattern=BorderPattern.Raised),
          Line(points={{-80,-20},{-62,-20},{40,70},{40,-20},{68,-20}},
            color={0,0,127}),
          Line(points={{-80,-80},{20,-80},{20,-36},{40,-36},{40,-80},{66,-80}},
            color={255,0,255},
              thickness=0.5),
          Line(points={{-80,60},{-80,-80}},
            color={192,192,192}),
          Line(points={{-80,-80},{60,-80}},
            color={192,192,192}),
          Polygon(lineColor={192,192,192},
            fillColor={192,192,192},
            fillPattern=FillPattern.Solid,
            points={{-80,80},{-88,60},{-72,60},{-80,80}}),
          Polygon(lineColor={192,192,192},
            fillColor={192,192,192},
            fillPattern=FillPattern.Solid,
            points={{80,-80},{60,-72},{60,-88},{80,-80}}),
            Line(
              points={{20,80},{20,-88}},
              color={0,0,0},
              pattern=LinePattern.Dash),
            Text(
              lineColor={0,0,255},
              extent={{-150,110},{150,150}},
              textString="%name"),
            Line(
              points={{-52,92},{-6,72},{-52,52}},
              thickness=0.5),
            Line(points={{-52,46},{-6,46}},   thickness=0.5),
            Line(
              points={{-10,-22},{-56,-42},{-10,-62}},
              thickness=0.5),
            Line(points={{-56,-68},{-10,-68}},thickness=0.5)}),      Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end WaitBefore_temp;

  package DE_PE
    extends Modelica.Icons.VariantsPackage;
    model DE_PE_hot
      inner Modelica.StateGraph.StateGraphRoot stateGraphRoot
        annotation (Placement(transformation(extent={{140,180},{160,200}})));
        parameter Real ft_tfp_set= 211 * 1000 / 3600;
        parameter Real ft_cha_set = 0;
      Modelica.StateGraph.TransitionWithSignal transitionWithSignal
        annotation (Placement(transformation(extent={{-20,-220},{0,-200}})));
      Modelica.Blocks.Interfaces.RealInput DEC[3] "m_flow, TT_521"
        annotation (Placement(transformation(extent={{-240,90},{-200,130}})));
      Modelica.StateGraph.StepWithSignal HPSHC1_start(nIn=3, nOut=1)
        annotation (Placement(transformation(extent={{20,-220},{40,-200}})));
      Modelica.StateGraph.Transition HPSHC_start_buffer(enableTimer=true, waitTime=100)
        annotation (Placement(transformation(extent={{60,-220},{80,-200}})));
      Modelica.StateGraph.StepWithSignal HPSHC1_on(nIn=2, nOut=3)
        annotation (Placement(transformation(extent={{100,-220},{120,-200}})));
      Modelica.StateGraph.TransitionWithSignal Temp_solo
        annotation (Placement(transformation(extent={{140,-160},{160,-140}})));
      Modelica.StateGraph.TransitionWithSignal HPSHC_turnoff
        annotation (Placement(transformation(extent={{140,-220},{160,-200}})));
      Modelica.StateGraph.TransitionWithSignal CHA_need
        annotation (Placement(transformation(extent={{140,-380},{160,-360}})));
      Buildings.Applications.DHC_Thassalia.Controls_a.WaitBefore_temp waitBefore(t_threshold=10, superior=true)
        annotation (Placement(transformation(extent={{-78,178},{-58,198}})));
      WaitBefore waitBefore1(t_threshold=2,
        threshold=53.5 + 273.15,            superior=true)
        annotation (Placement(transformation(extent={{40,-180},{60,-160}})));
      Modelica.StateGraph.StepWithSignal HPSHC_solo_switch
        annotation (Placement(transformation(extent={{180,-160},{200,-140}})));
      Modelica.StateGraph.Transition HPSHC_solo_buffer(enableTimer=true, waitTime=100)
        annotation (Placement(transformation(extent={{220,-160},{240,-140}})));
      Modelica.StateGraph.StepWithSignal HPSHC_solo(nOut=2)
        annotation (Placement(transformation(extent={{260,-160},{280,-140}})));
      Modelica.StateGraph.TransitionWithSignal temp_duo
        annotation (Placement(transformation(extent={{300,-120},{320,-100}})));
      Modelica.StateGraph.TransitionWithSignal HPSHC_solo_off
        annotation (Placement(transformation(extent={{300,-180},{320,-160}})));
      WaitBefore waitBefore2(t_threshold=2,
        threshold=53.5 + 273.15,            superior=false)
        annotation (Placement(transformation(extent={{200,-120},{220,-100}})));
      Modelica.Blocks.Math.Add add(k1=-1, k2=+1)
        annotation (Placement(transformation(extent={{-100,40},{-80,60}})));
      Modelica.Blocks.Logical.GreaterEqual greaterEqualThreshold
        annotation (Placement(transformation(extent={{-40,40},{-20,60}})));
      Modelica.StateGraph.InitialStepWithSignal initialStepWithSignal
        annotation (Placement(transformation(extent={{-60,-220},{-40,-200}})));
      Modelica.StateGraph.Step HPSHC_off(nIn=2, nOut=1)
        annotation (Placement(transformation(extent={{340,-220},{360,-200}})));
      Modelica.StateGraph.Transition HPSHC_off_buffer(enableTimer=true, waitTime=100)
        annotation (Placement(transformation(extent={{380,-220},{400,-200}})));
      Modelica.StateGraph.StepWithSignal HPSHC_cooling(nIn=1, nOut=2)
        annotation (Placement(transformation(extent={{180,-240},{200,-220}})));
      Modelica.StateGraph.Transition HPSC_turnoff_buffer(enableTimer=true, waitTime=
           100)
              annotation (Placement(transformation(extent={{300,-240},{320,-220}})));
      Modelica.StateGraph.TransitionWithSignal transitionWithSignal7
        annotation (Placement(transformation(extent={{300,-300},{320,-280}})));
      Modelica.StateGraph.StepWithSignal CHA_start(nIn=1, nOut=1)
        annotation (Placement(transformation(extent={{220,-360},{240,-340}})));
      Modelica.StateGraph.Transition CHA_start_buffer(enableTimer=true, waitTime=100)
        annotation (Placement(transformation(extent={{260,-360},{280,-340}})));
      Modelica.StateGraph.StepWithSignal CHA_on(nOut=1)
        annotation (Placement(transformation(extent={{300,-360},{320,-340}})));
      Modelica.Blocks.Math.Add add2(k1=-1, k2=+1)
        annotation (Placement(transformation(extent={{-60,-10},{-40,10}})));
      Modelica.Blocks.Logical.GreaterEqual greaterEqualThreshold1
        annotation (Placement(transformation(extent={{-20,-10},{0,10}})));
      Modelica.StateGraph.TransitionWithSignal CHA_turnoff
        annotation (Placement(transformation(extent={{340,-360},{360,-340}})));
      Modelica.StateGraph.Step CHA_off(nIn=1, nOut=1)
        annotation (Placement(transformation(extent={{380,-360},{400,-340}})));
      Modelica.StateGraph.Transition CHA_off_buffer(enableTimer=true, waitTime=100)
        annotation (Placement(transformation(extent={{460,-380},{480,-360}})));

      Modelica.StateGraph.Parallel parallel
        annotation (Placement(transformation(extent={{174,-400},{448,-340}})));
      Modelica.StateGraph.StepWithSignal HPSHC1_on1(nIn=1, nOut=1)
        annotation (Placement(transformation(extent={{300,-400},{320,-380}})));
      Modelica.Blocks.MathBoolean.Or HPSC_boo(nu=3)
        annotation (Placement(transformation(extent={{22,-302},{42,-282}})));
      Modelica.Blocks.Logical.Or HPSC_solo_boo
        annotation (Placement(transformation(extent={{200,-200},{220,-180}})));
      Modelica.Blocks.MathInteger.MultiSwitch HPSHC_exit(
        expr={1,2,3},
        use_pre_as_default=false,
        nu=3) annotation (Placement(transformation(extent={{440,20},{480,40}})));
      Modelica.Blocks.Interfaces.IntegerOutput HPSHC annotation (Placement(
            transformation(extent={{200,150},{240,190}}), iconTransformation(
              extent={{200,150},{240,190}})));
      Modelica.Blocks.MathBoolean.Or CHA_boo(nu=2)
        annotation (Placement(transformation(extent={{320,-482},{340,-462}})));
      Modelica.Blocks.Interfaces.BooleanOutput CHA annotation (Placement(
            transformation(extent={{200,50},{240,90}}),     iconTransformation(
              extent={{200,50},{240,90}})));
      Modelica.Blocks.Sources.RealExpression tfp(y=ft_tfp_set)
        annotation (Placement(transformation(extent={{-200,20},{-180,40}})));
      Modelica.Blocks.Sources.RealExpression cha(y=ft_cha_set)
        annotation (Placement(transformation(extent={{-200,-30},{-180,-10}})));
      add_m_flow_hot add_m_flow1
        annotation (Placement(transformation(extent={{160,0},{180,20}})));
        Modelica.Blocks.Interfaces.RealOutput m_flow annotation (Placement(
              transformation(extent={{200,-20},{240,20}}), iconTransformation(
                extent={{200,-20},{240,20}})));
    equation
      connect(transitionWithSignal.outPort, HPSHC1_start.inPort[1]) annotation (
          Line(points={{-8.5,-210},{6,-210},{6,-209.333},{19,-209.333}},
            color={0,0,0}));
      connect(HPSHC1_start.outPort[1], HPSHC_start_buffer.inPort)
        annotation (Line(points={{40.5,-210},{66,-210}},  color={0,0,0}));
      connect(HPSHC_start_buffer.outPort, HPSHC1_on.inPort[1]) annotation (Line(
            points={{71.5,-210},{86,-210},{86,-209.5},{99,-209.5}}, color={0,0,0}));
      connect(HPSHC1_on.outPort[1], Temp_solo.inPort) annotation (Line(points={{120.5,
                -209.667},{130,-209.667},{130,-150},{146,-150}},
                                                             color={0,0,0}));
      connect(HPSHC1_on.outPort[2], HPSHC_turnoff.inPort)
        annotation (Line(points={{120.5,-210},{146,-210}},
                                                         color={0,0,0}));
      connect(HPSHC1_on.outPort[3], CHA_need.inPort) annotation (Line(points={{120.5,
                -210.333},{130,-210.333},{130,-370},{146,-370}},
                                                               color={0,0,0}));
      connect(waitBefore.y, transitionWithSignal.condition) annotation (Line(points={{-57,188},
              {-20,188},{-20,80},{-120,80},{-120,-240},{-10,-240},{-10,-222}},
                      color={255,0,255}));
      connect(DEC[3], waitBefore1.u) annotation (Line(points={{-220,123.333},{
                20,123.333},{20,-170},{38,-170}},color={0,0,127}));
      connect(waitBefore1.y, Temp_solo.condition) annotation (Line(points={{61,-170},
              {150,-170},{150,-162}},
                                    color={255,0,255}));
      connect(Temp_solo.outPort, HPSHC_solo_switch.inPort[1])
        annotation (Line(points={{151.5,-150},{179,-150}},
                                                       color={0,0,0}));
      connect(HPSHC_solo_switch.outPort[1], HPSHC_solo_buffer.inPort)
        annotation (Line(points={{200.5,-150},{226,-150}},
                                                       color={0,0,0}));
      connect(HPSHC_solo_buffer.outPort, HPSHC_solo.inPort[1])
        annotation (Line(points={{231.5,-150},{259,-150}},
                                                       color={0,0,0}));
      connect(HPSHC_solo.outPort[1], temp_duo.inPort) annotation (Line(points={{280.5,
              -149.75},{292,-149.75},{292,-110},{306,-110}},
                                                     color={0,0,0}));
      connect(HPSHC_solo.outPort[2], HPSHC_solo_off.inPort) annotation (Line(points={{280.5,
              -150.25},{292,-150.25},{292,-170},{306,-170}},    color={0,0,0}));
      connect(DEC[3], waitBefore2.u) annotation (Line(points={{-220,123.333},{
                60,123.333},{60,-110},{198,-110}},color={0,0,127}));
      connect(waitBefore2.y, temp_duo.condition) annotation (Line(points={{221,-110},
              {280,-110},{280,-130},{310,-130},{310,-122}},
                                               color={255,0,255}));
      connect(temp_duo.outPort, HPSHC1_start.inPort[2]) annotation (Line(points={{311.5,
              -110},{340,-110},{340,-80},{8,-80},{8,-210},{19,-210}}, color={0,0,0}));
      connect(add.y, greaterEqualThreshold.u1)
        annotation (Line(points={{-79,50},{-42,50}},     color={0,0,127}));
      connect(greaterEqualThreshold.y, HPSHC_solo_off.condition) annotation (Line(
            points={{-19,50},{288,50},{288,-200},{310,-200},{310,-182}}, color={255,
              0,255}));
      connect(greaterEqualThreshold.y, HPSHC_turnoff.condition) annotation (Line(
            points={{-19,50},{140,50},{140,-240},{150,-240},{150,-222}},   color={255,
              0,255}));
      connect(initialStepWithSignal.outPort[1], transitionWithSignal.inPort)
        annotation (Line(points={{-39.5,-210},{-14,-210}}, color={0,0,0}));
      connect(HPSHC_solo_off.outPort, HPSHC_off.inPort[2]) annotation (Line(points={{311.5,
              -170},{326,-170},{326,-210.5},{339,-210.5}},    color={0,0,0}));
      connect(HPSHC_off.outPort[1], HPSHC_off_buffer.inPort)
        annotation (Line(points={{360.5,-210},{386,-210}},
                                                         color={0,0,0}));
      connect(HPSHC_off_buffer.outPort, initialStepWithSignal.inPort[1])
        annotation (Line(points={{391.5,-210},{420,-210},{420,-60},{-80,-60},{-80,-210},
              {-61,-210}}, color={0,0,0}));
      connect(HPSHC_turnoff.outPort, HPSHC_cooling.inPort[1]) annotation (Line(
            points={{151.5,-210},{164,-210},{164,-230},{179,-230}},
                                                          color={0,0,0}));
      connect(HPSHC_cooling.outPort[1], HPSC_turnoff_buffer.inPort) annotation (
          Line(points={{200.5,-229.75},{254,-229.75},{254,-230},{306,-230}},
                                                                      color={0,0,0}));
      connect(HPSC_turnoff_buffer.outPort, HPSHC_off.inPort[1]) annotation (Line(
            points={{311.5,-230},{326,-230},{326,-209.5},{339,-209.5}},
                                                                    color={0,0,0}));
      connect(waitBefore.y, transitionWithSignal7.condition) annotation (Line(
            points={{-57,188},{-20,188},{-20,80},{-120,80},{-120,-320},{310,-320},{310,
              -302}},      color={255,0,255}));
      connect(HPSHC_cooling.outPort[2], transitionWithSignal7.inPort) annotation (
          Line(points={{200.5,-230.25},{254,-230.25},{254,-290},{306,-290}},
                                                                          color={0,0,
              0}));
      connect(transitionWithSignal7.outPort, HPSHC1_start.inPort[3]) annotation (
          Line(points={{311.5,-290},{460,-290},{460,-66},{12,-66},{12,-210},{14,
                -210},{14,-210.667},{19,-210.667}},
                                color={0,0,0}));
      connect(add2.y, greaterEqualThreshold1.u1) annotation (Line(points={{-39,0},{-22,
              0}},                                   color={0,0,127}));
      connect(CHA_off_buffer.outPort, HPSHC1_on.inPort[2]) annotation (Line(points={{471.5,
              -370},{508,-370},{508,-70},{90,-70},{90,-210.5},{99,-210.5}},
            color={0,0,0}));
      connect(greaterEqualThreshold1.y, CHA_turnoff.condition) annotation (Line(
            points={{1,0},{10,0},{10,-40},{-140,-40},{-140,-440},{350,-440},{350,-362}},
                           color={255,0,255}));
      connect(CHA_start.inPort[1], parallel.split[1]) annotation (Line(points={{219,
              -350},{208,-350},{208,-370},{204.825,-370}},
                                                  color={0,0,0}));
      connect(HPSHC1_on1.inPort[1], parallel.split[2]) annotation (Line(points={{299,
              -390},{204,-390},{204,-370},{204.825,-370}},
                                                        color={0,0,0}));
      connect(CHA_off.outPort[1], parallel.join[1]) annotation (Line(points={{400.5,
              -350},{416,-350},{416,-370},{417.175,-370}}, color={0,0,0}));
      connect(HPSHC1_on1.outPort[1], parallel.join[2]) annotation (Line(points={{320.5,
              -390},{416,-390},{416,-370},{417.175,-370}}, color={0,0,0}));
      connect(CHA_need.outPort, parallel.inPort)
        annotation (Line(points={{151.5,-370},{169.89,-370}},
                                                           color={0,0,0}));
      connect(parallel.outPort, CHA_off_buffer.inPort)
        annotation (Line(points={{450.74,-370},{466,-370}}, color={0,0,0}));
      connect(CHA_start.outPort[1], CHA_start_buffer.inPort)
        annotation (Line(points={{240.5,-350},{266,-350}},color={0,0,0}));
      connect(CHA_start_buffer.outPort, CHA_on.inPort[1]) annotation (Line(points={{271.5,
              -350},{299,-350}},                             color={0,0,0}));
      connect(CHA_on.outPort[1], CHA_turnoff.inPort) annotation (Line(points={{320.5,
              -350},{346,-350}},                       color={0,0,0}));
      connect(CHA_turnoff.outPort, CHA_off.inPort[1]) annotation (Line(points={{351.5,
              -350},{379,-350}},                       color={0,0,0}));
      connect(HPSHC1_start.active, HPSC_boo.u[1]) annotation (Line(points={{30,-221},
                {30,-250},{8,-250},{8,-287.333},{22,-287.333}},       color={255,0,255}));
      connect(HPSHC1_on.active, HPSC_boo.u[2]) annotation (Line(points={{110,-221},{
              110,-250},{8,-250},{8,-292},{22,-292}},   color={255,0,255}));
      connect(HPSHC1_on1.active, HPSC_boo.u[3]) annotation (Line(points={{310,
                -401},{310,-410},{8,-410},{8,-294},{22,-294},{22,-296.667}},
            color={255,0,255}));
      connect(HPSHC_solo_switch.active, HPSC_solo_boo.u1)
        annotation (Line(points={{190,-161},{190,-190},{198,-190}},
                                                             color={255,0,255}));
      connect(HPSHC_solo.active, HPSC_solo_boo.u2) annotation (Line(points={{270,-161},
              {270,-172},{190,-172},{190,-198},{198,-198}},
                                                     color={255,0,255}));
      connect(HPSC_solo_boo.y, HPSHC_exit.u[3]) annotation (Line(points={{221,-190},
              {400,-190},{400,28},{440,28}},
                                         color={255,0,255}));
      connect(HPSC_boo.y, HPSHC_exit.u[2]) annotation (Line(points={{43.5,-292},{220,
              -292},{220,-260},{430,-260},{430,30},{440,30}},  color={255,0,255}));
      connect(HPSHC_cooling.active, HPSHC_exit.u[1]) annotation (Line(points={{190,-241},
              {190,-260},{430,-260},{430,28.5},{440,28.5},{440,32}},   color={255,0,
              255}));
      connect(CHA_on.active, CHA_boo.u[1]) annotation (Line(points={{310,-361},{310,
              -370},{280,-370},{280,-468.5},{320,-468.5}},      color={255,0,
              255}));
      connect(CHA_start.active, CHA_boo.u[2]) annotation (Line(points={{230,-361},{230,
              -475.5},{320,-475.5}},     color={255,0,255}));
      connect(HPSHC_exit.y, HPSHC) annotation (Line(points={{481,30},{500,30},{500,120},
              {180,120},{180,170},{220,170}},           color={255,127,0}));
      connect(CHA_boo.y, CHA) annotation (Line(points={{341.5,-472},{520,-472},{520,
              100},{180,100},{180,70},{220,70}},
                                      color={255,0,255}));
      connect(add.y, add2.u1) annotation (Line(points={{-79,50},{-70,50},{-70,6},{-62,
              6}},         color={0,0,127}));
      connect(DEC[1], waitBefore.u) annotation (Line(points={{-220,96.6667},{
                -140,96.6667},{-140,160},{-68,160},{-68,176}},
                                                   color={0,0,127}));
      connect(DEC[2], add.u1) annotation (Line(points={{-220,110},{-180,110},{-180,56},
              {-102,56}}, color={0,0,127}));
      connect(cha.y, add2.u2) annotation (Line(points={{-179,-20},{-100,-20},{-100,-6},
              {-62,-6}}, color={0,0,127}));
      connect(tfp.y, add.u2) annotation (Line(points={{-179,30},{-142,30},{-142,44},
              {-102,44}}, color={0,0,127}));
      connect(tfp.y, greaterEqualThreshold.u2) annotation (Line(points={{-179,30},{-60,
              30},{-60,42},{-42,42}}, color={0,0,127}));
      connect(cha.y, greaterEqualThreshold1.u2) annotation (Line(points={{-179,-20},
              {-32,-20},{-32,-8},{-22,-8}}, color={0,0,127}));
        connect(HPSHC_exit.y, add_m_flow1.u1) annotation (Line(points={{481,30},
                {500,30},{500,120},{148,120},{148,15},{158,15}}, color={255,127,
                0}));
        connect(CHA_boo.y, add_m_flow1.u) annotation (Line(points={{341.5,-472},{520,
              -472},{520,-20},{150,-20},{150,5},{158,5}},        color={255,0,
                255}));
        connect(add_m_flow1.y, m_flow) annotation (Line(points={{181,10},{190,
                10},{190,0},{220,0}}, color={0,0,127}));
      connect(add_m_flow1.y, waitBefore.threshold) annotation (Line(points={{181,10},
              {260,10},{260,220},{-260,220},{-260,188},{-80,188}}, color={0,0,127}));
      connect(waitBefore.y, CHA_need.condition) annotation (Line(points={{-57,188},{
              -20,188},{-20,80},{-120,80},{-120,-394},{150,-394},{150,-382}}, color=
             {255,0,255}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-200,-200},
                {200,200}}), graphics={
            Rectangle(
              extent={{-200,200},{200,-200}},
              lineColor={0,0,0},
              fillColor={210,210,210},
              fillPattern=FillPattern.Solid,
              borderPattern=BorderPattern.Raised), Text(
              extent={{-160,180},{160,-160}},
              lineColor={238,46,47},
              fillColor={210,210,210},
              fillPattern=FillPattern.Solid,
              textString="I/O HPSHC

I/O CHA")}),                             Diagram(coordinateSystem(
              preserveAspectRatio=false, extent={{-200,-200},{200,200}})),
        Documentation(info="<html>
<h4><span style=\"color: #000000\">HPSHC modes</span></h4>
<p>For the HPSHC, 4 possible modes :</p>
<p>0 - Off</p>
<p>1 - Cold mode</p>
<p>2 - HPSHC full</p>
<p>3 - HPSHC 1/2</p>
</html>"));
    end DE_PE_hot;

    model DE_PE_cold
      parameter Real ft_gf1_set = 500/3.6;
    parameter Real ft_gf2_set = 500/3.6;
    parameter Real ft_tfp_set = 166/3.6;
      Modelica.Blocks.Interfaces.RealInput DEG[2] "DP, FT" annotation (Placement(
            transformation(extent={{-240,260},{-200,300}}), iconTransformation(
              extent={{-240,120},{-200,160}})));
      Buildings.Applications.DHC_Thassalia.Controls_a.WaitBefore_temp waitBefore(t_threshold=2, superior=true)
        annotation (Placement(transformation(extent={{0,280},{20,300}})));

      inner Modelica.StateGraph.StateGraphRoot stateGraphRoot
        annotation (Placement(transformation(extent={{300,320},{320,340}})));
      Modelica.StateGraph.TransitionWithSignal transitionWithSignal
        annotation (Placement(transformation(extent={{-220,-20},{-200,0}})));
      Modelica.StateGraph.StepWithSignal GF1_start(nIn=1, nOut=1)
        annotation (Placement(transformation(extent={{-180,-20},{-160,0}})));
      Modelica.StateGraph.Transition GF1_start_buffer(enableTimer=true, waitTime=2)
        annotation (Placement(transformation(extent={{-140,-20},{-120,0}})));
      Modelica.StateGraph.StepWithSignal GF1_on(nIn=2, nOut=2)
        annotation (Placement(transformation(extent={{-100,-20},{-80,0}})));
      Modelica.StateGraph.TransitionWithSignal GF1_stop
        annotation (Placement(transformation(extent={{-60,20},{-40,40}})));
      Modelica.Blocks.Math.Add add(k1=-1, k2=+1)
        annotation (Placement(transformation(extent={{-180,240},{-160,260}})));
      Modelica.StateGraph.InitialStep initialStep
        annotation (Placement(transformation(extent={{-260,-20},{-240,0}})));
      Modelica.Blocks.Math.Add add1(k1=+1, k2=+1)
        annotation (Placement(transformation(extent={{-120,200},{-100,220}})));

      Modelica.Blocks.Logical.Or GF1_active
        annotation (Placement(transformation(extent={{-60,-220},{-40,-200}})));
      Modelica.Blocks.MathInteger.MultiSwitch HPSHC_exit(
        expr={1},
        use_pre_as_default=false,
        nu=1) annotation (Placement(transformation(extent={{140,230},{180,250}})));
      Modelica.Blocks.Interfaces.IntegerOutput HPSHC annotation (Placement(
            transformation(extent={{200,160},{240,200}}), iconTransformation(
              extent={{200,160},{240,200}})));
      Modelica.Blocks.Interfaces.BooleanOutput GF2 annotation (Placement(
            transformation(extent={{200,80},{240,120}}),    iconTransformation(
              extent={{200,80},{240,120}})));

      Modelica.Blocks.Logical.GreaterEqual greaterEqual
        annotation (Placement(transformation(extent={{0,240},{20,260}})));
      Modelica.Blocks.Logical.GreaterEqual greaterEqual1
        annotation (Placement(transformation(extent={{0,200},{20,220}})));
      Modelica.Blocks.Math.Add add2(k1=+1, k2=+1)
        annotation (Placement(transformation(extent={{-60,160},{-40,180}})));
      Modelica.Blocks.Logical.GreaterEqual greaterEqual2
        annotation (Placement(transformation(extent={{0,160},{20,180}})));
      Modelica.StateGraph.Step GF1_stopping
        annotation (Placement(transformation(extent={{-20,20},{0,40}})));
      Modelica.StateGraph.Transition GF1_stop_buffer(enableTimer=true, waitTime=2)
        annotation (Placement(transformation(extent={{20,20},{40,40}})));
      Modelica.StateGraph.TransitionWithSignal GF2_need
        annotation (Placement(transformation(extent={{-60,-60},{-40,-40}})));
      Modelica.StateGraph.StepWithSignal GF2_start(nIn=1, nOut=1)
        annotation (Placement(transformation(extent={{-20,-60},{0,-40}})));
      Modelica.StateGraph.Transition GF1_start_buffer1(enableTimer=true, waitTime=2)
        annotation (Placement(transformation(extent={{20,-60},{40,-40}})));
      Modelica.StateGraph.StepWithSignal GF2_on(nIn=2, nOut=2)
        annotation (Placement(transformation(extent={{60,-60},{80,-40}})));
      Modelica.StateGraph.TransitionWithSignal GF2_stop
        annotation (Placement(transformation(extent={{100,-20},{120,0}})));
      Modelica.StateGraph.TransitionWithSignal TFP_need
        annotation (Placement(transformation(extent={{100,-100},{120,-80}})));
      Modelica.StateGraph.StepWithSignal TFP_start(nIn=1, nOut=1)
        annotation (Placement(transformation(extent={{140,-100},{160,-80}})));
      Modelica.StateGraph.Transition TFP_start_buffer(enableTimer=true, waitTime=2)
        annotation (Placement(transformation(extent={{180,-100},{200,-80}})));
      Modelica.StateGraph.StepWithSignal TFP_on(nIn=1, nOut=1)
        annotation (Placement(transformation(extent={{220,-100},{240,-80}})));
      Modelica.Blocks.Interfaces.BooleanOutput GF1 annotation (Placement(
            transformation(extent={{200,120},{240,160}}),   iconTransformation(
              extent={{200,0},{240,40}})));
      Modelica.StateGraph.Transition GF2_stop_buffer(enableTimer=true, waitTime=2)
        annotation (Placement(transformation(extent={{180,-20},{200,0}})));
      Modelica.StateGraph.Step GF2_stopping
        annotation (Placement(transformation(extent={{140,-20},{160,0}})));
      Modelica.Blocks.Logical.Or GF2_active
        annotation (Placement(transformation(extent={{100,-290},{120,-270}})));
      Modelica.StateGraph.TransitionWithSignal TFP_stop
        annotation (Placement(transformation(extent={{260,-100},{280,-80}})));
      Modelica.StateGraph.Step TFP_stopping
        annotation (Placement(transformation(extent={{300,-100},{320,-80}})));
      Modelica.StateGraph.Transition TFP_stop_buffer(enableTimer=true, waitTime=2)
        annotation (Placement(transformation(extent={{340,-100},{360,-80}})));
      Modelica.Blocks.Interfaces.IntegerInput TFP_DEC
        annotation (Placement(transformation(extent={{-240,-180},{-200,-140}})));
      Controls.OBC.CDL.Integers.LessThreshold intLesThr(t=1)
        annotation (Placement(transformation(extent={{-180,-170},{-160,-150}})));
      Controls.OBC.CDL.Logical.And and2
        annotation (Placement(transformation(extent={{-140,-140},{-120,-120}})));
      Controls.OBC.CDL.Logical.Or or2
        annotation (Placement(transformation(extent={{240,-160},{260,-140}})));
      Controls.OBC.CDL.Integers.GreaterEqualThreshold intGreEquThr(t=1)
        annotation (Placement(transformation(extent={{-180,-220},{-160,-200}})));
      Modelica.Blocks.Logical.Or TFP_active
        annotation (Placement(transformation(extent={{200,-190},{220,-170}})));
      Controls.OBC.CDL.Integers.Max maxInt
        annotation (Placement(transformation(extent={{220,240},{240,260}})));
      add_m_flow_cold add_m_flow_cold1
        annotation (Placement(transformation(extent={{300,240},{320,260}})));
      Modelica.Blocks.Sources.RealExpression tfp(y=ft_tfp_set)
        annotation (Placement(transformation(extent={{-220,140},{-200,160}})));
      Modelica.Blocks.Sources.RealExpression gf1(y=ft_gf1_set)
        annotation (Placement(transformation(extent={{-220,200},{-200,220}})));
      Modelica.Blocks.Sources.RealExpression gf2(y=ft_gf2_set)
        annotation (Placement(transformation(extent={{-220,170},{-200,190}})));
        Modelica.Blocks.Interfaces.RealOutput m_flow annotation (Placement(
              transformation(extent={{400,250},{440,290}}),iconTransformation(
                extent={{200,-80},{240,-40}})));
    equation
      connect(add.y, add1.u1) annotation (Line(points={{-159,250},{-140,250},
              {-140,216},{-122,216}},
                           color={0,0,127}));
      connect(add.y, greaterEqual.u1)
        annotation (Line(points={{-159,250},{-2,250}},   color={0,0,127}));
      connect(add1.y, greaterEqual1.u1) annotation (Line(points={{-99,210},{
              -2,210}},                      color={0,0,127}));
      connect(add1.y, add2.u1) annotation (Line(points={{-99,210},{-80,210},{
              -80,176},{-62,176}},
                                color={0,0,127}));
      connect(add2.y, greaterEqual2.u1)
        annotation (Line(points={{-39,170},{-2,170}},    color={0,0,127}));
      connect(initialStep.outPort[1], transitionWithSignal.inPort)
        annotation (Line(points={{-239.5,-10},{-214,-10}}, color={0,0,0}));
      connect(GF1_start.outPort[1], GF1_start_buffer.inPort)
        annotation (Line(points={{-159.5,-10},{-134,-10}}, color={0,0,0}));
      connect(GF1_start_buffer.outPort, GF1_on.inPort[1]) annotation (Line(points={{
              -128.5,-10},{-114,-10},{-114,-9.5},{-101,-9.5}}, color={0,0,0}));
      connect(waitBefore.y, transitionWithSignal.condition) annotation (Line(points={{21,290},
              {60,290},{60,100},{-300,100},{-300,-40},{-210,-40},{-210,-22}},
            color={255,0,255}));
      connect(GF1_on.outPort[1], GF1_stop.inPort) annotation (Line(points={{-79.5,-9.75},
              {-66,-9.75},{-66,30},{-54,30}}, color={0,0,0}));
      connect(greaterEqual.y, GF1_stop.condition) annotation (Line(points={{21,250},
              {40,250},{40,88},{-100,88},{-100,8},{-50,8},{-50,18}},   color={255,0,
              255}));
      connect(GF1_stop.outPort, GF1_stopping.inPort[1])
        annotation (Line(points={{-48.5,30},{-21,30}}, color={0,0,0}));
      connect(GF1_stopping.outPort[1], GF1_stop_buffer.inPort)
        annotation (Line(points={{0.5,30},{26,30}}, color={0,0,0}));
      connect(GF1_stop_buffer.outPort, initialStep.inPort[1]) annotation (Line(
            points={{31.5,30},{80,30},{80,72},{-280,72},{-280,-10},{-261,-10}},
            color={0,0,0}));
      connect(waitBefore.y, GF2_need.condition) annotation (Line(points={{21,290},
              {60,290},{60,100},{-300,100},{-300,-80},{-50,-80},{-50,-62}},
                                                                          color={255,
              0,255}));
      connect(GF1_on.outPort[2], GF2_need.inPort) annotation (Line(points={{-79.5,-10.25},
              {-66,-10.25},{-66,-50},{-54,-50}}, color={0,0,0}));
      connect(GF2_start.outPort[1], GF1_start_buffer1.inPort)
        annotation (Line(points={{0.5,-50},{26,-50}}, color={0,0,0}));
      connect(GF1_start_buffer1.outPort, GF2_on.inPort[1]) annotation (Line(points={
              {31.5,-50},{46,-50},{46,-49.5},{59,-49.5}}, color={0,0,0}));
      connect(GF2_need.outPort, GF2_start.inPort[1])
        annotation (Line(points={{-48.5,-50},{-21,-50}}, color={0,0,0}));
      connect(GF2_on.outPort[1], GF2_stop.inPort) annotation (Line(points={{80.5,-49.75},
              {80.5,-50},{94,-50},{94,-10},{106,-10}}, color={0,0,0}));
      connect(GF2_on.outPort[2], TFP_need.inPort) annotation (Line(points={{80.5,-50.25},
              {94,-50.25},{94,-90},{106,-90}}, color={0,0,0}));
      connect(TFP_start.outPort[1], TFP_start_buffer.inPort)
        annotation (Line(points={{160.5,-90},{186,-90}}, color={0,0,0}));
      connect(TFP_start_buffer.outPort, TFP_on.inPort[1])
        annotation (Line(points={{191.5,-90},{219,-90}}, color={0,0,0}));
      connect(TFP_start.inPort[1], TFP_need.outPort)
        annotation (Line(points={{139,-90},{111.5,-90}}, color={0,0,0}));
      connect(GF2_stop.outPort, GF2_stopping.inPort[1]) annotation (Line(points={{111.5,
              -10},{124,-10},{124,-10},{139,-10}}, color={0,0,0}));
      connect(GF2_stopping.outPort[1], GF2_stop_buffer.inPort)
        annotation (Line(points={{160.5,-10},{186,-10}}, color={0,0,0}));
      connect(transitionWithSignal.outPort, GF1_start.inPort[1]) annotation (Line(
            points={{-208.5,-10},{-194,-10},{-194,-10},{-181,-10}}, color={0,0,0}));
      connect(GF1_start.active, GF1_active.u1) annotation (Line(points={{-170,
              -21},{-170,-88},{-100,-88},{-100,-210},{-62,-210}},
                                      color={255,0,255}));
      connect(GF1_on.active, GF1_active.u2) annotation (Line(points={{-90,-21},{-90,
              -218},{-62,-218}}, color={255,0,255}));
      connect(GF1_active.y, GF1)
        annotation (Line(points={{-39,-210},{190,-210},{190,-208},{420,-208},
              {420,120},{180,120},{180,140},{220,140}},  color={255,0,255}));
      connect(GF2_active.y, GF2) annotation (Line(points={{121,-280},{440,
              -280},{440,80},{180,80},{180,100},{220,100}},
                                 color={255,0,255}));
      connect(GF2_stop_buffer.outPort, GF1_on.inPort[2]) annotation (Line(points={{191.5,
              -10},{220,-10},{220,60},{-108,60},{-108,-10.5},{-101,-10.5}}, color={0,
              0,0}));
      connect(TFP_on.outPort[1], TFP_stop.inPort) annotation (Line(points={{240.5,-90},
              {254,-90},{254,-90},{266,-90}}, color={0,0,0}));
      connect(greaterEqual1.y, GF2_stop.condition) annotation (Line(points={{21,210},
              {88,210},{88,-40},{110,-40},{110,-22}}, color={255,0,255}));
      connect(TFP_stop.outPort, TFP_stopping.inPort[1])
        annotation (Line(points={{271.5,-90},{299,-90}}, color={0,0,0}));
      connect(TFP_stopping.outPort[1], TFP_stop_buffer.inPort)
        annotation (Line(points={{320.5,-90},{346,-90}}, color={0,0,0}));
      connect(TFP_stop_buffer.outPort, GF2_on.inPort[2]) annotation (Line(points={{351.5,
              -90},{380,-90},{380,20},{50,20},{50,-50.5},{59,-50.5}}, color={0,0,0}));
      connect(GF2_start.active, GF2_active.u1) annotation (Line(points={{-10,-61},{-10,
              -280},{98,-280}}, color={255,0,255}));
      connect(GF2_on.active, GF2_active.u2) annotation (Line(points={{70,-61},{70,-288},
              {98,-288}}, color={255,0,255}));
      connect(TFP_DEC, intLesThr.u)
        annotation (Line(points={{-220,-160},{-182,-160}}, color={255,127,0}));
      connect(intLesThr.y, and2.u2) annotation (Line(points={{-158,-160},{
              -152,-160},{-152,-138},{-142,-138}},
                                        color={255,0,255}));
      connect(waitBefore.y, and2.u1) annotation (Line(points={{21,290},{60,290},{60,
              100},{-300,100},{-300,-130},{-142,-130}}, color={255,0,255}));
      connect(and2.y, TFP_need.condition) annotation (Line(points={{-118,-130},
              {110,-130},{110,-102}},
                                 color={255,0,255}));
      connect(greaterEqual2.y, or2.u1) annotation (Line(points={{21,170},{100,
              170},{100,70},{250,70},{250,-128},{228,-128},{228,-150},{238,
              -150}},                                       color={255,0,255}));
      connect(TFP_DEC, intGreEquThr.u) annotation (Line(points={{-220,-160},{
              -190,-160},{-190,-210},{-182,-210}},
                                        color={255,127,0}));
      connect(intGreEquThr.y, or2.u2) annotation (Line(points={{-158,-210},{
              -120,-210},{-120,-158},{238,-158}},
                                       color={255,0,255}));
      connect(or2.y, TFP_stop.condition) annotation (Line(points={{262,-150},{270,-150},
              {270,-102}}, color={255,0,255}));
      connect(TFP_start.active, TFP_active.u2) annotation (Line(points={{150,-101},{
              150,-188},{198,-188}}, color={255,0,255}));
      connect(TFP_on.active, TFP_active.u1) annotation (Line(points={{230,-101},{230,
              -120},{180,-120},{180,-180},{198,-180}}, color={255,0,255}));
      connect(TFP_active.y, HPSHC_exit.u[1]) annotation (Line(points={{221,-180},{400,
              -180},{400,210},{120,210},{120,240},{140,240}}, color={255,0,255}));
      connect(TFP_DEC, maxInt.u1) annotation (Line(points={{-220,-160},{-190,-160},{
              -190,-240},{-320,-240},{-320,320},{200,320},{200,256},{218,256}},
            color={255,127,0}));
      connect(HPSHC_exit.y, maxInt.u2) annotation (Line(points={{181,240},{200,240},
              {200,244},{218,244}}, color={255,127,0}));
      connect(maxInt.y, HPSHC) annotation (Line(points={{242,250},{260,250},{260,220},
              {180,220},{180,180},{220,180}}, color={255,127,0}));
      connect(DEG[1], waitBefore.u) annotation (Line(points={{-220,270},{10,270},{10,
              278}},                     color={0,0,127}));
      connect(DEG[2], add.u1) annotation (Line(points={{-220,290},{-202,290},
              {-202,256},{-182,256}}, color={0,0,127}));
      connect(maxInt.y, add_m_flow_cold1.hpshc) annotation (Line(points={{242,250},{
              270,250},{270,255},{298,255}}, color={255,127,0}));
      connect(GF1_active.y, add_m_flow_cold1.gf1) annotation (Line(points={{-39,-210},
              {190,-210},{190,-208},{420,-208},{420,234},{290,234},{290,250},{298,250}},
            color={255,0,255}));
      connect(GF2_active.y, add_m_flow_cold1.gf2) annotation (Line(points={{121,-280},
              {440,-280},{440,230},{292,230},{292,245},{298,245}}, color={255,0,255}));
      connect(add_m_flow_cold1.y, waitBefore.threshold) annotation (Line(points={{321,
              250},{340,250},{340,308},{-20,308},{-20,290},{-2,290}}, color={0,0,127}));
      connect(gf1.y, add.u2) annotation (Line(points={{-199,210},{-192,210},{-192,244},
              {-182,244}}, color={0,0,127}));
      connect(gf1.y, greaterEqual.u2) annotation (Line(points={{-199,210},{-148,210},
              {-148,242},{-2,242}}, color={0,0,127}));
      connect(gf2.y, add1.u2) annotation (Line(points={{-199,180},{-162,180},{-162,204},
              {-122,204}}, color={0,0,127}));
      connect(gf2.y, greaterEqual1.u2) annotation (Line(points={{-199,180},{-90,180},
              {-90,202},{-2,202}}, color={0,0,127}));
      connect(tfp.y, add2.u2) annotation (Line(points={{-199,150},{-130,150},{-130,164},
              {-62,164}}, color={0,0,127}));
      connect(tfp.y, greaterEqual2.u2) annotation (Line(points={{-199,150},{-20,150},
              {-20,162},{-2,162}}, color={0,0,127}));
        connect(add_m_flow_cold1.y, m_flow) annotation (Line(points={{321,250},
                {362,250},{362,270},{420,270}}, color={0,0,127}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-200,
                -200},{200,200}}),
                             graphics={Rectangle(
              extent={{-200,200},{200,-200}},
              lineColor={0,0,0},
              fillColor={210,210,210},
              fillPattern=FillPattern.Solid,
              borderPattern=BorderPattern.Raised), Text(
              extent={{-160,160},{160,-160}},
              lineColor={28,108,200},
              fillColor={210,210,210},
              fillPattern=FillPattern.Solid,
              textString="I/O HPSHC

I/O GF1

I/O GF2")}),                             Diagram(coordinateSystem(
              preserveAspectRatio=false, extent={{-200,-200},{200,200}})),
        Documentation(info="<html>
<h4><span style=\"color: #000000\">HPSHC modes</span></h4>
<p>For the HPSHC, 4 possible modes :</p>
<p>0 - Off</p>
<p>1 - Cold mode</p>
<p>2 - HPSHC full</p>
<p>3 - HPSHC 1/2</p>
</html>"));
    end DE_PE_cold;

    model retour_props
      Modelica.Blocks.Interfaces.RealInput T_dep
        annotation (Placement(transformation(extent={{-140,60},{-100,100}})));
      Modelica.Blocks.Interfaces.RealInput T_ret
        annotation (Placement(transformation(extent={{-140,10},{-100,50}})));
      Modelica.Blocks.Interfaces.RealInput Q_dep
        annotation (Placement(transformation(extent={{-140,-50},{-100,-10}})));
      Modelica.Blocks.Interfaces.RealInput Q_ret
        annotation (Placement(transformation(extent={{-140,-100},{-100,-60}})));
      Modelica.Blocks.Interfaces.RealOutput T_hot_plant
        annotation (Placement(transformation(extent={{100,40},{120,60}})));

      Modelica.Blocks.Interfaces.RealOutput m_flow_diff
        annotation (Placement(transformation(extent={{100,-60},{120,-40}})));
    equation
      T_hot_plant = if noEvent(Q_dep>0) then ((Q_dep - Q_ret) * T_dep + Q_ret * T_ret) / Q_dep else 20+273.15;
      m_flow_diff = Q_dep - Q_ret;

      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
            Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={28,108,200},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Text(
              extent={{-100,100},{0,0}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.None,
              textString="+"),
            Text(
              extent={{0,0},{100,-100}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.None,
              textString="-"),
            Line(
              points={{-54,-58},{66,62}},
              color={0,0,0},
              thickness=1)}), Diagram(coordinateSystem(preserveAspectRatio=false)));
    end retour_props;

    model add_m_flow_hot
      Modelica.Blocks.Interfaces.RealOutput y
        annotation (Placement(transformation(extent={{100,-10},{120,10}})));
      Modelica.Blocks.Interfaces.BooleanInput u
        annotation (Placement(transformation(extent={{-140,-70},{-100,-30}})));
      Modelica.Blocks.Interfaces.IntegerInput u1
        annotation (Placement(transformation(extent={{-140,30},{-100,70}})));
        Real hspc;
        Real cha;
        parameter Real hspc_set = 211/3.6;
        parameter Real cha_set = 0;
    equation
      hspc = if u1>0 then hspc_set else 0;
      cha = if u then 0 else 0;
      y = hspc + cha;
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={28,108,200},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{-100,100},{100,-100}},
                lineColor={0,0,0},
                textString="+")}),                                   Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end add_m_flow_hot;

    model add_m_flow_cold
      Modelica.Blocks.Interfaces.RealOutput y
        annotation (Placement(transformation(extent={{100,-10},{120,10}})));
      Modelica.Blocks.Interfaces.BooleanInput gf1
        annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
      Modelica.Blocks.Interfaces.IntegerInput hpshc
        annotation (Placement(transformation(extent={{-140,30},{-100,70}})));
        Real hspc_flow;
        Real gf1_flow;
    Real gf2_flow;

      Modelica.Blocks.Interfaces.BooleanInput gf2
        annotation (Placement(transformation(extent={{-140,-70},{-100,-30}})));
    equation
      hspc_flow =if hpshc > 0 then 166/3.6 else 0;
      gf1_flow =if gf1 then 500/3.6 else 0;
      gf2_flow = if gf2 then 500/3.6 else 0;
      y = hspc_flow + gf1_flow + gf2_flow;
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={28,108,200},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{-100,100},{100,-100}},
                lineColor={0,0,0},
                textString="+")}),                                   Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end add_m_flow_cold;

    model add_m_flow_cold_complete
      Modelica.Blocks.Interfaces.RealOutput y
        annotation (Placement(transformation(extent={{100,-10},{120,10}})));
      Modelica.Blocks.Interfaces.BooleanInput gf1
        annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
      Modelica.Blocks.Interfaces.IntegerInput hpshc
        annotation (Placement(transformation(extent={{-140,30},{-100,70}})));
        Real hspc_flow;
        Real gf1_flow;
    Real gf2_flow;
    parameter Real gf_set = 500/3.6;
    parameter Real hspc_set = 322/3.6;

      Modelica.Blocks.Interfaces.BooleanInput gf2
        annotation (Placement(transformation(extent={{-140,-70},{-100,-30}})));
    equation
      if hpshc > 0 then
        if hpshc == 3 then
          hspc_flow = hspc_set / 2;
        else
          hspc_flow = hspc_set;
        end if;
      else
        hspc_flow = 0;
      end if;

      gf1_flow =if gf1 then gf_set else 0;
      gf2_flow = if gf2 then gf_set else 0;
      y = hspc_flow + gf1_flow + gf2_flow;
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={28,108,200},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{-100,100},{100,-100}},
                lineColor={0,0,0},
                textString="+")}),                                   Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end add_m_flow_cold_complete;

    package Tests
      extends Modelica.Icons.ExamplesPackage;
      model test_wait
          Modelica.Blocks.Sources.RealExpression realExpression(y=10)
            annotation (Placement(transformation(extent={{-80,0},{-60,20}})));
          Modelica.Blocks.Sources.RealExpression realExpression1(y=5)
            annotation (Placement(transformation(extent={{-80,40},{-60,60}})));
          WaitBefore waitBefore(t_threshold=10)
            annotation (Placement(transformation(extent={{-20,40},{0,60}})));
      equation
          connect(realExpression1.y, waitBefore.threshold) annotation (Line(
                points={{-59,50},{-38,50},{-38,50},{-22,50}}, color={0,0,127}));
          connect(realExpression.y, waitBefore.u) annotation (Line(points={{-59,
                  10},{-10,10},{-10,38}}, color={0,0,127}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)),
              Diagram(coordinateSystem(preserveAspectRatio=false)));
      end test_wait;

      model hot_control
          DE_PE_hot dE_PE_hot
            annotation (Placement(transformation(extent={{0,0},{40,40}})));
          Modelica.Blocks.Sources.RealExpression realExpression(y=10)
            annotation (Placement(transformation(extent={{-80,80},{-60,100}})));
          Modelica.Blocks.Sources.RealExpression realExpression3(y=55 + 273.15)
            annotation (Placement(transformation(extent={{-80,30},{-60,50}})));
          Modelica.Blocks.Sources.RealExpression realExpression4(y=10)
            annotation (Placement(transformation(extent={{-80,60},{-60,80}})));
      equation
          connect(realExpression.y, dE_PE_hot.DEC[1]) annotation (Line(points={
                  {-59,90},{-30,90},{-30,29.6667},{-2,29.6667}}, color={0,0,127}));
          connect(realExpression4.y, dE_PE_hot.DEC[2]) annotation (Line(points=
                  {{-59,70},{-32,70},{-32,31},{-2,31}}, color={0,0,127}));
          connect(realExpression3.y, dE_PE_hot.DEC[3]) annotation (Line(points=
                  {{-59,40},{-30,40},{-30,32.3333},{-2,32.3333}}, color={0,0,
                  127}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)),
              Diagram(coordinateSystem(preserveAspectRatio=false)));
      end hot_control;
    end Tests;


  end DE_PE;

    package DEC_DEG
      extends Modelica.Icons.VariantsPackage;
      model dp_law_hot

        parameter Modelica.SIunits.Pressure W1(displayUnit="bar") = 30000;
        parameter Modelica.SIunits.Pressure W2(displayUnit="bar") = 1100000;
        parameter Modelica.SIunits.Conversions.NonSIunits.Temperature_degC T_min = -4;
        parameter Modelica.SIunits.Conversions.NonSIunits.Temperature_degC T_max = 18;

        Modelica.Blocks.Interfaces.RealInput T_ext
          annotation (Placement(transformation(extent={{-140,60},{-100,100}})));
        Modelica.Blocks.Interfaces.RealOutput y
          annotation (Placement(transformation(extent={{100,-10},{120,10}})));

      equation

          if T_ext< T_min then
          y = W2;
          elseif T_ext>= T_min and T_ext <= T_max then
          y = (sqrt(W2) - (sqrt(W2)-sqrt(W1))/(T_max-T_min)*((T_ext-273.15)-T_min))^2;
          else
          y = W1;
          end if;

        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={Text(
                extent={{-100,140},{100,100}},
                lineColor={28,108,200},
                textString="%name"),           Rectangle(
                extent={{-100,100},{100,-100}},
                fillColor={210,210,210},
                fillPattern=FillPattern.Solid,
                borderPattern=BorderPattern.Raised),
              Line(points={{-60,60},{-60,-60},{-60,-60},{60,-60}}, color={28,108,200}),
              Polygon(
                points={{-54,60},{-66,60},{-60,80},{-54,60}},
                lineColor={28,108,200},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{6,-10},{-6,-10},{0,10},{6,-10}},
                lineColor={28,108,200},
                origin={70,-60},
                rotation=270,
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid),
              Line(points={{-70,20},{-40,20},{20,-40},{50,-40}}, color={255,255,0},
                thickness=1)}),                                        Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end dp_law_hot;

      model DEC_controls_parallel
        Modelica.Blocks.Interfaces.RealInput FT_TFP
          annotation (Placement(transformation(extent={{-240,-110},{-200,-70}})));
        Modelica.Blocks.Interfaces.RealInput FT_CHA
          annotation (Placement(transformation(extent={{-240,-200},{-200,-160}})));
        inner Modelica.StateGraph.StateGraphRoot stateGraphRoot
          annotation (Placement(transformation(extent={{140,180},{160,200}})));
        Modelica.StateGraph.TransitionWithSignal transitionWithSignal
          annotation (Placement(transformation(extent={{-20,-220},{0,-200}})));
        Modelica.Blocks.Interfaces.RealInput DEC[3]
          annotation (Placement(transformation(extent={{-240,90},{-200,130}})));
        Modelica.StateGraph.StepWithSignal HPSHC1_start(nIn=3, nOut=1)
          annotation (Placement(transformation(extent={{20,-220},{40,-200}})));
        Modelica.StateGraph.Transition HPSHC_start_buffer(enableTimer=true, waitTime=2)
          annotation (Placement(transformation(extent={{60,-220},{80,-200}})));
        Modelica.StateGraph.StepWithSignal HPSHC1_on(nIn=2, nOut=3)
          annotation (Placement(transformation(extent={{100,-220},{120,-200}})));
        Modelica.StateGraph.TransitionWithSignal Temp_solo
          annotation (Placement(transformation(extent={{140,-160},{160,-140}})));
        Modelica.StateGraph.TransitionWithSignal HPSHC_turnoff
          annotation (Placement(transformation(extent={{140,-220},{160,-200}})));
        Modelica.StateGraph.TransitionWithSignal CHA_need
          annotation (Placement(transformation(extent={{140,-380},{160,-360}})));
        WaitBefore waitBefore(t_threshold=2, superior=false)
          annotation (Placement(transformation(extent={{-78,178},{-58,198}})));
        WaitBefore waitBefore1(t_threshold=2, superior=true)
          annotation (Placement(transformation(extent={{40,-180},{60,-160}})));
        Modelica.StateGraph.StepWithSignal HPSHC_solo_switch
          annotation (Placement(transformation(extent={{180,-160},{200,-140}})));
        Modelica.StateGraph.Transition HPSHC_solo_buffer(enableTimer=true, waitTime=2)
          annotation (Placement(transformation(extent={{220,-160},{240,-140}})));
        Modelica.StateGraph.StepWithSignal HPSHC_solo(nOut=2)
          annotation (Placement(transformation(extent={{260,-160},{280,-140}})));
        Modelica.StateGraph.TransitionWithSignal temp_duo
          annotation (Placement(transformation(extent={{300,-120},{320,-100}})));
        Modelica.StateGraph.TransitionWithSignal HPSHC_solo_off
          annotation (Placement(transformation(extent={{300,-180},{320,-160}})));
        WaitBefore waitBefore2(t_threshold=2, superior=false) annotation (
            Placement(transformation(extent={{200,-120},{220,-100}})));
        Modelica.Blocks.Math.Add add(k1=-1, k2=+1)
          annotation (Placement(transformation(extent={{-100,40},{-80,60}})));
        Modelica.Blocks.Logical.GreaterEqual greaterEqualThreshold
          annotation (Placement(transformation(extent={{-40,40},{-20,60}})));
        Modelica.StateGraph.InitialStepWithSignal initialStepWithSignal
          annotation (Placement(transformation(extent={{-60,-220},{-40,-200}})));
        Modelica.StateGraph.Step HPSHC_off(nIn=2, nOut=1)
          annotation (Placement(transformation(extent={{340,-220},{360,-200}})));
        Modelica.StateGraph.Transition HPSHC_off_buffer(enableTimer=true, waitTime=2)
          annotation (Placement(transformation(extent={{380,-220},{400,-200}})));
        Modelica.StateGraph.StepWithSignal HPSHC_cooling(nIn=1, nOut=2)
          annotation (Placement(transformation(extent={{180,-240},{200,-220}})));
        Modelica.StateGraph.Transition HPSC_turnoff_buffer(enableTimer=true, waitTime=
             2) annotation (Placement(transformation(extent={{300,-240},{320,-220}})));
        Modelica.StateGraph.TransitionWithSignal transitionWithSignal7
          annotation (Placement(transformation(extent={{300,-300},{320,-280}})));
        Modelica.StateGraph.StepWithSignal CHA_start(nIn=1, nOut=1)
          annotation (Placement(transformation(extent={{220,-360},{240,-340}})));
        Modelica.StateGraph.Transition CHA_start_buffer(enableTimer=true, waitTime=2)
          annotation (Placement(transformation(extent={{260,-360},{280,-340}})));
        Modelica.StateGraph.StepWithSignal CHA_on(nOut=1)
          annotation (Placement(transformation(extent={{300,-360},{320,-340}})));
        Modelica.Blocks.Math.Add add2(k1=-1, k2=+1)
          annotation (Placement(transformation(extent={{-60,-10},{-40,10}})));
        Modelica.Blocks.Logical.GreaterEqual greaterEqualThreshold1
          annotation (Placement(transformation(extent={{-20,-10},{0,10}})));
        Modelica.StateGraph.TransitionWithSignal CHA_turnoff
          annotation (Placement(transformation(extent={{340,-360},{360,-340}})));
        Modelica.StateGraph.Step CHA_off(nIn=1, nOut=1)
          annotation (Placement(transformation(extent={{380,-360},{400,-340}})));
        Modelica.StateGraph.Transition CHA_off_buffer(enableTimer=true, waitTime=2)
          annotation (Placement(transformation(extent={{460,-380},{480,-360}})));

        Modelica.StateGraph.Parallel parallel
          annotation (Placement(transformation(extent={{174,-400},{448,-340}})));
        Modelica.StateGraph.StepWithSignal HPSHC1_on1(nIn=1, nOut=1)
          annotation (Placement(transformation(extent={{300,-400},{320,-380}})));
        Modelica.Blocks.MathBoolean.Or HPSC_boo(nu=3)
          annotation (Placement(transformation(extent={{22,-302},{42,-282}})));
        Modelica.Blocks.Logical.Or HPSC_solo_boo
          annotation (Placement(transformation(extent={{200,-200},{220,-180}})));
        Modelica.Blocks.MathInteger.MultiSwitch HPSHC_exit(
          expr={1,2,3},
          use_pre_as_default=false,
          nu=3) annotation (Placement(transformation(extent={{440,20},{480,40}})));
        Modelica.Blocks.Interfaces.IntegerOutput HPSHC annotation (Placement(
              transformation(extent={{200,150},{240,190}}), iconTransformation(
                extent={{200,150},{240,190}})));
        Modelica.Blocks.MathBoolean.Or CHA_boo(nu=2)
          annotation (Placement(transformation(extent={{320,-482},{340,-462}})));
        Modelica.Blocks.Interfaces.BooleanOutput CHA annotation (Placement(
              transformation(extent={{200,50},{240,90}}),     iconTransformation(
                extent={{200,50},{240,90}})));
      equation
        connect(transitionWithSignal.outPort, HPSHC1_start.inPort[1]) annotation (
            Line(points={{-8.5,-210},{6,-210},{6,-209.333},{19,-209.333}},
              color={0,0,0}));
        connect(HPSHC1_start.outPort[1], HPSHC_start_buffer.inPort)
          annotation (Line(points={{40.5,-210},{66,-210}},  color={0,0,0}));
        connect(HPSHC_start_buffer.outPort, HPSHC1_on.inPort[1]) annotation (Line(
              points={{71.5,-210},{86,-210},{86,-209.5},{99,-209.5}}, color={0,0,0}));
        connect(HPSHC1_on.outPort[1], Temp_solo.inPort) annotation (Line(points={{120.5,
                -209.667},{130,-209.667},{130,-150},{146,-150}},
                                                               color={0,0,0}));
        connect(HPSHC1_on.outPort[2], HPSHC_turnoff.inPort)
          annotation (Line(points={{120.5,-210},{146,-210}},
                                                           color={0,0,0}));
        connect(HPSHC1_on.outPort[3], CHA_need.inPort) annotation (Line(points={{120.5,
                -210.333},{130,-210.333},{130,-370},{146,-370}}, color={0,0,0}));
        connect(waitBefore.y, transitionWithSignal.condition) annotation (Line(points={{-57,188},
                {-20,188},{-20,80},{-120,80},{-120,-240},{-10,-240},{-10,-222}},
                        color={255,0,255}));
        connect(DEC[3], waitBefore1.u) annotation (Line(points={{-220,123.333},
                {20,123.333},{20,-170},{38,-170}}, color={0,0,127}));
        connect(waitBefore1.y, Temp_solo.condition) annotation (Line(points={{61,-170},
                {150,-170},{150,-162}},
                                      color={255,0,255}));
        connect(Temp_solo.outPort, HPSHC_solo_switch.inPort[1])
          annotation (Line(points={{151.5,-150},{179,-150}},
                                                         color={0,0,0}));
        connect(HPSHC_solo_switch.outPort[1], HPSHC_solo_buffer.inPort)
          annotation (Line(points={{200.5,-150},{226,-150}},
                                                         color={0,0,0}));
        connect(HPSHC_solo_buffer.outPort, HPSHC_solo.inPort[1])
          annotation (Line(points={{231.5,-150},{259,-150}},
                                                         color={0,0,0}));
        connect(HPSHC_solo.outPort[1], temp_duo.inPort) annotation (Line(points={{280.5,
                -149.75},{292,-149.75},{292,-110},{306,-110}},
                                                       color={0,0,0}));
        connect(HPSHC_solo.outPort[2], HPSHC_solo_off.inPort) annotation (Line(points={{280.5,
                -150.25},{292,-150.25},{292,-170},{306,-170}},    color={0,0,0}));
        connect(DEC[3], waitBefore2.u) annotation (Line(points={{-220,123.333},
                {60,123.333},{60,-110},{198,-110}}, color={0,0,127}));
        connect(waitBefore2.y, temp_duo.condition) annotation (Line(points={{221,-110},
                {280,-110},{280,-130},{310,-130},{310,-122}},
                                                 color={255,0,255}));
        connect(temp_duo.outPort, HPSHC1_start.inPort[2]) annotation (Line(points={{311.5,
                -110},{340,-110},{340,-80},{8,-80},{8,-210},{19,-210}}, color={0,0,0}));
        connect(FT_TFP, add.u2) annotation (Line(points={{-220,-90},{-160,-90},{-160,44},
                {-102,44}},  color={0,0,127}));
        connect(add.y, greaterEqualThreshold.u1)
          annotation (Line(points={{-79,50},{-42,50}},     color={0,0,127}));
        connect(greaterEqualThreshold.y, HPSHC_solo_off.condition) annotation (Line(
              points={{-19,50},{288,50},{288,-200},{310,-200},{310,-182}}, color={255,
                0,255}));
        connect(greaterEqualThreshold.y, HPSHC_turnoff.condition) annotation (Line(
              points={{-19,50},{140,50},{140,-240},{150,-240},{150,-222}},   color={255,
                0,255}));
        connect(initialStepWithSignal.outPort[1], transitionWithSignal.inPort)
          annotation (Line(points={{-39.5,-210},{-14,-210}}, color={0,0,0}));
        connect(HPSHC_solo_off.outPort, HPSHC_off.inPort[2]) annotation (Line(points={{311.5,
                -170},{326,-170},{326,-210.5},{339,-210.5}},    color={0,0,0}));
        connect(HPSHC_off.outPort[1], HPSHC_off_buffer.inPort)
          annotation (Line(points={{360.5,-210},{386,-210}},
                                                           color={0,0,0}));
        connect(HPSHC_off_buffer.outPort, initialStepWithSignal.inPort[1])
          annotation (Line(points={{391.5,-210},{420,-210},{420,-60},{-80,-60},{-80,-210},
                {-61,-210}}, color={0,0,0}));
        connect(waitBefore.y, CHA_need.condition) annotation (Line(points={{-57,188},{
                -20,188},{-20,80},{-120,80},{-120,-420},{150,-420},{150,-382}},
              color={255,0,255}));
        connect(HPSHC_turnoff.outPort, HPSHC_cooling.inPort[1]) annotation (Line(
              points={{151.5,-210},{164,-210},{164,-230},{179,-230}},
                                                            color={0,0,0}));
        connect(HPSHC_cooling.outPort[1], HPSC_turnoff_buffer.inPort) annotation (
            Line(points={{200.5,-229.75},{254,-229.75},{254,-230},{306,-230}},
                                                                        color={0,0,0}));
        connect(HPSC_turnoff_buffer.outPort, HPSHC_off.inPort[1]) annotation (Line(
              points={{311.5,-230},{326,-230},{326,-209.5},{339,-209.5}},
                                                                      color={0,0,0}));
        connect(waitBefore.y, transitionWithSignal7.condition) annotation (Line(
              points={{-57,188},{-20,188},{-20,80},{-120,80},{-120,-320},{310,-320},{310,
                -302}},      color={255,0,255}));
        connect(HPSHC_cooling.outPort[2], transitionWithSignal7.inPort) annotation (
            Line(points={{200.5,-230.25},{254,-230.25},{254,-290},{306,-290}},
                                                                            color={0,0,
                0}));
        connect(transitionWithSignal7.outPort, HPSHC1_start.inPort[3]) annotation (
            Line(points={{311.5,-290},{460,-290},{460,-66},{12,-66},{12,-210},{
                14,-210},{14,-210.667},{19,-210.667}},
                                  color={0,0,0}));
        connect(add2.y, greaterEqualThreshold1.u1) annotation (Line(points={{-39,0},{-22,
                0}},                                   color={0,0,127}));
        connect(CHA_off_buffer.outPort, HPSHC1_on.inPort[2]) annotation (Line(points={{471.5,
                -370},{508,-370},{508,-70},{90,-70},{90,-210.5},{99,-210.5}},
              color={0,0,0}));
        connect(greaterEqualThreshold1.y, CHA_turnoff.condition) annotation (Line(
              points={{1,0},{10,0},{10,-40},{-140,-40},{-140,-440},{350,-440},{350,-362}},
                             color={255,0,255}));
        connect(CHA_start.inPort[1], parallel.split[1]) annotation (Line(points={{219,
                -350},{208,-350},{208,-370},{204.825,-370}},
                                                    color={0,0,0}));
        connect(HPSHC1_on1.inPort[1], parallel.split[2]) annotation (Line(points={{299,
                -390},{204,-390},{204,-370},{204.825,-370}},
                                                          color={0,0,0}));
        connect(CHA_off.outPort[1], parallel.join[1]) annotation (Line(points={{400.5,
                -350},{416,-350},{416,-370},{417.175,-370}}, color={0,0,0}));
        connect(HPSHC1_on1.outPort[1], parallel.join[2]) annotation (Line(points={{320.5,
                -390},{416,-390},{416,-370},{417.175,-370}}, color={0,0,0}));
        connect(CHA_need.outPort, parallel.inPort)
          annotation (Line(points={{151.5,-370},{169.89,-370}},
                                                             color={0,0,0}));
        connect(parallel.outPort, CHA_off_buffer.inPort)
          annotation (Line(points={{450.74,-370},{466,-370}}, color={0,0,0}));
        connect(CHA_start.outPort[1], CHA_start_buffer.inPort)
          annotation (Line(points={{240.5,-350},{266,-350}},color={0,0,0}));
        connect(CHA_start_buffer.outPort, CHA_on.inPort[1]) annotation (Line(points={{271.5,
                -350},{299,-350}},                             color={0,0,0}));
        connect(CHA_on.outPort[1], CHA_turnoff.inPort) annotation (Line(points={{320.5,
                -350},{346,-350}},                       color={0,0,0}));
        connect(CHA_turnoff.outPort, CHA_off.inPort[1]) annotation (Line(points={{351.5,
                -350},{379,-350}},                       color={0,0,0}));
        connect(HPSHC1_start.active, HPSC_boo.u[1]) annotation (Line(points={{30,-221},
                {30,-250},{8,-250},{8,-287.333},{22,-287.333}},         color={255,0,255}));
        connect(HPSHC1_on.active, HPSC_boo.u[2]) annotation (Line(points={{110,-221},{
                110,-250},{8,-250},{8,-292},{22,-292}},   color={255,0,255}));
        connect(HPSHC1_on1.active, HPSC_boo.u[3]) annotation (Line(points={{310,
                -401},{310,-410},{8,-410},{8,-294},{22,-294},{22,-296.667}},
              color={255,0,255}));
        connect(HPSHC_solo_switch.active, HPSC_solo_boo.u1)
          annotation (Line(points={{190,-161},{190,-190},{198,-190}},
                                                               color={255,0,255}));
        connect(HPSHC_solo.active, HPSC_solo_boo.u2) annotation (Line(points={{270,-161},
                {270,-172},{190,-172},{190,-198},{198,-198}},
                                                       color={255,0,255}));
        connect(HPSC_solo_boo.y, HPSHC_exit.u[3]) annotation (Line(points={{221,-190},
                {400,-190},{400,28},{440,28}},
                                           color={255,0,255}));
        connect(HPSC_boo.y, HPSHC_exit.u[2]) annotation (Line(points={{43.5,-292},{220,
                -292},{220,-260},{430,-260},{430,30},{440,30}},  color={255,0,255}));
        connect(HPSHC_cooling.active, HPSHC_exit.u[1]) annotation (Line(points={{190,-241},
                {190,-260},{430,-260},{430,28.5},{440,28.5},{440,32}},   color={255,0,
                255}));
        connect(CHA_on.active, CHA_boo.u[1]) annotation (Line(points={{310,-361},{310,
                -370},{280,-370},{280,-468.5},{320,-468.5}},      color={255,0,
                255}));
        connect(CHA_start.active, CHA_boo.u[2]) annotation (Line(points={{230,-361},{230,
                -475.5},{320,-475.5}},     color={255,0,255}));
        connect(HPSHC_exit.y, HPSHC) annotation (Line(points={{481,30},{500,30},{500,120},
                {180,120},{180,170},{220,170}},           color={255,127,0}));
        connect(CHA_boo.y, CHA) annotation (Line(points={{341.5,-472},{520,-472},{520,
                100},{180,100},{180,70},{220,70}},
                                        color={255,0,255}));
        connect(add.y, add2.u1) annotation (Line(points={{-79,50},{-70,50},{-70,6},{-62,
                6}},         color={0,0,127}));
        connect(FT_CHA, add2.u2) annotation (Line(points={{-220,-180},{-148,-180},{-148,
                -6},{-62,-6}},    color={0,0,127}));
        connect(FT_TFP, greaterEqualThreshold.u2) annotation (Line(points={{-220,-90},
                {-160,-90},{-160,30},{-52,30},{-52,42},{-42,42}},
                                                   color={0,0,127}));
        connect(FT_CHA, greaterEqualThreshold1.u2) annotation (Line(points={{-220,-180},
                {-148,-180},{-148,-20},{-32,-20},{-32,-8},{-22,-8}},
                                                   color={0,0,127}));
        connect(DEC[2], add.u1) annotation (Line(points={{-220,110},{-162,110},
                {-162,56},{-102,56}}, color={0,0,127}));
        connect(DEC[1], waitBefore.u) annotation (Line(points={{-220,96.6667},{
                -152,96.6667},{-152,188},{-80,188}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-200,-200},
                  {200,200}}), graphics={
              Rectangle(
                extent={{-200,200},{200,-200}},
                lineColor={0,0,0},
                fillColor={210,210,210},
                fillPattern=FillPattern.Solid,
                borderPattern=BorderPattern.Raised), Text(
                extent={{-160,180},{160,-160}},
                lineColor={238,46,47},
                fillColor={210,210,210},
                fillPattern=FillPattern.Solid,
                textString="I/O HPSHC

I/O CHA")}),                               Diagram(coordinateSystem(
                preserveAspectRatio=false, extent={{-200,-200},{200,200}})),
          Documentation(info="<html>
<h4><span style=\"color: #000000\">HPSHC modes</span></h4>
<p>For the HPSHC, 4 possible modes :</p>
<p>0 - Off</p>
<p>1 - Cold mode</p>
<p>2 - HPSHC full</p>
<p>3 - HPSHC 1/2</p>
</html>"));
      end DEC_controls_parallel;

      model dp_law_cold

        parameter Modelica.SIunits.Pressure W1(displayUnit="bar") = 30000;
        parameter Modelica.SIunits.Pressure W2(displayUnit="bar") = 1100000;
        parameter Modelica.SIunits.Conversions.NonSIunits.Temperature_degC T_min = 18;
        parameter Modelica.SIunits.Conversions.NonSIunits.Temperature_degC T_max = 34;

        Modelica.Blocks.Interfaces.RealInput T_ext
          annotation (Placement(transformation(extent={{-140,60},{-100,100}})));
        Modelica.Blocks.Interfaces.RealOutput y
          annotation (Placement(transformation(extent={{100,-10},{120,10}})));

      equation

          if T_ext< T_min then
          y = W1;
          elseif T_ext>= T_min and T_ext <= T_max then
          y = (sqrt(W2) - (sqrt(W2)-sqrt(W1))/(T_max-T_min)*(T_max-T_ext))^2;
          else
          y = W2;
          end if;

        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={Text(
                extent={{-100,140},{100,100}},
                lineColor={28,108,200},
                textString="%name"),           Rectangle(
                extent={{-100,100},{100,-100}},
                fillColor={210,210,210},
                fillPattern=FillPattern.Solid,
                borderPattern=BorderPattern.Raised),
              Line(points={{-60,60},{-60,-60},{-60,-60},{60,-60}}, color={28,108,200}),
              Polygon(
                points={{-54,60},{-66,60},{-60,80},{-54,60}},
                lineColor={28,108,200},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{6,-10},{-6,-10},{0,10},{6,-10}},
                lineColor={28,108,200},
                origin={70,-60},
                rotation=270,
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid),
              Line(points={{-70,20},{-40,20},{20,-40},{50,-40}}, color={255,255,0},
                thickness=1)}),                                        Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end dp_law_cold;

      model DEG_controls_parallel
        Modelica.Blocks.Interfaces.RealInput DEG[2] "DP, FT" annotation (Placement(
              transformation(extent={{-240,260},{-200,300}}), iconTransformation(
                extent={{-240,120},{-200,160}})));
        Modelica.Blocks.Interfaces.RealInput FT_GF1
          annotation (Placement(transformation(extent={{-240,180},{-200,220}}),
              iconTransformation(extent={{-240,0},{-200,40}})));
        Modelica.Blocks.Interfaces.RealInput FT_GF2
          annotation (Placement(transformation(extent={{-240,140},{-200,180}}),
              iconTransformation(extent={{-240,-60},{-200,-20}})));

        Modelica.Blocks.Interfaces.RealInput FT_TFP
          annotation (Placement(transformation(extent={{-240,100},{-200,140}}),
              iconTransformation(extent={{-240,-118},{-200,-78}})));
        inner Modelica.StateGraph.StateGraphRoot stateGraphRoot
          annotation (Placement(transformation(extent={{300,300},{320,320}})));
        Modelica.StateGraph.TransitionWithSignal transitionWithSignal
          annotation (Placement(transformation(extent={{-220,-20},{-200,0}})));
        Modelica.StateGraph.StepWithSignal GF1_start(nIn=1, nOut=1)
          annotation (Placement(transformation(extent={{-180,-20},{-160,0}})));
        Modelica.StateGraph.Transition GF1_start_buffer(enableTimer=true, waitTime=2)
          annotation (Placement(transformation(extent={{-140,-20},{-120,0}})));
        Modelica.StateGraph.StepWithSignal GF1_on(nIn=2, nOut=2)
          annotation (Placement(transformation(extent={{-100,-20},{-80,0}})));
        Modelica.StateGraph.TransitionWithSignal GF1_stop
          annotation (Placement(transformation(extent={{-60,20},{-40,40}})));
        WaitBefore waitBefore(t_threshold=2, superior=false)
          annotation (Placement(transformation(extent={{0,270},{20,290}})));
        Modelica.Blocks.Math.Add add(k1=-1, k2=+1)
          annotation (Placement(transformation(extent={{-180,240},{-160,260}})));
        Modelica.StateGraph.InitialStep initialStep
          annotation (Placement(transformation(extent={{-260,-20},{-240,0}})));
        Modelica.Blocks.Math.Add add1(k1=+1, k2=+1)
          annotation (Placement(transformation(extent={{-120,200},{-100,220}})));

        Modelica.Blocks.Logical.Or GF1_active
          annotation (Placement(transformation(extent={{-60,-220},{-40,-200}})));
        Modelica.Blocks.MathInteger.MultiSwitch HPSHC_exit(
          expr={1},
          use_pre_as_default=false,
          nu=1) annotation (Placement(transformation(extent={{140,230},{180,250}})));
        Modelica.Blocks.Interfaces.IntegerOutput HPSHC annotation (Placement(
              transformation(extent={{200,160},{240,200}}), iconTransformation(
                extent={{200,160},{240,200}})));
        Modelica.Blocks.Interfaces.BooleanOutput GF2 annotation (Placement(
              transformation(extent={{200,80},{240,120}}),    iconTransformation(
                extent={{200,80},{240,120}})));

        Modelica.Blocks.Logical.GreaterEqual greaterEqual
          annotation (Placement(transformation(extent={{0,240},{20,260}})));
        Modelica.Blocks.Logical.GreaterEqual greaterEqual1
          annotation (Placement(transformation(extent={{0,200},{20,220}})));
        Modelica.Blocks.Math.Add add2(k1=+1, k2=+1)
          annotation (Placement(transformation(extent={{-60,160},{-40,180}})));
        Modelica.Blocks.Logical.GreaterEqual greaterEqual2
          annotation (Placement(transformation(extent={{0,160},{20,180}})));
        Modelica.StateGraph.Step GF1_stopping
          annotation (Placement(transformation(extent={{-20,20},{0,40}})));
        Modelica.StateGraph.Transition GF1_stop_buffer(enableTimer=true, waitTime=2)
          annotation (Placement(transformation(extent={{20,20},{40,40}})));
        Modelica.StateGraph.TransitionWithSignal GF2_need
          annotation (Placement(transformation(extent={{-60,-60},{-40,-40}})));
        Modelica.StateGraph.StepWithSignal GF2_start(nIn=1, nOut=1)
          annotation (Placement(transformation(extent={{-20,-60},{0,-40}})));
        Modelica.StateGraph.Transition GF1_start_buffer1(enableTimer=true, waitTime=2)
          annotation (Placement(transformation(extent={{20,-60},{40,-40}})));
        Modelica.StateGraph.StepWithSignal GF2_on(nIn=2, nOut=2)
          annotation (Placement(transformation(extent={{60,-60},{80,-40}})));
        Modelica.StateGraph.TransitionWithSignal GF2_stop
          annotation (Placement(transformation(extent={{100,-20},{120,0}})));
        Modelica.StateGraph.TransitionWithSignal TFP_need
          annotation (Placement(transformation(extent={{100,-100},{120,-80}})));
        Modelica.StateGraph.StepWithSignal TFP_start(nIn=1, nOut=1)
          annotation (Placement(transformation(extent={{140,-100},{160,-80}})));
        Modelica.StateGraph.Transition TFP_start_buffer(enableTimer=true, waitTime=2)
          annotation (Placement(transformation(extent={{180,-100},{200,-80}})));
        Modelica.StateGraph.StepWithSignal TFP_on(nIn=1, nOut=1)
          annotation (Placement(transformation(extent={{220,-100},{240,-80}})));
        Modelica.Blocks.Interfaces.BooleanOutput GF1 annotation (Placement(
              transformation(extent={{200,120},{240,160}}),   iconTransformation(
                extent={{200,0},{240,40}})));
        Modelica.StateGraph.Transition GF2_stop_buffer(enableTimer=true, waitTime=2)
          annotation (Placement(transformation(extent={{180,-20},{200,0}})));
        Modelica.StateGraph.Step GF2_stopping
          annotation (Placement(transformation(extent={{140,-20},{160,0}})));
        Modelica.Blocks.Logical.Or GF2_active
          annotation (Placement(transformation(extent={{100,-290},{120,-270}})));
        Modelica.StateGraph.TransitionWithSignal TFP_stop
          annotation (Placement(transformation(extent={{260,-100},{280,-80}})));
        Modelica.StateGraph.Step TFP_stopping
          annotation (Placement(transformation(extent={{300,-100},{320,-80}})));
        Modelica.StateGraph.Transition TFP_stop_buffer(enableTimer=true, waitTime=2)
          annotation (Placement(transformation(extent={{340,-100},{360,-80}})));
        Modelica.Blocks.Interfaces.IntegerInput TFP_DEC
          annotation (Placement(transformation(extent={{-240,-180},{-200,-140}})));
        Controls.OBC.CDL.Integers.LessThreshold intLesThr(t=1)
          annotation (Placement(transformation(extent={{-180,-170},{-160,-150}})));
        Controls.OBC.CDL.Logical.And and2
          annotation (Placement(transformation(extent={{-140,-140},{-120,-120}})));
        Controls.OBC.CDL.Logical.Or or2
          annotation (Placement(transformation(extent={{240,-160},{260,-140}})));
        Controls.OBC.CDL.Integers.GreaterEqualThreshold intGreEquThr(t=1)
          annotation (Placement(transformation(extent={{-180,-220},{-160,-200}})));
        Modelica.Blocks.Logical.Or TFP_active
          annotation (Placement(transformation(extent={{200,-190},{220,-170}})));
        Controls.OBC.CDL.Integers.Max maxInt
          annotation (Placement(transformation(extent={{220,240},{240,260}})));
      equation
        connect(FT_GF1, add.u2) annotation (Line(points={{-220,200},{-190,200},
                {-190,244},{-182,244}},
                             color={0,0,127}));
        connect(FT_GF2, add1.u2) annotation (Line(points={{-220,160},{-140,160},{-140,
                204},{-122,204}}, color={0,0,127}));
        connect(add.y, add1.u1) annotation (Line(points={{-159,250},{-140,250},
                {-140,216},{-122,216}},
                             color={0,0,127}));
        connect(add.y, greaterEqual.u1)
          annotation (Line(points={{-159,250},{-2,250}},   color={0,0,127}));
        connect(FT_GF1, greaterEqual.u2) annotation (Line(points={{-220,200},{
                -150,200},{-150,242},{-2,242}},
                                        color={0,0,127}));
        connect(add1.y, greaterEqual1.u1) annotation (Line(points={{-99,210},{
                -2,210}},                      color={0,0,127}));
        connect(FT_GF2, greaterEqual1.u2) annotation (Line(points={{-220,160},{-72,160},
                {-72,202},{-2,202}},    color={0,0,127}));
        connect(FT_TFP, add2.u2) annotation (Line(points={{-220,120},{-80,120},{-80,164},
                {-62,164}},       color={0,0,127}));
        connect(add1.y, add2.u1) annotation (Line(points={{-99,210},{-80,210},{
                -80,176},{-62,176}},
                                  color={0,0,127}));
        connect(add2.y, greaterEqual2.u1)
          annotation (Line(points={{-39,170},{-2,170}},    color={0,0,127}));
        connect(FT_TFP, greaterEqual2.u2) annotation (Line(points={{-220,120},{-20,120},
                {-20,162},{-2,162}},    color={0,0,127}));
        connect(initialStep.outPort[1], transitionWithSignal.inPort)
          annotation (Line(points={{-239.5,-10},{-214,-10}}, color={0,0,0}));
        connect(GF1_start.outPort[1], GF1_start_buffer.inPort)
          annotation (Line(points={{-159.5,-10},{-134,-10}}, color={0,0,0}));
        connect(GF1_start_buffer.outPort, GF1_on.inPort[1]) annotation (Line(points={{
                -128.5,-10},{-114,-10},{-114,-9.5},{-101,-9.5}}, color={0,0,0}));
        connect(waitBefore.y, transitionWithSignal.condition) annotation (Line(points={{21,280},
                {60,280},{60,100},{-300,100},{-300,-40},{-210,-40},{-210,-22}},
              color={255,0,255}));
        connect(GF1_on.outPort[1], GF1_stop.inPort) annotation (Line(points={{-79.5,-9.75},
                {-66,-9.75},{-66,30},{-54,30}}, color={0,0,0}));
        connect(greaterEqual.y, GF1_stop.condition) annotation (Line(points={{21,250},
                {40,250},{40,88},{-100,88},{-100,8},{-50,8},{-50,18}},   color={255,0,
                255}));
        connect(GF1_stop.outPort, GF1_stopping.inPort[1])
          annotation (Line(points={{-48.5,30},{-21,30}}, color={0,0,0}));
        connect(GF1_stopping.outPort[1], GF1_stop_buffer.inPort)
          annotation (Line(points={{0.5,30},{26,30}}, color={0,0,0}));
        connect(GF1_stop_buffer.outPort, initialStep.inPort[1]) annotation (Line(
              points={{31.5,30},{80,30},{80,72},{-280,72},{-280,-10},{-261,-10}},
              color={0,0,0}));
        connect(waitBefore.y, GF2_need.condition) annotation (Line(points={{21,280},
                {60,280},{60,100},{-300,100},{-300,-80},{-50,-80},{-50,-62}},
                                                                            color={255,
                0,255}));
        connect(GF1_on.outPort[2], GF2_need.inPort) annotation (Line(points={{-79.5,-10.25},
                {-66,-10.25},{-66,-50},{-54,-50}}, color={0,0,0}));
        connect(GF2_start.outPort[1], GF1_start_buffer1.inPort)
          annotation (Line(points={{0.5,-50},{26,-50}}, color={0,0,0}));
        connect(GF1_start_buffer1.outPort, GF2_on.inPort[1]) annotation (Line(points={
                {31.5,-50},{46,-50},{46,-49.5},{59,-49.5}}, color={0,0,0}));
        connect(GF2_need.outPort, GF2_start.inPort[1])
          annotation (Line(points={{-48.5,-50},{-21,-50}}, color={0,0,0}));
        connect(GF2_on.outPort[1], GF2_stop.inPort) annotation (Line(points={{80.5,-49.75},
                {80.5,-50},{94,-50},{94,-10},{106,-10}}, color={0,0,0}));
        connect(GF2_on.outPort[2], TFP_need.inPort) annotation (Line(points={{80.5,-50.25},
                {94,-50.25},{94,-90},{106,-90}}, color={0,0,0}));
        connect(TFP_start.outPort[1], TFP_start_buffer.inPort)
          annotation (Line(points={{160.5,-90},{186,-90}}, color={0,0,0}));
        connect(TFP_start_buffer.outPort, TFP_on.inPort[1])
          annotation (Line(points={{191.5,-90},{219,-90}}, color={0,0,0}));
        connect(TFP_start.inPort[1], TFP_need.outPort)
          annotation (Line(points={{139,-90},{111.5,-90}}, color={0,0,0}));
        connect(GF2_stop.outPort, GF2_stopping.inPort[1]) annotation (Line(points={{111.5,
                -10},{124,-10},{124,-10},{139,-10}}, color={0,0,0}));
        connect(GF2_stopping.outPort[1], GF2_stop_buffer.inPort)
          annotation (Line(points={{160.5,-10},{186,-10}}, color={0,0,0}));
        connect(transitionWithSignal.outPort, GF1_start.inPort[1]) annotation (Line(
              points={{-208.5,-10},{-194,-10},{-194,-10},{-181,-10}}, color={0,0,0}));
        connect(GF1_start.active, GF1_active.u1) annotation (Line(points={{-170,
                -21},{-170,-88},{-100,-88},{-100,-210},{-62,-210}},
                                        color={255,0,255}));
        connect(GF1_on.active, GF1_active.u2) annotation (Line(points={{-90,-21},{-90,
                -218},{-62,-218}}, color={255,0,255}));
        connect(GF1_active.y, GF1)
          annotation (Line(points={{-39,-210},{190,-210},{190,-208},{420,-208},
                {420,120},{180,120},{180,140},{220,140}},  color={255,0,255}));
        connect(GF2_active.y, GF2) annotation (Line(points={{121,-280},{440,
                -280},{440,80},{180,80},{180,100},{220,100}},
                                   color={255,0,255}));
        connect(GF2_stop_buffer.outPort, GF1_on.inPort[2]) annotation (Line(points={{191.5,
                -10},{220,-10},{220,60},{-108,60},{-108,-10.5},{-101,-10.5}}, color={0,
                0,0}));
        connect(TFP_on.outPort[1], TFP_stop.inPort) annotation (Line(points={{240.5,-90},
                {254,-90},{254,-90},{266,-90}}, color={0,0,0}));
        connect(greaterEqual1.y, GF2_stop.condition) annotation (Line(points={{21,210},
                {88,210},{88,-40},{110,-40},{110,-22}}, color={255,0,255}));
        connect(TFP_stop.outPort, TFP_stopping.inPort[1])
          annotation (Line(points={{271.5,-90},{299,-90}}, color={0,0,0}));
        connect(TFP_stopping.outPort[1], TFP_stop_buffer.inPort)
          annotation (Line(points={{320.5,-90},{346,-90}}, color={0,0,0}));
        connect(TFP_stop_buffer.outPort, GF2_on.inPort[2]) annotation (Line(points={{351.5,
                -90},{380,-90},{380,20},{50,20},{50,-50.5},{59,-50.5}}, color={0,0,0}));
        connect(GF2_start.active, GF2_active.u1) annotation (Line(points={{-10,-61},{-10,
                -280},{98,-280}}, color={255,0,255}));
        connect(GF2_on.active, GF2_active.u2) annotation (Line(points={{70,-61},{70,-288},
                {98,-288}}, color={255,0,255}));
        connect(TFP_DEC, intLesThr.u)
          annotation (Line(points={{-220,-160},{-182,-160}}, color={255,127,0}));
        connect(intLesThr.y, and2.u2) annotation (Line(points={{-158,-160},{
                -152,-160},{-152,-138},{-142,-138}},
                                          color={255,0,255}));
        connect(waitBefore.y, and2.u1) annotation (Line(points={{21,280},{60,
                280},{60,100},{-300,100},{-300,-130},{-142,-130}},
                                                          color={255,0,255}));
        connect(and2.y, TFP_need.condition) annotation (Line(points={{-118,-130},
                {110,-130},{110,-102}},
                                   color={255,0,255}));
        connect(greaterEqual2.y, or2.u1) annotation (Line(points={{21,170},{100,
                170},{100,70},{250,70},{250,-128},{228,-128},{228,-150},{238,
                -150}},                                       color={255,0,255}));
        connect(TFP_DEC, intGreEquThr.u) annotation (Line(points={{-220,-160},{
                -190,-160},{-190,-210},{-182,-210}},
                                          color={255,127,0}));
        connect(intGreEquThr.y, or2.u2) annotation (Line(points={{-158,-210},{
                -120,-210},{-120,-158},{238,-158}},
                                         color={255,0,255}));
        connect(or2.y, TFP_stop.condition) annotation (Line(points={{262,-150},{270,-150},
                {270,-102}}, color={255,0,255}));
        connect(TFP_start.active, TFP_active.u2) annotation (Line(points={{150,-101},{
                150,-188},{198,-188}}, color={255,0,255}));
        connect(TFP_on.active, TFP_active.u1) annotation (Line(points={{230,-101},{230,
                -120},{180,-120},{180,-180},{198,-180}}, color={255,0,255}));
        connect(TFP_active.y, HPSHC_exit.u[1]) annotation (Line(points={{221,-180},{400,
                -180},{400,210},{120,210},{120,240},{140,240}}, color={255,0,255}));
        connect(TFP_DEC, maxInt.u1) annotation (Line(points={{-220,-160},{-190,-160},{
                -190,-240},{-320,-240},{-320,320},{200,320},{200,256},{218,256}},
              color={255,127,0}));
        connect(HPSHC_exit.y, maxInt.u2) annotation (Line(points={{181,240},{200,240},
                {200,244},{218,244}}, color={255,127,0}));
        connect(maxInt.y, HPSHC) annotation (Line(points={{242,250},{260,250},{260,220},
                {180,220},{180,180},{220,180}}, color={255,127,0}));
        connect(DEG[1], waitBefore.u) annotation (Line(points={{-220,270},{-111,
                270},{-111,280},{-2,280}}, color={0,0,127}));
        connect(DEG[2], add.u1) annotation (Line(points={{-220,290},{-202,290},
                {-202,256},{-182,256}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-200,
                  -200},{200,200}}),
                               graphics={Rectangle(
                extent={{-200,200},{200,-200}},
                lineColor={0,0,0},
                fillColor={210,210,210},
                fillPattern=FillPattern.Solid,
                borderPattern=BorderPattern.Raised), Text(
                extent={{-160,160},{160,-160}},
                lineColor={28,108,200},
                fillColor={210,210,210},
                fillPattern=FillPattern.Solid,
                textString="I/O HPSHC

I/O GF1

I/O GF2")}),                               Diagram(coordinateSystem(
                preserveAspectRatio=false, extent={{-200,-200},{200,200}})),
          Documentation(info="<html>
<h4><span style=\"color: #000000\">HPSHC modes</span></h4>
<p>For the HPSHC, 4 possible modes :</p>
<p>0 - Off</p>
<p>1 - Cold mode</p>
<p>2 - HPSHC full</p>
<p>3 - HPSHC 1/2</p>
</html>"));
      end DEG_controls_parallel;

      model DEC_controls_simple
        inner Modelica.StateGraph.StateGraphRoot stateGraphRoot
          annotation (Placement(transformation(extent={{140,180},{160,200}})));
          parameter Real ft_tfp_set = 211/3.6;
          parameter Real ft_cha_set = 200/3.6;
        Modelica.StateGraph.TransitionWithSignal transitionWithSignal
          annotation (Placement(transformation(extent={{-20,-220},{0,-200}})));
        Modelica.Blocks.Interfaces.RealInput DEC[3] "FT, TT, FT bypass"
          annotation (Placement(transformation(extent={{-240,90},{-200,130}})));
        Modelica.StateGraph.StepWithSignal HPSHC1_start(nIn=3, nOut=1)
          annotation (Placement(transformation(extent={{20,-220},{40,-200}})));
        Modelica.StateGraph.Transition HPSHC_start_buffer(enableTimer=true, waitTime=2)
          annotation (Placement(transformation(extent={{60,-220},{80,-200}})));
        Modelica.StateGraph.StepWithSignal HPSHC1_on(nIn=2, nOut=3)
          annotation (Placement(transformation(extent={{100,-220},{120,-200}})));
        Modelica.StateGraph.TransitionWithSignal Temp_solo
          annotation (Placement(transformation(extent={{140,-160},{160,-140}})));
        Modelica.StateGraph.TransitionWithSignal HPSHC_turnoff
          annotation (Placement(transformation(extent={{140,-220},{160,-200}})));
        Modelica.StateGraph.TransitionWithSignal CHA_need
          annotation (Placement(transformation(extent={{140,-380},{160,-360}})));
        WaitBefore waitBefore(
          t_threshold=150,
          threshold=0.1,
          superior=true)
          annotation (Placement(transformation(extent={{-80,140},{-60,160}})));
        WaitBefore waitBefore1(t_threshold=2,
          threshold=53.5 + 273.15,            superior=true)
          annotation (Placement(transformation(extent={{40,-180},{60,-160}})));
        Modelica.StateGraph.StepWithSignal HPSHC_solo_switch
          annotation (Placement(transformation(extent={{180,-160},{200,-140}})));
        Modelica.StateGraph.Transition HPSHC_solo_buffer(enableTimer=true, waitTime=2)
          annotation (Placement(transformation(extent={{220,-160},{240,-140}})));
        Modelica.StateGraph.StepWithSignal HPSHC_solo(nOut=2)
          annotation (Placement(transformation(extent={{260,-160},{280,-140}})));
        Modelica.StateGraph.TransitionWithSignal temp_duo
          annotation (Placement(transformation(extent={{300,-120},{320,-100}})));
        Modelica.StateGraph.TransitionWithSignal HPSHC_solo_off
          annotation (Placement(transformation(extent={{300,-180},{320,-160}})));
        WaitBefore waitBefore2(t_threshold=2,
          threshold=53.5,                     superior=false) annotation (
            Placement(transformation(extent={{200,-120},{220,-100}})));
        Modelica.Blocks.Logical.GreaterEqual greaterEqualThreshold
          annotation (Placement(transformation(extent={{-40,40},{-20,60}})));
        Modelica.StateGraph.InitialStepWithSignal initialStepWithSignal
          annotation (Placement(transformation(extent={{-60,-220},{-40,-200}})));
        Modelica.StateGraph.Step HPSHC_off(nIn=2, nOut=1)
          annotation (Placement(transformation(extent={{340,-220},{360,-200}})));
        Modelica.StateGraph.Transition HPSHC_off_buffer(enableTimer=true, waitTime=2)
          annotation (Placement(transformation(extent={{380,-220},{400,-200}})));
        Modelica.StateGraph.StepWithSignal HPSHC_cooling(nIn=1, nOut=2)
          annotation (Placement(transformation(extent={{180,-240},{200,-220}})));
        Modelica.StateGraph.Transition HPSC_turnoff_buffer(enableTimer=true, waitTime=
             2) annotation (Placement(transformation(extent={{300,-240},{320,-220}})));
        Modelica.StateGraph.TransitionWithSignal transitionWithSignal7
          annotation (Placement(transformation(extent={{300,-300},{320,-280}})));
        Modelica.StateGraph.StepWithSignal CHA_start(nIn=1, nOut=1)
          annotation (Placement(transformation(extent={{220,-360},{240,-340}})));
        Modelica.StateGraph.Transition CHA_start_buffer(enableTimer=true, waitTime=2)
          annotation (Placement(transformation(extent={{260,-360},{280,-340}})));
        Modelica.StateGraph.StepWithSignal CHA_on(nOut=1)
          annotation (Placement(transformation(extent={{300,-360},{320,-340}})));
        Modelica.Blocks.Logical.GreaterEqual greaterEqualThreshold1
          annotation (Placement(transformation(extent={{-20,-10},{0,10}})));
        Modelica.StateGraph.TransitionWithSignal CHA_turnoff
          annotation (Placement(transformation(extent={{340,-360},{360,-340}})));
        Modelica.StateGraph.Step CHA_off(nIn=1, nOut=1)
          annotation (Placement(transformation(extent={{380,-360},{400,-340}})));
        Modelica.StateGraph.Transition CHA_off_buffer(enableTimer=true, waitTime=2)
          annotation (Placement(transformation(extent={{460,-380},{480,-360}})));

        Modelica.StateGraph.Parallel parallel
          annotation (Placement(transformation(extent={{174,-400},{448,-340}})));
        Modelica.StateGraph.StepWithSignal HPSHC1_on1(nIn=1, nOut=1)
          annotation (Placement(transformation(extent={{300,-400},{320,-380}})));
        Modelica.Blocks.MathBoolean.Or HPSC_boo(nu=3)
          annotation (Placement(transformation(extent={{22,-302},{42,-282}})));
        Modelica.Blocks.Logical.Or HPSC_solo_boo
          annotation (Placement(transformation(extent={{220,-200},{240,-180}})));
        Modelica.Blocks.MathInteger.MultiSwitch HPSHC_exit(
          expr={1,2,3},
          use_pre_as_default=false,
          nu=3) annotation (Placement(transformation(extent={{440,20},{480,40}})));
        Modelica.Blocks.Interfaces.IntegerOutput HPSHC annotation (Placement(
              transformation(extent={{200,150},{240,190}}), iconTransformation(
                extent={{200,150},{240,190}})));
        Modelica.Blocks.MathBoolean.Or CHA_boo(nu=2)
          annotation (Placement(transformation(extent={{320,-482},{340,-462}})));
        Modelica.Blocks.Interfaces.BooleanOutput CHA annotation (Placement(
              transformation(extent={{200,50},{240,90}}),     iconTransformation(
                extent={{200,50},{240,90}})));
        Modelica.Blocks.Sources.RealExpression tfp(y=ft_tfp_set)
          annotation (Placement(transformation(extent={{-200,20},{-180,40}})));
        Modelica.Blocks.Sources.RealExpression cha(y=ft_cha_set)
          annotation (Placement(transformation(extent={{-200,-30},{-180,-10}})));
        DE_PE.add_m_flow_hot
                       add_m_flow1(hspc_set=ft_tfp_set, cha_set=ft_cha_set)
          annotation (Placement(transformation(extent={{160,-10},{180,10}})));
          Modelica.Blocks.Interfaces.RealOutput m_flow annotation (Placement(
                transformation(extent={{200,-20},{240,20}}), iconTransformation(
                  extent={{200,-20},{240,20}})));
        Modelica.Blocks.Interfaces.RealInput SST annotation (Placement(transformation(
                extent={{-240,160},{-200,200}}), iconTransformation(extent={{-240,0},{
                  -200,40}})));
        Modelica.Blocks.Math.Add add1(k1=+1, k2=-1)
          annotation (Placement(transformation(extent={{-160,150},{-140,170}})));
        WaitBefore_temp                                                 waitBefore3(
            t_threshold=2, superior=true)
          annotation (Placement(transformation(extent={{-20,180},{0,200}})));
      equation
        connect(transitionWithSignal.outPort, HPSHC1_start.inPort[1]) annotation (
            Line(points={{-8.5,-210},{6,-210},{6,-209.333},{19,-209.333}},
              color={0,0,0}));
        connect(HPSHC1_start.outPort[1], HPSHC_start_buffer.inPort)
          annotation (Line(points={{40.5,-210},{66,-210}},  color={0,0,0}));
        connect(HPSHC_start_buffer.outPort, HPSHC1_on.inPort[1]) annotation (Line(
              points={{71.5,-210},{86,-210},{86,-209.5},{99,-209.5}}, color={0,0,0}));
        connect(HPSHC1_on.outPort[1], Temp_solo.inPort) annotation (Line(points={{120.5,
                -209.667},{130,-209.667},{130,-150},{146,-150}},
                                                               color={0,0,0}));
        connect(HPSHC1_on.outPort[2], HPSHC_turnoff.inPort)
          annotation (Line(points={{120.5,-210},{146,-210}},
                                                           color={0,0,0}));
        connect(HPSHC1_on.outPort[3], CHA_need.inPort) annotation (Line(points={{120.5,
                -210.333},{130,-210.333},{130,-370},{146,-370}}, color={0,0,0}));
        connect(waitBefore1.y, Temp_solo.condition) annotation (Line(points={{61,-170},
                {150,-170},{150,-162}},
                                      color={255,0,255}));
        connect(Temp_solo.outPort, HPSHC_solo_switch.inPort[1])
          annotation (Line(points={{151.5,-150},{179,-150}},
                                                         color={0,0,0}));
        connect(HPSHC_solo_switch.outPort[1], HPSHC_solo_buffer.inPort)
          annotation (Line(points={{200.5,-150},{226,-150}},
                                                         color={0,0,0}));
        connect(HPSHC_solo_buffer.outPort, HPSHC_solo.inPort[1])
          annotation (Line(points={{231.5,-150},{259,-150}},
                                                         color={0,0,0}));
        connect(HPSHC_solo.outPort[1], temp_duo.inPort) annotation (Line(points={{280.5,
                -149.75},{292,-149.75},{292,-110},{306,-110}},
                                                       color={0,0,0}));
        connect(HPSHC_solo.outPort[2], HPSHC_solo_off.inPort) annotation (Line(points={{280.5,
                -150.25},{292,-150.25},{292,-170},{306,-170}},    color={0,0,0}));
        connect(waitBefore2.y, temp_duo.condition) annotation (Line(points={{221,-110},
                {280,-110},{280,-130},{310,-130},{310,-122}},
                                                 color={255,0,255}));
        connect(temp_duo.outPort, HPSHC1_start.inPort[2]) annotation (Line(points={{311.5,
                -110},{340,-110},{340,-80},{8,-80},{8,-210},{19,-210}}, color={0,0,0}));
        connect(greaterEqualThreshold.y, HPSHC_solo_off.condition) annotation (Line(
              points={{-19,50},{288,50},{288,-200},{310,-200},{310,-182}}, color={255,
                0,255}));
        connect(greaterEqualThreshold.y, HPSHC_turnoff.condition) annotation (Line(
              points={{-19,50},{140,50},{140,-240},{150,-240},{150,-222}},   color={255,
                0,255}));
        connect(initialStepWithSignal.outPort[1], transitionWithSignal.inPort)
          annotation (Line(points={{-39.5,-210},{-14,-210}}, color={0,0,0}));
        connect(HPSHC_solo_off.outPort, HPSHC_off.inPort[2]) annotation (Line(points={{311.5,
                -170},{326,-170},{326,-210.5},{339,-210.5}},    color={0,0,0}));
        connect(HPSHC_off.outPort[1], HPSHC_off_buffer.inPort)
          annotation (Line(points={{360.5,-210},{386,-210}},
                                                           color={0,0,0}));
        connect(HPSHC_off_buffer.outPort, initialStepWithSignal.inPort[1])
          annotation (Line(points={{391.5,-210},{420,-210},{420,-60},{-80,-60},{-80,-210},
                {-61,-210}}, color={0,0,0}));
        connect(HPSHC_turnoff.outPort, HPSHC_cooling.inPort[1]) annotation (Line(
              points={{151.5,-210},{164,-210},{164,-230},{179,-230}},
                                                            color={0,0,0}));
        connect(HPSHC_cooling.outPort[1], HPSC_turnoff_buffer.inPort) annotation (
            Line(points={{200.5,-229.75},{254,-229.75},{254,-230},{306,-230}},
                                                                        color={0,0,0}));
        connect(HPSC_turnoff_buffer.outPort, HPSHC_off.inPort[1]) annotation (Line(
              points={{311.5,-230},{326,-230},{326,-209.5},{339,-209.5}},
                                                                      color={0,0,0}));
        connect(HPSHC_cooling.outPort[2], transitionWithSignal7.inPort) annotation (
            Line(points={{200.5,-230.25},{254,-230.25},{254,-290},{306,-290}},
                                                                            color={0,0,
                0}));
        connect(transitionWithSignal7.outPort, HPSHC1_start.inPort[3]) annotation (
            Line(points={{311.5,-290},{460,-290},{460,-66},{12,-66},{12,-210},{
                14,-210},{14,-210.667},{19,-210.667}},
                                  color={0,0,0}));
        connect(CHA_off_buffer.outPort, HPSHC1_on.inPort[2]) annotation (Line(points={{471.5,
                -370},{508,-370},{508,-70},{90,-70},{90,-210.5},{99,-210.5}},
              color={0,0,0}));
        connect(greaterEqualThreshold1.y, CHA_turnoff.condition) annotation (Line(
              points={{1,0},{10,0},{10,-40},{-140,-40},{-140,-440},{350,-440},{350,-362}},
                             color={255,0,255}));
        connect(CHA_start.inPort[1], parallel.split[1]) annotation (Line(points={{219,
                -350},{208,-350},{208,-370},{204.825,-370}},
                                                    color={0,0,0}));
        connect(HPSHC1_on1.inPort[1], parallel.split[2]) annotation (Line(points={{299,
                -390},{204,-390},{204,-370},{204.825,-370}},
                                                          color={0,0,0}));
        connect(CHA_off.outPort[1], parallel.join[1]) annotation (Line(points={{400.5,
                -350},{416,-350},{416,-370},{417.175,-370}}, color={0,0,0}));
        connect(HPSHC1_on1.outPort[1], parallel.join[2]) annotation (Line(points={{320.5,
                -390},{416,-390},{416,-370},{417.175,-370}}, color={0,0,0}));
        connect(CHA_need.outPort, parallel.inPort)
          annotation (Line(points={{151.5,-370},{169.89,-370}},
                                                             color={0,0,0}));
        connect(parallel.outPort, CHA_off_buffer.inPort)
          annotation (Line(points={{450.74,-370},{466,-370}}, color={0,0,0}));
        connect(CHA_start.outPort[1], CHA_start_buffer.inPort)
          annotation (Line(points={{240.5,-350},{266,-350}},color={0,0,0}));
        connect(CHA_start_buffer.outPort, CHA_on.inPort[1]) annotation (Line(points={{271.5,
                -350},{299,-350}},                             color={0,0,0}));
        connect(CHA_on.outPort[1], CHA_turnoff.inPort) annotation (Line(points={{320.5,
                -350},{346,-350}},                       color={0,0,0}));
        connect(CHA_turnoff.outPort, CHA_off.inPort[1]) annotation (Line(points={{351.5,
                -350},{379,-350}},                       color={0,0,0}));
        connect(HPSHC1_start.active, HPSC_boo.u[1]) annotation (Line(points={{30,-221},
                {30,-250},{8,-250},{8,-287.333},{22,-287.333}},         color={255,0,255}));
        connect(HPSHC1_on.active, HPSC_boo.u[2]) annotation (Line(points={{110,-221},{
                110,-250},{8,-250},{8,-292},{22,-292}},   color={255,0,255}));
        connect(HPSHC1_on1.active, HPSC_boo.u[3]) annotation (Line(points={{310,
                -401},{310,-410},{8,-410},{8,-294},{22,-294},{22,-296.667}},
              color={255,0,255}));
        connect(HPSHC_solo_switch.active, HPSC_solo_boo.u1)
          annotation (Line(points={{190,-161},{190,-190},{218,-190}},
                                                               color={255,0,255}));
        connect(HPSHC_solo.active, HPSC_solo_boo.u2) annotation (Line(points={{270,
                -161},{270,-172},{200,-172},{200,-198},{218,-198}},
                                                       color={255,0,255}));
        connect(HPSC_solo_boo.y, HPSHC_exit.u[3]) annotation (Line(points={{241,
                -190},{400,-190},{400,28},{440,28}},
                                           color={255,0,255}));
        connect(HPSC_boo.y, HPSHC_exit.u[2]) annotation (Line(points={{43.5,-292},{220,
                -292},{220,-260},{430,-260},{430,30},{440,30}},  color={255,0,255}));
        connect(HPSHC_cooling.active, HPSHC_exit.u[1]) annotation (Line(points={{190,-241},
                {190,-260},{430,-260},{430,28.5},{440,28.5},{440,32}},   color={255,0,
                255}));
        connect(CHA_on.active, CHA_boo.u[1]) annotation (Line(points={{310,-361},{310,
                -370},{280,-370},{280,-468.5},{320,-468.5}},      color={255,0,
                255}));
        connect(CHA_start.active, CHA_boo.u[2]) annotation (Line(points={{230,-361},{230,
                -475.5},{320,-475.5}},     color={255,0,255}));
        connect(HPSHC_exit.y, HPSHC) annotation (Line(points={{481,30},{500,30},{500,120},
                {180,120},{180,170},{220,170}},           color={255,127,0}));
        connect(CHA_boo.y, CHA) annotation (Line(points={{341.5,-472},{520,-472},{520,
                100},{180,100},{180,70},{220,70}},
                                        color={255,0,255}));
        connect(DEC[2], waitBefore2.u) annotation (Line(points={{-220,110},{108,
                110},{108,-110},{198,-110}},
                                       color={0,0,127}));
        connect(DEC[2], waitBefore1.u) annotation (Line(points={{-220,110},{28,
                110},{28,-170},{38,-170}},
                                  color={0,0,127}));
        connect(tfp.y, greaterEqualThreshold.u2) annotation (Line(points={{-179,30},{-60,
                30},{-60,42},{-42,42}}, color={0,0,127}));
        connect(cha.y, greaterEqualThreshold1.u2) annotation (Line(points={{-179,-20},
                {-32,-20},{-32,-8},{-22,-8}}, color={0,0,127}));
        connect(HPSHC_exit.y, add_m_flow1.u1) annotation (Line(points={{481,30},{490,30},
                {490,50},{340,50},{340,30},{150,30},{150,5},{158,5}}, color={255,127,0}));
        connect(CHA_boo.y, add_m_flow1.u) annotation (Line(points={{341.5,-472},{520,-472},
                {520,-20},{150,-20},{150,-5},{158,-5}}, color={255,0,255}));
        connect(add_m_flow1.y, m_flow)
          annotation (Line(points={{181,0},{220,0}}, color={0,0,127}));
        connect(DEC[1], add1.u2) annotation (Line(points={{-220,96.6667},{-180,
                96.6667},{-180,154},{-162,154}},
                                  color={0,0,127}));
        connect(SST, add1.u1) annotation (Line(points={{-220,180},{-180,180},{-180,166},
                {-162,166}}, color={0,0,127}));
        connect(add1.y, waitBefore.u) annotation (Line(points={{-139,160},{-110.5,160},
                {-110.5,150},{-82,150}}, color={0,0,127}));
        connect(waitBefore.y, transitionWithSignal.condition) annotation (Line(points=
               {{-59,150},{40,150},{40,-120},{-100,-120},{-100,-240},{-10,-240},{-10,-222}},
              color={255,0,255}));
        connect(DEC[1], waitBefore3.u) annotation (Line(points={{-220,96.6667},
                {-10,96.6667},{-10,178}},
                           color={0,0,127}));
        connect(add_m_flow1.y, waitBefore3.threshold) annotation (Line(points={{181,0},
                {190,0},{190,60},{140,60},{140,160},{100,160},{100,220},{-44,
                220},{-44,190},{-22,190}},
                            color={0,0,127}));
        connect(waitBefore3.y, CHA_need.condition) annotation (Line(points={{1,190},{60,
                190},{60,-100},{-120,-100},{-120,-392},{150,-392},{150,-382}}, color={
                255,0,255}));
        connect(waitBefore3.y, transitionWithSignal7.condition) annotation (Line(
              points={{1,190},{60,190},{60,-100},{-120,-100},{-120,-310},{310,-310},{310,
                -302}}, color={255,0,255}));
        connect(DEC[3], greaterEqualThreshold.u1) annotation (Line(points={{
                -220,123.333},{-120,123.333},{-120,50},{-42,50}}, color={0,0,
                127}));
        connect(DEC[3], greaterEqualThreshold1.u1) annotation (Line(points={{
                -220,123.333},{-120,123.333},{-120,0},{-22,0}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-200,-200},
                  {200,200}}), graphics={
              Rectangle(
                extent={{-200,200},{200,-200}},
                lineColor={0,0,0},
                fillColor={210,210,210},
                fillPattern=FillPattern.Solid,
                borderPattern=BorderPattern.Raised), Text(
                extent={{-160,180},{160,-160}},
                lineColor={238,46,47},
                fillColor={210,210,210},
                fillPattern=FillPattern.Solid,
                textString="I/O HPSHC

I/O CHA")}),                               Diagram(coordinateSystem(
                preserveAspectRatio=false, extent={{-200,-200},{200,200}})),
          Documentation(info="<html>
<h4><span style=\"color: #000000\">HPSHC modes</span></h4>
<p>For the HPSHC, 4 possible modes :</p>
<p>0 - Off</p>
<p>1 - Cold mode</p>
<p>2 - HPSHC full</p>
<p>3 - HPSHC 1/2</p>
</html>"));
      end DEC_controls_simple;

      model DEG_controls_simple

        parameter Real gf1_set = 500/3.6;
      parameter Real gf2_set = 500/3.6;
      parameter Real tfp_set = 332/3.6;
        Modelica.Blocks.Interfaces.RealInput DEG[2] "FT" annotation (Placement(
              transformation(extent={{-240,240},{-200,280}}), iconTransformation(
                extent={{-240,120},{-200,160}})));

        inner Modelica.StateGraph.StateGraphRoot stateGraphRoot
          annotation (Placement(transformation(extent={{300,300},{320,320}})));
        Modelica.StateGraph.TransitionWithSignal transitionWithSignal
          annotation (Placement(transformation(extent={{-220,-20},{-200,0}})));
        Modelica.StateGraph.StepWithSignal GF1_start(nIn=1, nOut=1)
          annotation (Placement(transformation(extent={{-180,-20},{-160,0}})));
        Modelica.StateGraph.Transition GF1_start_buffer(enableTimer=true, waitTime=
             300)
          annotation (Placement(transformation(extent={{-140,-20},{-120,0}})));
        Modelica.StateGraph.StepWithSignal GF1_on(nIn=2, nOut=2)
          annotation (Placement(transformation(extent={{-100,-20},{-80,0}})));
        Modelica.StateGraph.TransitionWithSignal GF1_stop
          annotation (Placement(transformation(extent={{-60,20},{-40,40}})));
        WaitBefore waitBefore(
          t_threshold=150,
          threshold=0.1,
          superior=true)
          annotation (Placement(transformation(extent={{0,270},{20,290}})));
        Modelica.StateGraph.InitialStep initialStep
          annotation (Placement(transformation(extent={{-260,-20},{-240,0}})));

        Modelica.Blocks.Logical.Or GF1_active
          annotation (Placement(transformation(extent={{-60,-220},{-40,-200}})));
        Modelica.Blocks.MathInteger.MultiSwitch HPSHC_exit(
          expr={1},
          use_pre_as_default=false,
          nu=1) annotation (Placement(transformation(extent={{140,230},{180,250}})));
        Modelica.Blocks.Interfaces.IntegerOutput HPSHC annotation (Placement(
              transformation(extent={{200,160},{240,200}}), iconTransformation(
                extent={{200,160},{240,200}})));
        Modelica.Blocks.Interfaces.BooleanOutput GF2 annotation (Placement(
              transformation(extent={{200,0},{240,40}}),      iconTransformation(
                extent={{200,0},{240,40}})));

        Modelica.Blocks.Logical.GreaterEqual greaterEqual
          annotation (Placement(transformation(extent={{0,240},{20,260}})));
        Modelica.Blocks.Logical.GreaterEqual greaterEqual1
          annotation (Placement(transformation(extent={{0,200},{20,220}})));
        Modelica.Blocks.Logical.GreaterEqual greaterEqual2
          annotation (Placement(transformation(extent={{0,160},{20,180}})));
        Modelica.StateGraph.Step GF1_stopping
          annotation (Placement(transformation(extent={{-20,20},{0,40}})));
        Modelica.StateGraph.Transition GF1_stop_buffer(enableTimer=true, waitTime=
             150)
          annotation (Placement(transformation(extent={{20,20},{40,40}})));
        Modelica.StateGraph.TransitionWithSignal GF2_need
          annotation (Placement(transformation(extent={{-60,-60},{-40,-40}})));
        Modelica.StateGraph.StepWithSignal GF2_start(nIn=1, nOut=1)
          annotation (Placement(transformation(extent={{-20,-60},{0,-40}})));
        Modelica.StateGraph.Transition GF1_start_buffer1(enableTimer=true, waitTime=
             300)
          annotation (Placement(transformation(extent={{20,-60},{40,-40}})));
        Modelica.StateGraph.StepWithSignal GF2_on(nIn=2, nOut=2)
          annotation (Placement(transformation(extent={{60,-60},{80,-40}})));
        Modelica.StateGraph.TransitionWithSignal GF2_stop
          annotation (Placement(transformation(extent={{100,-20},{120,0}})));
        Modelica.StateGraph.TransitionWithSignal TFP_need
          annotation (Placement(transformation(extent={{100,-100},{120,-80}})));
        Modelica.StateGraph.StepWithSignal TFP_start(nIn=1, nOut=1)
          annotation (Placement(transformation(extent={{140,-100},{160,-80}})));
        Modelica.StateGraph.Transition TFP_start_buffer(enableTimer=true, waitTime=
             300)
          annotation (Placement(transformation(extent={{180,-100},{200,-80}})));
        Modelica.StateGraph.StepWithSignal TFP_on(nIn=1, nOut=1)
          annotation (Placement(transformation(extent={{220,-100},{240,-80}})));
        Modelica.Blocks.Interfaces.BooleanOutput GF1 annotation (Placement(
              transformation(extent={{200,120},{240,160}}),   iconTransformation(
                extent={{200,80},{240,120}})));
        Modelica.StateGraph.Transition GF2_stop_buffer(enableTimer=true, waitTime=
             150)
          annotation (Placement(transformation(extent={{180,-20},{200,0}})));
        Modelica.StateGraph.Step GF2_stopping
          annotation (Placement(transformation(extent={{140,-20},{160,0}})));
        Modelica.Blocks.Logical.Or GF2_active
          annotation (Placement(transformation(extent={{100,-290},{120,-270}})));
        Modelica.StateGraph.TransitionWithSignal TFP_stop
          annotation (Placement(transformation(extent={{260,-100},{280,-80}})));
        Modelica.StateGraph.Step TFP_stopping
          annotation (Placement(transformation(extent={{300,-100},{320,-80}})));
        Modelica.StateGraph.Transition TFP_stop_buffer(enableTimer=true, waitTime=
             150)
          annotation (Placement(transformation(extent={{340,-100},{360,-80}})));
        Modelica.Blocks.Interfaces.IntegerInput TFP_DEC
          annotation (Placement(transformation(extent={{-240,-180},{-200,-140}})));
        Controls.OBC.CDL.Integers.LessThreshold intLesThr(t=1)
          annotation (Placement(transformation(extent={{-180,-170},{-160,-150}})));
        Controls.OBC.CDL.Logical.And and2
          annotation (Placement(transformation(extent={{-140,-140},{-120,-120}})));
        Controls.OBC.CDL.Logical.Or or2
          annotation (Placement(transformation(extent={{240,-160},{260,-140}})));
        Controls.OBC.CDL.Integers.GreaterEqualThreshold intGreEquThr(t=1)
          annotation (Placement(transformation(extent={{-180,-220},{-160,-200}})));
        Modelica.Blocks.Logical.Or TFP_active
          annotation (Placement(transformation(extent={{200,-190},{220,-170}})));
        Controls.OBC.CDL.Integers.Max maxInt
          annotation (Placement(transformation(extent={{220,240},{240,260}})));
        Modelica.Blocks.Interfaces.RealInput SST annotation (Placement(transformation(
                extent={{-240,280},{-200,320}}), iconTransformation(extent={{-240,0},{
                  -200,40}})));
        Modelica.Blocks.Math.Add add3(k1=+1, k2=-1)
          annotation (Placement(transformation(extent={{-180,280},{-160,300}})));
        Modelica.Blocks.Sources.RealExpression FT_GF1(y=gf1_set)
          annotation (Placement(transformation(extent={{-220,220},{-200,240}})));
        Modelica.Blocks.Sources.RealExpression FT_GF2(y=gf2_set)
          annotation (Placement(transformation(extent={{-220,180},{-200,200}})));
        Modelica.Blocks.Sources.RealExpression FT_TFP(y=tfp_set)
          annotation (Placement(transformation(extent={{-220,140},{-200,160}})));
          Modelica.Blocks.Interfaces.RealOutput m_flow annotation (Placement(
                transformation(extent={{360,230},{400,270}}),iconTransformation(
                  extent={{200,-80},{240,-40}})));
        WaitBefore_temp                                                 waitBefore1(
            t_threshold=2, superior=true)
          annotation (Placement(transformation(extent={{-40,300},{-20,320}})));
        DE_PE.add_m_flow_cold_complete add_m_flow_cold_complete(gf_set=gf1_set,
            hspc_set=tfp_set)
          annotation (Placement(transformation(extent={{300,240},{320,260}})));
      equation
        connect(initialStep.outPort[1], transitionWithSignal.inPort)
          annotation (Line(points={{-239.5,-10},{-214,-10}}, color={0,0,0}));
        connect(GF1_start.outPort[1], GF1_start_buffer.inPort)
          annotation (Line(points={{-159.5,-10},{-134,-10}}, color={0,0,0}));
        connect(GF1_start_buffer.outPort, GF1_on.inPort[1]) annotation (Line(points={{
                -128.5,-10},{-114,-10},{-114,-9.5},{-101,-9.5}}, color={0,0,0}));
        connect(waitBefore.y, transitionWithSignal.condition) annotation (Line(points={{21,280},
                {60,280},{60,100},{-300,100},{-300,-40},{-210,-40},{-210,-22}},
              color={255,0,255}));
        connect(GF1_on.outPort[1], GF1_stop.inPort) annotation (Line(points={{-79.5,-9.75},
                {-66,-9.75},{-66,30},{-54,30}}, color={0,0,0}));
        connect(greaterEqual.y, GF1_stop.condition) annotation (Line(points={{21,250},
                {40,250},{40,88},{-100,88},{-100,8},{-50,8},{-50,18}},   color={255,0,
                255}));
        connect(GF1_stop.outPort, GF1_stopping.inPort[1])
          annotation (Line(points={{-48.5,30},{-21,30}}, color={0,0,0}));
        connect(GF1_stopping.outPort[1], GF1_stop_buffer.inPort)
          annotation (Line(points={{0.5,30},{26,30}}, color={0,0,0}));
        connect(GF1_stop_buffer.outPort, initialStep.inPort[1]) annotation (Line(
              points={{31.5,30},{80,30},{80,72},{-280,72},{-280,-10},{-261,-10}},
              color={0,0,0}));
        connect(GF1_on.outPort[2], GF2_need.inPort) annotation (Line(points={{-79.5,-10.25},
                {-66,-10.25},{-66,-50},{-54,-50}}, color={0,0,0}));
        connect(GF2_start.outPort[1], GF1_start_buffer1.inPort)
          annotation (Line(points={{0.5,-50},{26,-50}}, color={0,0,0}));
        connect(GF1_start_buffer1.outPort, GF2_on.inPort[1]) annotation (Line(points={
                {31.5,-50},{46,-50},{46,-49.5},{59,-49.5}}, color={0,0,0}));
        connect(GF2_need.outPort, GF2_start.inPort[1])
          annotation (Line(points={{-48.5,-50},{-21,-50}}, color={0,0,0}));
        connect(GF2_on.outPort[1], GF2_stop.inPort) annotation (Line(points={{80.5,-49.75},
                {80.5,-50},{94,-50},{94,-10},{106,-10}}, color={0,0,0}));
        connect(GF2_on.outPort[2], TFP_need.inPort) annotation (Line(points={{80.5,-50.25},
                {94,-50.25},{94,-90},{106,-90}}, color={0,0,0}));
        connect(TFP_start.outPort[1], TFP_start_buffer.inPort)
          annotation (Line(points={{160.5,-90},{186,-90}}, color={0,0,0}));
        connect(TFP_start_buffer.outPort, TFP_on.inPort[1])
          annotation (Line(points={{191.5,-90},{219,-90}}, color={0,0,0}));
        connect(TFP_start.inPort[1], TFP_need.outPort)
          annotation (Line(points={{139,-90},{111.5,-90}}, color={0,0,0}));
        connect(GF2_stop.outPort, GF2_stopping.inPort[1]) annotation (Line(points={{111.5,
                -10},{124,-10},{124,-10},{139,-10}}, color={0,0,0}));
        connect(GF2_stopping.outPort[1], GF2_stop_buffer.inPort)
          annotation (Line(points={{160.5,-10},{186,-10}}, color={0,0,0}));
        connect(transitionWithSignal.outPort, GF1_start.inPort[1]) annotation (Line(
              points={{-208.5,-10},{-194,-10},{-194,-10},{-181,-10}}, color={0,0,0}));
        connect(GF1_start.active, GF1_active.u1) annotation (Line(points={{-170,
                -21},{-170,-88},{-100,-88},{-100,-210},{-62,-210}},
                                        color={255,0,255}));
        connect(GF1_on.active, GF1_active.u2) annotation (Line(points={{-90,-21},{-90,
                -218},{-62,-218}}, color={255,0,255}));
        connect(GF1_active.y, GF1)
          annotation (Line(points={{-39,-210},{190,-210},{190,-208},{420,-208},
                {420,120},{180,120},{180,140},{220,140}},  color={255,0,255}));
        connect(GF2_active.y, GF2) annotation (Line(points={{121,-280},{440,
                -280},{440,80},{180,80},{180,20},{220,20}},
                                   color={255,0,255}));
        connect(GF2_stop_buffer.outPort, GF1_on.inPort[2]) annotation (Line(points={{191.5,
                -10},{220,-10},{220,60},{-108,60},{-108,-10.5},{-101,-10.5}}, color={0,
                0,0}));
        connect(TFP_on.outPort[1], TFP_stop.inPort) annotation (Line(points={{240.5,-90},
                {254,-90},{254,-90},{266,-90}}, color={0,0,0}));
        connect(greaterEqual1.y, GF2_stop.condition) annotation (Line(points={{21,210},
                {88,210},{88,-40},{110,-40},{110,-22}}, color={255,0,255}));
        connect(TFP_stop.outPort, TFP_stopping.inPort[1])
          annotation (Line(points={{271.5,-90},{299,-90}}, color={0,0,0}));
        connect(TFP_stopping.outPort[1], TFP_stop_buffer.inPort)
          annotation (Line(points={{320.5,-90},{346,-90}}, color={0,0,0}));
        connect(TFP_stop_buffer.outPort, GF2_on.inPort[2]) annotation (Line(points={{351.5,
                -90},{380,-90},{380,20},{50,20},{50,-50.5},{59,-50.5}}, color={0,0,0}));
        connect(GF2_start.active, GF2_active.u1) annotation (Line(points={{-10,-61},{-10,
                -280},{98,-280}}, color={255,0,255}));
        connect(GF2_on.active, GF2_active.u2) annotation (Line(points={{70,-61},{70,-288},
                {98,-288}}, color={255,0,255}));
        connect(TFP_DEC, intLesThr.u)
          annotation (Line(points={{-220,-160},{-182,-160}}, color={255,127,0}));
        connect(intLesThr.y, and2.u2) annotation (Line(points={{-158,-160},{
                -152,-160},{-152,-138},{-142,-138}},
                                          color={255,0,255}));
        connect(and2.y, TFP_need.condition) annotation (Line(points={{-118,-130},
                {110,-130},{110,-102}},
                                   color={255,0,255}));
        connect(greaterEqual2.y, or2.u1) annotation (Line(points={{21,170},{100,
                170},{100,70},{250,70},{250,-128},{228,-128},{228,-150},{238,
                -150}},                                       color={255,0,255}));
        connect(TFP_DEC, intGreEquThr.u) annotation (Line(points={{-220,-160},{
                -190,-160},{-190,-210},{-182,-210}},
                                          color={255,127,0}));
        connect(intGreEquThr.y, or2.u2) annotation (Line(points={{-158,-210},{
                -120,-210},{-120,-158},{238,-158}},
                                         color={255,0,255}));
        connect(or2.y, TFP_stop.condition) annotation (Line(points={{262,-150},{270,-150},
                {270,-102}}, color={255,0,255}));
        connect(TFP_start.active, TFP_active.u2) annotation (Line(points={{150,-101},{
                150,-188},{198,-188}}, color={255,0,255}));
        connect(TFP_on.active, TFP_active.u1) annotation (Line(points={{230,-101},{230,
                -120},{180,-120},{180,-180},{198,-180}}, color={255,0,255}));
        connect(TFP_active.y, HPSHC_exit.u[1]) annotation (Line(points={{221,-180},{400,
                -180},{400,210},{120,210},{120,240},{140,240}}, color={255,0,255}));
        connect(TFP_DEC, maxInt.u1) annotation (Line(points={{-220,-160},{-190,
                -160},{-190,-240},{-320,-240},{-320,340},{200,340},{200,256},{
                218,256}},
              color={255,127,0}));
        connect(HPSHC_exit.y, maxInt.u2) annotation (Line(points={{181,240},{200,240},
                {200,244},{218,244}}, color={255,127,0}));
        connect(maxInt.y, HPSHC) annotation (Line(points={{242,250},{260,250},{260,220},
                {180,220},{180,180},{220,180}}, color={255,127,0}));
        connect(SST, add3.u1) annotation (Line(points={{-220,300},{-192,300},{-192,296},
                {-182,296}}, color={0,0,127}));
        connect(add3.y, waitBefore.u) annotation (Line(points={{-159,290},{-80,290},{-80,
                280},{-2,280}}, color={0,0,127}));
        connect(FT_GF1.y, greaterEqual.u2) annotation (Line(points={{-199,230},
                {-100,230},{-100,242},{-2,242}}, color={0,0,127}));
        connect(FT_GF2.y, greaterEqual1.u2) annotation (Line(points={{-199,190},
                {-60,190},{-60,202},{-2,202}}, color={0,0,127}));
        connect(FT_TFP.y, greaterEqual2.u2) annotation (Line(points={{-199,150},
                {-20,150},{-20,162},{-2,162}}, color={0,0,127}));
        connect(add_m_flow_cold_complete.y, m_flow) annotation (Line(points={{
                321,250},{340,250},{340,250},{380,250}}, color={0,0,127}));
        connect(add_m_flow_cold_complete.y, waitBefore1.threshold) annotation (
            Line(points={{321,250},{340,250},{340,280},{220,280},{220,330},{-50,
                330},{-50,310},{-42,310}}, color={0,0,127}));
        connect(GF1_active.y, add_m_flow_cold_complete.gf1) annotation (Line(
              points={{-39,-210},{190,-210},{190,-208},{420,-208},{420,220},{
                280,220},{280,250},{298,250}}, color={255,0,255}));
        connect(maxInt.y, add_m_flow_cold_complete.hpshc) annotation (Line(
              points={{242,250},{260,250},{260,255},{298,255}}, color={255,127,
                0}));
        connect(GF2_active.y, add_m_flow_cold_complete.gf2) annotation (Line(
              points={{121,-280},{440,-280},{440,230},{290,230},{290,245},{298,
                245}}, color={255,0,255}));
        connect(waitBefore1.y, GF2_need.condition) annotation (Line(points={{
                -19,310},{80,310},{80,80},{-310,80},{-310,-80},{-50,-80},{-50,
                -62}}, color={255,0,255}));
        connect(waitBefore1.y, and2.u1) annotation (Line(points={{-19,310},{80,
                310},{80,80},{-310,80},{-310,-130},{-142,-130}}, color={255,0,
                255}));
        connect(DEG[1], add3.u2) annotation (Line(points={{-220,250},{-136,250},
                {-136,276},{-190,276},{-190,284},{-182,284}}, color={0,0,127}));
        connect(DEG[1], waitBefore1.u) annotation (Line(points={{-220,250},{
                -136,250},{-136,270},{-30,270},{-30,298}}, color={0,0,127}));
        connect(DEG[2], greaterEqual.u1) annotation (Line(points={{-220,270},{
                -160,270},{-160,244},{-82,244},{-82,250},{-2,250}}, color={0,0,
                127}));
        connect(DEG[2], greaterEqual1.u1) annotation (Line(points={{-220,270},{
                -160,270},{-160,210},{-2,210}}, color={0,0,127}));
        connect(DEG[2], greaterEqual2.u1) annotation (Line(points={{-220,270},{
                -160,270},{-160,170},{-2,170}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-200,
                  -200},{200,200}}),
                               graphics={Rectangle(
                extent={{-200,200},{200,-200}},
                lineColor={0,0,0},
                fillColor={210,210,210},
                fillPattern=FillPattern.Solid,
                borderPattern=BorderPattern.Raised), Text(
                extent={{-160,160},{160,-160}},
                lineColor={28,108,200},
                fillColor={210,210,210},
                fillPattern=FillPattern.Solid,
                textString="I/O HPSHC

I/O GF1

I/O GF2")}),                               Diagram(coordinateSystem(
                preserveAspectRatio=false, extent={{-200,-200},{200,200}})),
          Documentation(info="<html>
<h4><span style=\"color: #000000\">HPSHC modes</span></h4>
<p>For the HPSHC, 4 possible modes :</p>
<p>0 - Off</p>
<p>1 - Cold mode</p>
<p>2 - HPSHC full</p>
<p>3 - HPSHC 1/2</p>
</html>"));
      end DEG_controls_simple;

      model PID_DEC
        Controls.Continuous.LimPID PDT_PID(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=2.5,
          Ti=1.7,
            reverseActing=false)
          annotation (Placement(transformation(extent={{0,80},{20,100}})));
        Modelica.Blocks.Math.MinMax maxi(nu=3)
          annotation (Placement(transformation(extent={{60,0},{80,20}})));
        Modelica.Blocks.Interfaces.RealInput T_ext annotation (Placement(
              transformation(
              extent={{-20,-20},{20,20}},
              rotation=0,
              origin={-120,100})));
        Modelica.Blocks.Interfaces.RealInput PDT511 annotation (Placement(
              transformation(
              extent={{-20,-20},{20,20}},
              rotation=0,
              origin={-120,60})));
        Modelica.Blocks.Interfaces.RealInput PT511 annotation (Placement(
              transformation(
              extent={{-20,-20},{20,20}},
              rotation=0,
              origin={-120,20})));
        Modelica.Blocks.Sources.RealExpression P_ref(y=1300000)
          annotation (Placement(transformation(extent={{-40,20},{-20,40}})));
          Modelica.Blocks.Interfaces.RealOutput y
            annotation (Placement(transformation(extent={{100,0},{120,20}})));
        Modelica.Blocks.Interfaces.IntegerInput HPSHC
          annotation (Placement(transformation(extent={{-140,-120},{-100,-80}})));
        Modelica.Blocks.Interfaces.RealInput TT521 annotation (Placement(
              transformation(
              extent={{-20,-20},{20,20}},
              rotation=0,
              origin={-120,-20})));
        hpshc_selec hpshc_selec1
          annotation (Placement(transformation(extent={{-80,-100},{-60,-80}})));
        Modelica.Blocks.Sources.RealExpression realExpression2(y=53.5 + 273.15)
          annotation (Placement(transformation(extent={{-80,-40},{-60,-20}})));
        Modelica.Blocks.Sources.RealExpression realExpression3(y=46 + 273.15)
          annotation (Placement(transformation(extent={{-80,-60},{-60,-40}})));
        Modelica.Blocks.Logical.Switch switch1
          annotation (Placement(transformation(extent={{-40,-60},{-20,-40}})));
        Controls.Continuous.LimPID TT_pid(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=2.5,
          Ti=1.7,
          reverseActing=false)
          annotation (Placement(transformation(extent={{0,-40},{20,-20}})));
        Controls.Continuous.LimPID PT_pid(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=2.5,
          Ti=1.7,
          reverseActing=false)
          annotation (Placement(transformation(extent={{0,20},{20,40}})));
        dp_law_hot dp_law_hot1
          annotation (Placement(transformation(extent={{-60,80},{-40,100}})));
          Modelica.Blocks.Interfaces.RealOutput dp_cons
          annotation (Placement(transformation(extent={{100,60},{120,80}})));
      equation
          connect(maxi.yMax, y) annotation (Line(points={{81,16},{92,16},{92,10},
                  {110,10}}, color={0,0,127}));
        connect(HPSHC, hpshc_selec1.u) annotation (Line(points={{-120,-100},{
                -92,-100},{-92,-90},{-82,-90}}, color={255,127,0}));
        connect(hpshc_selec1.y, switch1.u2) annotation (Line(points={{-59,-90},
                {-52,-90},{-52,-50},{-42,-50}}, color={255,0,255}));
        connect(realExpression2.y, switch1.u1) annotation (Line(points={{-59,
                -30},{-52,-30},{-52,-42},{-42,-42}}, color={0,0,127}));
        connect(realExpression3.y, switch1.u3) annotation (Line(points={{-59,
                -50},{-54,-50},{-54,-58},{-42,-58}}, color={0,0,127}));
        connect(TT521, TT_pid.u_m) annotation (Line(points={{-120,-20},{-10,-20},
                {-10,-60},{10,-60},{10,-42}}, color={0,0,127}));
        connect(switch1.y, TT_pid.u_s) annotation (Line(points={{-19,-50},{-6,
                -50},{-6,-30},{-2,-30}}, color={0,0,127}));
        connect(PT511, PT_pid.u_m) annotation (Line(points={{-120,20},{-80,20},
                {-80,0},{10,0},{10,18}}, color={0,0,127}));
        connect(P_ref.y, PT_pid.u_s)
          annotation (Line(points={{-19,30},{-2,30}}, color={0,0,127}));
        connect(T_ext, dp_law_hot1.T_ext) annotation (Line(points={{-120,100},{
                -80,100},{-80,98},{-62,98}}, color={0,0,127}));
        connect(dp_law_hot1.y,PDT_PID. u_s) annotation (Line(points={{-39,90},{
                -22,90},{-22,90},{-2,90}}, color={0,0,127}));
        connect(PDT511,PDT_PID. u_m) annotation (Line(points={{-120,60},{10,60},
                {10,78}}, color={0,0,127}));
        connect(PDT_PID.y, dp_cons) annotation (Line(points={{21,90},{62,90},{
                62,70},{110,70}}, color={0,0,127}));
        connect(PT_pid.y, maxi.u[1]) annotation (Line(points={{21,30},{50,30},{
                50,14.6667},{60,14.6667}}, color={0,0,127}));
        connect(PDT_PID.y, maxi.u[2]) annotation (Line(points={{21,90},{40,90},
                {40,10},{60,10}}, color={0,0,127}));
        connect(TT_pid.y, maxi.u[3]) annotation (Line(points={{21,-30},{40,-30},
                {40,5.33333},{60,5.33333}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                                      Rectangle(
              extent={{-100,-100},{100,100}},
              lineColor={0,0,127},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-6,-20},{66,-66}},
                lineColor={255,255,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Text(
                visible=(controllerType == Modelica.Blocks.Types.SimpleController.PI),
                extent={{-28,-22},{72,-62}},
                lineColor={0,0,0},
                textString="PI",
                fillPattern=FillPattern.Solid,
                fillColor={175,175,175}),
              Polygon(
                points={{-80,90},{-88,68},{-72,68},{-80,90}},
                lineColor={192,192,192},
                fillColor={192,192,192},
                fillPattern=FillPattern.Solid),
              Line(points={{-80,78},{-80,-90}}, color={192,192,192}),
              Line(points={{-80,-80},{-80,-20},{30,60},{80,60}}, color={0,0,127}),
              Line(points={{-90,-80},{82,-80}}, color={192,192,192}),
              Polygon(
                points={{90,-80},{68,-72},{68,-88},{90,-80}},
                lineColor={192,192,192},
                fillColor={192,192,192},
                fillPattern=FillPattern.Solid),
              Line(
                visible=strict,
                points={{30,60},{81,60}},
                color={255,0,0},
                smooth=Smooth.None)}),                                 Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end PID_DEC;

      model PID_DEG
        Controls.Continuous.LimPID PDT_PID(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=2.5,
          Ti=1.7,
            reverseActing=false)
          annotation (Placement(transformation(extent={{0,80},{20,100}})));
        Modelica.Blocks.Math.MinMax maxi(nu=3)
          annotation (Placement(transformation(extent={{60,0},{80,20}})));
        Modelica.Blocks.Interfaces.RealInput T_ext annotation (Placement(
              transformation(
              extent={{-20,-20},{20,20}},
              rotation=0,
              origin={-120,98})));
        Modelica.Blocks.Interfaces.RealInput PDT111 annotation (Placement(
              transformation(
              extent={{-20,-20},{20,20}},
              rotation=0,
              origin={-120,60})));
        Modelica.Blocks.Interfaces.RealInput PT111 annotation (Placement(
              transformation(
              extent={{-20,-20},{20,20}},
              rotation=0,
              origin={-120,0})));
        Modelica.Blocks.Sources.RealExpression P_ref(y=1300000)
          annotation (Placement(transformation(extent={{-40,20},{-20,40}})));
          Modelica.Blocks.Interfaces.RealOutput y
            annotation (Placement(transformation(extent={{100,0},{120,20}})));
        Modelica.Blocks.Interfaces.RealInput TT121 annotation (Placement(
              transformation(
              extent={{-20,-20},{20,20}},
              rotation=0,
              origin={-120,-70})));
        Modelica.Blocks.Sources.RealExpression realExpression2(y=14 + 273.15)
          annotation (Placement(transformation(extent={{-40,-40},{-20,-20}})));
        Controls.Continuous.LimPID TT_pid(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=2.5,
          Ti=1.7,
          reverseActing=false)
          annotation (Placement(transformation(extent={{0,-40},{20,-20}})));
        Controls.Continuous.LimPID PT_pid(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=2.5,
          Ti=1.7,
          reverseActing=false)
          annotation (Placement(transformation(extent={{0,20},{20,40}})));
          Modelica.Blocks.Interfaces.RealOutput dp_cons
          annotation (Placement(transformation(extent={{100,60},{120,80}})));
        dp_law_cold dp_law_cold1
          annotation (Placement(transformation(extent={{-60,80},{-40,100}})));
      equation
          connect(maxi.yMax, y) annotation (Line(points={{81,16},{92,16},{92,10},
                  {110,10}}, color={0,0,127}));
        connect(TT121, TT_pid.u_m) annotation (Line(points={{-120,-70},{10,-70},
                {10,-42}},                    color={0,0,127}));
        connect(PT111, PT_pid.u_m)
          annotation (Line(points={{-120,0},{10,0},{10,18}}, color={0,0,127}));
        connect(P_ref.y, PT_pid.u_s)
          annotation (Line(points={{-19,30},{-2,30}}, color={0,0,127}));
        connect(PDT111,PDT_PID. u_m) annotation (Line(points={{-120,60},{10,60},
                {10,78}}, color={0,0,127}));
        connect(PDT_PID.y, dp_cons) annotation (Line(points={{21,90},{62,90},{
                62,70},{110,70}}, color={0,0,127}));
        connect(PT_pid.y, maxi.u[1]) annotation (Line(points={{21,30},{40,30},{
                40,14.6667},{60,14.6667}}, color={0,0,127}));
        connect(PDT_PID.y, maxi.u[2]) annotation (Line(points={{21,90},{40,90},
                {40,10},{60,10}}, color={0,0,127}));
        connect(TT_pid.y, maxi.u[3]) annotation (Line(points={{21,-30},{40,-30},
                {40,5.33333},{60,5.33333}}, color={0,0,127}));
        connect(realExpression2.y, TT_pid.u_s)
          annotation (Line(points={{-19,-30},{-2,-30}}, color={0,0,127}));
        connect(T_ext, dp_law_cold1.T_ext)
          annotation (Line(points={{-120,98},{-62,98}}, color={0,0,127}));
        connect(dp_law_cold1.y, PDT_PID.u_s)
          annotation (Line(points={{-39,90},{-2,90}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                                      Rectangle(
              extent={{-100,-100},{100,100}},
              lineColor={0,0,127},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-6,-20},{66,-66}},
                lineColor={255,255,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Text(
                visible=(controllerType == Modelica.Blocks.Types.SimpleController.PI),
                extent={{-28,-22},{72,-62}},
                lineColor={0,0,0},
                textString="PI",
                fillPattern=FillPattern.Solid,
                fillColor={175,175,175}),
              Polygon(
                points={{-80,90},{-88,68},{-72,68},{-80,90}},
                lineColor={192,192,192},
                fillColor={192,192,192},
                fillPattern=FillPattern.Solid),
              Line(points={{-80,78},{-80,-90}}, color={192,192,192}),
              Line(points={{-80,-80},{-80,-20},{30,60},{80,60}}, color={0,0,127}),
              Line(points={{-90,-80},{82,-80}}, color={192,192,192}),
              Polygon(
                points={{90,-80},{68,-72},{68,-88},{90,-80}},
                lineColor={192,192,192},
                fillColor={192,192,192},
                fillPattern=FillPattern.Solid),
              Line(
                visible=strict,
                points={{30,60},{81,60}},
                color={255,0,0},
                smooth=Smooth.None)}),                                 Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end PID_DEG;

      model DEC_controls
        Modelica.Blocks.Interfaces.RealInput dp_DEC
          annotation (Placement(transformation(extent={{-360,280},{-320,320}})));
        Modelica.Blocks.Interfaces.RealInput FT_DEC
          annotation (Placement(transformation(extent={{-360,200},{-320,240}})));
        Modelica.Blocks.Interfaces.RealInput FT_TFP
          annotation (Placement(transformation(extent={{-360,160},{-320,200}})));
        Modelica.Blocks.Interfaces.RealInput FT_CHA
          annotation (Placement(transformation(extent={{-360,120},{-320,160}})));
        inner Modelica.StateGraph.StateGraphRoot stateGraphRoot
          annotation (Placement(transformation(extent={{300,300},{320,320}})));
        Modelica.StateGraph.TransitionWithSignal transitionWithSignal
          annotation (Placement(transformation(extent={{-180,-80},{-160,-60}})));
        Modelica.Blocks.Interfaces.RealInput TT_DEC
          annotation (Placement(transformation(extent={{-360,240},{-320,280}})));
        Modelica.StateGraph.StepWithSignal HPSHC1_start(nIn=3, nOut=1)
          annotation (Placement(transformation(extent={{-140,-80},{-120,-60}})));
        Modelica.StateGraph.Transition HPSHC_start_buffer(enableTimer=true,
            waitTime=2)
          annotation (Placement(transformation(extent={{-100,-80},{-80,-60}})));
        Modelica.StateGraph.StepWithSignal HPSHC1_on(nIn=2, nOut=3)
          annotation (Placement(transformation(extent={{-60,-80},{-40,-60}})));
        Modelica.StateGraph.TransitionWithSignal Temp_solo
          annotation (Placement(transformation(extent={{-20,-20},{0,0}})));
        Modelica.StateGraph.TransitionWithSignal HPSHC_turnoff
          annotation (Placement(transformation(extent={{-20,-80},{0,-60}})));
        Modelica.StateGraph.TransitionWithSignal CHA_need
          annotation (Placement(transformation(extent={{-20,-220},{0,-200}})));
        WaitBefore waitBefore(t_threshold=2, superior=false) annotation (
            Placement(transformation(extent={{-238,290},{-218,310}})));
        WaitBefore waitBefore1(t_threshold=2, superior=true) annotation (
            Placement(transformation(extent={{-120,-40},{-100,-20}})));
        Modelica.StateGraph.StepWithSignal HPSHC_solo_switch
          annotation (Placement(transformation(extent={{20,-20},{40,0}})));
        Modelica.StateGraph.Transition HPSHC_solo_buffer(enableTimer=true,
            waitTime=2)
          annotation (Placement(transformation(extent={{60,-20},{80,0}})));
        Modelica.StateGraph.StepWithSignal HPSHC_solo(nOut=2)
          annotation (Placement(transformation(extent={{100,-20},{120,0}})));
        Modelica.StateGraph.TransitionWithSignal temp_duo
          annotation (Placement(transformation(extent={{140,20},{160,40}})));
        Modelica.StateGraph.TransitionWithSignal HPSHC_solo_off
          annotation (Placement(transformation(extent={{140,-40},{160,-20}})));
        WaitBefore waitBefore2(t_threshold=2, superior=false)
          annotation (Placement(transformation(extent={{40,20},{60,40}})));
        Modelica.Blocks.Math.Add add(k1=-1, k2=+1)
          annotation (Placement(transformation(extent={{-240,200},{-220,220}})));
        Modelica.Blocks.Logical.GreaterEqualThreshold greaterEqualThreshold(threshold=
             10)
          annotation (Placement(transformation(extent={{-200,200},{-180,220}})));
        Modelica.StateGraph.InitialStepWithSignal initialStepWithSignal
          annotation (Placement(transformation(extent={{-220,-80},{-200,-60}})));
        Modelica.StateGraph.StepWithSignal HPSHC_off(nIn=2, nOut=1)
          annotation (Placement(transformation(extent={{180,-80},{200,-60}})));
        Modelica.StateGraph.Transition HPSHC_off_buffer(enableTimer=true,
            waitTime=2)
          annotation (Placement(transformation(extent={{220,-80},{240,-60}})));
        Modelica.StateGraph.StepWithSignal HPSHC_cooling(nIn=1, nOut=2)
          annotation (Placement(transformation(extent={{20,-100},{40,-80}})));
        Modelica.StateGraph.Transition HPSC_turnoff_buffer(enableTimer=true,
            waitTime=2)
          annotation (Placement(transformation(extent={{140,-100},{160,-80}})));
        Modelica.StateGraph.TransitionWithSignal transitionWithSignal7
          annotation (Placement(transformation(extent={{140,-160},{160,-140}})));
        Modelica.StateGraph.StepWithSignal CHA_start(nIn=1, nOut=1)
          annotation (Placement(transformation(extent={{20,-220},{40,-200}})));
        Modelica.StateGraph.Transition CHA_start_buffer(enableTimer=true,
            waitTime=2)
          annotation (Placement(transformation(extent={{60,-220},{80,-200}})));
        Modelica.StateGraph.StepWithSignal CHA_on(nOut=3)
          annotation (Placement(transformation(extent={{100,-220},{120,-200}})));
        Modelica.Blocks.Math.Add add1(k1=+1, k2=+1)
          annotation (Placement(transformation(extent={{-270,140},{-250,160}})));
        Modelica.Blocks.Math.Add add2(k1=-1, k2=+1)
          annotation (Placement(transformation(extent={{-220,150},{-200,170}})));
        Modelica.Blocks.Logical.GreaterEqualThreshold greaterEqualThreshold1(
            threshold=10)
          annotation (Placement(transformation(extent={{-180,150},{-160,170}})));
        Modelica.StateGraph.TransitionWithSignal CHA_turnoff
          annotation (Placement(transformation(extent={{140,-220},{160,-200}})));
        Modelica.StateGraph.StepWithSignal CHA_off(nIn=1, nOut=1)
          annotation (Placement(transformation(extent={{180,-220},{200,-200}})));
        Modelica.StateGraph.Transition CHA_off_buffer(enableTimer=true, waitTime=
              2)
          annotation (Placement(transformation(extent={{220,-220},{240,-200}})));
        Modelica.Blocks.Math.BooleanToInteger booleanToInteger2(integerTrue=0)
          annotation (Placement(transformation(extent={{-60,-140},{-40,-120}})));
        Modelica.Blocks.Math.BooleanToInteger booleanToInteger3(integerTrue=0)
          annotation (Placement(transformation(extent={{40,-140},{60,-120}})));
        Modelica.Blocks.Math.BooleanToInteger booleanToInteger4(integerTrue=0)
          annotation (Placement(transformation(extent={{40,-60},{60,-40}})));
        Modelica.Blocks.Math.BooleanToInteger booleanToInteger5(integerTrue=0)
          annotation (Placement(transformation(extent={{100,-60},{120,-40}})));
        Modelica.Blocks.Math.BooleanToInteger booleanToInteger6(integerTrue=0)
          annotation (Placement(transformation(extent={{200,-120},{220,-100}})));
        Modelica.Blocks.Math.BooleanToInteger booleanToInteger7(integerTrue=0)
          annotation (Placement(transformation(extent={{40,-250},{60,-230}})));
        Modelica.Blocks.Math.BooleanToInteger booleanToInteger8(integerTrue=0)
          annotation (Placement(transformation(extent={{120,-250},{140,-230}})));
        Modelica.Blocks.Math.BooleanToInteger booleanToInteger9(integerTrue=0)
          annotation (Placement(transformation(extent={{200,-260},{220,-240}})));
      equation
        connect(transitionWithSignal.outPort, HPSHC1_start.inPort[1]) annotation (
            Line(points={{-168.5,-70},{-154,-70},{-154,-69.3333},{-141,-69.3333}},
              color={0,0,0}));
        connect(HPSHC1_start.outPort[1], HPSHC_start_buffer.inPort)
          annotation (Line(points={{-119.5,-70},{-94,-70}}, color={0,0,0}));
        connect(HPSHC_start_buffer.outPort, HPSHC1_on.inPort[1]) annotation (Line(
              points={{-88.5,-70},{-74,-70},{-74,-69.5},{-61,-69.5}}, color={0,0,
                0}));
        connect(HPSHC1_on.outPort[1], Temp_solo.inPort) annotation (Line(points={{-39.5,
                -69.6667},{-30,-69.6667},{-30,-10},{-14,-10}},        color={0,0,
                0}));
        connect(HPSHC1_on.outPort[2], HPSHC_turnoff.inPort)
          annotation (Line(points={{-39.5,-70},{-14,-70}}, color={0,0,0}));
        connect(HPSHC1_on.outPort[3], CHA_need.inPort) annotation (Line(points={{-39.5,
                -70.3333},{-30,-70.3333},{-30,-210},{-14,-210}},       color={0,0,
                0}));
        connect(dp_DEC, waitBefore.u)
          annotation (Line(points={{-340,300},{-240,300}}, color={0,0,127}));
        connect(waitBefore.y, transitionWithSignal.condition) annotation (Line(points={{-217,
                300},{-180,300},{-180,240},{-280,240},{-280,-100},{-170,-100},{
                -170,-82}},
                        color={255,0,255}));
        connect(TT_DEC, waitBefore1.u) annotation (Line(points={{-340,260},{-140,
                260},{-140,-30},{-122,-30}},
                                       color={0,0,127}));
        connect(waitBefore1.y, Temp_solo.condition) annotation (Line(points={{-99,
                -30},{-10,-30},{-10,-22}}, color={255,0,255}));
        connect(Temp_solo.outPort, HPSHC_solo_switch.inPort[1])
          annotation (Line(points={{-8.5,-10},{19,-10}}, color={0,0,0}));
        connect(HPSHC_solo_switch.outPort[1], HPSHC_solo_buffer.inPort)
          annotation (Line(points={{40.5,-10},{66,-10}}, color={0,0,0}));
        connect(HPSHC_solo_buffer.outPort, HPSHC_solo.inPort[1])
          annotation (Line(points={{71.5,-10},{99,-10}}, color={0,0,0}));
        connect(HPSHC_solo.outPort[1], temp_duo.inPort) annotation (Line(points={
                {120.5,-9.75},{132,-9.75},{132,30},{146,30}}, color={0,0,0}));
        connect(HPSHC_solo.outPort[2], HPSHC_solo_off.inPort) annotation (Line(
              points={{120.5,-10.25},{132,-10.25},{132,-30},{146,-30}}, color={0,
                0,0}));
        connect(TT_DEC, waitBefore2.u) annotation (Line(points={{-340,260},{-102,
                260},{-102,30},{38,30}},
                                    color={0,0,127}));
        connect(waitBefore2.y, temp_duo.condition) annotation (Line(points={{61,
                30},{120,30},{120,10},{150,10},{150,18}}, color={255,0,255}));
        connect(temp_duo.outPort, HPSHC1_start.inPort[2]) annotation (Line(points=
               {{151.5,30},{180,30},{180,60},{-152,60},{-152,-70},{-141,-70}},
              color={0,0,0}));
        connect(FT_DEC, add.u1) annotation (Line(points={{-340,220},{-260,220},{-260,216},
                {-242,216}}, color={0,0,127}));
        connect(FT_TFP, add.u2) annotation (Line(points={{-340,180},{-260,180},{-260,204},
                {-242,204}}, color={0,0,127}));
        connect(add.y, greaterEqualThreshold.u)
          annotation (Line(points={{-219,210},{-202,210}}, color={0,0,127}));
        connect(greaterEqualThreshold.y, HPSHC_solo_off.condition) annotation (
            Line(points={{-179,210},{128,210},{128,-60},{150,-60},{150,-42}},
              color={255,0,255}));
        connect(greaterEqualThreshold.y, HPSHC_turnoff.condition) annotation (
            Line(points={{-179,210},{-20,210},{-20,-100},{-10,-100},{-10,-82}},
              color={255,0,255}));
        connect(initialStepWithSignal.outPort[1], transitionWithSignal.inPort)
          annotation (Line(points={{-199.5,-70},{-174,-70}}, color={0,0,0}));
        connect(HPSHC_solo_off.outPort, HPSHC_off.inPort[2]) annotation (Line(
              points={{151.5,-30},{166,-30},{166,-70.5},{179,-70.5}}, color={0,0,
                0}));
        connect(HPSHC_off.outPort[1], HPSHC_off_buffer.inPort)
          annotation (Line(points={{200.5,-70},{226,-70}}, color={0,0,0}));
        connect(HPSHC_off_buffer.outPort, initialStepWithSignal.inPort[1])
          annotation (Line(points={{231.5,-70},{260,-70},{260,80},{-240,80},{-240,
                -70},{-221,-70}}, color={0,0,0}));
        connect(waitBefore.y, CHA_need.condition) annotation (Line(points={{-217,
                300},{-180,300},{-180,240},{-280,240},{-280,-240},{-10,-240},{-10,
                -222}}, color={255,0,255}));
        connect(HPSHC_turnoff.outPort, HPSHC_cooling.inPort[1]) annotation (Line(
              points={{-8.5,-70},{4,-70},{4,-90},{19,-90}}, color={0,0,0}));
        connect(HPSHC_cooling.outPort[1], HPSC_turnoff_buffer.inPort) annotation (
           Line(points={{40.5,-89.75},{94,-89.75},{94,-90},{146,-90}}, color={0,0,
                0}));
        connect(HPSC_turnoff_buffer.outPort, HPSHC_off.inPort[1]) annotation (
            Line(points={{151.5,-90},{166,-90},{166,-69.5},{179,-69.5}}, color={0,
                0,0}));
        connect(waitBefore.y, transitionWithSignal7.condition) annotation (Line(
              points={{-217,300},{-180,300},{-180,240},{-280,240},{-280,-180},{
                150,-180},{150,-162}},
                             color={255,0,255}));
        connect(HPSHC_cooling.outPort[2], transitionWithSignal7.inPort) annotation (
            Line(points={{40.5,-90.25},{94,-90.25},{94,-150},{146,-150}},   color={0,0,
                0}));
        connect(transitionWithSignal7.outPort, HPSHC1_start.inPort[3]) annotation (
            Line(points={{151.5,-150},{300,-150},{300,74},{-148,74},{-148,-70},
                {-146,-70},{-146,-70.6667},{-141,-70.6667}},
                                  color={0,0,0}));
        connect(CHA_start.outPort[1], CHA_start_buffer.inPort)
          annotation (Line(points={{40.5,-210},{66,-210}}, color={0,0,0}));
        connect(CHA_need.outPort, CHA_start.inPort[1])
          annotation (Line(points={{-8.5,-210},{19,-210}}, color={0,0,0}));
        connect(CHA_start_buffer.outPort, CHA_on.inPort[1])
          annotation (Line(points={{71.5,-210},{99,-210}}, color={0,0,0}));
        connect(FT_TFP, add1.u1) annotation (Line(points={{-340,180},{-308,180},{-308,
                156},{-272,156}}, color={0,0,127}));
        connect(FT_CHA, add1.u2) annotation (Line(points={{-340,140},{-308,140},{-308,
                144},{-272,144}}, color={0,0,127}));
        connect(FT_DEC, add2.u1) annotation (Line(points={{-340,220},{-272,220},{-272,
                174},{-248,174},{-248,166},{-222,166}}, color={0,0,127}));
        connect(add1.y, add2.u2) annotation (Line(points={{-249,150},{-237.5,150},{-237.5,
                154},{-222,154}}, color={0,0,127}));
        connect(add2.y, greaterEqualThreshold1.u) annotation (Line(points={{-199,160},
                {-191.5,160},{-191.5,160},{-182,160}}, color={0,0,127}));
        connect(CHA_on.outPort[1], CHA_turnoff.inPort) annotation (Line(points={{120.5,
                -209.667},{134,-209.667},{134,-210},{146,-210}},       color={0,0,
                0}));
        connect(CHA_turnoff.outPort, CHA_off.inPort[1])
          annotation (Line(points={{151.5,-210},{179,-210}}, color={0,0,0}));
        connect(CHA_off.outPort[1], CHA_off_buffer.inPort)
          annotation (Line(points={{200.5,-210},{226,-210}}, color={0,0,0}));
        connect(CHA_off_buffer.outPort, HPSHC1_on.inPort[2]) annotation (Line(
              points={{231.5,-210},{280,-210},{280,70},{-70,70},{-70,-70.5},{-61,
                -70.5}}, color={0,0,0}));
        connect(greaterEqualThreshold1.y, CHA_turnoff.condition) annotation (Line(
              points={{-159,160},{-148,160},{-148,120},{-300,120},{-300,-260},{
                150,-260},{150,-222}}, color={255,0,255}));
        connect(HPSHC_solo_switch.active, booleanToInteger4.u) annotation (Line(
              points={{30,-21},{30,-50},{38,-50}}, color={255,0,255}));
        connect(HPSHC_solo.active, booleanToInteger5.u) annotation (Line(points={
                {110,-21},{110,-28},{86,-28},{86,-50},{98,-50}}, color={255,0,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-320,-320},
                  {320,320}})),            Diagram(coordinateSystem(
                preserveAspectRatio=false, extent={{-320,-320},{320,320}})));
      end DEC_controls;

      block hpshc_selec "Convert Integer to Boolean signal"

        Modelica.Blocks.Interfaces.IntegerInput u "Connector of Integer input signal"
          annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
        extends Modelica.Blocks.Interfaces.partialBooleanSO;
        parameter Integer hpshc_mode=1
          "Output signal y is true, if input u >= threshold";

      equation
        y = if u == hpshc_mode then true else false;
        annotation (Documentation(info="<html>
<p>
This block computes the Boolean output <strong>y</strong>
from the Integer input <strong>u</strong> by the equation:
</p>

<pre>    y = u &ge; threshold;
</pre>

<p>
where <strong>threshold</strong> is a parameter.
</p>
</html>"),     Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},
                  {100,100}}), graphics={
              Text(
                extent={{-86,92},{-6,10}},
                lineColor={255,128,0},
                textString="I"),
              Polygon(
                points={{-12,-46},{-32,-26},{-32,-36},{-64,-36},{-64,-56},{-32,-56},
                    {-32,-66},{-12,-46}},
                lineColor={255,0,255},
                fillColor={255,0,255},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{8,-4},{92,-94}},
                lineColor={255,0,255},
                textString="B")}));
      end hpshc_selec;

      package Tests
      extends Modelica.Icons.ExamplesPackage;
        model selec
          WaitBefore waitBefore(t_threshold=10)
            annotation (Placement(transformation(extent={{-20,0},{0,20}})));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)),
              Diagram(coordinateSystem(preserveAspectRatio=false)),
            experiment(
              StopTime=100,
              Interval=1,
              __Dymola_Algorithm="Dassl"));
        end selec;

        model test_pid_dec
          PID_DEC pID_DEC(TT_pid(reverseActing=true))
            annotation (Placement(transformation(extent={{0,20},{20,40}})));
          Modelica.Blocks.Sources.RealExpression realExpression(y=15 + 273.15)
            annotation (Placement(transformation(extent={{-100,60},{-80,80}})));
          Modelica.Blocks.Sources.RealExpression realExpression1
            annotation (Placement(transformation(extent={{-100,20},{-80,40}})));
          Modelica.Blocks.Sources.RealExpression realExpression2(y=1500000)
            annotation (Placement(transformation(extent={{-100,-20},{-80,0}})));
          Modelica.Blocks.Sources.RealExpression realExpression3(y=50 + 273.15)
            annotation (Placement(transformation(extent={{-100,-60},{-80,-40}})));
          Modelica.Blocks.Sources.IntegerExpression integerExpression(y=1)
            annotation (Placement(transformation(extent={{-100,-100},{-80,-80}})));
        equation
          connect(realExpression.y, pID_DEC.T_ext) annotation (Line(points={{
                  -79,70},{-40,70},{-40,40},{-2,40}}, color={0,0,127}));
          connect(realExpression1.y, pID_DEC.PDT511) annotation (Line(points={{
                  -79,30},{-40,30},{-40,36},{-2,36}}, color={0,0,127}));
          connect(realExpression2.y, pID_DEC.PT511) annotation (Line(points={{
                  -79,-10},{-34,-10},{-34,32},{-2,32}}, color={0,0,127}));
          connect(realExpression3.y, pID_DEC.TT521) annotation (Line(points={{
                  -79,-50},{-28,-50},{-28,28},{-2,28}}, color={0,0,127}));
          connect(integerExpression.y, pID_DEC.HPSHC) annotation (Line(points={
                  {-79,-90},{-20,-90},{-20,20},{-2,20}}, color={255,127,0}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)),
              Diagram(coordinateSystem(preserveAspectRatio=false)));
        end test_pid_dec;

        model dec_test
          DEC_controls_parallel dEC_controls_parallel
            annotation (Placement(transformation(extent={{20,40},{60,80}})));
          Modelica.Blocks.Sources.RealExpression dp annotation (Placement(
                transformation(extent={{-100,80},{-80,100}})));
          Modelica.Blocks.Sources.RealExpression FT_dec(y=50)
            annotation (Placement(transformation(extent={{-100,40},{-80,60}})));
          Modelica.Blocks.Sources.RealExpression TT(y=55 + 273.15)
            annotation (Placement(transformation(extent={{-100,0},{-80,20}})));
          Modelica.Blocks.Sources.RealExpression tfp(y=100) annotation (
              Placement(transformation(extent={{-100,-40},{-80,-20}})));
          Modelica.Blocks.Sources.RealExpression realExpression4(y=0)
            annotation (Placement(transformation(extent={{-100,-80},{-80,-60}})));
        equation
          connect(realExpression4.y, dEC_controls_parallel.FT_CHA) annotation (
              Line(points={{-79,-70},{10,-70},{10,42},{18,42}}, color={0,0,127}));
          connect(tfp.y, dEC_controls_parallel.FT_TFP) annotation (Line(points=
                  {{-79,-30},{-10,-30},{-10,51},{18,51}}, color={0,0,127}));
          connect(TT.y, dEC_controls_parallel.DEC[3]) annotation (Line(points={
                  {-79,10},{-30,10},{-30,72.3333},{18,72.3333}}, color={0,0,127}));
          connect(dp.y, dEC_controls_parallel.DEC[1]) annotation (Line(points={
                  {-79,90},{-30,90},{-30,69.6667},{18,69.6667}}, color={0,0,127}));
          connect(FT_dec.y, dEC_controls_parallel.DEC[2]) annotation (Line(
                points={{-79,50},{-32,50},{-32,71},{18,71}}, color={0,0,127}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)),
              Diagram(coordinateSystem(preserveAspectRatio=false)));
        end dec_test;

        model pk
          Modelica.Blocks.Interfaces.RealInput u
            annotation (Placement(transformation(extent={{-140,40},{-100,80}})));
          Modelica.Blocks.Interfaces.RealInput u1
            annotation (Placement(transformation(extent={{-140,-60},{-100,-20}})));
          Modelica.Blocks.Interfaces.RealOutput y
            annotation (Placement(transformation(extent={{100,-10},{120,10}})));

        equation
          y = if u1>=u then 1 else 0;
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                coordinateSystem(preserveAspectRatio=false)));
        end pk;
      end Tests;

    end DEC_DEG;

  package GF
    extends Modelica.Icons.VariantsPackage;
    model PID_Valve_cond
      Modelica.Blocks.Math.Add TDT(k1=-1, k2=1)
        annotation (Placement(transformation(extent={{-40,40},{-20,60}})));
      Controls.Continuous.LimPID TDT_PID(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=0.1,
          Ti=10,
          reverseActing=false)
        annotation (Placement(transformation(extent={{0,80},{20,100}})));
      Controls.Continuous.LimPID DPT_PID(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=0.1,
          Ti=10,
          reverseActing=true)
          annotation (Placement(transformation(extent={{0,-60},{20,-40}})));
      Modelica.Blocks.Math.MinMax maxi(nu=3)
        annotation (Placement(transformation(extent={{60,0},{80,20}})));
      Controls.Continuous.LimPID T_PID(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=0.1,
          Ti=10,
          reverseActing=false)
                 annotation (Placement(transformation(extent={{0,0},{20,20}})));
      Modelica.Blocks.Interfaces.RealInput PEM_TT200 annotation (Placement(
            transformation(
            extent={{-20,-20},{20,20}},
            rotation=0,
            origin={-120,80})));
      Modelica.Blocks.Interfaces.RealInput TT211 annotation (Placement(
            transformation(
            extent={{-20,-20},{20,20}},
            rotation=0,
            origin={-122,0})));
      Modelica.Blocks.Interfaces.RealInput DPT annotation (Placement(
            transformation(
            extent={{-20,-20},{20,20}},
            rotation=0,
            origin={-120,-80})));
        Modelica.Blocks.Sources.RealExpression TDT_set(y=5)
          annotation (Placement(transformation(extent={{-40,80},{-20,100}})));
      Modelica.Blocks.Sources.RealExpression realExpression1(y=30 + 273.15)
        annotation (Placement(transformation(extent={{-40,0},{-20,20}})));
      Modelica.Blocks.Sources.RealExpression DPT_set(y=490*1025/3600)
          annotation (Placement(transformation(extent={{-40,-60},{-20,-40}})));
        Modelica.Blocks.Interfaces.RealOutput y
          annotation (Placement(transformation(extent={{100,-10},{120,10}})));
    equation
        connect(TT211, TDT.u2) annotation (Line(points={{-122,0},{-80,0},{-80,
                44},{-42,44}}, color={0,0,127}));
        connect(PEM_TT200, TDT.u1) annotation (Line(points={{-120,80},{-80,80},
                {-80,56},{-42,56}}, color={0,0,127}));
        connect(TDT.y, TDT_PID.u_m) annotation (Line(points={{-19,50},{10,50},{
                10,78}}, color={0,0,127}));
        connect(TDT_PID.y, maxi.u[1]) annotation (Line(points={{21,90},{40,90},
                {40,14.6667},{60,14.6667}}, color={0,0,127}));
        connect(TDT_set.y, TDT_PID.u_s)
          annotation (Line(points={{-19,90},{-2,90}}, color={0,0,127}));
        connect(T_PID.u_s, realExpression1.y)
          annotation (Line(points={{-2,10},{-19,10}}, color={0,0,127}));
        connect(TT211, T_PID.u_m) annotation (Line(points={{-122,0},{-80,0},{
                -80,-20},{10,-20},{10,-2}}, color={0,0,127}));
        connect(DPT_set.y, DPT_PID.u_s)
          annotation (Line(points={{-19,-50},{-2,-50}}, color={0,0,127}));
        connect(DPT, DPT_PID.u_m) annotation (Line(points={{-120,-80},{10,-80},
                {10,-62}}, color={0,0,127}));
        connect(T_PID.y, maxi.u[2]) annotation (Line(points={{21,10},{40,10},{
                40,10},{60,10}}, color={0,0,127}));
        connect(DPT_PID.y, maxi.u[3]) annotation (Line(points={{21,-50},{42,-50},
                {42,5.33333},{60,5.33333}}, color={0,0,127}));
        connect(maxi.yMax, y) annotation (Line(points={{81,16},{92,16},{92,0},{
                110,0}},   color={0,0,127}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                                    Rectangle(
            extent={{-100,-100},{100,100}},
            lineColor={0,0,127},
            fillColor={255,255,255},
            fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-6,-20},{66,-66}},
              lineColor={255,255,255},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Text(
              visible=(controllerType == Modelica.Blocks.Types.SimpleController.PI),
              extent={{-28,-22},{72,-62}},
              lineColor={0,0,0},
              textString="PI",
              fillPattern=FillPattern.Solid,
              fillColor={175,175,175}),
            Polygon(
              points={{-80,90},{-88,68},{-72,68},{-80,90}},
              lineColor={192,192,192},
              fillColor={192,192,192},
              fillPattern=FillPattern.Solid),
            Line(points={{-80,78},{-80,-90}}, color={192,192,192}),
            Line(points={{-80,-80},{-80,-20},{30,60},{80,60}}, color={0,0,127}),
            Line(points={{-90,-80},{82,-80}}, color={192,192,192}),
            Polygon(
              points={{90,-80},{68,-72},{68,-88},{90,-80}},
              lineColor={192,192,192},
              fillColor={192,192,192},
              fillPattern=FillPattern.Solid),
            Line(
              visible=strict,
              points={{30,60},{81,60}},
              color={255,0,0},
              smooth=Smooth.None)}),                                 Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end PID_Valve_cond;

  package Tests
    extends Modelica.Icons.ExamplesPackage;
    model test_pid
      Modelica.Blocks.Math.Add TDT(k1=-1, k2=1)
        annotation (Placement(transformation(extent={{-40,20},{-20,40}})));
      Modelica.Blocks.Sources.Constant TDT_Set(k=5)
        "Scaled differential pressure setpoint"
        annotation (Placement(transformation(extent={{-40,60},{-20,80}})));
      Controls.Continuous.LimPID TDT_PID(
            controllerType=Modelica.Blocks.Types.SimpleController.PI,
            k=2.5,
            Ti=1.7)
        annotation (Placement(transformation(extent={{0,60},{20,80}})));
          Modelica.Blocks.Sources.RealExpression realExpression(y=15)
            annotation (Placement(transformation(extent={{-100,40},{-80,60}})));
          Modelica.Blocks.Sources.RealExpression realExpression1(y=22)
            annotation (Placement(transformation(extent={{-100,0},{-80,20}})));
    equation
          connect(TDT.y, TDT_PID.u_m) annotation (Line(points={{-19,30},{10,30},
                  {10,58}}, color={0,0,127}));
          connect(TDT_Set.y, TDT_PID.u_s)
            annotation (Line(points={{-19,70},{-2,70}}, color={0,0,127}));
          connect(realExpression.y, TDT.u1) annotation (Line(points={{-79,50},{
                  -60,50},{-60,36},{-42,36}}, color={0,0,127}));
          connect(realExpression1.y, TDT.u2) annotation (Line(points={{-79,10},
                  {-60,10},{-60,24},{-42,24}}, color={0,0,127}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)),
              Diagram(coordinateSystem(preserveAspectRatio=false)));
    end test_pid;

    model test_dpt
      Controls.Continuous.LimPID DPT_PID(
            controllerType=Modelica.Blocks.Types.SimpleController.PI,
            k=3,
            Ti=1)
            annotation (Placement(transformation(extent={{-20,40},{0,60}})));
      Modelica.Blocks.Sources.RealExpression DPT_set(y=0.9)
            annotation (Placement(transformation(extent={{-60,40},{-40,60}})));
      Modelica.Blocks.Sources.RealExpression DPT_set1(y=1)
            annotation (Placement(transformation(extent={{-60,0},{-40,20}})));
    equation
          connect(DPT_set.y, DPT_PID.u_s)
            annotation (Line(points={{-39,50},{-22,50}}, color={0,0,127}));
          connect(DPT_set1.y, DPT_PID.u_m) annotation (Line(points={{-39,10},{
                  -10,10},{-10,38}}, color={0,0,127}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)),
              Diagram(coordinateSystem(preserveAspectRatio=false)));
    end test_dpt;

    model test_pid_0
          PID_Valve_cond pID_Valve_evap
            annotation (Placement(transformation(extent={{0,0},{20,20}})));
          Modelica.Blocks.Sources.RealExpression realExpression(y=15 + 273)
            annotation (Placement(transformation(extent={{-100,40},{-80,60}})));
          Modelica.Blocks.Sources.RealExpression realExpression1(y=35 + 273)
            annotation (Placement(transformation(extent={{-100,0},{-80,20}})));
          Modelica.Blocks.Sources.RealExpression realExpression2(y=35000)
            annotation (Placement(transformation(extent={{-100,-40},{-80,-20}})));
    equation
          connect(realExpression.y, pID_Valve_evap.PEM_TT200) annotation (Line(
                points={{-79,50},{-40,50},{-40,18},{-2,18}}, color={0,0,127}));
          connect(realExpression1.y, pID_Valve_evap.TT211) annotation (Line(
                points={{-79,10},{-42,10},{-42,10},{-2.2,10}}, color={0,0,127}));
          connect(realExpression2.y, pID_Valve_evap.DPT) annotation (Line(
                points={{-79,-30},{-41.5,-30},{-41.5,2},{-2,2}}, color={0,0,127}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)),
              Diagram(coordinateSystem(preserveAspectRatio=false)));
    end test_pid_0;
  end Tests;
  end GF;

  package PEM
    extends Modelica.Icons.VariantsPackage;
    model control_pumps
      Modelica.StateGraph.InitialStep initialStep
        annotation (Placement(transformation(extent={{-40,40},{-20,60}})));
      Modelica.StateGraph.Transition transition1
        annotation (Placement(transformation(extent={{0,40},{20,60}})));
      Modelica.StateGraph.StepWithSignal pump_1_start(nIn=2, nOut=1)
        annotation (Placement(transformation(extent={{40,40},{60,60}})));
      Modelica.StateGraph.TransitionWithSignal transitionWithSignal
        annotation (Placement(transformation(extent={{160,40},{180,60}})));
      Modelica.StateGraph.StepWithSignal pump_2(nIn=1, nOut=2)
        annotation (Placement(transformation(extent={{280,40},{300,60}})));
      Modelica.StateGraph.TransitionWithSignal transitionWithSignal1
        annotation (Placement(transformation(extent={{320,40},{340,60}})));
      Modelica.StateGraph.StepWithSignal pump_3(nIn=1, nOut=2)
        annotation (Placement(transformation(extent={{440,0},{460,20}})));
      Modelica.StateGraph.TransitionWithSignal transitionWithSignal2
        annotation (Placement(transformation(extent={{480,0},{500,20}})));
      Modelica.StateGraph.TransitionWithSignal transitionWithSignal4
        annotation (Placement(transformation(extent={{320,0},{340,20}})));
      Modelica.StateGraph.TransitionWithSignal transitionWithSignal5
        annotation (Placement(transformation(extent={{480,-40},{500,-20}})));
      Modelica.StateGraph.Transition transition2(condition=false)
        annotation (Placement(transformation(extent={{160,0},{180,20}})));
      Modelica.StateGraph.Transition transition3(enableTimer=true, waitTime=200)
        annotation (Placement(transformation(extent={{80,40},{100,60}})));
      Modelica.StateGraph.StepWithSignal pump_1(nIn=1, nOut=2)
        annotation (Placement(transformation(extent={{120,40},{140,60}})));
      Modelica.StateGraph.StepWithSignal pump_2_start(nIn=2, nOut=1)
        annotation (Placement(transformation(extent={{200,40},{220,60}})));
      Modelica.StateGraph.Transition transition4(enableTimer=true, waitTime=200)
        annotation (Placement(transformation(extent={{240,40},{260,60}})));
      Modelica.StateGraph.StepWithSignal pump_3_start(nIn=2, nOut=1)
        annotation (Placement(transformation(extent={{360,0},{380,20}})));
      Modelica.StateGraph.Transition transition5(enableTimer=true, waitTime=200)
        annotation (Placement(transformation(extent={{400,0},{420,20}})));
      Modelica.StateGraph.TransitionWithSignal transitionWithSignal3
        annotation (Placement(transformation(extent={{640,-80},{660,-60}})));
      Modelica.StateGraph.TransitionWithSignal transitionWithSignal6
        annotation (Placement(transformation(extent={{640,-40},{660,-20}})));
      Modelica.StateGraph.StepWithSignal pump_4(nIn=1, nOut=2)
        annotation (Placement(transformation(extent={{600,-40},{620,-20}})));
      Modelica.StateGraph.Transition transition6(enableTimer=true, waitTime=200)
        annotation (Placement(transformation(extent={{560,-40},{580,-20}})));
      Modelica.StateGraph.StepWithSignal pump_4_start(nIn=2, nOut=1)
        annotation (Placement(transformation(extent={{520,-40},{540,-20}})));
      Modelica.StateGraph.StepWithSignal pump_5_start(nIn=1, nOut=1)
        annotation (Placement(transformation(extent={{680,-80},{700,-60}})));
      Modelica.StateGraph.Transition transition7(enableTimer=true, waitTime=200)
        annotation (Placement(transformation(extent={{720,-80},{740,-60}})));
      Modelica.StateGraph.StepWithSignal pump_5(nIn=1, nOut=1)
        annotation (Placement(transformation(extent={{760,-80},{780,-60}})));
      Modelica.StateGraph.TransitionWithSignal transitionWithSignal7
        annotation (Placement(transformation(extent={{800,-80},{820,-60}})));
      Modelica.Blocks.Interfaces.RealInput pid
        annotation (Placement(transformation(extent={{-140,-100},{-100,-60}})));
      Modelica.Blocks.MathBoolean.Or p_5(nu=2)
        annotation (Placement(transformation(extent={{840,-140},{860,-120}})));
      Modelica.Blocks.MathBoolean.Or pump_working1(nu=2)
        annotation (Placement(transformation(extent={{160,-60},{180,-40}})));
      Modelica.Blocks.MathBoolean.Or pump_working2(nu=2)
        annotation (Placement(transformation(extent={{300,-40},{320,-20}})));
      Modelica.Blocks.MathBoolean.Or pump_working3(nu=2)
        annotation (Placement(transformation(extent={{460,-80},{480,-60}})));
      Modelica.Blocks.MathBoolean.Or pump_working4(nu=2)
        annotation (Placement(transformation(extent={{620,-120},{640,-100}})));
      Modelica.Blocks.MathBoolean.Or p_1(nu=2)
        annotation (Placement(transformation(extent={{840,-300},{860,-280}})));
      Modelica.Blocks.MathBoolean.Or p_2(nu=2)
        annotation (Placement(transformation(extent={{842,-260},{862,-240}})));
      Modelica.Blocks.MathBoolean.Or p_3(nu=2)
        annotation (Placement(transformation(extent={{840,-220},{860,-200}})));
      Modelica.Blocks.MathBoolean.Or p_4(nu=2)
        annotation (Placement(transformation(extent={{840,-180},{860,-160}})));
      Modelica.Blocks.Logical.GreaterEqualThreshold greaterEqualThreshold[5](
            threshold=44/50)
        annotation (Placement(transformation(extent={{0,-160},{20,-140}})));
      Modelica.Blocks.Logical.LessEqualThreshold lessEqualThreshold[5](
            threshold=30/50)
        annotation (Placement(transformation(extent={{0,-200},{20,-180}})));
      Switch_0 switch1[5]
        annotation (Placement(transformation(extent={{920,-220},{940,-200}})));
      Modelica.Blocks.Interfaces.RealOutput pump_y[5]
        annotation (Placement(transformation(extent={{100,-10},{120,10}})));
      Modelica.Blocks.Interfaces.RealInput pump_opening[5]
        annotation (Placement(transformation(extent={{-140,60},{-100,100}})));
    equation
      connect(initialStep.outPort[1], transition1.inPort)
        annotation (Line(points={{-19.5,50},{6,50}},   color={0,0,0}));
      connect(transition1.outPort, pump_1_start.inPort[1]) annotation (Line(points={{11.5,50},
              {26,50},{26,50.5},{39,50.5}},              color={0,0,0}));
      connect(transition2.outPort, initialStep.inPort[1]) annotation (Line(points={{171.5,
              10},{200,10},{200,-20},{-60,-20},{-60,50},{-41,50}},         color={0,
              0,0}));
      connect(pump_1_start.outPort[1], transition3.inPort)
        annotation (Line(points={{60.5,50},{86,50}}, color={0,0,0}));
      connect(transition3.outPort, pump_1.inPort[1]) annotation (Line(points={{91.5,50},
              {119,50}},                    color={0,0,0}));
      connect(pump_1.outPort[1], transitionWithSignal.inPort) annotation (Line(
            points={{140.5,50.25},{152,50.25},{152,50},{166,50}}, color={0,0,0}));
      connect(pump_1.outPort[2], transition2.inPort) annotation (Line(points={{140.5,
              49.75},{152,49.75},{152,10},{166,10}}, color={0,0,0}));
      connect(pump_2_start.outPort[1], transition4.inPort)
        annotation (Line(points={{220.5,50},{246,50}}, color={0,0,0}));
      connect(transitionWithSignal.outPort, pump_2_start.inPort[1]) annotation (
          Line(points={{171.5,50},{186,50},{186,50.5},{199,50.5}}, color={0,0,0}));
      connect(transition4.outPort, pump_2.inPort[1]) annotation (Line(points={{251.5,
              50},{279,50}},                   color={0,0,0}));
      connect(pump_2.outPort[1], transitionWithSignal1.inPort) annotation (Line(
            points={{300.5,50.25},{312,50.25},{312,50},{326,50}}, color={0,0,0}));
      connect(pump_2.outPort[2], transitionWithSignal4.inPort) annotation (Line(
            points={{300.5,49.75},{314,49.75},{314,10},{326,10}}, color={0,0,0}));
      connect(transitionWithSignal1.outPort, pump_1_start.inPort[2]) annotation (
          Line(points={{331.5,50},{360,50},{360,100},{28,100},{28,49.5},{39,49.5}},
            color={0,0,0}));
      connect(transitionWithSignal4.outPort, pump_3_start.inPort[1]) annotation (
          Line(points={{331.5,10},{346,10},{346,10.5},{359,10.5}}, color={0,0,0}));
      connect(pump_3_start.outPort[1], transition5.inPort)
        annotation (Line(points={{380.5,10},{406,10}}, color={0,0,0}));
      connect(transition5.outPort, pump_3.inPort[1])
        annotation (Line(points={{411.5,10},{439,10}}, color={0,0,0}));
      connect(pump_3.outPort[1], transitionWithSignal2.inPort) annotation (Line(
            points={{460.5,10.25},{474,10.25},{474,10},{486,10}}, color={0,0,0}));
      connect(pump_3.outPort[2], transitionWithSignal5.inPort) annotation (Line(
            points={{460.5,9.75},{474,9.75},{474,-30},{486,-30}}, color={0,0,0}));
      connect(transitionWithSignal2.outPort, pump_2_start.inPort[2]) annotation (
          Line(points={{491.5,10},{520,10},{520,80},{190,80},{190,49.5},{199,49.5}},
            color={0,0,0}));
      connect(transitionWithSignal5.outPort, pump_4_start.inPort[1]) annotation (
          Line(points={{491.5,-30},{506,-30},{506,-29.5},{519,-29.5}}, color={0,0,0}));
      connect(pump_4_start.outPort[1], transition6.inPort)
        annotation (Line(points={{540.5,-30},{566,-30}}, color={0,0,0}));
      connect(transition6.outPort, pump_4.inPort[1])
        annotation (Line(points={{571.5,-30},{599,-30}}, color={0,0,0}));
      connect(pump_4.outPort[1], transitionWithSignal6.inPort) annotation (Line(
            points={{620.5,-29.75},{634,-29.75},{634,-30},{646,-30}}, color={0,0,0}));
      connect(transitionWithSignal6.outPort, pump_3_start.inPort[2]) annotation (
          Line(points={{651.5,-30},{680,-30},{680,40},{350,40},{350,9.5},{359,9.5}},
            color={0,0,0}));
      connect(pump_4.outPort[2], transitionWithSignal3.inPort) annotation (Line(
            points={{620.5,-30.25},{634,-30.25},{634,-70},{646,-70}}, color={0,0,0}));
      connect(transitionWithSignal3.outPort, pump_5_start.inPort[1]) annotation (
          Line(points={{651.5,-70},{679,-70}},                     color={0,0,0}));
      connect(pump_5_start.outPort[1], transition7.inPort)
        annotation (Line(points={{700.5,-70},{726,-70}}, color={0,0,0}));
      connect(transition7.outPort, pump_5.inPort[1])
        annotation (Line(points={{731.5,-70},{759,-70}}, color={0,0,0}));
      connect(pump_5.outPort[1], transitionWithSignal7.inPort)
        annotation (Line(points={{780.5,-70},{806,-70}}, color={0,0,0}));
      connect(transitionWithSignal7.outPort, pump_4_start.inPort[2]) annotation (
          Line(points={{811.5,-70},{840,-70},{840,0},{508,0},{508,-30.5},{519,-30.5}},
            color={0,0,0}));
      connect(pump_5.active, p_5.u[1]) annotation (Line(points={{770,-81},{770,-126.5},
              {840,-126.5}}, color={255,0,255}));
      connect(pump_5_start.active, p_5.u[2]) annotation (Line(points={{690,-81},{690,
              -133.5},{840,-133.5}}, color={255,0,255}));
      connect(pump_4_start.active, pump_working4.u[1]) annotation (Line(points={{530,-41},
              {530,-106.5},{620,-106.5}},      color={255,0,255}));
      connect(pump_4.active, pump_working4.u[2]) annotation (Line(points={{610,-41},
              {608,-41},{608,-113.5},{620,-113.5}}, color={255,0,255}));
      connect(pump_3_start.active, pump_working3.u[1]) annotation (Line(points={{370,-1},
              {370,-66.5},{460,-66.5}},     color={255,0,255}));
      connect(pump_3.active, pump_working3.u[2]) annotation (Line(points={{450,-1},{
              450,-73.5},{460,-73.5}}, color={255,0,255}));
      connect(pump_2.active, pump_working2.u[1]) annotation (Line(points={{290,39},{
              290,-26.5},{300,-26.5}}, color={255,0,255}));
      connect(pump_2_start.active, pump_working2.u[2]) annotation (Line(points={{210,39},
              {210,-33.5},{300,-33.5}},     color={255,0,255}));
      connect(pump_1.active, pump_working1.u[1]) annotation (Line(points={{130,39},{
              132,39},{132,-46.5},{160,-46.5}},
                                           color={255,0,255}));
      connect(pump_1_start.active, pump_working1.u[2]) annotation (Line(points={{50,39},
              {50,-53.5},{160,-53.5}},     color={255,0,255}));
      connect(p_4.y, p_3.u[1]) annotation (Line(points={{861.5,-170},{870,-170},{870,
              -190},{828,-190},{828,-206.5},{840,-206.5}}, color={255,0,255}));
      connect(pump_working3.y, p_3.u[2]) annotation (Line(points={{481.5,-70},{506,-70},
              {506,-213.5},{840,-213.5}}, color={255,0,255}));
      connect(p_5.y, p_4.u[1]) annotation (Line(points={{861.5,-130},{870,-130},{870,
              -152},{828,-152},{828,-166.5},{840,-166.5}}, color={255,0,255}));
      connect(pump_working4.y, p_4.u[2]) annotation (Line(points={{641.5,-110},{676,
              -110},{676,-173.5},{840,-173.5}}, color={255,0,255}));
      connect(p_3.y, p_2.u[1]) annotation (Line(points={{861.5,-210},{870,-210},{870,
              -232},{832,-232},{832,-246.5},{842,-246.5}}, color={255,0,255}));
      connect(pump_working2.y, p_2.u[2]) annotation (Line(points={{321.5,-30},{360,-30},
              {360,-253.5},{842,-253.5}}, color={255,0,255}));
      connect(p_2.y, p_1.u[1]) annotation (Line(points={{863.5,-250},{872,-250},{872,
              -268},{834,-268},{834,-286.5},{840,-286.5}}, color={255,0,255}));
      connect(pump_working1.y, p_1.u[2]) annotation (Line(points={{181.5,-50},{300,-50},
              {300,-293.5},{840,-293.5}}, color={255,0,255}));
      connect(p_1.y, switch1[1].u2)
        annotation (Line(points={{861.5,-290},{880,-290},{880,-210},{918,-210}},
                                                           color={255,0,255}));
      connect(p_2.y, switch1[2].u2) annotation (Line(points={{863.5,-250},{880,
                -250},{880,-210},{918,-210}},
                                      color={255,0,255}));
      connect(p_3.y, switch1[3].u2) annotation (Line(points={{861.5,-210},{918,
                -210}},               color={255,0,255}));
      connect(p_4.y, switch1[4].u2) annotation (Line(points={{861.5,-170},{880,
                -170},{880,-210},{918,-210}},
                                      color={255,0,255}));
      connect(p_5.y, switch1[5].u2) annotation (Line(points={{861.5,-130},{880,
                -130},{880,-210},{918,-210}},
                                      color={255,0,255}));
      connect(pid, switch1[1].u1) annotation (Line(points={{-120,-80},{-40,-80},
                {-40,-320},{910,-320},{910,-202},{918,-202}},
                                                       color={0,0,127}));
      connect(pid, switch1[2].u1) annotation (Line(points={{-120,-80},{-40,-80},
                {-40,-320},{910,-320},{910,-202},{918,-202}},
                                                       color={0,0,127}));
      connect(pid, switch1[3].u1) annotation (Line(points={{-120,-80},{-40,-80},
                {-40,-320},{910,-320},{910,-202},{918,-202}},
                                                       color={0,0,127}));
      connect(pid, switch1[4].u1) annotation (Line(points={{-120,-80},{-40,-80},
                {-40,-320},{910,-320},{910,-202},{918,-202}},
                                                       color={0,0,127}));
      connect(pid, switch1[5].u1) annotation (Line(points={{-120,-80},{-40,-80},
                {-40,-320},{910,-320},{910,-202},{918,-202}},
                                                       color={0,0,127}));
      connect(switch1.y, pump_y) annotation (Line(points={{941,-210},{958,-210},
                {958,-360},{80,-360},{80,0},{110,0}},
                                                   color={0,0,127}));
        connect(pump_opening, greaterEqualThreshold.u) annotation (Line(points=
                {{-120,80},{-80,80},{-80,-60},{-20,-60},{-20,-150},{-2,-150}},
              color={0,0,127}));
        connect(pump_opening, lessEqualThreshold.u) annotation (Line(points={{
                -120,80},{-80,80},{-80,-60},{-20,-60},{-20,-190},{-2,-190}},
              color={0,0,127}));
        connect(greaterEqualThreshold[1].y, transitionWithSignal.condition)
          annotation (Line(points={{21,-150},{192,-150},{192,38},{170,38}},
              color={255,0,255}));
        connect(greaterEqualThreshold[2].y, transitionWithSignal4.condition)
          annotation (Line(points={{21,-150},{330,-150},{330,-2}}, color={255,0,
                255}));
        connect(greaterEqualThreshold[3].y, transitionWithSignal5.condition)
          annotation (Line(points={{21,-150},{490,-150},{490,-42}}, color={255,
                0,255}));
        connect(greaterEqualThreshold[4].y, transitionWithSignal3.condition)
          annotation (Line(points={{21,-150},{650,-150},{650,-82}}, color={255,
                0,255}));
        connect(lessEqualThreshold[2].y, transitionWithSignal1.condition)
          annotation (Line(points={{21,-190},{340,-190},{340,38},{330,38}},
              color={255,0,255}));
        connect(lessEqualThreshold[3].y, transitionWithSignal2.condition)
          annotation (Line(points={{21,-190},{500,-190},{500,-2},{490,-2}},
              color={255,0,255}));
        connect(lessEqualThreshold[4].y, transitionWithSignal6.condition)
          annotation (Line(points={{21,-190},{660,-190},{660,-42},{650,-42}},
              color={255,0,255}));
        connect(lessEqualThreshold[5].y, transitionWithSignal7.condition)
          annotation (Line(points={{21,-190},{810,-190},{810,-82}}, color={255,
                0,255}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
            Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={28,108,200},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Text(
              extent={{-100,100},{0,0}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.None,
              textString="+"),
            Text(
              extent={{0,0},{100,-100}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.None,
              textString="-"),
            Line(
              points={{-54,-58},{66,62}},
              color={0,0,0},
              thickness=1)}),                                        Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end control_pumps;

    model PID_PEM
    parameter Modelica.SIunits.Pressure p_pumps(displayUnit="bar",min=100000) = 187000
        "Pressure setpoint for pumps";

    parameter Real Set_v_flow = 3600;
      Modelica.Blocks.Sources.RealExpression realExpression(y=p_pumps)
        annotation (Placement(transformation(extent={{-80,80},{-60,100}})));
      Controls.Continuous.LimPID           conPID(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
        Td=1,
          k=0.1,
          Ti=100,
        reverseActing=true)
               annotation (Placement(transformation(extent={{-40,80},{-20,100}})));
      Modelica.Blocks.Math.Gain gain1(k=-1)
        annotation (Placement(transformation(extent={{-80,40},{-60,60}})));
      Modelica.Blocks.Interfaces.RealInput P
        annotation (Placement(transformation(extent={{-140,30},{-100,70}})));
      Modelica.Blocks.Interfaces.RealInput v_flow annotation (Placement(
              transformation(extent={{-140,-70},{-100,-30}})));
      Modelica.Blocks.Sources.RealExpression realExpression1(y=Set_v_flow)
        annotation (Placement(transformation(extent={{-80,-20},{-60,0}})));
      Modelica.Blocks.Math.Gain gain2(k=3600)
        annotation (Placement(transformation(extent={{-80,-60},{-60,-40}})));
      Controls.Continuous.LimPID           conPID1(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          Td=1,
          k=0.1,
          Ti=100,
          reverseActing=true)
               annotation (Placement(transformation(extent={{-40,-20},{-20,0}})));
        Modelica.Blocks.Math.Min min1
          annotation (Placement(transformation(extent={{0,0},{20,20}})));
        Modelica.Blocks.Interfaces.RealOutput y
          annotation (Placement(transformation(extent={{100,-10},{120,10}})));
    equation
      connect(P, gain1.u)
        annotation (Line(points={{-120,50},{-82,50}}, color={0,0,127}));
      connect(gain1.y, conPID.u_m)
        annotation (Line(points={{-59,50},{-30,50},{-30,78}}, color={0,0,127}));
      connect(realExpression.y, conPID.u_s)
        annotation (Line(points={{-59,90},{-42,90}}, color={0,0,127}));
        connect(v_flow, gain2.u)
          annotation (Line(points={{-120,-50},{-82,-50}}, color={0,0,127}));
        connect(realExpression1.y, conPID1.u_s)
          annotation (Line(points={{-59,-10},{-42,-10}}, color={0,0,127}));
        connect(gain2.y, conPID1.u_m) annotation (Line(points={{-59,-50},{-30,
                -50},{-30,-22}}, color={0,0,127}));
        connect(conPID1.y, min1.u2) annotation (Line(points={{-19,-10},{-11.5,
                -10},{-11.5,4},{-2,4}}, color={0,0,127}));
        connect(conPID.y, min1.u1) annotation (Line(points={{-19,90},{-12,90},{
                -12,16},{-2,16}}, color={0,0,127}));
        connect(min1.y, y) annotation (Line(points={{21,10},{60,10},{60,0},{110,
                0}}, color={0,0,127}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                                    Rectangle(
            extent={{-100,-100},{100,100}},
            lineColor={0,0,127},
            fillColor={255,255,255},
            fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-6,-20},{66,-66}},
              lineColor={255,255,255},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Text(
              visible=(controllerType == Modelica.Blocks.Types.SimpleController.PI),
              extent={{-28,-22},{72,-62}},
              lineColor={0,0,0},
              textString="PI",
              fillPattern=FillPattern.Solid,
              fillColor={175,175,175}),
            Polygon(
              points={{-80,90},{-88,68},{-72,68},{-80,90}},
              lineColor={192,192,192},
              fillColor={192,192,192},
              fillPattern=FillPattern.Solid),
            Line(points={{-80,78},{-80,-90}}, color={192,192,192}),
            Line(points={{-80,-80},{-80,-20},{30,60},{80,60}}, color={0,0,127}),
            Line(points={{-90,-80},{82,-80}}, color={192,192,192}),
            Polygon(
              points={{90,-80},{68,-72},{68,-88},{90,-80}},
              lineColor={192,192,192},
              fillColor={192,192,192},
              fillPattern=FillPattern.Solid),
            Line(
              visible=strict,
              points={{30,60},{81,60}},
              color={255,0,0},
              smooth=Smooth.None)}),                                 Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end PID_PEM;
  end PEM;

    package RJC_RJF
      extends Modelica.Icons.VariantsPackage;
      model PID_temperature
        Controls.Continuous.LimPID TDT_PID(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=0.1,
          Ti=15,
          reverseActing=false)
          annotation (Placement(transformation(extent={{-40,60},{-20,80}})));
        Modelica.Blocks.Math.Add TDT(k1=1, k2=-1)
          annotation (Placement(transformation(extent={{-80,30},{-60,50}})));
        Controls.Continuous.LimPID T_PID(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=0.1,
          Ti=15,
          reverseActing=false)
                annotation (Placement(transformation(extent={{-40,-20},{-20,0}})));
        Modelica.Blocks.Sources.RealExpression realExpression(y=5)
          annotation (Placement(transformation(extent={{-80,60},{-60,80}})));
        Modelica.Blocks.Sources.RealExpression realExpression1(y=30 + 273.15)
          annotation (Placement(transformation(extent={{-80,-20},{-60,0}})));
        Modelica.Blocks.Interfaces.RealInput PEM_TT200(unit="K", displayUnit="degC")
          annotation (Placement(transformation(extent={{-140,20},{-100,60}})));
        Modelica.Blocks.Interfaces.RealInput TFP_CV122
          annotation (Placement(transformation(extent={{-140,80},{-100,120}})));
        Modelica.Blocks.Interfaces.RealInput ECH_TT211(unit="K", displayUnit="degC")
          annotation (Placement(transformation(extent={{-140,-60},{-100,-20}})));
        Modelica.Blocks.Math.MinMax maxi(nu=4)
          annotation (Placement(transformation(extent={{8,-10},{28,10}})));
        Modelica.Blocks.Interfaces.RealOutput y
          annotation (Placement(transformation(extent={{100,-10},{120,10}})));
        Modelica.Blocks.Interfaces.RealInput V_flow annotation (Placement(
              transformation(extent={{-140,-120},{-100,-80}})));
        Modelica.Blocks.Sources.RealExpression realExpression2(y=300/3600)
          annotation (Placement(transformation(extent={{-80,-80},{-60,-60}})));
        Controls.Continuous.LimPID DPT_PID(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=0.1,
          Ti=15,
          reverseActing=true)
          annotation (Placement(transformation(extent={{-40,-80},{-20,-60}})));
        Modelica.Blocks.Logical.GreaterThreshold greaterThreshold
          annotation (Placement(transformation(extent={{-60,120},{-40,140}})));
        Switch_0 switch1
          annotation (Placement(transformation(extent={{60,-10},{80,10}})));
      equation
        connect(TDT.y,TDT_PID. u_m) annotation (Line(points={{-59,40},{-30,40},
                {-30,58}},  color={0,0,127}));
        connect(realExpression1.y,T_PID. u_s)
          annotation (Line(points={{-59,-10},{-42,-10}},
                                                      color={0,0,127}));
        connect(realExpression.y,TDT_PID. u_s)
          annotation (Line(points={{-59,70},{-42,70}},  color={0,0,127}));
        connect(ECH_TT211, T_PID.u_m) annotation (Line(points={{-120,-40},{-30,
                -40},{-30,-22}},
                          color={0,0,127}));
        connect(ECH_TT211, TDT.u2) annotation (Line(points={{-120,-40},{-90,-40},
                {-90,34},{-82,34}},
                               color={0,0,127}));
        connect(T_PID.y, maxi.u[1]) annotation (Line(points={{-19,-10},{-14,-10},
                {-14,5.25},{8,5.25}},
                               color={0,0,127}));
        connect(TDT_PID.y, maxi.u[2]) annotation (Line(points={{-19,70},{-10,70},
                {-10,1.75},{8,1.75}},
                          color={0,0,127}));
        connect(V_flow, DPT_PID.u_m) annotation (Line(points={{-120,-100},{-30,
                -100},{-30,-82}}, color={0,0,127}));
        connect(TFP_CV122, greaterThreshold.u) annotation (Line(points={{-120,
                100},{-92,100},{-92,130},{-62,130}}, color={0,0,127}));
        connect(PEM_TT200, TDT.u1) annotation (Line(points={{-120,40},{-92,40},
                {-92,46},{-82,46}}, color={0,0,127}));
        connect(greaterThreshold.y, switch1.u2) annotation (Line(points={{-39,130},
                {40,130},{40,0},{58,0}},      color={255,0,255}));
        connect(switch1.y, y)
          annotation (Line(points={{81,0},{110,0}}, color={0,0,127}));
        connect(realExpression2.y, DPT_PID.u_s)
          annotation (Line(points={{-59,-70},{-42,-70}}, color={0,0,127}));
        connect(DPT_PID.y, maxi.u[3]) annotation (Line(points={{-19,-70},{0,-70},
                {0,-1.75},{8,-1.75}},  color={0,0,127}));
        connect(TFP_CV122, maxi.u[4]) annotation (Line(points={{-120,100},{2,
                100},{2,-5.25},{8,-5.25}}, color={0,0,127}));
        connect(maxi.yMax, switch1.u1) annotation (Line(points={{29,6},{50,6},{
                50,8},{58,8}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                                      Rectangle(
              extent={{-100,-100},{100,100}},
              lineColor={0,0,127},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-6,-20},{66,-66}},
                lineColor={255,255,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Text(
                visible=(controllerType == Modelica.Blocks.Types.SimpleController.PI),
                extent={{-28,-22},{72,-62}},
                lineColor={0,0,0},
                textString="PI",
                fillPattern=FillPattern.Solid,
                fillColor={175,175,175}),
              Polygon(
                points={{-80,90},{-88,68},{-72,68},{-80,90}},
                lineColor={192,192,192},
                fillColor={192,192,192},
                fillPattern=FillPattern.Solid),
              Line(points={{-80,78},{-80,-90}}, color={192,192,192}),
              Line(points={{-80,-80},{-80,-20},{30,60},{80,60}}, color={0,0,127}),
              Line(points={{-90,-80},{82,-80}}, color={192,192,192}),
              Polygon(
                points={{90,-80},{68,-72},{68,-88},{90,-80}},
                lineColor={192,192,192},
                fillColor={192,192,192},
                fillPattern=FillPattern.Solid),
              Line(
                visible=strict,
                points={{30,60},{81,60}},
                color={255,0,0},
                smooth=Smooth.None)}),                                 Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end PID_temperature;

      model PID_RJC
        Modelica.Blocks.Interfaces.RealInput PEM_TT200(unit="K", displayUnit="degC")
          annotation (Placement(transformation(extent={{-140,60},{-100,100}})));
        Modelica.Blocks.Interfaces.RealInput ECH_TT211(unit="K", displayUnit="degC")
          annotation (Placement(transformation(extent={{-140,20},{-100,60}})));
        Modelica.Blocks.Interfaces.RealOutput y
          annotation (Placement(transformation(extent={{100,-10},{120,10}})));
        Modelica.Blocks.Interfaces.IntegerInput u annotation (Placement(
              transformation(extent={{-140,-60},{-100,-20}})));
        Modelica.Blocks.Interfaces.RealInput CV522 annotation (Placement(
              transformation(extent={{-140,-20},{-100,20}})));
        Switch_TFP_cold cV_switch
          annotation (Placement(transformation(extent={{-20,-40},{0,-20}})));
        Controls.Continuous.LimPID TDT_PID(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=0.1,
          Ti=15,
          reverseActing=false)
          annotation (Placement(transformation(extent={{-20,80},{0,100}})));
        Modelica.Blocks.Math.Add TDT(k1=-1, k2=1)
          annotation (Placement(transformation(extent={{-60,50},{-40,70}})));
        Controls.Continuous.LimPID T_PID(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=0.1,
          Ti=15,
          reverseActing=false)
                annotation (Placement(transformation(extent={{-20,20},{0,40}})));
        Modelica.Blocks.Sources.RealExpression realExpression(y=5)
          annotation (Placement(transformation(extent={{-60,80},{-40,100}})));
        Modelica.Blocks.Sources.RealExpression realExpression1(y=30 + 273.15)
          annotation (Placement(transformation(extent={{-60,20},{-40,40}})));
        Modelica.Blocks.Math.MinMax maxi(nu=4)
          annotation (Placement(transformation(extent={{30,-10},{50,10}})));
        Modelica.Blocks.Sources.RealExpression realExpression2(y=300/3600)
          annotation (Placement(transformation(extent={{-60,-80},{-40,-60}})));
        Controls.Continuous.LimPID DPT_PID(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=0.1,
          Ti=15,
          reverseActing=true)
          annotation (Placement(transformation(extent={{-20,-80},{0,-60}})));
        Modelica.Blocks.Interfaces.RealInput v_flow annotation (Placement(
              transformation(extent={{-140,-110},{-100,-70}})));
        Switch_0 switch1
          annotation (Placement(transformation(extent={{70,-10},{90,10}})));
        Modelica.Blocks.Logical.GreaterThreshold greaterThreshold
          annotation (Placement(transformation(extent={{-20,120},{0,140}})));
      equation
        connect(u, cV_switch.TFP_mode) annotation (Line(points={{-120,-40},{-72,
                -40},{-72,-30},{-22,-30}}, color={255,127,0}));
        connect(TDT.y,TDT_PID. u_m) annotation (Line(points={{-39,60},{-10,60},
                {-10,78}},  color={0,0,127}));
        connect(realExpression1.y,T_PID. u_s)
          annotation (Line(points={{-39,30},{-22,30}},color={0,0,127}));
        connect(realExpression.y,TDT_PID. u_s)
          annotation (Line(points={{-39,90},{-22,90}},  color={0,0,127}));
        connect(T_PID.y,maxi. u[1]) annotation (Line(points={{1,30},{4,30},{4,
                5.25},{30,5.25}},
                               color={0,0,127}));
        connect(TDT_PID.y,maxi. u[2]) annotation (Line(points={{1,90},{8,90},{8,
                1.75},{30,1.75}},
                          color={0,0,127}));
        connect(cV_switch.y, maxi.u[3]) annotation (Line(points={{1,-30},{8,-30},
                {8,-1.75},{30,-1.75}},           color={0,0,127}));
        connect(ECH_TT211, T_PID.u_m) annotation (Line(points={{-120,40},{-80,
                40},{-80,10},{-10,10},{-10,18}},   color={0,0,127}));
        connect(ECH_TT211, TDT.u2) annotation (Line(points={{-120,40},{-80,40},
                {-80,54},{-62,54}}, color={0,0,127}));
        connect(PEM_TT200, TDT.u1) annotation (Line(points={{-120,80},{-92,80},
                {-92,66},{-62,66}}, color={0,0,127}));
        connect(realExpression2.y, DPT_PID.u_s)
          annotation (Line(points={{-39,-70},{-22,-70}}, color={0,0,127}));
        connect(v_flow, DPT_PID.u_m) annotation (Line(points={{-120,-90},{-10,-90},
                {-10,-82}}, color={0,0,127}));
        connect(DPT_PID.y, maxi.u[4]) annotation (Line(points={{1,-70},{20,-70},
                {20,-5.25},{30,-5.25}}, color={0,0,127}));
        connect(CV522, greaterThreshold.u) annotation (Line(points={{-120,0},{
                -86,0},{-86,130},{-22,130}}, color={0,0,127}));
        connect(greaterThreshold.y, switch1.u2) annotation (Line(points={{1,130},
                {64,130},{64,0},{68,0}}, color={255,0,255}));
        connect(switch1.y, y)
          annotation (Line(points={{91,0},{110,0}}, color={0,0,127}));
        connect(CV522, cV_switch.CV522) annotation (Line(points={{-120,0},{-74,
                0},{-74,-24},{-22,-24}}, color={0,0,127}));
        connect(maxi.yMax, switch1.u1) annotation (Line(points={{51,6},{58.5,6},
                {58.5,8},{68,8}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                                      Rectangle(
              extent={{-100,-100},{100,100}},
              lineColor={0,0,127},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-6,-20},{66,-66}},
                lineColor={255,255,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Text(
                visible=(controllerType == Modelica.Blocks.Types.SimpleController.PI),
                extent={{-28,-22},{72,-62}},
                lineColor={0,0,0},
                textString="PI",
                fillPattern=FillPattern.Solid,
                fillColor={175,175,175}),
              Polygon(
                points={{-80,90},{-88,68},{-72,68},{-80,90}},
                lineColor={192,192,192},
                fillColor={192,192,192},
                fillPattern=FillPattern.Solid),
              Line(points={{-80,78},{-80,-90}}, color={192,192,192}),
              Line(points={{-80,-80},{-80,-20},{30,60},{80,60}}, color={0,0,127}),
              Line(points={{-90,-80},{82,-80}}, color={192,192,192}),
              Polygon(
                points={{90,-80},{68,-72},{68,-88},{90,-80}},
                lineColor={192,192,192},
                fillColor={192,192,192},
                fillPattern=FillPattern.Solid),
              Line(
                visible=strict,
                points={{30,60},{81,60}},
                color={255,0,0},
                smooth=Smooth.None)}),                                 Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end PID_RJC;

      model Switch_pump

        parameter Real value;

        Modelica.Blocks.Interfaces.IntegerInput TFP_mode
          annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
        Modelica.Blocks.Interfaces.RealOutput y
          annotation (Placement(transformation(extent={{100,-10},{120,10}})));
      equation
        y=if TFP_mode == 1 then value else 0;
        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                                               Rectangle(
                extent={{-100,100},{100,-100}},
                fillColor={210,210,210},
                lineThickness=5.0,
                fillPattern=FillPattern.Solid,
                borderPattern=BorderPattern.Raised),
              Line(points={{12,0},{100,0}},
                color={0,0,127}),
              Line(points={{-100,0},{-40,0}},
                color={244,125,35}),
              Line(points={{-40,12},{-40,-12}},
                color={244,125,35}),
              Line(points={{-100,80},{-40,80}},         color={0,0,127}),
              Line(
                points={{10,0},{-40,80}},
                color={0,0,127},
                thickness=1.0),
              Ellipse(lineColor={0,0,255},
                pattern=LinePattern.None,
                fillPattern=FillPattern.Solid,
                extent={{2,-8},{18,8}}),
              Text(
                extent={{-90,80},{-46,54}},
                lineColor=DynamicSelect({0,0,0},
                                        if u2 then {0,0,0} else {235,235,235}),
                textString="true"),
              Text(
                extent={{-100,-120},{100,-160}},
                lineColor={0,0,0},
                fillColor={210,210,210},
                fillPattern=FillPattern.Solid,
                textString="if false = %default")}),
                                             Diagram(coordinateSystem(
                preserveAspectRatio=false)));
      end Switch_pump;

      model Switch_TFP_cold
        parameter Real default=1;
        Modelica.Blocks.Interfaces.RealInput CV522
          annotation (Placement(transformation(extent={{-140,40},{-100,80}})));
        Modelica.Blocks.Interfaces.IntegerInput TFP_mode
          annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
        Modelica.Blocks.Interfaces.RealOutput y
          annotation (Placement(transformation(extent={{100,-10},{120,10}})));
      equation
        y=if TFP_mode == 1 then default else CV522;
        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                                               Rectangle(
                extent={{-100,100},{100,-100}},
                fillColor={210,210,210},
                lineThickness=5.0,
                fillPattern=FillPattern.Solid,
                borderPattern=BorderPattern.Raised),
              Line(points={{12,0},{100,0}},
                color={0,0,127}),
              Line(points={{-100,0},{-40,0}},
                color={244,125,35}),
              Line(points={{-40,12},{-40,-12}},
                color={244,125,35}),
              Line(points={{-100,80},{-40,80}},         color={0,0,127}),
              Line(
                points={{10,0},{-40,80}},
                color={0,0,127},
                thickness=1.0),
              Ellipse(lineColor={0,0,255},
                pattern=LinePattern.None,
                fillPattern=FillPattern.Solid,
                extent={{2,-8},{18,8}}),
              Text(
                extent={{-90,80},{-46,54}},
                lineColor=DynamicSelect({0,0,0},
                                        if u2 then {0,0,0} else {235,235,235}),
                textString="true"),
              Text(
                extent={{-100,-120},{100,-160}},
                lineColor={0,0,0},
                fillColor={210,210,210},
                fillPattern=FillPattern.Solid,
                textString="if false = %default")}),
                                             Diagram(coordinateSystem(
                preserveAspectRatio=false)));
      end Switch_TFP_cold;

        package Tests
        extends Modelica.Icons.ExamplesPackage;
          model test_rjf
          PID_temperature pID_RJF
            annotation (Placement(transformation(extent={{0,0},{20,20}})));
          Modelica.Blocks.Sources.RealExpression CV(y=0.5)
            annotation (Placement(transformation(extent={{-100,40},{-80,60}})));
          Modelica.Blocks.Sources.RealExpression PEM(y=20 + 273.15)
            annotation (Placement(transformation(extent={{-100,0},{-80,20}})));
          Modelica.Blocks.Sources.RealExpression TT(y=14 + 273.15)
                                                          annotation (Placement(
                transformation(extent={{-100,-40},{-80,-20}})));
          Modelica.Blocks.Sources.RealExpression DP(y=200/3.6)
                                                          annotation (Placement(
                transformation(extent={{-100,-80},{-80,-60}})));
          equation
          connect(CV.y, pID_RJF.TFP_CV122) annotation (Line(points={{-79,50},{
                  -43.5,50},{-43.5,20},{-2,20}}, color={0,0,127}));
          connect(PEM.y, pID_RJF.PEM_TT200)
            annotation (Line(points={{-79,10},{-40,10},{-40,14},{-2,14}},
                                                        color={0,0,127}));
          connect(TT.y, pID_RJF.ECH_TT211) annotation (Line(points={{-79,-30},{
                  -38,-30},{-38,6},{-2,6}}, color={0,0,127}));
          connect(DP.y, pID_RJF.V_flow) annotation (Line(points={{-79,-70},{-12,
                  -70},{-12,0},{-2,0}}, color={0,0,127}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)),
              Diagram(coordinateSystem(preserveAspectRatio=false)));
          end test_rjf;

          model test_rjc
          PID_RJC pID_RJC
            annotation (Placement(transformation(extent={{-20,20},{0,40}})));
          Modelica.Blocks.Sources.RealExpression CV(y=0.5)
            annotation (Placement(transformation(extent={{-100,-20},{-80,0}})));
          Modelica.Blocks.Sources.RealExpression PEM(y=28)
            annotation (Placement(transformation(extent={{-100,60},{-80,80}})));
          Modelica.Blocks.Sources.RealExpression TT(y=35)
            annotation (Placement(transformation(extent={{-100,20},{-80,40}})));
          Modelica.Blocks.Sources.IntegerExpression integerExpression
            annotation (Placement(transformation(extent={{-100,-60},{-80,-40}})));
          Modelica.Blocks.Sources.RealExpression DP(y=50) annotation (Placement(
                transformation(extent={{-100,-90},{-80,-70}})));
          equation
          connect(PEM.y, pID_RJC.PEM_TT200) annotation (Line(points={{-79,70},{
                  -50,70},{-50,38},{-22,38}}, color={0,0,127}));
          connect(TT.y, pID_RJC.ECH_TT211) annotation (Line(points={{-79,30},{
                  -51.5,30},{-51.5,34},{-22,34}}, color={0,0,127}));
          connect(CV.y, pID_RJC.CV522) annotation (Line(points={{-79,-10},{-52,
                  -10},{-52,30},{-22,30}}, color={0,0,127}));
          connect(integerExpression.y, pID_RJC.u) annotation (Line(points={{-79,-50},
                  {-40,-50},{-40,26},{-22,26}},      color={255,127,0}));
          connect(DP.y, pID_RJC.v_flow) annotation (Line(points={{-79,-80},{-28,
                  -80},{-28,21},{-22,21}}, color={0,0,127}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)),
              Diagram(coordinateSystem(preserveAspectRatio=false)));
          end test_rjc;
        end Tests;
    end RJC_RJF;

    package TFP
      extends Modelica.Icons.VariantsPackage;
      model PID_Valve_evap

        parameter Real T_cons_cold = 14+273.15;
        parameter Real T_cons_hot = 61+273.15;
        Modelica.Blocks.Math.Max max
          annotation (Placement(transformation(extent={{-80,60},{-60,80}})));
        Modelica.Blocks.Math.Min min
          annotation (Placement(transformation(extent={{-40,40},{-20,60}})));
        Modelica.Blocks.Sources.RealExpression limit_cold(y=T_cons_cold)
          annotation (Placement(transformation(extent={{-80,30},{-60,50}})));
        Controls.Continuous.LimPID PID_Tevap(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=0.1,
          Ti=15,
          initType=Modelica.Blocks.Types.InitPID.NoInit,
          reverseActing=true) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={0,50})));
        Modelica.Blocks.Sources.RealExpression limit_hot(y=T_cons_hot)
          annotation (Placement(transformation(extent={{-40,-60},{-20,-40}})));
        Controls.Continuous.LimPID PID_Tcond(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=0.1,
          Ti=15,
          initType=Modelica.Blocks.Types.InitPID.NoInit,
          reverseActing=true) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={0,-50})));
        opposite            opposite1
          annotation (Placement(transformation(extent={{70,-60},{90,-40}})));
        Modelica.Blocks.Interfaces.RealInput PEM_TT200
          annotation (Placement(transformation(extent={{-140,60},{-100,100}})));
        Modelica.Blocks.Interfaces.RealInput DEG_TT121
          annotation (Placement(transformation(extent={{-140,20},{-100,60}})));
        Modelica.Blocks.Interfaces.RealInput TFP_TT121
          annotation (Placement(transformation(extent={{-140,-60},{-100,-20}})));
        Modelica.Blocks.Interfaces.RealInput TFP_TT511
          annotation (Placement(transformation(extent={{-140,-100},{-100,-60}})));
        Modelica.Blocks.Math.Min min1
          annotation (Placement(transformation(extent={{30,-10},{50,10}})));
        Modelica.Blocks.Interfaces.RealOutput CV122
          annotation (Placement(transformation(extent={{100,40},{120,60}})));
        Modelica.Blocks.Interfaces.RealOutput CV121
          annotation (Placement(transformation(extent={{100,-60},{120,-40}})));
      equation
        connect(PEM_TT200, max.u1) annotation (Line(points={{-120,80},{-90,80},{-90,
                76},{-82,76}},
                           color={0,0,127}));
        connect(max.u2,DEG_TT121)  annotation (Line(points={{-82,64},{-90,64},{-90,40},
                {-120,40}}, color={0,0,127}));
        connect(limit_cold.y, min.u2) annotation (Line(points={{-59,40},{-50,40},{-50,
                44},{-42,44}}, color={0,0,127}));
        connect(max.y, min.u1) annotation (Line(points={{-59,70},{-50,70},{-50,56},{
                -42,56}},
                      color={0,0,127}));
        connect(TFP_TT121, PID_Tevap.u_m) annotation (Line(points={{-120,-40},{
                -60,-40},{-60,0},{0,0},{0,38}}, color={0,0,127}));
        connect(min.y, PID_Tevap.u_s)
          annotation (Line(points={{-19,50},{-12,50}}, color={0,0,127}));
        connect(limit_hot.y, PID_Tcond.u_s)
          annotation (Line(points={{-19,-50},{-12,-50}}, color={0,0,127}));
        connect(TFP_TT511, PID_Tcond.u_m) annotation (Line(points={{-120,-80},{
                0,-80},{0,-62}}, color={0,0,127}));
        connect(PID_Tcond.y, min1.u2) annotation (Line(points={{11,-50},{20,-50},
                {20,-6},{28,-6}}, color={0,0,127}));
        connect(PID_Tevap.y, min1.u1) annotation (Line(points={{11,50},{20,50},
                {20,6},{28,6}}, color={0,0,127}));
        connect(min1.y, CV122) annotation (Line(points={{51,0},{60,0},{60,50},{
                110,50}}, color={0,0,127}));
        connect(min1.y, opposite1.u) annotation (Line(points={{51,0},{60,0},{60,-50},
                {68,-50}}, color={0,0,127}));
        connect(CV121, opposite1.y)
          annotation (Line(points={{110,-50},{91,-50}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                                      Rectangle(
              extent={{-100,-100},{100,100}},
              lineColor={0,0,127},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-6,-20},{66,-66}},
                lineColor={255,255,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Text(
                visible=(controllerType == Modelica.Blocks.Types.SimpleController.PI),
                extent={{-28,-22},{72,-62}},
                lineColor={0,0,0},
                textString="PI",
                fillPattern=FillPattern.Solid,
                fillColor={175,175,175}),
              Polygon(
                points={{-80,90},{-88,68},{-72,68},{-80,90}},
                lineColor={192,192,192},
                fillColor={192,192,192},
                fillPattern=FillPattern.Solid),
              Line(points={{-80,78},{-80,-90}}, color={192,192,192}),
              Line(points={{-80,-80},{-80,-20},{30,60},{80,60}}, color={0,0,127}),
              Line(points={{-90,-80},{82,-80}}, color={192,192,192}),
              Polygon(
                points={{90,-80},{68,-72},{68,-88},{90,-80}},
                lineColor={192,192,192},
                fillColor={192,192,192},
                fillPattern=FillPattern.Solid),
              Line(
                visible=strict,
                points={{30,60},{81,60}},
                color={255,0,0},
                smooth=Smooth.None)}),                                 Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end PID_Valve_evap;

      model PID_Valve_cond

        parameter Real T_cons_hot_min = 41 + 273.15;
        parameter Real T_cons_hot_max = 63 + 273.15;
        Modelica.Blocks.Math.Min min
          annotation (Placement(transformation(extent={{-20,-10},{0,10}})));
        Modelica.Blocks.Sources.RealExpression limit_hot_max(y=T_cons_hot_max)
          annotation (Placement(transformation(extent={{-100,80},{-80,100}})));
        Controls.Continuous.LimPID PID_Tmax(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=0.1,
          Ti=120,
          initType=Modelica.Blocks.Types.InitPID.NoInit,
          reverseActing=false)
                              annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-60,90})));
        Modelica.Blocks.Sources.RealExpression limit_hot_min(y=T_cons_hot_min)
          annotation (Placement(transformation(extent={{-100,-60},{-80,-40}})));
        Controls.Continuous.LimPID PID_Tmin(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=0.1,
          Ti=120,
          initType=Modelica.Blocks.Types.InitPID.NoInit,
          reverseActing=false) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-60,-50})));
        opposite            opposite1
          annotation (Placement(transformation(extent={{70,-60},{90,-40}})));
        Modelica.Blocks.Interfaces.RealInput TFP_TT511
          annotation (Placement(transformation(extent={{-140,40},{-100,80}})));
        Modelica.Blocks.Interfaces.RealInput TFP_TT521
          annotation (Placement(transformation(extent={{-140,-100},{-100,-60}})));
        Modelica.Blocks.Interfaces.RealOutput CV522
          annotation (Placement(transformation(extent={{100,40},{120,60}})));
        Modelica.Blocks.Interfaces.RealOutput CV521
          annotation (Placement(transformation(extent={{100,-60},{120,-40}})));
        Modelica.Blocks.Interfaces.IntegerInput TFP_mode
          annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
        RJC_RJF.Switch_TFP_cold switch_TFP_cold
          annotation (Placement(transformation(extent={{20,-40},{40,-20}})));
      equation
        connect(limit_hot_min.y, PID_Tmin.u_s)
          annotation (Line(points={{-79,-50},{-72,-50}}, color={0,0,127}));
        connect(TFP_TT521, PID_Tmin.u_m) annotation (Line(points={{-120,-80},{
                -60,-80},{-60,-62}},
                                 color={0,0,127}));
        connect(CV521, opposite1.y)
          annotation (Line(points={{110,-50},{91,-50}}, color={0,0,127}));
        connect(limit_hot_max.y, PID_Tmax.u_s)
          annotation (Line(points={{-79,90},{-72,90}}, color={0,0,127}));
        connect(TFP_TT511, PID_Tmax.u_m) annotation (Line(points={{-120,60},{
                -60,60},{-60,78}},
                               color={0,0,127}));
        connect(PID_Tmax.y, min.u1) annotation (Line(points={{-49,90},{-40,90},
                {-40,6},{-22,6}},
                            color={0,0,127}));
        connect(PID_Tmin.y, min.u2) annotation (Line(points={{-49,-50},{-40,-50},
                {-40,-6},{-22,-6}},
                                 color={0,0,127}));
        connect(min.y, switch_TFP_cold.CV522) annotation (Line(points={{1,0},{8,
                0},{8,-24},{18,-24}}, color={0,0,127}));
        connect(TFP_mode, switch_TFP_cold.TFP_mode) annotation (Line(points={{
                -120,0},{-80,0},{-80,-30},{18,-30}}, color={255,127,0}));
        connect(switch_TFP_cold.y, opposite1.u) annotation (Line(points={{41,
                -30},{54,-30},{54,-50},{68,-50}}, color={0,0,127}));
        connect(switch_TFP_cold.y, CV522) annotation (Line(points={{41,-30},{54,
                -30},{54,50},{110,50}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                                      Rectangle(
              extent={{-100,-100},{100,100}},
              lineColor={0,0,127},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-6,-20},{66,-66}},
                lineColor={255,255,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Text(
                visible=(controllerType == Modelica.Blocks.Types.SimpleController.PI),
                extent={{-28,-22},{72,-62}},
                lineColor={0,0,0},
                textString="PI",
                fillPattern=FillPattern.Solid,
                fillColor={175,175,175}),
              Polygon(
                points={{-80,90},{-88,68},{-72,68},{-80,90}},
                lineColor={192,192,192},
                fillColor={192,192,192},
                fillPattern=FillPattern.Solid),
              Line(points={{-80,78},{-80,-90}}, color={192,192,192}),
              Line(points={{-80,-80},{-80,-20},{30,60},{80,60}}, color={0,0,127}),
              Line(points={{-90,-80},{82,-80}}, color={192,192,192}),
              Polygon(
                points={{90,-80},{68,-72},{68,-88},{90,-80}},
                lineColor={192,192,192},
                fillColor={192,192,192},
                fillPattern=FillPattern.Solid),
              Line(
                visible=strict,
                points={{30,60},{81,60}},
                color={255,0,0},
                smooth=Smooth.None)}),                                 Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(__Dymola_Algorithm="Dassl"));
      end PID_Valve_cond;

      package Tests
        extends Modelica.Icons.ExamplesPackage;
        model test_valve_evap
          PID_Valve_evap valve_evap
            annotation (Placement(transformation(extent={{-20,0},{0,20}})));
          Modelica.Blocks.Sources.RealExpression realExpression(y=15 + 273.15)
            annotation (Placement(transformation(extent={{-102,60},{-82,80}})));
          Modelica.Blocks.Sources.RealExpression realExpression1(y=17 + 273.15)
            annotation (Placement(transformation(extent={{-100,20},{-80,40}})));
          Modelica.Blocks.Sources.RealExpression realExpression2(y=12 + 273.15)
            annotation (Placement(transformation(extent={{-100,-20},{-80,0}})));
          Modelica.Blocks.Sources.RealExpression realExpression3(y=62 + 273.15)
            annotation (Placement(transformation(extent={{-100,-60},{-80,-40}})));
        equation
          connect(realExpression.y, valve_evap.PEM_TT200) annotation (Line(
                points={{-81,70},{-52,70},{-52,18},{-22,18}}, color={0,0,127}));
          connect(realExpression1.y, valve_evap.DEG_TT121) annotation (Line(
                points={{-79,30},{-50,30},{-50,14},{-22,14}}, color={0,0,127}));
          connect(realExpression2.y, valve_evap.TFP_TT121) annotation (Line(
                points={{-79,-10},{-51.5,-10},{-51.5,6},{-22,6}}, color={0,0,
                  127}));
          connect(realExpression3.y, valve_evap.TFP_TT511) annotation (Line(
                points={{-79,-50},{-50,-50},{-50,2},{-22,2}}, color={0,0,127}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)),
              Diagram(coordinateSystem(preserveAspectRatio=false)));
        end test_valve_evap;

        model test_cond
          PID_Valve_cond pID_Valve_cond
            annotation (Placement(transformation(extent={{-20,0},{0,20}})));
          Modelica.Blocks.Sources.RealExpression realExpression2(y=65 + 273.15)
            annotation (Placement(transformation(extent={{-100,20},{-80,40}})));
          Modelica.Blocks.Sources.RealExpression realExpression3(y=55 + 273.15)
            annotation (Placement(transformation(extent={{-100,-20},{-80,0}})));
        equation
          connect(realExpression2.y, pID_Valve_cond.TFP_TT511) annotation (Line(
                points={{-79,30},{-50,30},{-50,16},{-22,16}}, color={0,0,127}));
          connect(realExpression3.y, pID_Valve_cond.TFP_TT521) annotation (Line(
                points={{-79,-10},{-50,-10},{-50,2},{-22,2}}, color={0,0,127}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)),
              Diagram(coordinateSystem(preserveAspectRatio=false)));
        end test_cond;

        model test_ft
          Modelica.Blocks.Sources.RealExpression limit_hot_min1(y=10)
            annotation (Placement(transformation(extent={{-80,-20},{-60,0}})));
          Modelica.Blocks.Sources.RealExpression limit_hot_max(y=14)
            annotation (Placement(transformation(extent={{-80,20},{-60,40}})));
          Modelica.Blocks.Interfaces.RealOutput y
            annotation (Placement(transformation(extent={{20,20},{40,40}})));
          Controls.Continuous.LimPID PID_Tevap(
            controllerType=Modelica.Blocks.Types.SimpleController.PI,
            k=5,
            Ti=7,
            initType=Modelica.Blocks.Types.InitPID.NoInit,
            reverseActing=false)
                                annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-30,30})));
        equation
          connect(limit_hot_max.y, PID_Tevap.u_s)
            annotation (Line(points={{-59,30},{-42,30}}, color={0,0,127}));
          connect(limit_hot_min1.y, PID_Tevap.u_m) annotation (Line(points={{
                  -59,-10},{-30,-10},{-30,18}}, color={0,0,127}));
          connect(PID_Tevap.y, y)
            annotation (Line(points={{-19,30},{30,30}}, color={0,0,127}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)),
              Diagram(coordinateSystem(preserveAspectRatio=false)));
        end test_ft;
      end Tests;
    end TFP;

    package PEC_PEG
        extends Modelica.Icons.VariantsPackage;
      block switch_tfp_pec "Convert Integer to Real signals"
        extends Modelica.Blocks.Icons.Block;
        Modelica.Blocks.Interfaces.IntegerInput u "Connector of Integer input signal"
          annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
        Modelica.Blocks.Interfaces.RealOutput y "Connector of Real output signal"
          annotation (Placement(transformation(extent={{100,-10},{120,10}})));
          parameter Real Q_tfp=211;
      equation
        y = if u == 0 or u == 1 then 0 else Q_tfp*1000/3600;
        annotation (Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100.0,-100.0},{100.0,100.0}}), graphics={
              Text(
                lineColor={255,127,0},
                extent={{-120.0,-40.0},{-20.0,40.0}},
                textString="I"),
              Text(
                lineColor={0,0,127},
                extent={{0.0,-40.0},{100.0,40.0}},
                textString="R"),
              Polygon(
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid,
                points={{10.0,0.0},{-10.0,20.0},{-10.0,10.0},{-40.0,10.0},{-40.0,-10.0},
                    {-10.0,-10.0},{-10.0,-20.0},{10.0,0.0}})}), Documentation(info="<html>
<p>
This block computes the output <strong>y</strong>
as <em>Real equivalent</em> of the Integer input <strong>u</strong>:
</p>
<pre>    y = u;
</pre>
<p>where <strong>u</strong> is of Integer and <strong>y</strong> of Real type.</p>
</html>"));
      end switch_tfp_pec;

      block switch_tfp_peg "Convert Integer to Real signals"
        extends Modelica.Blocks.Icons.Block;
        parameter Real Q_tfp_solo=166;
      parameter Real Q_tfp_duo=322;
        Modelica.Blocks.Interfaces.IntegerInput u "Connector of Integer input signal"
          annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
        Modelica.Blocks.Interfaces.RealOutput y "Connector of Real output signal"
          annotation (Placement(transformation(extent={{100,-10},{120,10}})));
      equation
        if u == 0 then
          y = 0;
        else
          if u == 1 then
            y = Q_tfp_solo * 1000 / 3600;
          else
            y = Q_tfp_duo * 1000 / 3600;
          end if;
        end if;
        annotation (Icon(coordinateSystem(
              preserveAspectRatio=true,
              extent={{-100.0,-100.0},{100.0,100.0}}), graphics={
              Text(
                lineColor={255,127,0},
                extent={{-120.0,-40.0},{-20.0,40.0}},
                textString="I"),
              Text(
                lineColor={0,0,127},
                extent={{0.0,-40.0},{100.0,40.0}},
                textString="R"),
              Polygon(
                lineColor={0,0,127},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid,
                points={{10.0,0.0},{-10.0,20.0},{-10.0,10.0},{-40.0,10.0},{-40.0,-10.0},
                    {-10.0,-10.0},{-10.0,-20.0},{10.0,0.0}})}), Documentation(info="<html>
<p>
This block computes the output <strong>y</strong>
as <em>Real equivalent</em> of the Integer input <strong>u</strong>:
</p>
<pre>    y = u;
</pre>
<p>where <strong>u</strong> is of Integer and <strong>y</strong> of Real type.</p>
</html>"));
      end switch_tfp_peg;

      model activation_pec
        Modelica.Blocks.Interfaces.IntegerInput tfp
          annotation (Placement(transformation(extent={{-140,30},{-100,70}})));
        Modelica.Blocks.Interfaces.BooleanInput cha
          annotation (Placement(transformation(extent={{-140,-70},{-100,-30}})));
        switch_tfp_pec integerToReal
          annotation (Placement(transformation(extent={{-80,40},{-60,60}})));
        Modelica.Blocks.Math.BooleanToReal booleanToReal(realTrue=200*1000/3600)
          annotation (Placement(transformation(extent={{-80,-60},{-60,-40}})));
        Modelica.Blocks.Math.Add add
          annotation (Placement(transformation(extent={{-40,40},{-20,60}})));
        Modelica.StateGraph.InitialStep initialStep1
          annotation (Placement(transformation(extent={{100,60},{120,80}})));
        Modelica.StateGraph.StepWithSignal pump_1_start1(nIn=1, nOut=1)
          annotation (Placement(transformation(extent={{180,60},{200,80}})));
        Modelica.StateGraph.Transition transition9(enableTimer=true, waitTime=120)
          annotation (Placement(transformation(extent={{220,60},{240,80}})));
        Modelica.StateGraph.StepWithSignal pump_6(nIn=2, nOut=2)
          annotation (Placement(transformation(extent={{260,60},{280,80}})));
        Modelica.StateGraph.TransitionWithSignal transitionWithSignal8
          annotation (Placement(transformation(extent={{140,60},{160,80}})));
        Modelica.StateGraph.StepWithSignal pump_2_start1(nIn=1, nOut=1)
          annotation (Placement(transformation(extent={{340,20},{360,40}})));
        Modelica.StateGraph.Transition transition10(enableTimer=true, waitTime=120)
          annotation (Placement(transformation(extent={{380,20},{400,40}})));
        Modelica.StateGraph.StepWithSignal pump_7(nIn=2, nOut=2)
          annotation (Placement(transformation(extent={{420,20},{440,40}})));
        Modelica.StateGraph.TransitionWithSignal transitionWithSignal9
          annotation (Placement(transformation(extent={{460,20},{480,40}})));
        Modelica.Blocks.Logical.GreaterThreshold greaterThreshold
          annotation (Placement(transformation(extent={{0,60},{20,80}})));
        Modelica.StateGraph.TransitionWithSignal transitionWithSignal10
          annotation (Placement(transformation(extent={{300,20},{320,40}})));
        Modelica.Blocks.Logical.GreaterThreshold greaterThreshold1(threshold=350*1000
              /3600) annotation (Placement(transformation(extent={{0,20},{20,40}})));
        Modelica.StateGraph.TransitionWithSignal transitionWithSignal11
          annotation (Placement(transformation(extent={{300,60},{320,80}})));
        Modelica.Blocks.Logical.Not not1
          annotation (Placement(transformation(extent={{160,0},{180,20}})));
        Modelica.StateGraph.TransitionWithSignal transitionWithSignal12
          annotation (Placement(transformation(extent={{460,-20},{480,0}})));
        Modelica.Blocks.Logical.LessThreshold lessThreshold(threshold=300*1000/3600)
          annotation (Placement(transformation(extent={{340,-40},{360,-20}})));
        Modelica.Blocks.Logical.GreaterThreshold greaterThreshold2(threshold=700*1000
              /3600)
          annotation (Placement(transformation(extent={{380,-60},{400,-40}})));
        Modelica.StateGraph.StepWithSignal pump_2_start2(nIn=1, nOut=1)
          annotation (Placement(transformation(extent={{500,-20},{520,0}})));
        Modelica.StateGraph.Transition transition11(enableTimer=true, waitTime=120)
          annotation (Placement(transformation(extent={{540,-20},{560,0}})));
        Modelica.StateGraph.StepWithSignal pump_8(nIn=1, nOut=1)
          annotation (Placement(transformation(extent={{580,-20},{600,0}})));
        Modelica.StateGraph.TransitionWithSignal transitionWithSignal13
          annotation (Placement(transformation(extent={{620,-20},{640,0}})));
        Modelica.Blocks.Logical.LessThreshold lessThreshold1(threshold=650*1000/3600)
          annotation (Placement(transformation(extent={{540,-80},{560,-60}})));
        Modelica.Blocks.MathBoolean.Or pump_working1(nu=2)
          annotation (Placement(transformation(extent={{280,-120},{300,-100}})));
        Modelica.Blocks.MathBoolean.Or pump_working2(nu=2)
          annotation (Placement(transformation(extent={{440,-120},{460,-100}})));
        Modelica.Blocks.MathBoolean.Or pump_working3(nu=2)
          annotation (Placement(transformation(extent={{600,-120},{620,-100}})));
        mass_rate_pump mass_rate_pum1 annotation (Placement(transformation(
                extent={{640,-160},{660,-140}})));
        Modelica.Blocks.Interfaces.RealOutput y[3]
          annotation (Placement(transformation(extent={{100,-10},{120,10}})));
      equation
        connect(tfp, integerToReal.u)
          annotation (Line(points={{-120,50},{-82,50}}, color={255,127,0}));
        connect(cha, booleanToReal.u)
          annotation (Line(points={{-120,-50},{-82,-50}}, color={255,0,255}));
        connect(integerToReal.y, add.u1) annotation (Line(points={{-59,50},{-54,50},
                {-54,56},{-42,56}}, color={0,0,127}));
        connect(booleanToReal.y, add.u2) annotation (Line(points={{-59,-50},{-48,-50},
                {-48,44},{-42,44}}, color={0,0,127}));
        connect(initialStep1.outPort[1], transitionWithSignal8.inPort)
          annotation (Line(points={{120.5,70},{146,70}}, color={0,0,0}));
        connect(add.y, greaterThreshold.u) annotation (Line(points={{-19,50},{-12,50},
                {-12,70},{-2,70}}, color={0,0,127}));
        connect(greaterThreshold.y, transitionWithSignal8.condition) annotation (
            Line(points={{21,70},{60,70},{60,40},{150,40},{150,58}}, color={255,0,255}));
        connect(transitionWithSignal8.outPort, pump_1_start1.inPort[1])
          annotation (Line(points={{151.5,70},{179,70}}, color={0,0,0}));
        connect(pump_1_start1.outPort[1], transition9.inPort)
          annotation (Line(points={{200.5,70},{226,70}}, color={0,0,0}));
        connect(add.y, greaterThreshold1.u) annotation (Line(points={{-19,50},{-12,50},
                {-12,30},{-2,30}}, color={0,0,127}));
        connect(greaterThreshold1.y, transitionWithSignal10.condition) annotation (
            Line(points={{21,30},{40,30},{40,-10},{310,-10},{310,18}}, color={255,0,
                255}));
        connect(pump_6.outPort[1], transitionWithSignal11.inPort) annotation (Line(
              points={{280.5,70.25},{292,70.25},{292,70},{306,70}}, color={0,0,0}));
        connect(greaterThreshold.y, not1.u) annotation (Line(points={{21,70},{60,70},
                {60,10},{158,10}}, color={255,0,255}));
        connect(not1.y, transitionWithSignal11.condition) annotation (Line(points={{
                181,10},{300,10},{300,52},{310,52},{310,58}}, color={255,0,255}));
        connect(pump_6.outPort[2], transitionWithSignal10.inPort) annotation (Line(
              points={{280.5,69.75},{292,69.75},{292,30},{306,30}}, color={0,0,0}));
        connect(transitionWithSignal10.outPort, pump_2_start1.inPort[1])
          annotation (Line(points={{311.5,30},{339,30}}, color={0,0,0}));
        connect(pump_2_start1.outPort[1], transition10.inPort)
          annotation (Line(points={{360.5,30},{386,30}}, color={0,0,0}));
        connect(transition10.outPort, pump_7.inPort[1]) annotation (Line(points={{391.5,
                30},{406,30},{406,30.5},{419,30.5}}, color={0,0,0}));
        connect(pump_7.outPort[1], transitionWithSignal9.inPort) annotation (Line(
              points={{440.5,30.25},{454,30.25},{454,30},{466,30}}, color={0,0,0}));
        connect(add.y, lessThreshold.u) annotation (Line(points={{-19,50},{-12,50},{
                -12,-30},{338,-30}}, color={0,0,127}));
        connect(transitionWithSignal11.outPort, initialStep1.inPort[1]) annotation (
           Line(points={{311.5,70},{340,70},{340,120},{88,120},{88,70},{99,70}},
              color={0,0,0}));
        connect(transition9.outPort, pump_6.inPort[1]) annotation (Line(points={{231.5,
                70},{246,70},{246,70.5},{259,70.5}}, color={0,0,0}));
        connect(transitionWithSignal9.outPort, pump_6.inPort[2]) annotation (Line(
              points={{471.5,30},{500,30},{500,100},{248,100},{248,69.5},{259,69.5}},
              color={0,0,0}));
        connect(pump_7.outPort[2], transitionWithSignal12.inPort) annotation (Line(
              points={{440.5,29.75},{452,29.75},{452,-10},{466,-10}}, color={0,0,0}));
        connect(lessThreshold.y, transitionWithSignal9.condition) annotation (Line(
              points={{361,-30},{460,-30},{460,10},{470,10},{470,18}}, color={255,0,
                255}));
        connect(greaterThreshold2.y, transitionWithSignal12.condition) annotation (
            Line(points={{401,-50},{470,-50},{470,-22}}, color={255,0,255}));
        connect(transitionWithSignal12.outPort, pump_2_start2.inPort[1])
          annotation (Line(points={{471.5,-10},{499,-10}}, color={0,0,0}));
        connect(pump_2_start2.outPort[1], transition11.inPort)
          annotation (Line(points={{520.5,-10},{546,-10}}, color={0,0,0}));
        connect(transition11.outPort, pump_8.inPort[1])
          annotation (Line(points={{551.5,-10},{579,-10}}, color={0,0,0}));
        connect(add.y, greaterThreshold2.u) annotation (Line(points={{-19,50},{-12,50},
                {-12,-50},{378,-50}}, color={0,0,127}));
        connect(pump_8.outPort[1], transitionWithSignal13.inPort)
          annotation (Line(points={{600.5,-10},{626,-10}}, color={0,0,0}));
        connect(lessThreshold1.y, transitionWithSignal13.condition) annotation (
            Line(points={{561,-70},{630,-70},{630,-22}}, color={255,0,255}));
        connect(add.y, lessThreshold1.u) annotation (Line(points={{-19,50},{-12,50},
                {-12,-70},{538,-70}}, color={0,0,127}));
        connect(transitionWithSignal13.outPort, pump_7.inPort[2]) annotation (Line(
              points={{631.5,-10},{660,-10},{660,60},{410,60},{410,29.5},{419,29.5}},
              color={0,0,0}));
        connect(pump_1_start1.active, pump_working1.u[1]) annotation (Line(points={{
                190,59},{190,-106.5},{280,-106.5}}, color={255,0,255}));
        connect(pump_6.active, pump_working1.u[2]) annotation (Line(points={{270,59},
                {270,-113.5},{280,-113.5}}, color={255,0,255}));
        connect(pump_2_start1.active, pump_working2.u[1]) annotation (Line(points={{
                350,19},{350,0},{420,0},{420,-106.5},{440,-106.5}}, color={255,0,255}));
        connect(pump_7.active, pump_working2.u[2]) annotation (Line(points={{430,19},
                {430,-113.5},{440,-113.5}}, color={255,0,255}));
        connect(pump_2_start2.active, pump_working3.u[1]) annotation (Line(points={{
                510,-21},{510,-40},{580,-40},{580,-106.5},{600,-106.5}}, color={255,
                0,255}));
        connect(pump_8.active, pump_working3.u[2]) annotation (Line(points={{590,-21},
                {590,-113.5},{600,-113.5}}, color={255,0,255}));
        connect(pump_working1.y, mass_rate_pum1.u1) annotation (Line(points={{
                301.5,-110},{380,-110},{380,-140},{638,-140}}, color={255,0,255}));
        connect(pump_working2.y, mass_rate_pum1.u2) annotation (Line(points={{
                461.5,-110},{482,-110},{482,-146},{638,-146}}, color={255,0,255}));
        connect(pump_working3.y, mass_rate_pum1.u3) annotation (Line(points={{
                621.5,-110},{630,-110},{630,-152},{638,-152}}, color={255,0,255}));
        connect(add.y, mass_rate_pum1.u) annotation (Line(points={{-19,50},{-12,
                50},{-12,-160},{638,-160}}, color={0,0,127}));
        connect(mass_rate_pum1.y, y) annotation (Line(points={{661,-150},{680,-150},{680,
                -180},{80,-180},{80,0},{110,0}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={28,108,200},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-100,100},{0,0}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.None,
                textString="+"),
              Text(
                extent={{0,0},{100,-100}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.None,
                textString="-"),
              Line(
                points={{-54,-58},{66,62}},
                color={0,0,0},
                thickness=1)}),                                        Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end activation_pec;

      block mass_rate_pump

        Controls.OBC.CDL.Interfaces.BooleanInput u1
          "Connector of first Boolean input signal"
          annotation (Placement(transformation(extent={{-140,80},{-100,120}})));

        Controls.OBC.CDL.Interfaces.BooleanInput u2
          "Connector of second Boolean input signal"
          annotation (Placement(transformation(extent={{-140,20},{-100,60}})));
        Controls.OBC.CDL.Interfaces.BooleanInput u3
          "Connector of second Boolean input signal"
          annotation (Placement(transformation(extent={{-140,-40},{-100,0}})));

        Modelica.Blocks.Interfaces.RealOutput y[3]
          annotation (Placement(transformation(extent={{100,-10},{120,10}})));
        Modelica.Blocks.Interfaces.RealInput u
          annotation (Placement(transformation(extent={{-140,-120},{-100,-80}})));

      equation

        if u3 then
          y[1] = u/3;
          y[2]=u/3;
          y[3] = u/3;
        else
          if u2 then
            y[1] = u/2;
            y[2] = u/2;
            y[3] = 0;
          else
            if u1 then
              y[1] = u;
              y[2] = 0;
              y[3] = 0;
            else
              y[1] = 0;
              y[2] = 0;
              y[3] = 0;
            end if;
          end if;
        end if;

        annotation (Icon(graphics={            Rectangle(
                extent={{-100,100},{100,-100}},
                fillColor={210,210,210},
                fillPattern=FillPattern.Solid,
                borderPattern=BorderPattern.Raised),
              Ellipse(
                extent={{-58,18},{58,-98}},
                lineColor={0,0,0},
                fillPattern=FillPattern.Sphere,
                fillColor={0,100,199}),
              Polygon(
                points={{0,10},{0,-90},{54,-40},{0,10}},
                lineColor={0,0,0},
                pattern=LinePattern.None,
                fillPattern=FillPattern.HorizontalCylinder,
                fillColor={255,255,255}),
              Ellipse(
                extent={{4,-24},{36,-56}},
                lineColor={0,0,0},
                fillPattern=FillPattern.Sphere,
                visible=energyDynamics <> Modelica.Fluid.Types.Dynamics.SteadyState,
                fillColor={0,100,199}),
              Text(
                extent={{-60,80},{60,20}},
                lineColor={0,0,0},
                textString="m_flow")}));
      end mass_rate_pump;

      model activation_peg
        Modelica.Blocks.Interfaces.IntegerInput tfp
          annotation (Placement(transformation(extent={{-140,50},{-100,90}})));
        Modelica.Blocks.Interfaces.BooleanInput gf1
          annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
        Modelica.Blocks.Math.BooleanToReal booleanToReal(realTrue=500*1000/3600)
          annotation (Placement(transformation(extent={{-80,-10},{-60,10}})));
        Modelica.Blocks.Math.MultiSum add(nu=3)
          annotation (Placement(transformation(extent={{-40,40},{-20,60}})));
        Modelica.StateGraph.InitialStep initialStep1
          annotation (Placement(transformation(extent={{100,60},{120,80}})));
        Modelica.StateGraph.StepWithSignal pump_1_start1(nIn=1, nOut=1)
          annotation (Placement(transformation(extent={{180,60},{200,80}})));
        Modelica.StateGraph.Transition transition9(enableTimer=true, waitTime=120)
          annotation (Placement(transformation(extent={{220,60},{240,80}})));
        Modelica.StateGraph.StepWithSignal pump_6(nIn=2, nOut=2)
          annotation (Placement(transformation(extent={{260,60},{280,80}})));
        Modelica.StateGraph.TransitionWithSignal transitionWithSignal8
          annotation (Placement(transformation(extent={{140,60},{160,80}})));
        Modelica.StateGraph.StepWithSignal pump_2_start1(nIn=1, nOut=1)
          annotation (Placement(transformation(extent={{340,20},{360,40}})));
        Modelica.StateGraph.Transition transition10(enableTimer=true, waitTime=120)
          annotation (Placement(transformation(extent={{380,20},{400,40}})));
        Modelica.StateGraph.StepWithSignal pump_7(nIn=2, nOut=2)
          annotation (Placement(transformation(extent={{420,20},{440,40}})));
        Modelica.StateGraph.TransitionWithSignal transitionWithSignal9
          annotation (Placement(transformation(extent={{460,20},{480,40}})));
        Modelica.Blocks.Logical.GreaterThreshold greaterThreshold
          annotation (Placement(transformation(extent={{0,60},{20,80}})));
        Modelica.StateGraph.TransitionWithSignal transitionWithSignal10
          annotation (Placement(transformation(extent={{300,20},{320,40}})));
        Modelica.Blocks.Logical.GreaterThreshold greaterThreshold1(threshold=
              760*1000/3600)
                     annotation (Placement(transformation(extent={{0,20},{20,40}})));
        Modelica.StateGraph.TransitionWithSignal transitionWithSignal11
          annotation (Placement(transformation(extent={{300,60},{320,80}})));
        Modelica.Blocks.Logical.Not not1
          annotation (Placement(transformation(extent={{160,0},{180,20}})));
        Modelica.StateGraph.TransitionWithSignal transitionWithSignal12
          annotation (Placement(transformation(extent={{460,-20},{480,0}})));
        Modelica.Blocks.Logical.LessThreshold lessThreshold(threshold=300*1000/3600)
          annotation (Placement(transformation(extent={{340,-40},{360,-20}})));
        Modelica.Blocks.Logical.GreaterThreshold greaterThreshold2(threshold=700*1000
              /3600)
          annotation (Placement(transformation(extent={{380,-60},{400,-40}})));
        Modelica.StateGraph.StepWithSignal pump_2_start2(nIn=1, nOut=1)
          annotation (Placement(transformation(extent={{500,-20},{520,0}})));
        Modelica.StateGraph.Transition transition11(enableTimer=true, waitTime=120)
          annotation (Placement(transformation(extent={{540,-20},{560,0}})));
        Modelica.StateGraph.StepWithSignal pump_8(nIn=1, nOut=1)
          annotation (Placement(transformation(extent={{580,-20},{600,0}})));
        Modelica.StateGraph.TransitionWithSignal transitionWithSignal13
          annotation (Placement(transformation(extent={{620,-20},{640,0}})));
        Modelica.Blocks.Logical.LessThreshold lessThreshold1(threshold=650*1000/3600)
          annotation (Placement(transformation(extent={{540,-80},{560,-60}})));
        Modelica.Blocks.MathBoolean.Or pump_working1(nu=2)
          annotation (Placement(transformation(extent={{280,-120},{300,-100}})));
        Modelica.Blocks.MathBoolean.Or pump_working2(nu=2)
          annotation (Placement(transformation(extent={{440,-120},{460,-100}})));
        Modelica.Blocks.MathBoolean.Or pump_working3(nu=2)
          annotation (Placement(transformation(extent={{600,-120},{620,-100}})));
        mass_rate_pump mass_rate_pum1 annotation (Placement(transformation(
                extent={{640,-160},{660,-140}})));
        Modelica.Blocks.Interfaces.RealOutput y[3]
          annotation (Placement(transformation(extent={{100,-10},{120,10}})));
        Modelica.Blocks.Math.BooleanToReal booleanToReal1(realTrue=500*1000/
              3600)
          annotation (Placement(transformation(extent={{-80,-80},{-60,-60}})));
        Modelica.Blocks.Interfaces.BooleanInput gf2 annotation (Placement(
              transformation(extent={{-140,-90},{-100,-50}})));
        switch_tfp_peg switch_tfp_peg1
          annotation (Placement(transformation(extent={{-80,60},{-60,80}})));
      equation
        connect(gf1, booleanToReal.u)
          annotation (Line(points={{-120,0},{-82,0}},     color={255,0,255}));
        connect(initialStep1.outPort[1], transitionWithSignal8.inPort)
          annotation (Line(points={{120.5,70},{146,70}}, color={0,0,0}));
        connect(add.y, greaterThreshold.u) annotation (Line(points={{-18.3,50},
                {-12,50},{-12,70},{-2,70}},
                                   color={0,0,127}));
        connect(greaterThreshold.y, transitionWithSignal8.condition) annotation (
            Line(points={{21,70},{60,70},{60,40},{150,40},{150,58}}, color={255,0,255}));
        connect(transitionWithSignal8.outPort, pump_1_start1.inPort[1])
          annotation (Line(points={{151.5,70},{179,70}}, color={0,0,0}));
        connect(pump_1_start1.outPort[1], transition9.inPort)
          annotation (Line(points={{200.5,70},{226,70}}, color={0,0,0}));
        connect(add.y, greaterThreshold1.u) annotation (Line(points={{-18.3,50},
                {-12,50},{-12,30},{-2,30}},
                                   color={0,0,127}));
        connect(greaterThreshold1.y, transitionWithSignal10.condition) annotation (
            Line(points={{21,30},{40,30},{40,-10},{310,-10},{310,18}}, color={255,0,
                255}));
        connect(pump_6.outPort[1], transitionWithSignal11.inPort) annotation (Line(
              points={{280.5,70.25},{292,70.25},{292,70},{306,70}}, color={0,0,0}));
        connect(greaterThreshold.y, not1.u) annotation (Line(points={{21,70},{60,70},
                {60,10},{158,10}}, color={255,0,255}));
        connect(not1.y, transitionWithSignal11.condition) annotation (Line(points={{
                181,10},{300,10},{300,52},{310,52},{310,58}}, color={255,0,255}));
        connect(pump_6.outPort[2], transitionWithSignal10.inPort) annotation (Line(
              points={{280.5,69.75},{292,69.75},{292,30},{306,30}}, color={0,0,0}));
        connect(transitionWithSignal10.outPort, pump_2_start1.inPort[1])
          annotation (Line(points={{311.5,30},{339,30}}, color={0,0,0}));
        connect(pump_2_start1.outPort[1], transition10.inPort)
          annotation (Line(points={{360.5,30},{386,30}}, color={0,0,0}));
        connect(transition10.outPort, pump_7.inPort[1]) annotation (Line(points={{391.5,
                30},{406,30},{406,30.5},{419,30.5}}, color={0,0,0}));
        connect(pump_7.outPort[1], transitionWithSignal9.inPort) annotation (Line(
              points={{440.5,30.25},{454,30.25},{454,30},{466,30}}, color={0,0,0}));
        connect(add.y, lessThreshold.u) annotation (Line(points={{-18.3,50},{
                -12,50},{-12,-30},{338,-30}},
                                     color={0,0,127}));
        connect(transitionWithSignal11.outPort, initialStep1.inPort[1]) annotation (
           Line(points={{311.5,70},{340,70},{340,120},{88,120},{88,70},{99,70}},
              color={0,0,0}));
        connect(transition9.outPort, pump_6.inPort[1]) annotation (Line(points={{231.5,
                70},{246,70},{246,70.5},{259,70.5}}, color={0,0,0}));
        connect(transitionWithSignal9.outPort, pump_6.inPort[2]) annotation (Line(
              points={{471.5,30},{500,30},{500,100},{248,100},{248,69.5},{259,69.5}},
              color={0,0,0}));
        connect(pump_7.outPort[2], transitionWithSignal12.inPort) annotation (Line(
              points={{440.5,29.75},{452,29.75},{452,-10},{466,-10}}, color={0,0,0}));
        connect(lessThreshold.y, transitionWithSignal9.condition) annotation (Line(
              points={{361,-30},{460,-30},{460,10},{470,10},{470,18}}, color={255,0,
                255}));
        connect(greaterThreshold2.y, transitionWithSignal12.condition) annotation (
            Line(points={{401,-50},{470,-50},{470,-22}}, color={255,0,255}));
        connect(transitionWithSignal12.outPort, pump_2_start2.inPort[1])
          annotation (Line(points={{471.5,-10},{499,-10}}, color={0,0,0}));
        connect(pump_2_start2.outPort[1], transition11.inPort)
          annotation (Line(points={{520.5,-10},{546,-10}}, color={0,0,0}));
        connect(transition11.outPort, pump_8.inPort[1])
          annotation (Line(points={{551.5,-10},{579,-10}}, color={0,0,0}));
        connect(add.y, greaterThreshold2.u) annotation (Line(points={{-18.3,50},
                {-12,50},{-12,-50},{378,-50}},
                                      color={0,0,127}));
        connect(pump_8.outPort[1], transitionWithSignal13.inPort)
          annotation (Line(points={{600.5,-10},{626,-10}}, color={0,0,0}));
        connect(lessThreshold1.y, transitionWithSignal13.condition) annotation (
            Line(points={{561,-70},{630,-70},{630,-22}}, color={255,0,255}));
        connect(add.y, lessThreshold1.u) annotation (Line(points={{-18.3,50},{
                -12,50},{-12,-70},{538,-70}},
                                      color={0,0,127}));
        connect(transitionWithSignal13.outPort, pump_7.inPort[2]) annotation (Line(
              points={{631.5,-10},{660,-10},{660,60},{410,60},{410,29.5},{419,29.5}},
              color={0,0,0}));
        connect(pump_1_start1.active, pump_working1.u[1]) annotation (Line(points={{
                190,59},{190,-106.5},{280,-106.5}}, color={255,0,255}));
        connect(pump_6.active, pump_working1.u[2]) annotation (Line(points={{270,59},
                {270,-113.5},{280,-113.5}}, color={255,0,255}));
        connect(pump_2_start1.active, pump_working2.u[1]) annotation (Line(points={{
                350,19},{350,0},{420,0},{420,-106.5},{440,-106.5}}, color={255,0,255}));
        connect(pump_7.active, pump_working2.u[2]) annotation (Line(points={{430,19},
                {430,-113.5},{440,-113.5}}, color={255,0,255}));
        connect(pump_2_start2.active, pump_working3.u[1]) annotation (Line(points={{
                510,-21},{510,-40},{580,-40},{580,-106.5},{600,-106.5}}, color={255,
                0,255}));
        connect(pump_8.active, pump_working3.u[2]) annotation (Line(points={{590,-21},
                {590,-113.5},{600,-113.5}}, color={255,0,255}));
        connect(pump_working1.y, mass_rate_pum1.u1) annotation (Line(points={{
                301.5,-110},{380,-110},{380,-140},{638,-140}}, color={255,0,255}));
        connect(pump_working2.y, mass_rate_pum1.u2) annotation (Line(points={{
                461.5,-110},{482,-110},{482,-146},{638,-146}}, color={255,0,255}));
        connect(pump_working3.y, mass_rate_pum1.u3) annotation (Line(points={{
                621.5,-110},{630,-110},{630,-152},{638,-152}}, color={255,0,255}));
        connect(add.y, mass_rate_pum1.u) annotation (Line(points={{-18.3,50},{
                -12,50},{-12,-160},{638,-160}},
                                            color={0,0,127}));
        connect(mass_rate_pum1.y, y) annotation (Line(points={{661,-150},{680,-150},{680,
                -180},{80,-180},{80,0},{110,0}}, color={0,0,127}));
        connect(gf2, booleanToReal1.u)
          annotation (Line(points={{-120,-70},{-82,-70}}, color={255,0,255}));
        connect(booleanToReal.y, add.u[1]) annotation (Line(points={{-59,0},{
                -50,0},{-50,54.6667},{-40,54.6667}},
                                           color={0,0,127}));
        connect(booleanToReal1.y, add.u[2]) annotation (Line(points={{-59,-70},
                {-48,-70},{-48,50},{-40,50}},           color={0,0,127}));
        connect(tfp, switch_tfp_peg1.u)
          annotation (Line(points={{-120,70},{-82,70}}, color={255,127,0}));
        connect(switch_tfp_peg1.y, add.u[3]) annotation (Line(points={{-59,70},
                {-50,70},{-50,45.3333},{-40,45.3333}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={28,108,200},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-100,100},{0,0}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.None,
                textString="+"),
              Text(
                extent={{0,0},{100,-100}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.None,
                textString="-"),
              Line(
                points={{-54,-58},{66,62}},
                color={0,0,0},
                thickness=1)}),                                        Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end activation_peg;

      package Tests
        extends Modelica.Icons.ExamplesPackage;
        model test_module
          Modelica.Blocks.Sources.BooleanExpression booleanExpression(y=false)
            annotation (Placement(transformation(extent={{-80,40},{-60,60}})));
          Modelica.Blocks.Sources.BooleanExpression booleanExpression1(y=false)
            annotation (Placement(transformation(extent={{-80,10},{-60,30}})));
          Modelica.Blocks.Sources.BooleanExpression booleanExpression2(y=true)
            annotation (Placement(transformation(extent={{-80,80},{-60,100}})));
          mass_rate_pump mass_rate_pum1
            annotation (Placement(transformation(extent={{-20,40},{0,60}})));
          Modelica.Blocks.Sources.RealExpression realExpression(y=30)
            annotation (Placement(transformation(extent={{-60,-20},{-40,0}})));
        equation
          connect(booleanExpression2.y, mass_rate_pum1.u1) annotation (Line(
                points={{-59,90},{-38,90},{-38,58},{-22,58},{-22,60}}, color={
                  255,0,255}));
          connect(booleanExpression.y, mass_rate_pum1.u2) annotation (Line(
                points={{-59,50},{-40,50},{-40,54},{-22,54}}, color={255,0,255}));
          connect(booleanExpression1.y, mass_rate_pum1.u3) annotation (Line(
                points={{-59,20},{-40,20},{-40,48},{-22,48}}, color={255,0,255}));
          connect(realExpression.y, mass_rate_pum1.u) annotation (Line(points={
                  {-39,-10},{-32,-10},{-32,40},{-22,40}}, color={0,0,127}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)),
              Diagram(coordinateSystem(preserveAspectRatio=false)));
        end test_module;

        model debit_pump
          activation_pec activation_pec1
            annotation (Placement(transformation(extent={{-20,20},{0,40}})));
          Modelica.Blocks.Sources.IntegerExpression integerExpression(y=1)
            annotation (Placement(transformation(extent={{-100,40},{-80,60}})));
          Modelica.Blocks.Sources.BooleanExpression booleanExpression(y=true)
            annotation (Placement(transformation(extent={{-100,-20},{-80,0}})));
        equation
          connect(booleanExpression.y, activation_pec1.cha) annotation (Line(
                points={{-79,-10},{-52,-10},{-52,25},{-22,25}}, color={255,0,
                  255}));
          connect(integerExpression.y, activation_pec1.tfp) annotation (Line(
                points={{-79,50},{-52,50},{-52,35},{-22,35}}, color={255,127,0}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)),
              Diagram(coordinateSystem(preserveAspectRatio=false)));
        end debit_pump;
      end Tests;

    end PEC_PEG;

  package SST
    extends Modelica.Icons.VariantsPackage;
    model PID_sst_hot

      parameter Real T_out_set = 45 + 273.15;
      parameter Real T_out_delta_set = 0.2;
      parameter Real P_set = 500;
      parameter Real P_delta_set = 0.1;
      parameter Real T_out_sec_set = 58 + 273.15;
      parameter Real T_in_sec_set = 43 + 273.15;
      Real T_corr;
      Real P_corr;
      Real T_sec_cons;

      Controls.Continuous.LimPID PID_Tmax(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=0.1,
        Ti=15,
        initType=Modelica.Blocks.Types.InitPID.NoInit,
        reverseActing=false)
                            annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={10,0})));
      Modelica.Blocks.Interfaces.RealInput T_out_prim
        annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
      Modelica.Blocks.Interfaces.RealOutput T_sec
        annotation (Placement(transformation(extent={{100,-10},{120,10}})));

      Modelica.Blocks.Interfaces.RealInput Power
        annotation (Placement(transformation(extent={{-140,40},{-100,80}})));
      Modelica.Blocks.Sources.RealExpression realExpression(y=T_sec_cons)
        annotation (Placement(transformation(extent={{-40,-10},{-20,10}})));
      Modelica.Blocks.Interfaces.RealInput T_out_sec
        annotation (Placement(transformation(extent={{-140,-80},{-100,-40}})));
      Modelica.Blocks.Interfaces.RealOutput T_sec_cons_dep(final unit="K",
            displayUnit="degC")                                     annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={0,110})));
    equation
      T_corr = max(T_out_prim - T_out_set - T_out_delta_set,0);
      P_corr = max((Power - (P_set * (1+P_delta_set))) / P_set * (T_out_sec_set-T_in_sec_set),0);
      T_sec_cons = T_out_sec_set - T_corr - P_corr;

      connect(realExpression.y, PID_Tmax.u_s)
        annotation (Line(points={{-19,0},{-2,0}},   color={0,0,127}));
      connect(T_out_sec, PID_Tmax.u_m)
        annotation (Line(points={{-120,-60},{10,-60},{10,-12}}, color={0,0,127}));
      connect(PID_Tmax.y, T_sec)
        annotation (Line(points={{21,0},{110,0}}, color={0,0,127}));
        connect(realExpression.y, T_sec_cons_dep) annotation (Line(points={{-19,
                0},{-10,0},{-10,52},{0,52},{0,110}}, color={0,0,127}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                                    Rectangle(
            extent={{-100,-100},{100,100}},
            lineColor={0,0,127},
            fillColor={255,255,255},
            fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-6,-20},{66,-66}},
              lineColor={255,255,255},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Text(
              visible=(controllerType == Modelica.Blocks.Types.SimpleController.PI),
              extent={{-28,-22},{72,-62}},
              lineColor={0,0,0},
              textString="PI",
              fillPattern=FillPattern.Solid,
              fillColor={175,175,175}),
            Polygon(
              points={{-80,90},{-88,68},{-72,68},{-80,90}},
              lineColor={192,192,192},
              fillColor={192,192,192},
              fillPattern=FillPattern.Solid),
            Line(points={{-80,78},{-80,-90}}, color={192,192,192}),
            Line(points={{-80,-80},{-80,-20},{30,60},{80,60}}, color={0,0,127}),
            Line(points={{-90,-80},{82,-80}}, color={192,192,192}),
            Polygon(
              points={{90,-80},{68,-72},{68,-88},{90,-80}},
              lineColor={192,192,192},
              fillColor={192,192,192},
              fillPattern=FillPattern.Solid),
            Line(
              visible=strict,
              points={{30,60},{81,60}},
              color={255,0,0},
              smooth=Smooth.None)}),                                 Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end PID_sst_hot;

    model PID_sst_cold

      parameter Real T_out_set = 14 + 273.15;
      parameter Real T_out_delta_set = 0.2;
      parameter Real P_set = 1000;
      parameter Real P_delta_set = 0.1;
      parameter Real T_out_sec_set = 6 + 273.15;
      parameter Real T_in_sec_set = 15 + 273.15;
      Real T_corr;
      Real P_corr;
      Real T_sec_cons;

      Controls.Continuous.LimPID PID_Tmax(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=0.1,
        Ti=0.5,
        initType=Modelica.Blocks.Types.InitPID.NoInit,
        reverseActing=false)
                            annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={10,0})));
      Modelica.Blocks.Interfaces.RealInput T_out_prim
        annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
      Modelica.Blocks.Interfaces.RealOutput T_sec
        annotation (Placement(transformation(extent={{100,-10},{120,10}})));

      Modelica.Blocks.Interfaces.RealInput Power
        annotation (Placement(transformation(extent={{-140,40},{-100,80}})));
      Modelica.Blocks.Sources.RealExpression realExpression(y=T_sec_cons)
        annotation (Placement(transformation(extent={{-40,-10},{-20,10}})));
      Modelica.Blocks.Interfaces.RealInput T_out_sec
        annotation (Placement(transformation(extent={{-140,-80},{-100,-40}})));
      Modelica.Blocks.Interfaces.RealOutput T_sec_cons_dep(final unit="K",
                                                displayUnit="degC") annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={0,110})));
    equation
      T_corr = min(T_out_prim - T_out_set - T_out_delta_set,0);
      P_corr = max((Power - (P_set * (1+P_delta_set))) / P_set * (T_in_sec_set - T_out_sec_set),0);
      T_sec_cons = T_out_sec_set - T_corr + P_corr;

      connect(realExpression.y, PID_Tmax.u_s)
        annotation (Line(points={{-19,0},{-2,0}},   color={0,0,127}));
      connect(T_out_sec, PID_Tmax.u_m)
        annotation (Line(points={{-120,-60},{10,-60},{10,-12}}, color={0,0,127}));
      connect(PID_Tmax.y, T_sec)
        annotation (Line(points={{21,0},{110,0}}, color={0,0,127}));
        connect(realExpression.y, T_sec_cons_dep) annotation (Line(points={{-19,
                0},{-10,0},{-10,50},{0,50},{0,110}}, color={0,0,127}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                                    Rectangle(
            extent={{-100,-100},{100,100}},
            lineColor={0,0,127},
            fillColor={255,255,255},
            fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-6,-20},{66,-66}},
              lineColor={255,255,255},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Text(
              visible=(controllerType == Modelica.Blocks.Types.SimpleController.PI),
              extent={{-28,-22},{72,-62}},
              lineColor={0,0,0},
              textString="PI",
              fillPattern=FillPattern.Solid,
              fillColor={175,175,175}),
            Polygon(
              points={{-80,90},{-88,68},{-72,68},{-80,90}},
              lineColor={192,192,192},
              fillColor={192,192,192},
              fillPattern=FillPattern.Solid),
            Line(points={{-80,78},{-80,-90}}, color={192,192,192}),
            Line(points={{-80,-80},{-80,-20},{30,60},{80,60}}, color={0,0,127}),
            Line(points={{-90,-80},{82,-80}}, color={192,192,192}),
            Polygon(
              points={{90,-80},{68,-72},{68,-88},{90,-80}},
              lineColor={192,192,192},
              fillColor={192,192,192},
              fillPattern=FillPattern.Solid),
            Line(
              visible=strict,
              points={{30,60},{81,60}},
              color={255,0,0},
              smooth=Smooth.None)}),                                 Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end PID_sst_cold;

    block Switch_off "Switch between two Real signals"
      extends Modelica.Blocks.Icons.PartialBooleanBlock;
      Modelica.Blocks.Interfaces.RealInput u1
        "Connector of first Real input signal"
        annotation (Placement(transformation(extent={{-140,60},{-100,100}})));
      Modelica.Blocks.Interfaces.RealOutput y "Connector of Real output signal"
        annotation (Placement(transformation(extent={{100,-10},{120,10}})));

      WaitBefore waitBefore(
        t_threshold=600,
        threshold=0,
        superior=false)
        annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
      Modelica.Blocks.Interfaces.RealInput u2
        "Connector of first Real input signal"
        annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
    equation
      y = if waitBefore.y then 0 else u1;
        connect(u2, waitBefore.u) annotation (Line(points={{-120,0},{-66,0},{
                -66,0},{-12,0}}, color={0,0,127}));
      annotation (
        defaultComponentName="switch1",
        Documentation(info="<html>
<p>The Logical.Switch switches, depending on the
logical connector u2 (the middle connector)
between the two possible input signals
u1 (upper connector) and u3 (lower connector).</p>
<p>If u2 is <strong>true</strong>, the output signal y is set equal to
u1, else it is set equal to u3.</p>
</html>"),
        Icon(coordinateSystem(
            preserveAspectRatio=true,
            extent={{-100,-100},{100,100}}), graphics={
            Line(points={{12,0},{100,0}},
              color={0,0,127}),
            Line(points={{-100,0},{-40,0}},
              color={255,0,255}),
            Line(points={{-40,12},{-40,-12}},
              color={255,0,255}),
            Line(points={{-100,80},{-38,80}},
              color={0,0,127}),
            Line(points=DynamicSelect({{-38,80},{6,2}}, if u2 then {{-38,80},{6,2}} else {{-38,-80},{6,2}}),
              color={0,0,127},
              thickness=1),
            Ellipse(lineColor={0,0,255},
              pattern=LinePattern.None,
              fillPattern=FillPattern.Solid,
              extent={{2,-8},{18,8}}),
            Text(
              extent={{-80,-40},{-40,-80}},
              lineColor={0,0,0},
              textString="0")}));
    end Switch_off;

  package Tests
    extends Modelica.Icons.ExamplesPackage;
    model hot
          PID_sst_hot pID_sst_hot
            annotation (Placement(transformation(extent={{0,20},{20,40}})));
          Modelica.Blocks.Sources.RealExpression realExpression(y=600)
            annotation (Placement(transformation(extent={{-80,40},{-60,60}})));
          Modelica.Blocks.Sources.RealExpression realExpression1(y=47 + 273.15)
            annotation (Placement(transformation(extent={{-80,0},{-60,20}})));
          Modelica.Blocks.Sources.RealExpression realExpression2(y=55 + 273.15)
            annotation (Placement(transformation(extent={{-80,-40},{-60,-20}})));
    equation
          connect(realExpression.y, pID_sst_hot.Power) annotation (Line(points=
                  {{-59,50},{-30,50},{-30,36},{-2,36}}, color={0,0,127}));
          connect(realExpression1.y, pID_sst_hot.T_out_prim) annotation (Line(
                points={{-59,10},{-32,10},{-32,30},{-2,30}}, color={0,0,127}));
          connect(realExpression2.y, pID_sst_hot.T_out_sec) annotation (Line(
                points={{-59,-30},{-20,-30},{-20,24},{-2,24}}, color={0,0,127}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)),
              Diagram(coordinateSystem(preserveAspectRatio=false)));
    end hot;

    model cold
          PID_sst_cold pID_sst_cold
            annotation (Placement(transformation(extent={{-20,0},{0,20}})));
          Modelica.Blocks.Sources.RealExpression realExpression(y=600)
            annotation (Placement(transformation(extent={{-100,40},{-80,60}})));
          Modelica.Blocks.Sources.RealExpression realExpression1(y=12 + 273.15)
            annotation (Placement(transformation(extent={{-100,0},{-80,20}})));
          Modelica.Blocks.Sources.RealExpression realExpression2(y=55 + 273.15)
            annotation (Placement(transformation(extent={{-100,-40},{-80,-20}})));
    equation
          connect(realExpression.y, pID_sst_cold.Power) annotation (Line(points=
                 {{-79,50},{-52,50},{-52,16},{-22,16}}, color={0,0,127}));
          connect(realExpression2.y, pID_sst_cold.T_out_sec) annotation (Line(
                points={{-79,-30},{-50,-30},{-50,4},{-22,4}}, color={0,0,127}));
          connect(realExpression1.y, pID_sst_cold.T_out_prim)
            annotation (Line(points={{-79,10},{-22,10}}, color={0,0,127}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)),
              Diagram(coordinateSystem(preserveAspectRatio=false)));
    end cold;

    model test_switch
          Switch_off switch1
            annotation (Placement(transformation(extent={{0,0},{20,20}})));
          Modelica.Blocks.Sources.Pulse pulse(period=2000)
            annotation (Placement(transformation(extent={{-60,-20},{-40,0}})));
          Modelica.Blocks.Sources.Pulse pulse1(period=4000)
            annotation (Placement(transformation(extent={{-60,40},{-40,60}})));
    equation
          connect(pulse.y, switch1.u2) annotation (Line(points={{-39,-10},{-20,
                  -10},{-20,10},{-2,10}}, color={0,0,127}));
          connect(pulse1.y, switch1.u1) annotation (Line(points={{-39,50},{-20,
                  50},{-20,18},{-2,18}}, color={0,0,127}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)),
              Diagram(coordinateSystem(preserveAspectRatio=false)));
    end test_switch;
  end Tests;
  end SST;

  end Controls_a;

package DE_PE
  extends Modelica.Icons.VariantsPackage;
model hot
  extends Fluid.Interfaces.PartialFourPort;
  Fluid.Sources.Boundary_pT bou(
    redeclare package Medium = Buildings.Media.Water,
    use_T_in=true,
    nPorts=2) annotation (Placement(transformation(
        extent={{10,-10},{-10,10}},
        rotation=270,
        origin={-10,30})));
  Fluid.Sources.Boundary_pT bou1(
    redeclare package Medium = Buildings.Media.Water,
    use_T_in=true,
    nPorts=2) annotation (Placement(transformation(
        extent={{-10,-10},{10,10}},
        rotation=90,
        origin={-10,-90})));
  Fluid.Movers.FlowControlled_dp fan1(
    redeclare package Medium = Buildings.Media.Water,
    m_flow_nominal=250/3.6,
    redeclare Fluid.Movers.Data.Pumps.KSB.KSB_PEC per,
    inputType=Buildings.Fluid.Types.InputType.Constant,
    dp_nominal(displayUnit="bar") = 500000,
    constantHead(displayUnit="bar") = 500000)
    annotation (Placement(transformation(extent={{-40,-70},{-60,-50}})));
  Fluid.Sensors.MassFlowRate FT521(redeclare package Medium =
        Buildings.Media.Water)
    annotation (Placement(transformation(extent={{80,-70},{60,-50}})));
  Fluid.Sensors.TemperatureTwoPort TT521(redeclare package Medium =
        Buildings.Media.Water, m_flow_nominal=250/3.6)
                                                   annotation (Placement(
        transformation(
        extent={{-10,10},{10,-10}},
        rotation=180,
        origin={30,-60})));
  Fluid.Sensors.TemperatureTwoPort TT511(redeclare package Medium =
        Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
        transformation(
        extent={{10,10},{-10,-10}},
        rotation=180,
        origin={-70,60})));
  Fluid.Movers.FlowControlled_m_flow fan(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal=250/3.6,
        redeclare Fluid.Movers.Data.Pumps.KSB.KSB_PEC per,
        dp_nominal(displayUnit="bar") = 500000)
    annotation (Placement(transformation(extent={{20,50},{40,70}})));
  Fluid.Sensors.MassFlowRate FT_depart(redeclare package Medium =
        Buildings.Media.Water)
    annotation (Placement(transformation(extent={{-50,50},{-30,70}})));
  Controls_a.DE_PE.retour_props t_retour
    annotation (Placement(transformation(extent={{60,-20},{80,0}})));
  Modelica.Blocks.Interfaces.RealOutput y[3]
    annotation (Placement(transformation(extent={{120,-10},{140,10}})));
  Modelica.Blocks.Interfaces.RealInput m_flow annotation (Placement(
        transformation(
        extent={{-20,-20},{20,20}},
        rotation=270,
        origin={0,120})));
equation
  connect(port_b2, fan1.port_b)
    annotation (Line(points={{-100,-60},{-60,-60}}, color={0,127,255}));
  connect(bou1.ports[1], fan1.port_a) annotation (Line(points={{-12,-80},{-12,-60},
          {-40,-60}}, color={0,127,255}));
  connect(bou1.ports[2], TT521.port_b)
    annotation (Line(points={{-8,-80},{-8,-60},{20,-60}}, color={0,127,255}));
  connect(TT521.port_a, FT521.port_b)
    annotation (Line(points={{40,-60},{60,-60}}, color={0,127,255}));
  connect(FT521.port_a, port_a2) annotation (Line(points={{80,-60},{90,-60},{90,
          -60},{100,-60}}, color={0,127,255}));
  connect(bou.ports[1], fan.port_a)
    annotation (Line(points={{-8,40},{-8,60},{20,60}}, color={0,127,255}));
  connect(fan.port_b, port_b1)
    annotation (Line(points={{40,60},{100,60}}, color={0,127,255}));
  connect(port_a1, TT511.port_a)
    annotation (Line(points={{-100,60},{-80,60}}, color={0,127,255}));
  connect(TT511.port_b, FT_depart.port_a)
    annotation (Line(points={{-60,60},{-50,60}}, color={0,127,255}));
  connect(FT_depart.port_b, bou.ports[2])
    annotation (Line(points={{-30,60},{-12,60},{-12,40}}, color={0,127,255}));
  connect(TT511.T, bou1.T_in) annotation (Line(points={{-70,71},{-70,80},{-120,80},
          {-120,-120},{-14,-120},{-14,-102}}, color={0,0,127}));
  connect(TT511.T, t_retour.T_dep) annotation (Line(points={{-70,71},{-70,80},{-120,
          80},{-120,-2},{58,-2}}, color={0,0,127}));
  connect(FT_depart.m_flow, t_retour.Q_dep) annotation (Line(points={{-40,71},{-40,
          80},{-52,80},{-52,-13},{58,-13}}, color={0,0,127}));
  connect(FT521.m_flow, t_retour.Q_ret) annotation (Line(points={{70,-49},{70,-28},
          {50,-28},{50,-18},{58,-18}}, color={0,0,127}));
  connect(TT521.T, t_retour.T_ret)
    annotation (Line(points={{30,-49},{30,-7},{58,-7}}, color={0,0,127}));
  connect(t_retour.T_hot_plant, bou.T_in) annotation (Line(points={{81,-5},{90,-5},
          {90,10},{-6,10},{-6,18}},      color={0,0,127}));
  connect(m_flow, fan.m_flow_in) annotation (Line(points={{0,120},{0,80},{30,80},
          {30,72}}, color={0,0,127}));
  connect(TT521.T, y[3]) annotation (Line(points={{30,-49},{30,-44},{94,-44},{
              94,6.66667},{130,6.66667}},
                                 color={0,0,127}));
  connect(FT521.m_flow, y[1]) annotation (Line(points={{70,-49},{70,-38},{114,-38},
          {114,-6.66667},{130,-6.66667}},
                              color={0,0,127}));
      connect(t_retour.m_flow_diff, y[2]) annotation (Line(points={{81,-15},{
              100.5,-15},{100.5,4.44089e-16},{130,4.44089e-16}}, color={0,0,127}));
  annotation (Icon(graphics={
        Rectangle(
          extent={{-100,80},{100,40}},
          lineColor={0,0,0},
          fillPattern=FillPattern.HorizontalCylinder,
          fillColor={238,46,47}),
        Rectangle(
          extent={{-100,-40},{100,-80}},
          lineColor={0,0,0},
          fillPattern=FillPattern.HorizontalCylinder,
          fillColor={244,125,35}),
    Polygon(
      points={{2,18},{-38,60},{-38,-20},{2,18}},
      lineColor={0,0,0},
      fillColor=DynamicSelect({0,0,0}, y*{255,255,255}),
      fillPattern=FillPattern.Solid,
          origin={-18,2},
          rotation=270),
    Polygon(
      points={{-2,-20},{38,20},{38,-60},{-2,-20}},
      lineColor={0,0,0},
      fillColor={255,255,255},
      fillPattern=FillPattern.Solid,
          origin={20,-2},
          rotation=270),
    Line(
      points={{0,20},{0,-20}},
          origin={20,0},
          rotation=270),
        Rectangle(
          extent={{40,20},{80,-20}},
          lineColor={0,0,0},
          fillColor={210,210,210},
          fillPattern=FillPattern.Solid)}));
end hot;

model cold
  extends Fluid.Interfaces.PartialFourPort;
  Fluid.Sources.Boundary_pT bou(
    redeclare package Medium = Buildings.Media.Water,
    use_T_in=true,
    nPorts=2) annotation (Placement(transformation(
        extent={{10,-10},{-10,10}},
        rotation=270,
        origin={-10,30})));
  Fluid.Sources.Boundary_pT bou1(
    redeclare package Medium = Buildings.Media.Water,
    use_T_in=true,
    nPorts=2) annotation (Placement(transformation(
        extent={{-10,-10},{10,10}},
        rotation=90,
        origin={-30,-90})));
  Fluid.Movers.FlowControlled_dp fan1(
    redeclare package Medium = Buildings.Media.Water,
    m_flow_nominal=250/3.6,
    redeclare Fluid.Movers.Data.Pumps.KSB.KSB_PEG per,
    inputType=Buildings.Fluid.Types.InputType.Constant,
    dp_nominal(displayUnit="bar") = 500000,
    constantHead(displayUnit="bar") = 500000)
    annotation (Placement(transformation(extent={{-40,-70},{-60,-50}})));
  Fluid.Sensors.MassFlowRate FT121(redeclare package Medium =
        Buildings.Media.Water)
    annotation (Placement(transformation(extent={{80,-70},{60,-50}})));
  Fluid.Sensors.TemperatureTwoPort TT121(redeclare package Medium =
        Buildings.Media.Water, m_flow_nominal=250/3.6)
                                                   annotation (Placement(
        transformation(
        extent={{-10,10},{10,-10}},
        rotation=180,
        origin={30,-60})));
  Fluid.Sensors.TemperatureTwoPort TT111(redeclare package Medium =
        Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
        transformation(
        extent={{10,10},{-10,-10}},
        rotation=180,
        origin={-70,60})));
  Fluid.Movers.FlowControlled_m_flow fan(
    redeclare package Medium = Buildings.Media.Water,
    m_flow_nominal=1350/3.6,
    redeclare Fluid.Movers.Data.Pumps.KSB.KSB_PEG per,
    dp_nominal(displayUnit="bar") = 500000)
    annotation (Placement(transformation(extent={{20,50},{40,70}})));
  Fluid.Sensors.MassFlowRate FT_depart(redeclare package Medium =
        Buildings.Media.Water)
    annotation (Placement(transformation(extent={{-50,50},{-30,70}})));
  Controls_a.DE_PE.retour_props t_retour
    annotation (Placement(transformation(extent={{60,-20},{80,0}})));
  Modelica.Blocks.Interfaces.RealOutput y[2]
    annotation (Placement(transformation(extent={{120,-10},{140,10}})));
  Modelica.Blocks.Interfaces.RealInput m_flow annotation (Placement(
        transformation(
        extent={{-20,-20},{20,20}},
        rotation=270,
        origin={0,120})));
      Modelica.Blocks.Interfaces.RealOutput deg_tt121 annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={0,-110})));
equation
  connect(port_b2, fan1.port_b)
    annotation (Line(points={{-100,-60},{-60,-60}}, color={0,127,255}));
  connect(bou1.ports[1], fan1.port_a) annotation (Line(points={{-32,-80},{-32,
              -60},{-40,-60}},
                      color={0,127,255}));
  connect(bou1.ports[2],TT121. port_b)
    annotation (Line(points={{-28,-80},{-28,-60},{20,-60}},
                                                          color={0,127,255}));
  connect(TT121.port_a,FT121. port_b)
    annotation (Line(points={{40,-60},{60,-60}}, color={0,127,255}));
  connect(FT121.port_a, port_a2) annotation (Line(points={{80,-60},{90,-60},{90,
          -60},{100,-60}}, color={0,127,255}));
  connect(bou.ports[1], fan.port_a)
    annotation (Line(points={{-8,40},{-8,60},{20,60}}, color={0,127,255}));
  connect(fan.port_b, port_b1)
    annotation (Line(points={{40,60},{100,60}}, color={0,127,255}));
  connect(port_a1,TT111. port_a)
    annotation (Line(points={{-100,60},{-80,60}}, color={0,127,255}));
  connect(TT111.port_b, FT_depart.port_a)
    annotation (Line(points={{-60,60},{-50,60}}, color={0,127,255}));
  connect(FT_depart.port_b, bou.ports[2])
    annotation (Line(points={{-30,60},{-12,60},{-12,40}}, color={0,127,255}));
  connect(TT111.T, bou1.T_in) annotation (Line(points={{-70,71},{-70,80},{-120,
              80},{-120,-120},{-34,-120},{-34,-102}},
                                              color={0,0,127}));
  connect(TT111.T, t_retour.T_dep) annotation (Line(points={{-70,71},{-70,80},{-120,
          80},{-120,-2},{58,-2}}, color={0,0,127}));
  connect(FT_depart.m_flow, t_retour.Q_dep) annotation (Line(points={{-40,71},{-40,
          80},{-52,80},{-52,-13},{58,-13}}, color={0,0,127}));
  connect(FT121.m_flow, t_retour.Q_ret) annotation (Line(points={{70,-49},{70,-28},
          {50,-28},{50,-18},{58,-18}}, color={0,0,127}));
  connect(TT121.T, t_retour.T_ret)
    annotation (Line(points={{30,-49},{30,-7},{58,-7}}, color={0,0,127}));
  connect(t_retour.T_hot_plant, bou.T_in) annotation (Line(points={{81,-5},{90,-5},
          {90,10},{-6,10},{-6,18}},      color={0,0,127}));
  connect(m_flow, fan.m_flow_in) annotation (Line(points={{0,120},{0,80},{30,80},
          {30,72}}, color={0,0,127}));
  connect(FT121.m_flow, y[1]) annotation (Line(points={{70,-49},{70,-38},{114,
              -38},{114,-5},{130,-5}},
                              color={0,0,127}));
  connect(t_retour.m_flow_diff, y[2]) annotation (Line(points={{81,-15},{100.5,
              -15},{100.5,5},{130,5}},            color={0,0,127}));
      connect(TT121.T, deg_tt121) annotation (Line(points={{30,-49},{30,-40},{0,
              -40},{0,-110}}, color={0,0,127}));
  annotation (Icon(graphics={
        Rectangle(
          extent={{-100,80},{100,40}},
          lineColor={0,0,0},
          fillPattern=FillPattern.HorizontalCylinder,
          fillColor={28,108,200}),
        Rectangle(
          extent={{-100,-40},{100,-80}},
          lineColor={0,0,0},
          fillPattern=FillPattern.HorizontalCylinder,
          fillColor={170,213,255}),
    Polygon(
      points={{2,18},{-38,60},{-38,-20},{2,18}},
      lineColor={0,0,0},
      fillColor=DynamicSelect({0,0,0}, y*{255,255,255}),
      fillPattern=FillPattern.Solid,
          origin={-18,2},
          rotation=270),
    Polygon(
      points={{-2,-20},{38,20},{38,-60},{-2,-20}},
      lineColor={0,0,0},
      fillColor={255,255,255},
      fillPattern=FillPattern.Solid,
          origin={20,-2},
          rotation=270),
    Line(
      points={{0,20},{0,-20}},
          origin={20,0},
          rotation=270),
        Rectangle(
          extent={{40,20},{80,-20}},
          lineColor={0,0,0},
          fillColor={210,210,210},
          fillPattern=FillPattern.Solid)}));
end cold;
end DE_PE;

  package DEC_DEG
    extends Modelica.Icons.VariantsPackage;
    model DEC
      extends Fluid.Interfaces.PartialFourPort;

      Fluid.FixedResistances.Junction jun4(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal={100,-100,-100},
        dp_nominal={0,0,0})
        annotation (Placement(transformation(extent={{10,10},{-10,-10}},
            rotation=180,
            origin={-20,60})));
      Fluid.FixedResistances.Junction jun1(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal={100,-100,-100},
        dp_nominal={0,0,0})
        annotation (Placement(transformation(extent={{10,10},{-10,-10}},
            rotation=0,
            origin={-20,-60})));
      Fluid.Actuators.Valves.TwoWayLinear CV501(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal=500,
        CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
        dpValve_nominal=10) annotation (Placement(
            transformation(
            extent={{-10,10},{10,-10}},
            rotation=270,
            origin={-20,0})));
      Fluid.Sensors.Pressure PT511(redeclare package Medium =
            Buildings.Media.Water)
        annotation (Placement(transformation(extent={{60,60},{80,80}})));
      Fluid.Sensors.Pressure PT521(redeclare package Medium =
            Buildings.Media.Water)
        annotation (Placement(transformation(extent={{70,-60},{90,-40}})));
      Fluid.Sensors.RelativePressure PDT511(redeclare package Medium =
            Buildings.Media.Water) annotation (Placement(transformation(
            extent={{-10,10},{10,-10}},
            rotation=-90,
            origin={60,10})));
      Fluid.Sensors.TemperatureTwoPort TT521(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
            transformation(
            extent={{-10,10},{10,-10}},
            rotation=180,
            origin={10,-60})));
      Fluid.Sensors.MassFlowRate FT521(redeclare package Medium =
            Buildings.Media.Water)
        annotation (Placement(transformation(extent={{50,-70},{30,-50}})));
      Controls_a.DEC_DEG.PID_DEC pID_DEC
        annotation (Placement(transformation(extent={{-80,0},{-60,20}})));
        Modelica.Blocks.Interfaces.RealOutput DEC[3] "DEp, FT, TT"
        annotation (Placement(transformation(extent={{120,-10},{140,10}})));
      Modelica.Blocks.Interfaces.IntegerInput hpshc annotation (Placement(
            transformation(
            extent={{-20,-20},{20,20}},
            rotation=-90,
            origin={-50,120})));
      Modelica.Blocks.Interfaces.RealInput T_ext annotation (Placement(
            transformation(
            extent={{-20,-20},{20,20}},
            rotation=270,
            origin={50,120})));
    equation
      connect(jun4.port_3,CV501. port_a)
        annotation (Line(points={{-20,50},{-20,10}},      color={0,127,255}));
      connect(port_a1, port_a1)
        annotation (Line(points={{-100,60},{-100,60}}, color={0,127,255}));
      connect(jun4.port_2, port_b1)
        annotation (Line(points={{-10,60},{100,60}},color={0,127,255}));
      connect(jun4.port_2, PT511.port)
        annotation (Line(points={{-10,60},{70,60}},color={0,127,255}));
      connect(PDT511.port_a, port_b1)
        annotation (Line(points={{60,20},{60,60},{100,60}}, color={0,127,255}));
      connect(PDT511.port_b, port_a2)
        annotation (Line(points={{60,0},{60,-60},{100,-60}}, color={0,127,255}));
      connect(port_a1, jun4.port_1)
        annotation (Line(points={{-100,60},{-30,60}},
                                                    color={0,127,255}));
      connect(port_a2, PT521.port)
        annotation (Line(points={{100,-60},{80,-60}}, color={0,127,255}));
      connect(TT521.port_a, FT521.port_b)
        annotation (Line(points={{20,-60},{30,-60}}, color={0,127,255}));
      connect(FT521.port_a, port_a2)
        annotation (Line(points={{50,-60},{100,-60}}, color={0,127,255}));
      connect(pID_DEC.y, CV501.y) annotation (Line(points={{-59,11},{-48,11},{-48,2.22045e-15},
              {-32,2.22045e-15}}, color={0,0,127}));
      connect(pID_DEC.dp_cons, DEC[1]) annotation (Line(points={{-59,17},{30,17},
              {30,-10},{88,-10},{88,-6.66667},{130,-6.66667}},
                                        color={0,0,127}));
      connect(TT521.T, pID_DEC.TT521) annotation (Line(points={{10,-49},{10,-30},{-100,
              -30},{-100,8},{-82,8}}, color={0,0,127}));
      connect(hpshc, pID_DEC.HPSHC) annotation (Line(points={{-50,120},{-50,96},
              {-120,96},{-120,0},{-82,0}},
                                     color={255,127,0}));
      connect(PT511.p, pID_DEC.PT511) annotation (Line(points={{81,70},{88,70},{88,84},
              {-110,84},{-110,12},{-82,12}}, color={0,0,127}));
      connect(port_b1, port_b1) annotation (Line(points={{100,60},{100,65},{100,65},
              {100,60}}, color={0,127,255}));
      connect(PDT511.p_rel, pID_DEC.PDT511) annotation (Line(points={{69,10},{80,10},
              {80,40},{-96,40},{-96,16},{-82,16}}, color={0,0,127}));
      connect(T_ext, pID_DEC.T_ext) annotation (Line(points={{50,120},{50,90},{
              -112,90},{-112,20},{-82,20}},
                                       color={0,0,127}));
      connect(FT521.m_flow, DEC[2]) annotation (Line(points={{40,-49},{40,-28},
              {100,-28},{100,4.44089e-16},{130,4.44089e-16}}, color={0,0,127}));
      connect(TT521.T, DEC[3]) annotation (Line(points={{10,-49},{10,-20},{90,
              -20},{90,6.66667},{130,6.66667}}, color={0,0,127}));
      connect(jun1.port_1, TT521.port_b) annotation (Line(points={{-10,-60},{
              1.77636e-15,-60}}, color={0,127,255}));
      connect(CV501.port_b, jun1.port_3) annotation (Line(points={{-20,-10},{
              -20,-50},{-20,-50}}, color={0,127,255}));
      connect(jun1.port_2, port_b2)
        annotation (Line(points={{-30,-60},{-100,-60}}, color={0,127,255}));
      annotation (Diagram(coordinateSystem(extent={{-100,-100},{100,100}})), Icon(
            coordinateSystem(extent={{-100,-100},{100,120}}), graphics={
            Rectangle(
              extent={{-100,80},{100,40}},
              lineColor={0,0,0},
              fillPattern=FillPattern.HorizontalCylinder,
              fillColor={238,46,47}),
            Rectangle(
              extent={{-100,-40},{100,-80}},
              lineColor={0,0,0},
              fillPattern=FillPattern.HorizontalCylinder,
              fillColor={244,125,35}),
        Polygon(
          points={{2,18},{-38,60},{-38,-20},{2,18}},
          lineColor={0,0,0},
          fillColor=DynamicSelect({0,0,0}, y*{255,255,255}),
          fillPattern=FillPattern.Solid,
              origin={-18,2},
              rotation=270),
        Polygon(
          points={{-2,-20},{38,20},{38,-60},{-2,-20}},
          lineColor={0,0,0},
          fillColor={255,255,255},
          fillPattern=FillPattern.Solid,
              origin={20,-2},
              rotation=270),
        Line(
          points={{0,20},{0,-20}},
              origin={20,0},
              rotation=270),
            Rectangle(
              extent={{40,20},{80,-20}},
              lineColor={0,0,0},
              fillColor={210,210,210},
              fillPattern=FillPattern.Solid)}));
    end DEC;

    model DEG
      extends Fluid.Interfaces.PartialFourPort;

      Fluid.FixedResistances.Junction jun4(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal={100,-100,-100},
        dp_nominal={0,0,0})
        annotation (Placement(transformation(extent={{10,10},{-10,-10}},
            rotation=180,
            origin={-30,60})));
      Fluid.FixedResistances.Junction jun1(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal={100,-100,-100},
        dp_nominal={0,0,0})
        annotation (Placement(transformation(extent={{-10,10},{10,-10}},
            rotation=0,
            origin={-30,-60})));
      Fluid.Actuators.Valves.TwoWayLinear CV101(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal=500,
        CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
        dpValve_nominal=10) annotation (Placement(
            transformation(
            extent={{-10,10},{10,-10}},
            rotation=270,
            origin={-30,0})));
      Fluid.Sensors.Pressure PT111(redeclare package Medium =
            Buildings.Media.Water)
        annotation (Placement(transformation(extent={{60,60},{80,80}})));
      Fluid.Sensors.Pressure PT121(redeclare package Medium =
            Buildings.Media.Water)
        annotation (Placement(transformation(extent={{70,-60},{90,-40}})));
      Fluid.Sensors.RelativePressure PDT111(redeclare package Medium =
            Buildings.Media.Water) annotation (Placement(transformation(
            extent={{-10,10},{10,-10}},
            rotation=-90,
            origin={60,10})));
      Fluid.Sensors.TemperatureTwoPort TT121(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
            transformation(
            extent={{-10,10},{10,-10}},
            rotation=180,
            origin={10,-60})));
      Fluid.Sensors.MassFlowRate FT121(redeclare package Medium =
            Buildings.Media.Water)
        annotation (Placement(transformation(extent={{50,-70},{30,-50}})));
      Controls_a.DEC_DEG.PID_DEC pID_DEC
        annotation (Placement(transformation(extent={{-80,0},{-60,20}})));
      Modelica.Blocks.Interfaces.RealInput T_ext annotation (Placement(
            transformation(
            extent={{-20,-20},{20,20}},
            rotation=270,
            origin={50,120})));
        Modelica.Blocks.Interfaces.RealOutput DEG_out[2] "DP, FT"
        annotation (Placement(transformation(extent={{120,-10},{140,10}})));
        Modelica.Blocks.Interfaces.RealOutput TT121_DEG annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={0,-110})));
      Modelica.Blocks.Interfaces.IntegerInput hpshc annotation (Placement(
            transformation(
            extent={{-20,-20},{20,20}},
            rotation=-90,
            origin={-50,120})));
    equation
      connect(jun4.port_3,CV101. port_a)
        annotation (Line(points={{-30,50},{-30,10}},      color={0,127,255}));
      connect(CV101.port_b, jun1.port_3)
        annotation (Line(points={{-30,-10},{-30,-50}},
                                                     color={0,127,255}));
      connect(port_a1, port_a1)
        annotation (Line(points={{-100,60},{-100,60}}, color={0,127,255}));
      connect(jun4.port_2, port_b1)
        annotation (Line(points={{-20,60},{100,60}},color={0,127,255}));
      connect(jun4.port_2,PT111. port)
        annotation (Line(points={{-20,60},{70,60}},color={0,127,255}));
      connect(PDT111.port_a, port_b1)
        annotation (Line(points={{60,20},{60,60},{100,60}}, color={0,127,255}));
      connect(PDT111.port_b, port_a2)
        annotation (Line(points={{60,0},{60,-60},{100,-60}}, color={0,127,255}));
      connect(jun1.port_1, port_b2)
        annotation (Line(points={{-40,-60},{-100,-60}},
                                                      color={0,127,255}));
      connect(port_a1, jun4.port_1)
        annotation (Line(points={{-100,60},{-40,60}},
                                                    color={0,127,255}));
      connect(jun1.port_2,TT121. port_b)
        annotation (Line(points={{-20,-60},{1.77636e-15,-60}},
                                                      color={0,127,255}));
      connect(port_a2,PT121. port)
        annotation (Line(points={{100,-60},{80,-60}}, color={0,127,255}));
      connect(TT121.port_a,FT121. port_b)
        annotation (Line(points={{20,-60},{30,-60}}, color={0,127,255}));
      connect(FT121.port_a, port_a2)
        annotation (Line(points={{50,-60},{100,-60}}, color={0,127,255}));
      connect(pID_DEC.y,CV101. y) annotation (Line(points={{-59,11},{-48,11},{-48,2.22045e-15},
              {-42,2.22045e-15}}, color={0,0,127}));
      connect(TT121.T, pID_DEC.TT521) annotation (Line(points={{10,-49},{10,-30},{-100,
              -30},{-100,8},{-82,8}}, color={0,0,127}));
      connect(PT111.p, pID_DEC.PT511) annotation (Line(points={{81,70},{88,70},{88,84},
              {-110,84},{-110,12},{-82,12}}, color={0,0,127}));
      connect(port_b1, port_b1) annotation (Line(points={{100,60},{100,65},{100,65},
              {100,60}}, color={0,127,255}));
      connect(PDT111.p_rel, pID_DEC.PDT511) annotation (Line(points={{69,10},{80,10},
              {80,40},{-96,40},{-96,16},{-82,16}}, color={0,0,127}));
      connect(T_ext, pID_DEC.T_ext) annotation (Line(points={{50,120},{50,90},{
              -112,90},{-112,20},{-82,20}},
                                       color={0,0,127}));
      connect(TT121.T, TT121_DEG) annotation (Line(points={{10,-49},{10,-40},{-10,-40},
              {-10,-90},{0,-90},{0,-110}}, color={0,0,127}));
      connect(FT121.m_flow, DEG_out[2]) annotation (Line(points={{40,-49},{40,
              -30},{100,-30},{100,5},{130,5}},
                                         color={0,0,127}));
      connect(pID_DEC.dp_cons, DEG_out[1]) annotation (Line(points={{-59,17},{
              20,17},{20,-10},{88,-10},{88,-5},{130,-5}},      color={0,0,127}));
      connect(hpshc, pID_DEC.HPSHC) annotation (Line(points={{-50,120},{-50,96},
              {-120,96},{-120,0},{-82,0}}, color={255,127,0}));
      annotation (Diagram(coordinateSystem(extent={{-100,-100},{100,100}})), Icon(
            coordinateSystem(extent={{-100,-100},{100,120}}), graphics={
            Rectangle(
              extent={{-100,80},{100,40}},
              lineColor={0,0,0},
              fillPattern=FillPattern.HorizontalCylinder,
              fillColor={28,108,200}),
            Rectangle(
              extent={{-100,-40},{100,-80}},
              lineColor={0,0,0},
              fillPattern=FillPattern.HorizontalCylinder,
              fillColor={170,213,255}),
        Polygon(
          points={{2,18},{-38,60},{-38,-20},{2,18}},
          lineColor={0,0,0},
          fillColor=DynamicSelect({0,0,0}, y*{255,255,255}),
          fillPattern=FillPattern.Solid,
              origin={-18,2},
              rotation=270),
        Polygon(
          points={{-2,-20},{38,20},{38,-60},{-2,-20}},
          lineColor={0,0,0},
          fillColor={255,255,255},
          fillPattern=FillPattern.Solid,
              origin={20,-2},
              rotation=270),
        Line(
          points={{0,20},{0,-20}},
              origin={20,0},
              rotation=270),
            Rectangle(
              extent={{40,20},{80,-20}},
              lineColor={0,0,0},
              fillColor={210,210,210},
              fillPattern=FillPattern.Solid)}));
    end DEG;

    model DEC_simple
      extends Fluid.Interfaces.PartialFourPort;

      Fluid.FixedResistances.Junction jun4(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal={100,-100,-100},
        dp_nominal={0,0,0})
        annotation (Placement(transformation(extent={{10,10},{-10,-10}},
            rotation=180,
            origin={-20,60})));
      Fluid.FixedResistances.Junction jun1(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal={100,-100,100},
        dp_nominal={0,0,0})
        annotation (Placement(transformation(extent={{10,10},{-10,-10}},
            rotation=0,
            origin={-20,-60})));
      Fluid.Actuators.Valves.TwoWayLinear CV501(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal=(220),
        CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
        dpValve_nominal=100000,
        use_inputFilter=false)
                            annotation (Placement(
            transformation(
            extent={{-10,10},{10,-10}},
            rotation=270,
            origin={-20,0})));
      Fluid.Sensors.Pressure PT511(redeclare package Medium =
            Buildings.Media.Water)
        annotation (Placement(transformation(extent={{60,60},{80,80}})));
      Fluid.Sensors.Pressure PT521(redeclare package Medium =
            Buildings.Media.Water)
        annotation (Placement(transformation(extent={{70,-60},{90,-40}})));
      Fluid.Sensors.RelativePressure PDT511(redeclare package Medium =
            Buildings.Media.Water) annotation (Placement(transformation(
            extent={{-10,10},{10,-10}},
            rotation=-90,
            origin={60,10})));
      Fluid.Sensors.TemperatureTwoPort TT521(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
            transformation(
            extent={{-10,10},{10,-10}},
            rotation=180,
            origin={-60,-60})));
      Fluid.Sensors.MassFlowRate FT521(redeclare package Medium =
            Buildings.Media.Water)
        annotation (Placement(transformation(extent={{50,-70},{30,-50}})));
        Modelica.Blocks.Interfaces.RealOutput DEC[3] "FT, TT, FT bypass"
        annotation (Placement(transformation(extent={{120,-10},{140,10}})));
      Controls.Continuous.LimPID conPID(reverseActing=false)
        annotation (Placement(transformation(extent={{-80,-10},{-60,10}})));
      Modelica.Blocks.Sources.RealExpression realExpression(y=50000)
        annotation (Placement(transformation(extent={{-114,-10},{-94,10}})));
        Modelica.Blocks.Interfaces.RealOutput TT521_DEC(
        final quantity="ThermodynamicTemperature",
        final unit="K",
        displayUnit="degC")                                         annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={0,-110})));
      Fluid.Sensors.MassFlowRate ft_bypass(redeclare package Medium =
            Buildings.Media.Water) annotation (Placement(transformation(
            extent={{10,10},{-10,-10}},
            rotation=90,
            origin={-20,30})));
    equation
      connect(port_a1, port_a1)
        annotation (Line(points={{-100,60},{-100,60}}, color={0,127,255}));
      connect(jun4.port_2, port_b1)
        annotation (Line(points={{-10,60},{100,60}},color={0,127,255}));
      connect(jun4.port_2, PT511.port)
        annotation (Line(points={{-10,60},{70,60}},color={0,127,255}));
      connect(PDT511.port_a, port_b1)
        annotation (Line(points={{60,20},{60,60},{100,60}}, color={0,127,255}));
      connect(PDT511.port_b, port_a2)
        annotation (Line(points={{60,0},{60,-60},{100,-60}}, color={0,127,255}));
      connect(port_a1, jun4.port_1)
        annotation (Line(points={{-100,60},{-30,60}},
                                                    color={0,127,255}));
      connect(port_a2, PT521.port)
        annotation (Line(points={{100,-60},{80,-60}}, color={0,127,255}));
      connect(FT521.port_a, port_a2)
        annotation (Line(points={{50,-60},{100,-60}}, color={0,127,255}));
      connect(port_b1, port_b1) annotation (Line(points={{100,60},{100,65},{100,65},
              {100,60}}, color={0,127,255}));
      connect(CV501.port_b, jun1.port_3) annotation (Line(points={{-20,-10},{
              -20,-50},{-20,-50}}, color={0,127,255}));
      connect(realExpression.y, conPID.u_s)
        annotation (Line(points={{-93,0},{-82,0}}, color={0,0,127}));
      connect(PDT511.p_rel, conPID.u_m) annotation (Line(points={{69,10},{80,10},
              {80,-20},{-70,-20},{-70,-12}}, color={0,0,127}));
      connect(conPID.y, CV501.y)
        annotation (Line(points={{-59,0},{-32,0}}, color={0,0,127}));
      connect(jun1.port_1, FT521.port_b) annotation (Line(points={{-10,-60},{10,
              -60},{10,-60},{30,-60}}, color={0,127,255}));
      connect(TT521.port_a, jun1.port_2)
        annotation (Line(points={{-50,-60},{-30,-60}}, color={0,127,255}));
      connect(port_b2, TT521.port_b)
        annotation (Line(points={{-100,-60},{-70,-60}}, color={0,127,255}));
      connect(TT521.T, TT521_DEC) annotation (Line(points={{-60,-49},{-60,-32},{0,-32},
              {0,-110}}, color={0,0,127}));
      connect(FT521.m_flow, DEC[1]) annotation (Line(points={{40,-49},{40,-34},
              {110,-34},{110,-6.66667},{130,-6.66667}},
                                                   color={0,0,127}));
      connect(TT521.T, DEC[2]) annotation (Line(points={{-60,-49},{-60,-26},{96,
              -26},{96,0},{130,0}}, color={0,0,127}));
      connect(jun4.port_3, ft_bypass.port_a)
        annotation (Line(points={{-20,50},{-20,40}}, color={0,127,255}));
      connect(ft_bypass.port_b, CV501.port_a)
        annotation (Line(points={{-20,20},{-20,10}}, color={0,127,255}));
      connect(ft_bypass.m_flow, DEC[3]) annotation (Line(points={{-9,30},{110,
              30},{110,6.66667},{130,6.66667}}, color={0,0,127}));
      annotation (Diagram(coordinateSystem(extent={{-100,-100},{100,100}})), Icon(
            coordinateSystem(extent={{-100,-100},{100,100}}), graphics={
            Rectangle(
              extent={{-100,80},{100,40}},
              lineColor={0,0,0},
              fillPattern=FillPattern.HorizontalCylinder,
              fillColor={238,46,47}),
            Rectangle(
              extent={{-100,-40},{100,-80}},
              lineColor={0,0,0},
              fillPattern=FillPattern.HorizontalCylinder,
              fillColor={244,125,35}),
        Polygon(
          points={{2,18},{-38,60},{-38,-20},{2,18}},
          lineColor={0,0,0},
          fillColor=DynamicSelect({0,0,0}, y*{255,255,255}),
          fillPattern=FillPattern.Solid,
              origin={-18,2},
              rotation=270),
        Polygon(
          points={{-2,-20},{38,20},{38,-60},{-2,-20}},
          lineColor={0,0,0},
          fillColor={255,255,255},
          fillPattern=FillPattern.Solid,
              origin={20,-2},
              rotation=270),
        Line(
          points={{0,20},{0,-20}},
              origin={20,0},
              rotation=270),
            Rectangle(
              extent={{40,20},{80,-20}},
              lineColor={0,0,0},
              fillColor={210,210,210},
              fillPattern=FillPattern.Solid)}));
    end DEC_simple;

    model DEG_simple
      extends Fluid.Interfaces.PartialFourPort;

      Fluid.FixedResistances.Junction jun4(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal={100,-100,-100},
        dp_nominal={0,0,0})
        annotation (Placement(transformation(extent={{10,10},{-10,-10}},
            rotation=180,
            origin={-30,60})));
      Fluid.FixedResistances.Junction jun1(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal={100,-100,100},
        dp_nominal={0,0,0})
        annotation (Placement(transformation(extent={{10,10},{-10,-10}},
            rotation=0,
            origin={-30,-60})));
      Fluid.Actuators.Valves.TwoWayLinear CV101(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal=(500*2 + 332)/3.6,
        CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
        dpValve_nominal=100000,
        use_inputFilter=false)
                            annotation (Placement(
            transformation(
            extent={{-10,10},{10,-10}},
            rotation=270,
            origin={-30,0})));
      Fluid.Sensors.Pressure PT111(redeclare package Medium =
            Buildings.Media.Water)
        annotation (Placement(transformation(extent={{60,60},{80,80}})));
      Fluid.Sensors.Pressure PT121(redeclare package Medium =
            Buildings.Media.Water)
        annotation (Placement(transformation(extent={{70,-60},{90,-40}})));
      Fluid.Sensors.RelativePressure PDT111(redeclare package Medium =
            Buildings.Media.Water) annotation (Placement(transformation(
            extent={{-10,10},{10,-10}},
            rotation=-90,
            origin={60,10})));
      Fluid.Sensors.TemperatureTwoPort TT121(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
            transformation(
            extent={{-10,10},{10,-10}},
            rotation=180,
            origin={-70,-60})));
      Fluid.Sensors.MassFlowRate FT121(redeclare package Medium =
            Buildings.Media.Water)
        annotation (Placement(transformation(extent={{50,-70},{30,-50}})));
        Modelica.Blocks.Interfaces.RealOutput DEG_out[2] "FT"
        annotation (Placement(transformation(extent={{120,-10},{140,10}})));
        Modelica.Blocks.Interfaces.RealOutput TT121_DEG(final quantity="ThermodynamicTemperature",
                                              final unit="K",
                                              displayUnit = "degC") annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={0,-110})));
      Controls.Continuous.LimPID conPID(
        k=0.05,
        Ti=15,                          reverseActing=false)
        annotation (Placement(transformation(extent={{-80,-10},{-60,10}})));
      Modelica.Blocks.Sources.RealExpression realExpression(y=50000)
        annotation (Placement(transformation(extent={{-114,-10},{-94,10}})));
      Fluid.Sensors.MassFlowRate FT1(redeclare package Medium =
            Buildings.Media.Water)
        annotation (Placement(transformation(extent={{10,10},{-10,-10}},
            rotation=90,
            origin={-30,30})));
    equation
      connect(port_a1, port_a1)
        annotation (Line(points={{-100,60},{-100,60}}, color={0,127,255}));
      connect(jun4.port_2, port_b1)
        annotation (Line(points={{-20,60},{100,60}},color={0,127,255}));
      connect(jun4.port_2,PT111. port)
        annotation (Line(points={{-20,60},{70,60}},color={0,127,255}));
      connect(PDT111.port_a, port_b1)
        annotation (Line(points={{60,20},{60,60},{100,60}}, color={0,127,255}));
      connect(PDT111.port_b, port_a2)
        annotation (Line(points={{60,0},{60,-60},{100,-60}}, color={0,127,255}));
      connect(port_a1, jun4.port_1)
        annotation (Line(points={{-100,60},{-40,60}},
                                                    color={0,127,255}));
      connect(port_a2,PT121. port)
        annotation (Line(points={{100,-60},{80,-60}}, color={0,127,255}));
      connect(FT121.port_a, port_a2)
        annotation (Line(points={{50,-60},{100,-60}}, color={0,127,255}));
      connect(port_b1, port_b1) annotation (Line(points={{100,60},{100,65},{100,65},
              {100,60}}, color={0,127,255}));
      connect(TT121.T, TT121_DEG) annotation (Line(points={{-70,-49},{-70,-40},
              {-52,-40},{-52,-80},{0,-80},{0,-110}},
                                           color={0,0,127}));
      connect(realExpression.y, conPID.u_s)
        annotation (Line(points={{-93,0},{-82,0}}, color={0,0,127}));
      connect(conPID.y, CV101.y) annotation (Line(points={{-59,0},{-49.5,0},{
              -49.5,2.22045e-15},{-42,2.22045e-15}}, color={0,0,127}));
      connect(PDT111.p_rel, conPID.u_m) annotation (Line(points={{69,10},{80,10},
              {80,-20},{-70,-20},{-70,-12}}, color={0,0,127}));
      connect(port_b2, TT121.port_b)
        annotation (Line(points={{-100,-60},{-80,-60}}, color={0,127,255}));
      connect(FT121.port_b, jun1.port_1)
        annotation (Line(points={{30,-60},{-20,-60}}, color={0,127,255}));
      connect(jun1.port_2, TT121.port_a)
        annotation (Line(points={{-40,-60},{-60,-60}}, color={0,127,255}));
      connect(CV101.port_b, jun1.port_3)
        annotation (Line(points={{-30,-10},{-30,-50}}, color={0,127,255}));
      connect(jun4.port_3, FT1.port_a)
        annotation (Line(points={{-30,50},{-30,40}}, color={0,127,255}));
      connect(FT1.port_b, CV101.port_a)
        annotation (Line(points={{-30,20},{-30,10}}, color={0,127,255}));
      connect(FT121.m_flow, DEG_out[1]) annotation (Line(points={{40,-49},{40,
              -30},{100,-30},{100,-5},{130,-5}}, color={0,0,127}));
      connect(FT1.m_flow, DEG_out[2]) annotation (Line(points={{-19,30},{100,30},
              {100,5},{130,5}}, color={0,0,127}));
      annotation (Diagram(coordinateSystem(extent={{-100,-100},{100,100}})), Icon(
            coordinateSystem(extent={{-100,-100},{100,100}}), graphics={
            Rectangle(
              extent={{-100,80},{100,40}},
              lineColor={0,0,0},
              fillPattern=FillPattern.HorizontalCylinder,
              fillColor={28,108,200}),
            Rectangle(
              extent={{-100,-40},{100,-80}},
              lineColor={0,0,0},
              fillPattern=FillPattern.HorizontalCylinder,
              fillColor={170,213,255}),
        Polygon(
          points={{2,18},{-38,60},{-38,-20},{2,18}},
          lineColor={0,0,0},
          fillColor=DynamicSelect({0,0,0}, y*{255,255,255}),
          fillPattern=FillPattern.Solid,
              origin={-18,2},
              rotation=270),
        Polygon(
          points={{-2,-20},{38,20},{38,-60},{-2,-20}},
          lineColor={0,0,0},
          fillColor={255,255,255},
          fillPattern=FillPattern.Solid,
              origin={20,-2},
              rotation=270),
        Line(
          points={{0,20},{0,-20}},
              origin={20,0},
              rotation=270),
            Rectangle(
              extent={{40,20},{80,-20}},
              lineColor={0,0,0},
              fillColor={210,210,210},
              fillPattern=FillPattern.Solid)}));
    end DEG_simple;

    package Tests
      extends Modelica.Icons.ExamplesPackage;
      model combi_0
        Modelica.Fluid.Sources.MassFlowSource_T boundary(
          redeclare package Medium =
              Modelica.Media.Water.ConstantPropertyLiquidWater,
          m_flow=50,
          T=323.15,
          nPorts=1)
          annotation (Placement(transformation(extent={{-100,20},{-80,40}})));
        Modelica.Fluid.Sources.MassFlowSource_T boundary1(
          redeclare package Medium =
              Modelica.Media.Water.ConstantPropertyLiquidWater,
          m_flow=50,
          T=303.15,
          nPorts=1)
          annotation (Placement(transformation(extent={{-100,-20},{-80,0}})));
        Modelica.Fluid.Sensors.TemperatureTwoPort temperature(redeclare package
            Medium = Modelica.Media.Water.ConstantPropertyLiquidWater)
          annotation (Placement(transformation(extent={{-28,0},{-8,20}})));
        Modelica.Fluid.Sources.FixedBoundary boundary2(redeclare package Medium =
              Modelica.Media.Water.ConstantPropertyLiquidWater, nPorts=1)
          annotation (Placement(transformation(extent={{180,0},{160,20}})));
        Modelica.Fluid.Sensors.TemperatureTwoPort temperature1(redeclare
            package Medium = Modelica.Media.Water.ConstantPropertyLiquidWater)
          annotation (Placement(transformation(extent={{130,0},{150,20}})));
        Modelica.Fluid.Sensors.MassFlowRate massFlowRate(redeclare package
            Medium = Modelica.Media.Water.ConstantPropertyLiquidWater)
          annotation (Placement(transformation(extent={{92,-50},{112,-30}})));
        Modelica.Fluid.Sensors.MassFlowRate massFlowRate1(redeclare package
            Medium = Modelica.Media.Water.ConstantPropertyLiquidWater)
          annotation (Placement(transformation(extent={{92,0},{112,20}})));
        Modelica.Fluid.Sensors.MassFlowRate massFlowRate2(redeclare package
            Medium = Modelica.Media.Water.ConstantPropertyLiquidWater)
          annotation (Placement(transformation(extent={{4,0},{24,20}})));
        Modelica.Fluid.Valves.ValveDiscrete valveDiscrete1(
          redeclare package Medium =
              Modelica.Media.Water.ConstantPropertyLiquidWater,
          dp_nominal=20000,
          m_flow_nominal=100)
          annotation (Placement(transformation(extent={{60,-50},{80,-30}})));
        Modelica.Blocks.Sources.BooleanConstant booleanConstant
          annotation (Placement(transformation(extent={{0,-40},{20,-20}})));
        Modelica.Fluid.Valves.ValveLinear valveLinear(
          redeclare package Medium =
              Modelica.Media.Water.ConstantPropertyLiquidWater,
          dp_nominal=10000,
          m_flow_nominal=100)
          annotation (Placement(transformation(extent={{60,0},{80,20}})));
      equation
        connect(boundary1.ports[1], temperature.port_a) annotation (Line(points=
               {{-80,-10},{-52,-10},{-52,10},{-28,10}}, color={0,127,255}));
        connect(boundary.ports[1], temperature.port_a) annotation (Line(points=
                {{-80,30},{-60,30},{-60,10},{-28,10}}, color={0,127,255}));
        connect(temperature1.port_b, boundary2.ports[1])
          annotation (Line(points={{150,10},{160,10}}, color={0,127,255}));
        connect(massFlowRate.port_b, temperature1.port_a) annotation (Line(
              points={{112,-40},{122,-40},{122,10},{130,10}}, color={0,127,255}));
        connect(massFlowRate1.port_b, temperature1.port_a)
          annotation (Line(points={{112,10},{130,10}}, color={0,127,255}));
        connect(temperature.port_b, massFlowRate2.port_a)
          annotation (Line(points={{-8,10},{4,10}}, color={0,127,255}));
        connect(massFlowRate.port_a, valveDiscrete1.port_b)
          annotation (Line(points={{92,-40},{80,-40}}, color={0,127,255}));
        connect(valveDiscrete1.port_a, massFlowRate2.port_b) annotation (Line(
              points={{60,-40},{40,-40},{40,10},{24,10}}, color={0,127,255}));
        connect(booleanConstant.y, valveDiscrete1.open) annotation (Line(points=
               {{21,-30},{46,-30},{46,-32},{70,-32}}, color={255,0,255}));
        connect(massFlowRate2.port_b, valveLinear.port_a)
          annotation (Line(points={{24,10},{60,10}}, color={0,127,255}));
        connect(valveLinear.port_b, massFlowRate1.port_a)
          annotation (Line(points={{80,10},{92,10}}, color={0,127,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end combi_0;

      model test_sqrt
        parameter Real u=3;

        Modelica.Blocks.Interfaces.RealOutput y
          annotation (Placement(transformation(extent={{100,-10},{120,10}})));
      equation
        y = sqrt(u)^2;
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end test_sqrt;

      model test_switch
        Modelica.Blocks.Logical.Switch switch1
          annotation (Placement(transformation(extent={{-40,20},{-20,40}})));
        Modelica.Blocks.Sources.RealExpression dp_set1(y=10)
          annotation (Placement(transformation(extent={{-100,50},{-80,70}})));
        Modelica.Blocks.Sources.RealExpression dp_set2(y=5)
          annotation (Placement(transformation(extent={{-100,-10},{-80,10}})));
        Modelica.Blocks.Sources.BooleanExpression TFP_solo(y=true)
          annotation (Placement(transformation(extent={{-100,20},{-80,40}})));
      equation
        connect(dp_set1.y, switch1.u1) annotation (Line(points={{-79,60},{-72,
                60},{-72,38},{-42,38}}, color={0,0,127}));
        connect(dp_set2.y, switch1.u3) annotation (Line(points={{-79,0},{-72,0},
                {-72,22},{-42,22}}, color={0,0,127}));
        connect(TFP_solo.y, switch1.u2)
          annotation (Line(points={{-79,30},{-42,30}}, color={255,0,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end test_switch;

      model pid
        Modelica.Blocks.Sources.RealExpression dp_set(y=10)
          annotation (Placement(transformation(extent={{-80,60},{-60,80}})));
        Controls.Continuous.LimPID conPID2(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=3,
          Ti=1,
          initType=Modelica.Blocks.Types.InitPID.NoInit,
          reverseActing=false)                           annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-30,70})));
        Modelica.Blocks.Sources.Ramp ramp(height=15, duration=100)
          annotation (Placement(transformation(extent={{-80,20},{-60,40}})));
      equation
        connect(ramp.y, conPID2.u_m) annotation (Line(points={{-59,30},{-30,30},
                {-30,58}}, color={0,0,127}));
        connect(dp_set.y, conPID2.u_s)
          annotation (Line(points={{-59,70},{-42,70}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end pid;

      model test_dec
        Fluid.FixedResistances.Junction jun4(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={100,-100,-100},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{10,10},{-10,-10}},
              rotation=180,
              origin={-20,60})));
        Fluid.FixedResistances.Junction jun1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={100,-100,-100},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{10,10},{-10,-10}},
              rotation=0,
              origin={-20,-60})));
        Fluid.Actuators.Valves.TwoWayLinear CV501(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=500,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          dpValve_nominal=10) annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=270,
              origin={-20,0})));
        Fluid.Sensors.Pressure PT511(redeclare package Medium =
              Buildings.Media.Water)
          annotation (Placement(transformation(extent={{60,60},{80,80}})));
        Fluid.Sensors.Pressure PT521(redeclare package Medium =
              Buildings.Media.Water)
          annotation (Placement(transformation(extent={{70,-60},{90,-40}})));
        Fluid.Sensors.RelativePressure PDT511(redeclare package Medium =
              Buildings.Media.Water) annotation (Placement(transformation(
              extent={{-10,10},{10,-10}},
              rotation=-90,
              origin={60,10})));
        Fluid.Sensors.TemperatureTwoPort TT521(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=180,
              origin={10,-60})));
        Fluid.Sensors.MassFlowRate FT521(redeclare package Medium =
              Buildings.Media.Water)
          annotation (Placement(transformation(extent={{50,-70},{30,-50}})));
        Controls_a.DEC_DEG.PID_DEC pID_DEC
          annotation (Placement(transformation(extent={{-80,0},{-60,20}})));
        Modelica.Blocks.Interfaces.IntegerInput hpshc annotation (Placement(
              transformation(
              extent={{-20,-20},{20,20}},
              rotation=-90,
              origin={-60,120})));
        Modelica.Blocks.Interfaces.RealInput T_ext annotation (Placement(
              transformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={40,120})));
      equation
        connect(jun4.port_3,CV501. port_a)
          annotation (Line(points={{-20,50},{-20,10}},      color={0,127,255}));
        connect(jun4.port_2,PT511. port)
          annotation (Line(points={{-10,60},{70,60}},color={0,127,255}));
        connect(TT521.port_a,FT521. port_b)
          annotation (Line(points={{20,-60},{30,-60}}, color={0,127,255}));
        connect(pID_DEC.y,CV501. y) annotation (Line(points={{-59,11},{-48,11},
                {-48,0},{-32,0}},   color={0,0,127}));
        connect(TT521.T,pID_DEC. TT521) annotation (Line(points={{10,-49},{10,
                -30},{-100,-30},{-100,8},{-82,8}},
                                        color={0,0,127}));
        connect(hpshc,pID_DEC. HPSHC) annotation (Line(points={{-60,120},{-60,
                96},{-120,96},{-120,0},{-82,0}},
                                       color={255,127,0}));
        connect(PT511.p,pID_DEC. PT511) annotation (Line(points={{81,70},{88,70},
                {88,84},{-110,84},{-110,12},{-82,12}},
                                               color={0,0,127}));
        connect(PDT511.p_rel,pID_DEC. PDT511) annotation (Line(points={{69,10},
                {80,10},{80,40},{-96,40},{-96,16},{-82,16}},
                                                     color={0,0,127}));
        connect(T_ext,pID_DEC. T_ext) annotation (Line(points={{40,120},{40,90},
                {-112,90},{-112,20},{-82,20}},
                                         color={0,0,127}));
        connect(jun1.port_1,TT521. port_b) annotation (Line(points={{-10,-60},{
                0,-60}},           color={0,127,255}));
        connect(CV501.port_b,jun1. port_3) annotation (Line(points={{-20,-10},{
                -20,-50}},           color={0,127,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end test_dec;

      model test_dp
        Fluid.Sources.MassFlowSource_T boundary(
          redeclare package Medium = Buildings.Media.Water,
          m_flow=100,
          T=293.15,
          nPorts=1)
          annotation (Placement(transformation(extent={{-100,60},{-80,80}})));
        Fluid.Sources.Boundary_pT bou(
          redeclare package Medium = Buildings.Media.Water,
          p=100000,
          T=293.15,
          nPorts=1)
          annotation (Placement(transformation(extent={{-100,-80},{-80,-60}})));
        Fluid.Actuators.Valves.TwoWayLinear val(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=100,
          dpValve_nominal=50) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-30,10})));
        Fluid.Actuators.Valves.TwoWayLinear val1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=100,
          dpValve_nominal=50,
          y_start=0.5)        annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={50,10})));
        Fluid.FixedResistances.Junction jun(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={100,-100,-100},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-40,60},{-20,80}})));
        Fluid.FixedResistances.Junction jun1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={100,-100,100},
          dp_nominal={0,0,0}) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-30,-70})));
        Modelica.Blocks.Sources.Ramp ramp(
          height=0.5,
          duration=100,
          offset=0.5,
          startTime=200)
          annotation (Placement(transformation(extent={{60,40},{80,60}})));
        Modelica.Blocks.Sources.RealExpression realExpression(y=0.1)
          annotation (Placement(transformation(extent={{-60,30},{-40,50}})));
        Fluid.Sensors.RelativePressure senRelPre(redeclare package Medium =
              Buildings.Media.Water) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={10,-10})));
      equation
        connect(bou.ports[1], jun1.port_2)
          annotation (Line(points={{-80,-70},{-40,-70}}, color={0,127,255}));
        connect(val.port_b, jun1.port_3)
          annotation (Line(points={{-30,0},{-30,-60}}, color={0,127,255}));
        connect(jun.port_3, val.port_a)
          annotation (Line(points={{-30,60},{-30,20}}, color={0,127,255}));
        connect(jun.port_2, val1.port_a) annotation (Line(points={{-20,70},{50,
                70},{50,20}}, color={0,127,255}));
        connect(val1.port_b, jun1.port_1) annotation (Line(points={{50,0},{50,
                -70},{-20,-70}}, color={0,127,255}));
        connect(boundary.ports[1], jun.port_1) annotation (Line(points={{-80,70},
                {-60,70},{-60,70},{-40,70}}, color={0,127,255}));
        connect(ramp.y, val1.y) annotation (Line(points={{81,50},{90,50},{90,10},
                {62,10}}, color={0,0,127}));
        connect(realExpression.y, val.y) annotation (Line(points={{-39,40},{-12,
                40},{-12,10},{-18,10}}, color={0,0,127}));
        connect(jun.port_2, senRelPre.port_a) annotation (Line(points={{-20,70},
                {10,70},{10,0}}, color={0,127,255}));
        connect(senRelPre.port_b, jun1.port_1) annotation (Line(points={{10,-20},
                {10,-70},{-20,-70}}, color={0,127,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end test_dp;

      model dp_bis
        Fluid.Sources.Boundary_pT bou(
          redeclare package Medium = Buildings.Media.Water,
          p=100000,
          T=293.15,
          nPorts=3)
          annotation (Placement(transformation(extent={{-100,-60},{-80,-40}})));
        Fluid.Actuators.Valves.TwoWayLinear val1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=100,
          dpValve_nominal=50,
          y_start=0.5)        annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={30,-10})));
        Fluid.Movers.FlowControlled_m_flow fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=200,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          constantMassFlowRate=200)
          annotation (Placement(transformation(extent={{-80,40},{-60,60}})));
        Fluid.Actuators.Valves.TwoWayLinear val2(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=100,
          dpValve_nominal=50,
          y_start=0.5)        annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-30,-10})));
        Modelica.Blocks.Sources.RealExpression realExpression
          annotation (Placement(transformation(extent={{-40,60},{-20,80}})));
        Modelica.Blocks.Sources.RealExpression realExpression1(y=0.5)
          annotation (Placement(transformation(extent={{20,60},{40,80}})));
      equation
        connect(val1.port_b, bou.ports[1]) annotation (Line(points={{30,-20},{
                30,-47.3333},{-80,-47.3333}}, color={0,127,255}));
        connect(fan.port_b, val1.port_a) annotation (Line(points={{-60,50},{30,
                50},{30,0}}, color={0,127,255}));
        connect(bou.ports[2], fan.port_a) annotation (Line(points={{-80,-50},{
                -80,50},{-80,50}}, color={0,127,255}));
        connect(fan.port_b, val2.port_a) annotation (Line(points={{-60,50},{-44,
                50},{-44,0},{-30,0}}, color={0,127,255}));
        connect(val2.port_b, bou.ports[3]) annotation (Line(points={{-30,-20},{
                -54,-20},{-54,-52.6667},{-80,-52.6667}}, color={0,127,255}));
        connect(realExpression.y, val2.y) annotation (Line(points={{-19,70},{-8,
                70},{-8,-10},{-18,-10}}, color={0,0,127}));
        connect(realExpression1.y, val1.y) annotation (Line(points={{41,70},{50,
                70},{50,-10},{42,-10}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end dp_bis;

      model test_distri
        DEG_simple dEG_simple(redeclare package Medium1 = Buildings.Media.Water,
            redeclare package Medium2 = Buildings.Media.Water)
          annotation (Placement(transformation(extent={{0,-60},{20,-40}})));
        SST.distribution_cold
                          distribution_cold1(redeclare package Medium =
              Buildings.Media.Water)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=270,
              origin={70,-50})));
        Controls_a.DEC_DEG.DEG_controls_parallel dEG_controls_parallel
          annotation (Placement(transformation(extent={{100,20},{140,60}})));
        Modelica.Blocks.Sources.RealExpression realExpression(y=322/3.6)
          annotation (Placement(transformation(extent={{0,100},{20,120}})));
        Modelica.Blocks.Sources.RealExpression realExpression1
          annotation (Placement(transformation(extent={{0,80},{20,100}})));
        Modelica.Blocks.Sources.RealExpression realExpression2
          annotation (Placement(transformation(extent={{0,60},{20,80}})));
        Modelica.Blocks.Sources.IntegerExpression integerExpression(y=2)
          annotation (Placement(transformation(extent={{0,40},{20,60}})));
        PEC_PEG.Tests.pompes_peg_test pompes_peg_test(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=500)
          annotation (Placement(transformation(extent={{-60,-60},{-40,-40}})));
      equation
        connect(dEG_simple.port_b1, distribution_cold1.port_a) annotation (Line(
              points={{20,-44},{38,-44},{38,-28},{70,-28},{70,-40}}, color={0,
                127,255}));
        connect(distribution_cold1.port_b, dEG_simple.port_a2) annotation (Line(
              points={{70,-60},{70,-72},{36,-72},{36,-56},{20,-56}}, color={0,
                127,255}));
        connect(dEG_simple.DEG_out, dEG_controls_parallel.DEG) annotation (Line(
              points={{23,-50},{30,-50},{30,54},{98,54}}, color={0,0,127}));
        connect(integerExpression.y, dEG_controls_parallel.TFP_DEC) annotation (
           Line(points={{21,50},{58.5,50},{58.5,24},{98,24}}, color={255,127,0}));
        connect(realExpression2.y, dEG_controls_parallel.FT_TFP) annotation (
            Line(points={{21,70},{60,70},{60,30.2},{98,30.2}}, color={0,0,127}));
        connect(realExpression1.y, dEG_controls_parallel.FT_GF2) annotation (
            Line(points={{21,90},{58.5,90},{58.5,36},{98,36}}, color={0,0,127}));
        connect(realExpression.y, dEG_controls_parallel.FT_GF1) annotation (
            Line(points={{21,110},{58,110},{58,44},{98,44},{98,42}}, color={0,0,
                127}));
        connect(pompes_peg_test.port_b, dEG_simple.port_a1) annotation (Line(
              points={{-40,-50},{-20,-50},{-20,-44},{0,-44}}, color={0,127,255}));
        connect(dEG_simple.port_b2, pompes_peg_test.port_a) annotation (Line(
              points={{0,-56},{-10,-56},{-10,-58},{-20,-58},{-20,-82},{-78,-82},
                {-78,-50},{-60,-50}}, color={0,127,255}));
        connect(dEG_controls_parallel.HPSHC, pompes_peg_test.tfp) annotation (
            Line(points={{142,58},{160,58},{160,-20},{-72,-20},{-72,-40},{-62,
                -40}}, color={255,127,0}));
        connect(dEG_controls_parallel.GF2, pompes_peg_test.gf1) annotation (
            Line(points={{142,50},{180,50},{180,-92},{-90,-92},{-90,-54},{-62,
                -54}}, color={255,0,255}));
        connect(dEG_controls_parallel.GF1, pompes_peg_test.gf2) annotation (
            Line(points={{142,42},{168,42},{168,-86},{-82,-86},{-82,-60},{-62,
                -60}}, color={255,0,255}));
        annotation (
          Icon(coordinateSystem(preserveAspectRatio=false)),
          Diagram(coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=600000,
            Interval=3600,
            __Dymola_Algorithm="Dassl"));
      end test_distri;
    end Tests;

  end DEC_DEG;

  package PEC_PEG
    extends Modelica.Icons.VariantsPackage;
    model pompes_pec
    extends Buildings.Fluid.Interfaces.PartialTwoPortInterface;
      Fluid.FixedResistances.CheckValve cheVal[3](
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal=720*1025/3600,
        dpValve_nominal=3000)
        annotation (Placement(transformation(extent={{40,-10},{60,10}})));
      Fluid.Movers.FlowControlled_m_flow fan[3](
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal=95.83,
        redeclare Fluid.Movers.Data.Pumps.KSB.KSB_PEC per,
        inputType=Buildings.Fluid.Types.InputType.Continuous,
        dp_nominal(displayUnit="Pa") = 1078731.5)
        annotation (Placement(transformation(extent={{-20,-10},{0,10}})));
      Modelica.Blocks.Interfaces.IntegerInput tfp
        annotation (Placement(transformation(extent={{-140,80},{-100,120}})));
      Modelica.Blocks.Interfaces.BooleanInput cha
        annotation (Placement(transformation(extent={{-140,30},{-100,70}})));
      Controls_a.PEC_PEG.activation_pec activation_pec
        annotation (Placement(transformation(extent={{-60,80},{-40,100}})));
      Fluid.Sources.Boundary_pT bou(
        redeclare package Medium = Buildings.Media.Water,
        use_T_in=true,
        nPorts=4) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={-50,-30})));
      Fluid.Sensors.TemperatureTwoPort senTem(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=211/3.6)
        annotation (Placement(transformation(extent={{-80,-10},{-60,10}})));
    equation
    for k in 1:3 loop
      connect(cheVal[k].port_b, port_b)
        annotation (Line(points={{60,0},{100,0}}, color={0,127,255}));
    end for;

      connect(fan.port_b, cheVal.port_a)
        annotation (Line(points={{0,0},{40,0}},  color={0,127,255}));

      connect(tfp, activation_pec.tfp) annotation (Line(points={{-120,100},{-92,
              100},{-92,95},{-62,95}}, color={255,127,0}));
      connect(cha, activation_pec.cha) annotation (Line(points={{-120,50},{-92,
              50},{-92,85},{-62,85}}, color={255,0,255}));
      connect(activation_pec.y, fan.m_flow_in) annotation (Line(points={{-39,90},
              {-10,90},{-10,12}}, color={0,0,127}));
      connect(port_a, senTem.port_a)
        annotation (Line(points={{-100,0},{-80,0}}, color={0,127,255}));
      connect(senTem.port_b, bou.ports[1]) annotation (Line(points={{-60,0},{
              -53,0},{-53,-20}}, color={0,127,255}));
      connect(bou.ports[2:4], fan.port_a) annotation (Line(points={{-47,-20},{
              -46,-20},{-46,0},{-20,0}}, color={0,127,255}));
      connect(senTem.T, bou.T_in) annotation (Line(points={{-70,11},{-70,20},{
              -120,20},{-120,-50},{-54,-50},{-54,-42}}, color={0,0,127}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
            Rectangle(
              extent={{-100,16},{100,-16}},
              lineColor={0,0,0},
              fillColor={238,46,47},
              fillPattern=FillPattern.HorizontalCylinder),
            Ellipse(
              extent={{-58,58},{58,-58}},
              lineColor={0,0,0},
              fillPattern=FillPattern.Sphere,
              fillColor={238,46,47}),
            Polygon(
              points={{0,50},{0,-50},{54,0},{0,50}},
              lineColor={0,0,0},
              pattern=LinePattern.None,
              fillPattern=FillPattern.HorizontalCylinder,
              fillColor={255,255,255}),
            Ellipse(
              extent={{4,16},{36,-16}},
              lineColor={0,0,0},
              fillPattern=FillPattern.Sphere,
              fillColor={238,46,47})}),                              Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end pompes_pec;

    model pompes_peg
    extends Buildings.Fluid.Interfaces.PartialTwoPortInterface;
      Fluid.FixedResistances.CheckValve cheVal[3](
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal=720*1025/3600,
        dpValve_nominal=3000)
        annotation (Placement(transformation(extent={{40,-10},{60,10}})));
      Modelica.Blocks.Interfaces.IntegerInput tfp
        annotation (Placement(transformation(extent={{-140,80},{-100,120}})));
      Modelica.Blocks.Interfaces.BooleanInput gf1
        annotation (Placement(transformation(extent={{-140,-60},{-100,-20}})));
      Fluid.Movers.FlowControlled_m_flow fan[3](
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal=95.83,
        redeclare Fluid.Movers.Data.Pumps.KSB.KSB_PEC per,
        inputType=Buildings.Fluid.Types.InputType.Continuous,
        dp_nominal(displayUnit="Pa") = 1078731.5)
        annotation (Placement(transformation(extent={{-20,-10},{0,10}})));
      Modelica.Blocks.Interfaces.BooleanInput gf2
        annotation (Placement(transformation(extent={{-140,-120},{-100,-80}})));
      Controls_a.PEC_PEG.activation_peg activation_peg
        annotation (Placement(transformation(extent={{-60,80},{-40,100}})));
      Fluid.Sources.Boundary_pT bou(
        redeclare package Medium = Buildings.Media.Water,
        use_T_in=true,
        nPorts=4) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={-50,-30})));
      Fluid.Sensors.TemperatureTwoPort senTem(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=1350/3.6)
        annotation (Placement(transformation(extent={{-80,-10},{-60,10}})));
    equation
    for k in 1:3 loop
      connect(cheVal[k].port_b, port_b)
        annotation (Line(points={{60,0},{100,0}}, color={0,127,255}));
    end for;

      connect(fan.port_b, cheVal.port_a)
        annotation (Line(points={{0,0},{40,0}},  color={0,127,255}));

      connect(tfp, activation_peg.tfp) annotation (Line(points={{-120,100},{-90,
              100},{-90,97},{-62,97}}, color={255,127,0}));
      connect(gf1, activation_peg.gf1) annotation (Line(points={{-120,-40},{-92,
              -40},{-92,90},{-62,90}}, color={255,0,255}));
      connect(gf2, activation_peg.gf2) annotation (Line(points={{-120,-100},{
              -86,-100},{-86,83},{-62,83}}, color={255,0,255}));
      connect(activation_peg.y, fan.m_flow_in) annotation (Line(points={{-39,90},
              {-10,90},{-10,12}}, color={0,0,127}));
      connect(port_a, senTem.port_a)
        annotation (Line(points={{-100,0},{-80,0}}, color={0,127,255}));
      connect(senTem.port_b, bou.ports[1]) annotation (Line(points={{-60,0},{
              -53,0},{-53,-20}}, color={0,127,255}));
      connect(bou.ports[2:4], fan.port_a) annotation (Line(points={{-47,-20},{
              -47,0},{-20,0}}, color={0,127,255}));
      connect(senTem.T, bou.T_in) annotation (Line(points={{-70,11},{-70,20},{
              -130,20},{-130,-52},{-54,-52},{-54,-42}}, color={0,0,127}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
            Rectangle(
              extent={{-100,16},{100,-16}},
              lineColor={0,0,0},
              fillColor={0,127,255},
              fillPattern=FillPattern.HorizontalCylinder),
            Ellipse(
              extent={{-58,58},{58,-58}},
              lineColor={0,0,0},
              fillPattern=FillPattern.Sphere,
              fillColor={0,100,199}),
            Polygon(
              points={{0,50},{0,-50},{54,0},{0,50}},
              lineColor={0,0,0},
              pattern=LinePattern.None,
              fillPattern=FillPattern.HorizontalCylinder,
              fillColor={255,255,255}),
            Ellipse(
              extent={{4,16},{36,-16}},
              lineColor={0,0,0},
              fillPattern=FillPattern.Sphere,
              visible=energyDynamics <> Modelica.Fluid.Types.Dynamics.SteadyState,
              fillColor={0,100,199})}),                              Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end pompes_peg;

    package Tests
    extends Modelica.Icons.ExamplesPackage;
      model pompes_peg_test

        Fluid.FixedResistances.CheckValve cheVal[3](
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=720*1025/3600,
          dpValve_nominal=3000)
          annotation (Placement(transformation(extent={{40,-10},{60,10}})));
        Fluid.Movers.FlowControlled_m_flow fan[3](
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=95.83,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_PEC per,
          inputType=Buildings.Fluid.Types.InputType.Continuous,
          dp_nominal(displayUnit="Pa") = 1078731.5)
          annotation (Placement(transformation(extent={{-20,-10},{0,10}})));
        Controls_a.PEC_PEG.activation_peg activation_peg
          annotation (Placement(transformation(extent={{-60,80},{-40,100}})));
        Fluid.Sources.Boundary_pT bou(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=false,
          T=278.15,
          nPorts=4) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-50,-30})));
        Fluid.Sensors.TemperatureTwoPort senTem(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=1350/3.6)
          annotation (Placement(transformation(extent={{-80,-10},{-60,10}})));
        Modelica.Blocks.Sources.IntegerExpression integerExpression(y=2)
          annotation (Placement(transformation(extent={{-120,100},{-100,120}})));
        Modelica.Blocks.Sources.BooleanExpression booleanExpression(y=true)
          annotation (Placement(transformation(extent={{-120,70},{-100,90}})));
        Modelica.Blocks.Sources.BooleanPulse booleanPulse(
          width=100,
          period=100,
          startTime=600)
          annotation (Placement(transformation(extent={{-120,40},{-100,60}})));
      equation
        for k in 1:3 loop
            connect(cheVal[k].port_b, senTem.port_a) annotation (Line(points={{60,0},{74,0},
                {74,-48},{-92,-48},{-92,0},{-80,0}}, color={0,127,255}));
      end for;

        connect(fan.port_b, cheVal.port_a)
          annotation (Line(points={{0,0},{40,0}},  color={0,127,255}));

        connect(activation_peg.y, fan.m_flow_in) annotation (Line(points={{-39,90},
                {-10,90},{-10,12}}, color={0,0,127}));
        connect(senTem.port_b, bou.ports[1]) annotation (Line(points={{-60,0},{
                -53,0},{-53,-20}}, color={0,127,255}));
        connect(bou.ports[2:4], fan.port_a) annotation (Line(points={{-47,-20},{
                -47,0},{-20,0}}, color={0,127,255}));
        connect(booleanExpression.y, activation_peg.gf1) annotation (Line(points={{-99,
                80},{-82,80},{-82,90},{-62,90}}, color={255,0,255}));
        connect(integerExpression.y, activation_peg.tfp) annotation (Line(points={{-99,
                110},{-82,110},{-82,97},{-62,97}}, color={255,127,0}));

        connect(booleanPulse.y, activation_peg.gf2) annotation (Line(points={{
                -99,50},{-80,50},{-80,83},{-62,83}}, color={255,0,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Rectangle(
                extent={{-100,16},{100,-16}},
                lineColor={0,0,0},
                fillColor={0,127,255},
                fillPattern=FillPattern.HorizontalCylinder),
              Ellipse(
                extent={{-58,58},{58,-58}},
                lineColor={0,0,0},
                fillPattern=FillPattern.Sphere,
                fillColor={0,100,199}),
              Polygon(
                points={{0,50},{0,-50},{54,0},{0,50}},
                lineColor={0,0,0},
                pattern=LinePattern.None,
                fillPattern=FillPattern.HorizontalCylinder,
                fillColor={255,255,255}),
              Ellipse(
                extent={{4,16},{36,-16}},
                lineColor={0,0,0},
                fillPattern=FillPattern.Sphere,
                visible=energyDynamics <> Modelica.Fluid.Types.Dynamics.SteadyState,
                fillColor={0,100,199})}),                              Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end pompes_peg_test;
    end Tests;
  end PEC_PEG;

  package GF
    extends Modelica.Icons.VariantsPackage;
    model HPSHC
      extends Fluid.Interfaces.EightPort_parallel;
      Fluid.Chillers.ElectricReformulatedEIR electricReformulatedEIR
        annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
    equation
      connect(port_a2, electricReformulatedEIR.port_a1) annotation (Line(points=
             {{-100,30},{-60,30},{-60,6},{-10,6}}, color={0,127,255}));
      connect(port_a1, electricReformulatedEIR.port_a1) annotation (Line(points=
             {{-100,80},{-60,80},{-60,6},{-10,6}}, color={0,127,255}));
      connect(electricReformulatedEIR.port_b1, port_b1) annotation (Line(points=
             {{10,6},{60,6},{60,80},{100,80}}, color={0,127,255}));
      connect(electricReformulatedEIR.port_b1, port_b2) annotation (Line(points=
             {{10,6},{60,6},{60,30},{100,30}}, color={0,127,255}));
      connect(electricReformulatedEIR.port_a2, port_a4) annotation (Line(points=
             {{10,-6},{60,-6},{60,-80},{100,-80}}, color={0,127,255}));
      connect(electricReformulatedEIR.port_a2, port_a3) annotation (Line(points=
             {{10,-6},{60,-6},{60,-30},{100,-30}}, color={0,127,255}));
      connect(electricReformulatedEIR.port_b2, port_b4) annotation (Line(points=
             {{-10,-6},{-60,-6},{-60,-80},{-100,-80}}, color={0,127,255}));
      connect(electricReformulatedEIR.port_b2, port_b3) annotation (Line(points=
             {{-10,-6},{-60,-6},{-60,-30},{-100,-30}}, color={0,127,255}));
    end HPSHC;

    model Chiller

      extends Fluid.Interfaces.PartialFourPort
      annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
            coordinateSystem(preserveAspectRatio=false)));

      parameter Buildings.Fluid.Chillers.Data.ElectricReformulatedEIR.Generic per
        "Performance data"
        annotation (choicesAllMatching = true);
              // Chiller parameters
      parameter Modelica.SIunits.MassFlowRate m_flow_chi_evap_nominal= 489.8 * 1027 / 3600
        "Nominal mass flow rate at condenser water in the chillers";
      parameter Modelica.SIunits.MassFlowRate m_flow_chi_cond_nominal= 812.7 * 1000 / 3600
        "Nominal mass flow rate at evaporator water in the chillers";
      parameter Modelica.SIunits.PressureDifference dp1_chi_nominal = 0.38*100000
        "Nominal pressure";
      parameter Modelica.SIunits.PressureDifference dp2_chi_nominal = 0.31*100000
        "Nominal pressure";
        parameter Real V_flow_evap_set = 500/3.6 "Set point volume flow rate";
     parameter Real T_cons = 5 + 273.15 "Set point volume flow rate";

      Fluid.Chillers.ElectricReformulatedEIR electricReformulatedEIR(
        redeclare package Medium1 =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
        redeclare package Medium2 = Buildings.Media.Water,
        m1_flow_nominal=m_flow_chi_cond_nominal,
        m2_flow_nominal=m_flow_chi_evap_nominal,
        dp1_nominal=dp1_chi_nominal,
        dp2_nominal=dp2_chi_nominal,
        per=per)
        annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
      Modelica.Blocks.Interfaces.BooleanInput u
        annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
      Fluid.Sensors.TemperatureTwoPort TT211(redeclare package Medium =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water, m_flow_nominal=m_flow_chi_cond_nominal,
        T_start=293.15)
        annotation (Placement(transformation(extent={{30,50},{50,70}})));
      Fluid.Sensors.TemperatureTwoPort TT111(redeclare package Medium =
            Buildings.Media.Water,           m_flow_nominal=m_flow_chi_evap_nominal,
        T_start=278.15)
        annotation (Placement(transformation(extent={{-60,-70},{-80,-50}})));
      Modelica.Blocks.Interfaces.RealInput PEM_TT200 annotation (Placement(
            transformation(
            extent={{-20,-20},{20,20}},
            rotation=0,
            origin={-120,100})));
      Fluid.Sensors.MassFlowRate senMasFlo(redeclare package Medium =
            Buildings.Media.Water)         annotation (Placement(transformation(
            extent={{10,-10},{-10,10}},
            rotation=270,
            origin={20,-30})));
      Controls.Continuous.LimPID FT_PID(k=0.05,
                                             Ti=10)
        annotation (Placement(transformation(extent={{120,-10},{140,10}})));
      Fluid.Actuators.Valves.TwoWayLinear CV121(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal=m_flow_chi_evap_nominal,
        dpValve_nominal=5000,
        use_inputFilter=false)
        annotation (Placement(transformation(extent={{-30,-70},{-50,-50}})));
      Fluid.Actuators.Valves.TwoWayLinear CV211(
        redeclare package Medium =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
        m_flow_nominal=m_flow_chi_cond_nominal,
        CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
        dpValve_nominal=5000,
        use_inputFilter=false)
        annotation (Placement(transformation(extent={{70,50},{90,70}})));
      Controls_a.GF.PID_Valve_cond pID_Valve_evap
        annotation (Placement(transformation(extent={{40,100},{60,120}})));
      Modelica.Blocks.Sources.RealExpression T_set_evap(y=T_cons)
        annotation (Placement(transformation(extent={{-80,-30},{-60,-10}})));
      Modelica.Blocks.Sources.RealExpression FT121_set(y=V_flow_evap_set)
        annotation (Placement(transformation(extent={{40,0},{60,20}})));
      Fluid.Sensors.MassFlowRate senMasFlo1(redeclare package Medium =
            Buildings.Media.Water)         annotation (Placement(transformation(
            extent={{10,10},{-10,-10}},
            rotation=180,
            origin={-60,60})));
      Controls_a.Switch_0 switch1
        annotation (Placement(transformation(extent={{80,-10},{100,10}})));
    equation
      connect(u, electricReformulatedEIR.on) annotation (Line(points={{-120,0},
              {-80,0},{-80,3},{-12,3}},  color={255,0,255}));
      connect(electricReformulatedEIR.port_b1,TT211. port_a) annotation (Line(
            points={{10,6},{20,6},{20,60},{30,60}}, color={0,127,255}));
      connect(port_b2,TT111. port_b)
        annotation (Line(points={{-100,-60},{-80,-60}}, color={0,127,255}));
      connect(electricReformulatedEIR.port_a2, senMasFlo.port_b)
        annotation (Line(points={{10,-6},{20,-6},{20,-20}}, color={0,127,255}));

      connect(senMasFlo.m_flow, FT_PID.u_m) annotation (Line(points={{31,-30},{
              130,-30},{130,-12}},color={0,0,127}));
      connect(TT211.port_b, CV211.port_a)
        annotation (Line(points={{50,60},{70,60}}, color={0,127,255}));
      connect(CV211.port_b, port_b1)
        annotation (Line(points={{90,60},{100,60}}, color={0,127,255}));
      connect(PEM_TT200, pID_Valve_evap.PEM_TT200) annotation (Line(points={{-120,
              100},{-40,100},{-40,118},{38,118}},
                                             color={0,0,127}));
      connect(TT211.T, pID_Valve_evap.TT211) annotation (Line(points={{40,71},{
              40,88},{0,88},{0,110},{37.8,110}},
                                          color={0,0,127}));
      connect(pID_Valve_evap.y, CV211.y)
        annotation (Line(points={{61,110},{80,110},{80,72}}, color={0,0,127}));
      connect(T_set_evap.y, electricReformulatedEIR.TSet) annotation (Line(points={{-59,-20},
              {-40,-20},{-40,-3},{-12,-3}},          color={0,0,127}));
      connect(TT111.port_a, CV121.port_b)
        annotation (Line(points={{-60,-60},{-50,-60}}, color={0,127,255}));
      connect(CV121.port_a, electricReformulatedEIR.port_b2) annotation (Line(
            points={{-30,-60},{-20,-60},{-20,-6},{-10,-6}}, color={0,127,255}));
      connect(senMasFlo.port_a, port_a2) annotation (Line(points={{20,-40},{20,
              -60},{100,-60}}, color={0,127,255}));
      connect(FT_PID.y, CV121.y) annotation (Line(points={{141,0},{160,0},{160,
              -44},{-40,-44},{-40,-48}}, color={0,0,127}));
      connect(electricReformulatedEIR.port_a1, senMasFlo1.port_b) annotation (
          Line(points={{-10,6},{-40,6},{-40,60},{-50,60}}, color={0,127,255}));
      connect(senMasFlo1.port_a, port_a1)
        annotation (Line(points={{-70,60},{-100,60}}, color={0,127,255}));
      connect(senMasFlo1.m_flow, pID_Valve_evap.DPT) annotation (Line(points={{
              -60,71},{-60,94},{20,94},{20,102},{38,102}}, color={0,0,127}));
      connect(FT121_set.y, switch1.u1) annotation (Line(points={{61,10},{70,10},
              {70,8},{78,8}}, color={0,0,127}));
      connect(u, switch1.u2) annotation (Line(points={{-120,0},{-80,0},{-80,20},
              {30,20},{30,0},{78,0}}, color={255,0,255}));
      connect(switch1.y, FT_PID.u_s)
        annotation (Line(points={{101,0},{118,0}}, color={0,0,127}));
      annotation (Icon(graphics={
            Rectangle(
              extent={{0,-54},{100,-66}},
              lineColor={0,0,255},
              pattern=LinePattern.None,
              fillColor={0,0,255},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-100,-66},{0,-54}},
              lineColor={0,0,127},
              pattern=LinePattern.None,
              fillColor={0,0,127},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-100,54},{0,66}},
              lineColor={0,0,255},
              pattern=LinePattern.None,
              fillColor={255,170,85},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{0,54},{100,66}},
              lineColor={0,0,255},
              pattern=LinePattern.None,
              fillColor={238,46,47},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-20,40},{20,-20}},
              lineColor={28,108,200},
              lineThickness=1,
              fillColor={28,108,200},
              fillPattern=FillPattern.Solid),
            Polygon(
              points={{-40,-20},{40,-20},{0,-54},{-40,-20}},
              lineColor={28,108,200},
              lineThickness=1,
              fillColor={28,108,200},
              fillPattern=FillPattern.Solid)}));
    end Chiller;

    model Chiller_carnot_modele

      extends Fluid.Interfaces.PartialFourPort
      annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
            coordinateSystem(preserveAspectRatio=false)));

              // Chiller parameters
      parameter Modelica.SIunits.MassFlowRate m_flow_chi_evap_nominal= 800 * 1027 / 3600
        "Nominal mass flow rate at condenser water in the chillers";
      parameter Modelica.SIunits.MassFlowRate m_flow_chi_cond_nominal= 500 * 1000 / 3600
        "Nominal mass flow rate at evaporator water in the chillers";
      parameter Modelica.SIunits.PressureDifference dp1_chi_nominal = 0.38*1000
        "Nominal pressure";
      parameter Modelica.SIunits.PressureDifference dp2_chi_nominal = 0.31*1000
        "Nominal pressure";

      Modelica.Blocks.Interfaces.RealInput u1
        annotation (Placement(transformation(extent={{-140,-50},{-100,-10}})));
      Fluid.Sensors.TemperatureTwoPort TCin(redeclare package Medium =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water, m_flow_nominal=m_flow_chi_cond_nominal)
        annotation (Placement(transformation(extent={{-60,50},{-40,70}})));
      Fluid.Sensors.TemperatureTwoPort TCout(redeclare package Medium =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water, m_flow_nominal=m_flow_chi_cond_nominal)
        annotation (Placement(transformation(extent={{40,50},{60,70}})));
      Fluid.Sensors.TemperatureTwoPort TEin(redeclare package Medium =
            Buildings.Media.Water,          m_flow_nominal=m_flow_chi_evap_nominal)
        annotation (Placement(transformation(extent={{60,-70},{40,-50}})));
      Fluid.Sensors.TemperatureTwoPort TEout(redeclare package Medium =
            Buildings.Media.Water,           m_flow_nominal=m_flow_chi_evap_nominal)
        annotation (Placement(transformation(extent={{-40,-70},{-60,-50}})));
      Modelica.Blocks.Interfaces.RealOutput y annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=-90,
            origin={-30,-110})));
      Fluid.Chillers.Carnot_TEva chi(
        redeclare package Medium1 =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
        redeclare package Medium2 = Buildings.Media.Water,
        m1_flow_nominal=m_flow_chi_cond_nominal,
        m2_flow_nominal=m_flow_chi_evap_nominal,
        QEva_flow_nominal=-10000000,
        dTEva_nominal=-7,
        dTCon_nominal=10,
        use_eta_Carnot_nominal=false,
        COP_nominal=6,
        TCon_nominal=298.15,
        TEva_nominal=277.15,
        dp1_nominal=380,
        dp2_nominal=310,
        QEva_flow_min=-2000000)
        annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
    equation
      connect(port_a1, TCin.port_a)
        annotation (Line(points={{-100,60},{-60,60}}, color={0,127,255}));
      connect(TCout.port_b, port_b1)
        annotation (Line(points={{60,60},{100,60}}, color={0,127,255}));
      connect(port_a2,TEin. port_a)
        annotation (Line(points={{100,-60},{60,-60}}, color={0,127,255}));
      connect(port_b2,TEout. port_b)
        annotation (Line(points={{-100,-60},{-60,-60}}, color={0,127,255}));
      connect(TEout.T, y) annotation (Line(points={{-50,-49},{-50,-40},{-30,-40},
              {-30,-110}}, color={0,0,127}));
      connect(TCin.port_b, chi.port_a1) annotation (Line(points={{-40,60},{-26,60},{
              -26,6},{-10,6}}, color={0,127,255}));
      connect(chi.port_b1, TCout.port_a) annotation (Line(points={{10,6},{26,6},{26,
              60},{40,60}}, color={0,127,255}));
      connect(TEin.port_b, chi.port_a2) annotation (Line(points={{40,-60},{26,-60},{
              26,-6},{10,-6}}, color={0,127,255}));
      connect(chi.port_b2, TEout.port_a) annotation (Line(points={{-10,-6},{-24,-6},
              {-24,-60},{-40,-60}}, color={0,127,255}));
      connect(u1, chi.TSet) annotation (Line(points={{-120,-30},{-68,-30},{-68,9},{-12,
              9}}, color={0,0,127}));
      annotation (Icon(graphics={
            Rectangle(
              extent={{0,-54},{100,-66}},
              lineColor={0,0,255},
              pattern=LinePattern.None,
              fillColor={0,0,255},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-100,-66},{0,-54}},
              lineColor={0,0,127},
              pattern=LinePattern.None,
              fillColor={0,0,127},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-100,54},{0,66}},
              lineColor={0,0,255},
              pattern=LinePattern.None,
              fillColor={255,170,85},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{0,54},{100,66}},
              lineColor={0,0,255},
              pattern=LinePattern.None,
              fillColor={238,46,47},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-20,40},{20,-20}},
              lineColor={28,108,200},
              lineThickness=1,
              fillColor={28,108,200},
              fillPattern=FillPattern.Solid),
            Polygon(
              points={{-40,-20},{40,-20},{0,-54},{-40,-20}},
              lineColor={28,108,200},
              lineThickness=1,
              fillColor={28,108,200},
              fillPattern=FillPattern.Solid)}));
    end Chiller_carnot_modele;

    model Chiller_carnot

        extends Fluid.Interfaces.PartialFourPort
      annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
            coordinateSystem(preserveAspectRatio=false)));

      Fluid.Chillers.Carnot_TEva chi(
        redeclare package Medium1 = Media.Water,
        redeclare package Medium2 = Media.Water,
        m1_flow_nominal=490/3.6,
        m2_flow_nominal=810/3.6,
        QEva_flow_nominal=-4000000,
        dTEva_nominal=-7,
        dTCon_nominal=5,
        use_eta_Carnot_nominal=false,
        etaCarnot_nominal=5.71,
        COP_nominal=5.71,
        dp1_nominal=0.41,
        dp2_nominal=0.31,
        QEva_flow_min=-4240000)
        annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
      Modelica.Blocks.Sources.RealExpression realExpression(y=4 + 273.15)
        annotation (Placement(transformation(extent={{-100,20},{-80,40}})));
      Modelica.Fluid.Sensors.TemperatureTwoPort THIn(redeclare package Medium =
            Modelica.Media.Water.ConstantPropertyLiquidWater)
        annotation (Placement(transformation(extent={{-80,50},{-60,70}})));
      Modelica.Fluid.Sensors.TemperatureTwoPort TT211(redeclare package Medium =
            Modelica.Media.Water.ConstantPropertyLiquidWater)
        annotation (Placement(transformation(extent={{60,-4},{80,16}})));
      Modelica.Fluid.Sensors.TemperatureTwoPort TCout(redeclare package Medium =
            Modelica.Media.Water.ConstantPropertyLiquidWater)
        annotation (Placement(transformation(extent={{-60,-70},{-80,-50}})));
      Modelica.Fluid.Sensors.TemperatureTwoPort TCIn(redeclare package Medium =
            Modelica.Media.Water.ConstantPropertyLiquidWater)
        annotation (Placement(transformation(extent={{140,-30},{120,-10}})));
      Modelica.Fluid.Valves.ValveLinear CV121(
        redeclare package Medium =
            Modelica.Media.Water.ConstantPropertyLiquidWater,
        dp_nominal=10000,
        m_flow_nominal=500) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={40,-20})));

      Modelica.Fluid.Sensors.Pressure PT221(redeclare package Medium =
            Modelica.Media.Water.ConstantPropertyLiquidWater)
        annotation (Placement(transformation(extent={{-42,6},{-22,26}})));
      Modelica.Fluid.Sensors.Pressure PT211(redeclare package Medium =
            Modelica.Media.Water.ConstantPropertyLiquidWater)
        annotation (Placement(transformation(extent={{18,6},{38,26}})));
      Modelica.Fluid.Sensors.MassFlowRate FT121(redeclare package Medium =
            Modelica.Media.Water.ConstantPropertyLiquidWater) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={80,-20})));
      Controls.Continuous.LimPID conPID(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=5,
        Ti=10,
        initType=Modelica.Blocks.Types.InitPID.NoInit) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={40,-70})));
      Modelica.Blocks.Sources.RealExpression Q_set(y=500/3.6)
        annotation (Placement(transformation(extent={{0,-120},{20,-100}})));
      Modelica.Blocks.Math.Add PDT(k2=-1)
        annotation (Placement(transformation(extent={{80,260},{100,280}})));
      Controls.Continuous.LimPID conPID1(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=3,
        Ti=15,
        initType=Modelica.Blocks.Types.InitPID.NoInit) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={130,310})));
      Modelica.Blocks.Sources.RealExpression PDT_set(y=0.7)
        annotation (Placement(transformation(extent={{80,300},{100,320}})));
      Modelica.Blocks.Interfaces.RealInput TT200_in annotation (Placement(
            transformation(
            extent={{-20,-20},{20,20}},
            rotation=270,
            origin={10,140})));
      Controls.Continuous.LimPID conPID2(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=2.5,
        Ti=1.7,
        initType=Modelica.Blocks.Types.InitPID.NoInit) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={130,230})));
      Modelica.Blocks.Math.Add TDT(k2=-1)
        annotation (Placement(transformation(extent={{80,180},{100,200}})));
      Modelica.Blocks.Sources.RealExpression TDT_set(y=5 + 273.15)
        annotation (Placement(transformation(extent={{80,220},{100,240}})));
      Controls.Continuous.LimPID conPID3(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=3,
        Ti=1,
        initType=Modelica.Blocks.Types.InitPID.NoInit) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={130,130})));
      Modelica.Blocks.Sources.RealExpression TT_set(y=30 + 273.15)
        annotation (Placement(transformation(extent={{80,120},{100,140}})));
      Modelica.Blocks.Math.MinMax minMax(nu=3)
        annotation (Placement(transformation(extent={{180,220},{200,240}})));
      Modelica.Fluid.Valves.ValveLinear CV211(
        redeclare package Medium =
            Modelica.Media.Water.ConstantPropertyLiquidWater,
        dp_nominal=10000,
        m_flow_nominal=800) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={110,6})));

      Modelica.Blocks.Interfaces.BooleanInput on(start=false)
        annotation (Placement(transformation(extent={{-160,-150},{-120,-110}})));
      Modelica.StateGraph.InitialStep GF_stopped
        annotation (Placement(transformation(extent={{-320,-40},{-300,-20}})));
      Modelica.StateGraph.TransitionWithSignal GF_start_request
        annotation (Placement(transformation(extent={{-280,-40},{-260,-20}})));
      inner Modelica.StateGraph.StateGraphRoot stateGraphRoot
        annotation (Placement(transformation(extent={{-340,20},{-320,40}})));
      Modelica.StateGraph.StepWithSignal GF_starting
        annotation (Placement(transformation(extent={{-240,-40},{-220,-20}})));
      Modelica.StateGraph.TransitionWithSignal GF_stop_request
        annotation (Placement(transformation(extent={{-200,-40},{-180,-20}})));
      Modelica.Blocks.Logical.Not not1
        annotation (Placement(transformation(extent={{-140,-70},{-160,-50}})));
      Modelica.Fluid.Valves.ValveDiscrete valveDiscrete(
        redeclare package Medium =
            Modelica.Media.Water.ConstantPropertyLiquidWater,
        dp_nominal=10000,
        m_flow_nominal=500,
        opening_min=0.000000000001)
        annotation (Placement(transformation(extent={{-20,-50},{-40,-70}})));
    equation
      connect(realExpression.y, chi.TSet) annotation (Line(points={{-79,30},{-16,30},
              {-16,9},{-12,9}}, color={0,0,127}));
      connect(port_a1, THIn.port_a)
        annotation (Line(points={{-100,60},{-80,60}}, color={0,127,255}));
      connect(THIn.port_b, chi.port_a1) annotation (Line(points={{-60,60},{-56,60},{
              -56,6},{-10,6}}, color={0,127,255}));
      connect(port_b2, TCout.port_b)
        annotation (Line(points={{-100,-60},{-80,-60}}, color={0,127,255}));
      connect(TCIn.port_a, port_a2) annotation (Line(points={{140,-20},{140,-60},{100,
              -60}}, color={0,127,255}));
      connect(chi.port_b1, TT211.port_a)
        annotation (Line(points={{10,6},{60,6}}, color={0,127,255}));
      connect(chi.port_a2, CV121.port_b) annotation (Line(points={{10,-6},{20,-6},{20,
              -20},{30,-20}}, color={0,127,255}));
      connect(THIn.port_b, PT221.port) annotation (Line(points={{-60,60},{-56,60},{-56,
              6},{-32,6}}, color={0,127,255}));
      connect(chi.port_b1, PT211.port)
        annotation (Line(points={{10,6},{28,6}}, color={0,127,255}));
      connect(CV121.port_a, FT121.port_b)
        annotation (Line(points={{50,-20},{70,-20}}, color={0,127,255}));
      connect(FT121.port_a, TCIn.port_b)
        annotation (Line(points={{90,-20},{120,-20}}, color={0,127,255}));
      connect(FT121.m_flow, conPID.u_m)
        annotation (Line(points={{80,-31},{80,-70},{52,-70}}, color={0,0,127}));
      connect(Q_set.y, conPID.u_s)
        annotation (Line(points={{21,-110},{40,-110},{40,-82}}, color={0,0,127}));
      connect(conPID.y, CV121.opening)
        annotation (Line(points={{40,-59},{40,-28}}, color={0,0,127}));
      connect(PT211.p, PDT.u2) annotation (Line(points={{39,16},{40,16},{40,264},{78,
              264}}, color={0,0,127}));
      connect(PT221.p, PDT.u1) annotation (Line(points={{-21,16},{-12,16},{-12,276},
              {78,276}}, color={0,0,127}));
      connect(PDT.y, conPID1.u_m)
        annotation (Line(points={{101,270},{130,270},{130,298}}, color={0,0,127}));
      connect(PDT_set.y, conPID1.u_s)
        annotation (Line(points={{101,310},{118,310}}, color={0,0,127}));
      connect(TDT_set.y, conPID2.u_s)
        annotation (Line(points={{101,230},{118,230}}, color={0,0,127}));
      connect(TT211.T, TDT.u2)
        annotation (Line(points={{70,17},{70,184},{78,184}}, color={0,0,127}));
      connect(TDT.y, conPID2.u_m)
        annotation (Line(points={{101,190},{130,190},{130,218}}, color={0,0,127}));
      connect(TT200_in, TDT.u1) annotation (Line(points={{10,140},{10,100},{52,100},
              {52,196},{78,196}}, color={0,0,127}));
      connect(TT_set.y, conPID3.u_s)
        annotation (Line(points={{101,130},{118,130}}, color={0,0,127}));
      connect(TT211.T, conPID3.u_m) annotation (Line(points={{70,17},{70,100},{130,100},
              {130,118}}, color={0,0,127}));
      connect(conPID2.y, minMax.u[1]) annotation (Line(points={{141,230},{160,
              230},{160,234.667},{180,234.667}},
                                           color={0,0,127}));
      connect(conPID3.y, minMax.u[2]) annotation (Line(points={{141,130},{162,130},{
              162,230},{180,230}}, color={0,0,127}));
      connect(conPID1.y, minMax.u[3]) annotation (Line(points={{141,310},{160,
              310},{160,225.333},{180,225.333}},
                                           color={0,0,127}));
      connect(TT211.port_b, CV211.port_a)
        annotation (Line(points={{80,6},{100,6}}, color={0,127,255}));
      connect(CV211.port_b, port_b1) annotation (Line(points={{120,6},{140,6},{140,60},
              {100,60}}, color={0,127,255}));
      connect(minMax.yMax, CV211.opening) annotation (Line(points={{201,236},{220,236},
              {220,30},{110,30},{110,14}}, color={0,0,127}));
      connect(on, GF_start_request.condition) annotation (Line(points={{-140,-130},{
              -110,-130},{-110,-100},{-270,-100},{-270,-42}}, color={255,0,255}));
      connect(GF_stopped.outPort[1], GF_start_request.inPort)
        annotation (Line(points={{-299.5,-30},{-274,-30}}, color={0,0,0}));
      connect(GF_start_request.outPort, GF_starting.inPort[1])
        annotation (Line(points={{-268.5,-30},{-241,-30}}, color={0,0,0}));
      connect(GF_starting.outPort[1], GF_stop_request.inPort)
        annotation (Line(points={{-219.5,-30},{-194,-30}}, color={0,0,0}));
      connect(GF_stop_request.outPort, GF_stopped.inPort[1]) annotation (Line(
            points={{-188.5,-30},{-170,-30},{-170,0},{-340,0},{-340,-30},{-321,-30}},
            color={0,0,0}));
      connect(not1.u, GF_start_request.condition) annotation (Line(points={{-138,-60},
              {-116,-60},{-116,-130},{-110,-130},{-110,-100},{-270,-100},{-270,-42}},
            color={255,0,255}));
      connect(not1.y, GF_stop_request.condition) annotation (Line(points={{-161,-60},
              {-190,-60},{-190,-42}}, color={255,0,255}));
      connect(TCout.port_a, valveDiscrete.port_b)
        annotation (Line(points={{-60,-60},{-40,-60}}, color={0,127,255}));
      connect(valveDiscrete.port_a, chi.port_b2) annotation (Line(points={{-20,
              -60},{-14,-60},{-14,-6},{-10,-6}}, color={0,127,255}));
      connect(GF_starting.active, valveDiscrete.open) annotation (Line(points={
              {-230,-41},{-230,-80},{-30,-80},{-30,-68}}, color={255,0,255}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-360,
                -160},{240,340}}),
                             graphics={
            Rectangle(
              extent={{0,-54},{100,-66}},
              lineColor={0,0,255},
              pattern=LinePattern.None,
              fillColor={0,0,255},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-100,-66},{0,-54}},
              lineColor={0,0,127},
              pattern=LinePattern.None,
              fillColor={0,0,127},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-100,54},{0,66}},
              lineColor={0,0,255},
              pattern=LinePattern.None,
              fillColor={255,170,85},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{0,54},{100,66}},
              lineColor={0,0,255},
              pattern=LinePattern.None,
              fillColor={238,46,47},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-20,40},{20,-20}},
              lineColor={28,108,200},
              lineThickness=1,
              fillColor={28,108,200},
              fillPattern=FillPattern.Solid),
            Polygon(
              points={{-40,-20},{40,-20},{0,-54},{-40,-20}},
              lineColor={28,108,200},
              lineThickness=1,
              fillColor={28,108,200},
              fillPattern=FillPattern.Solid)}),                      Diagram(
            coordinateSystem(preserveAspectRatio=false, extent={{-360,-160},{
                240,340}})));
    end Chiller_carnot;

    package Tests
      extends Modelica.Icons.ExamplesPackage;

          model test_gf0

          Real temperatures[6](final unit="K", displayUnit = "degC");
            Chiller chiller(redeclare package Medium1 =
                  Buildings.Applications.DHC_Thassalia.Media.Sea_Water,                                                                      redeclare
            package Medium2 =     Buildings.Media.Water,
              per=Buildings.Fluid.Chillers.Data.ElectricReformulatedEIR.ReformEIRChiller_McQuay_WSC_471kW_5_89COP_Vanes())
              annotation (Placement(transformation(extent={{-20,0},{0,20}})));
            Fluid.Sources.Boundary_pT bou2(
              redeclare package Medium = Media.Sea_Water,
              p=100000,
              use_T_in=false,
              nPorts=1)
              annotation (Placement(transformation(extent={{-140,80},{-120,100}})));
            Fluid.Sensors.TemperatureTwoPort TT200(redeclare package Medium =
                  Buildings.Media.Water, m_flow_nominal=190/3.6)
              annotation (Placement(transformation(extent={{-40,60},{-60,80}})));
            Fluid.Sensors.TemperatureTwoPort TT201(redeclare package Medium =
                  Buildings.Media.Water, m_flow_nominal=190/3.6)
              annotation (Placement(transformation(extent={{40,60},{20,80}})));
            Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
              tableOnFile=true,
              tableName="tab1",
              fileName=ModelicaServices.ExternalReferences.loadResource("modelica://Buildings/Data/gf.txt"),
              columns={2,3,4,5,6,7,8,9,10,11})
              annotation (Placement(transformation(extent={{-100,-100},{-80,-80}})));

            Fluid.Sources.MassFlowSource_T boundary1(
              redeclare package Medium = Buildings.Media.Water,
              use_m_flow_in=true,
              m_flow=180/3.6,
              use_T_in=true,
              nPorts=1)
              annotation (Placement(transformation(extent={{60,-40},{40,-20}})));
            Fluid.Sources.Boundary_pT bou1(redeclare package Medium =
                  Buildings.Media.Water, nPorts=1)
              annotation (Placement(transformation(extent={{-100,-60},{-80,-40}})));
            Modelica.Blocks.Sources.RealExpression realExpression(y=500)
              annotation (Placement(transformation(extent={{-100,-30},{-80,-10}})));
            Modelica.Blocks.Sources.BooleanExpression booleanExpression(y=true)
              annotation (Placement(transformation(extent={{-100,0},{-80,20}})));
            Fluid.Sources.MassFlowSource_T boundary2(
              redeclare package Medium = Buildings.Media.Water,
              use_m_flow_in=true,
              m_flow=180/3.6,
              use_T_in=true,
              nPorts=1)
              annotation (Placement(transformation(extent={{-100,60},{-80,80}})));
          equation

                for j in 1:6 loop
                temperatures[j]=combiTimeTable.y[j];
              end for;
            connect(chiller.port_a1, TT200.port_a) annotation (Line(points={{-20,16},{-30,
                    16},{-30,70},{-40,70}}, color={0,127,255}));
            connect(chiller.port_b1, TT201.port_b) annotation (Line(points={{0,16},{10,16},
                    {10,70},{20,70}}, color={0,127,255}));
            connect(TT201.port_a, bou2.ports[1]) annotation (Line(points={{40,70},{60,70},
                    {60,100},{-114,100},{-114,90},{-120,90}}, color={0,127,255}));
            connect(bou1.ports[1], chiller.port_b2) annotation (Line(points={{-80,-50},{-52,
                    -50},{-52,4},{-20,4}}, color={0,127,255}));
            connect(chiller.port_a2, boundary1.ports[1]) annotation (Line(points={{0,4},{20,
                    4},{20,-30},{40,-30}}, color={0,127,255}));
            connect(TT200.T, chiller.PEM_TT200) annotation (Line(points={{-50,81},{-50,92},
                    {-36,92},{-36,20},{-22,20}}, color={0,0,127}));
            connect(realExpression.y, chiller.FT121_cons) annotation (Line(points={{-79,-20},
                    {-50,-20},{-50,0},{-22,0}}, color={0,0,127}));
            connect(combiTimeTable.y[8], boundary1.m_flow_in) annotation (Line(points={{-79,
                    -90},{80,-90},{80,-22},{62,-22}}, color={0,0,127}));
            connect(combiTimeTable.y[2], boundary1.T_in) annotation (Line(points={{-79,-90},
                    {80,-90},{80,-26},{62,-26}}, color={0,0,127}));
            connect(booleanExpression.y, chiller.u) annotation (Line(points={{-79,10},{-52,
                    10},{-52,10},{-22,10}}, color={255,0,255}));
            connect(combiTimeTable.y[5], boundary2.T_in) annotation (Line(points={{-79,-90},
                    {-60,-90},{-60,-70},{-114,-70},{-114,74},{-102,74}}, color={0,0,127}));
            connect(combiTimeTable.y[10], boundary2.m_flow_in) annotation (Line(points={{-79,
                    -90},{-60,-90},{-60,-70},{-114,-70},{-114,78},{-102,78}}, color={0,0,127}));
            connect(boundary2.ports[1], TT200.port_b)
              annotation (Line(points={{-80,70},{-60,70}}, color={0,127,255}));
            annotation (
              Icon(coordinateSystem(preserveAspectRatio=false)),
              Diagram(coordinateSystem(preserveAspectRatio=false)),
              experiment(
                StopTime=950400,
                Interval=600,
                __Dymola_Algorithm="Dassl"));
          end test_gf0;

    model gf_pump
          Real temperatures[6](final unit="K", displayUnit = "degC");
            Chiller chiller(redeclare package Medium1 =
                  Buildings.Applications.DHC_Thassalia.Media.Sea_Water,                                                                      redeclare
            package Medium2 =     Buildings.Media.Water,
          per=Fluid.Chillers.Data.ElectricReformulatedEIR.ReformEIRChiller_Carrier_19EX_5208kW_6_88COP_Vanes())
              annotation (Placement(transformation(extent={{-20,0},{0,20}})));
            Fluid.Sources.Boundary_pT bou2(
              redeclare package Medium = Media.Sea_Water,
              p=100000,
              use_T_in=true,
              nPorts=2)
              annotation (Placement(transformation(extent={{-140,80},{-120,100}})));
            Fluid.Sensors.TemperatureTwoPort TT200(redeclare package Medium =
                  Buildings.Media.Water, m_flow_nominal=190/3.6)
              annotation (Placement(transformation(extent={{-40,60},{-60,80}})));
            Fluid.Sensors.TemperatureTwoPort TT201(redeclare package Medium =
                  Buildings.Media.Water, m_flow_nominal=190/3.6)
              annotation (Placement(transformation(extent={{40,60},{20,80}})));
            Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
              tableOnFile=true,
              tableName="tab1",
              fileName=ModelicaServices.ExternalReferences.loadResource("modelica://Buildings/Data/gf.txt"),
              columns={2,3,4,5,6,7,8,9,10,11})
              annotation (Placement(transformation(extent={{-100,-100},{-80,-80}})));

            Fluid.Sources.MassFlowSource_T boundary1(
              redeclare package Medium = Buildings.Media.Water,
              use_m_flow_in=true,
              m_flow=180/3.6,
              use_T_in=true,
              nPorts=1)
              annotation (Placement(transformation(extent={{60,-40},{40,-20}})));
            Fluid.Sources.Boundary_pT bou1(redeclare package Medium =
                  Buildings.Media.Water, nPorts=1)
              annotation (Placement(transformation(extent={{-100,-60},{-80,-40}})));
            Modelica.Blocks.Sources.RealExpression realExpression(y=500)
              annotation (Placement(transformation(extent={{-100,-30},{-80,-10}})));
            Modelica.Blocks.Sources.BooleanExpression booleanExpression(y=true)
              annotation (Placement(transformation(extent={{-100,0},{-80,20}})));
            Fluid.Movers.FlowControlled_dp fan(
              redeclare package Medium = Buildings.Media.Water,
              m_flow_nominal=720/3.6,
        redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
              inputType=Buildings.Fluid.Types.InputType.Constant,
              addPowerToMedium=false,
              constantHead(displayUnit="bar") = 187000)
              annotation (Placement(transformation(extent={{-100,60},{-80,80}})));
    equation

    for j in 1:6 loop
    temperatures[j]=combiTimeTable.y[j];
    end for;connect(chiller.port_a1, TT200.port_a) annotation (Line(points={{-20,16},{-30,
                    16},{-30,70},{-40,70}}, color={0,127,255}));
            connect(chiller.port_b1, TT201.port_b) annotation (Line(points={{0,16},{10,16},
                    {10,70},{20,70}}, color={0,127,255}));
            connect(TT201.port_a, bou2.ports[1]) annotation (Line(points={{40,70},{
                    60,70},{60,100},{-114,100},{-114,92},{-120,92}},
                                                              color={0,127,255}));
            connect(bou1.ports[1], chiller.port_b2) annotation (Line(points={{-80,-50},{-52,
                    -50},{-52,4},{-20,4}}, color={0,127,255}));
            connect(chiller.port_a2, boundary1.ports[1]) annotation (Line(points={{0,4},{20,
                    4},{20,-30},{40,-30}}, color={0,127,255}));
            connect(TT200.T, chiller.PEM_TT200) annotation (Line(points={{-50,81},{-50,
              92},{-34,92},{-34,20},{-22,20}},   color={0,0,127}));
            connect(realExpression.y, chiller.FT121_cons) annotation (Line(points={{-79,-20},
                    {-40,-20},{-40,0},{-22,0}}, color={0,0,127}));
            connect(combiTimeTable.y[8], boundary1.m_flow_in) annotation (Line(points={{-79,
                    -90},{80,-90},{80,-22},{62,-22}}, color={0,0,127}));
            connect(combiTimeTable.y[2], boundary1.T_in) annotation (Line(points={{-79,-90},
                    {80,-90},{80,-26},{62,-26}}, color={0,0,127}));
            connect(booleanExpression.y, chiller.u) annotation (Line(points={{-79,10},{-52,
                    10},{-52,10},{-22,10}}, color={255,0,255}));
            connect(combiTimeTable.y[5], bou2.T_in) annotation (Line(points={{-79,
                    -90},{-60,-90},{-60,-70},{-160,-70},{-160,94},{-142,94}}, color=
                   {0,0,127}));
            connect(TT200.port_b, fan.port_b)
              annotation (Line(points={{-60,70},{-80,70}}, color={0,127,255}));
            connect(bou2.ports[2], fan.port_a) annotation (Line(points={{-120,88},{
                    -112,88},{-112,70},{-100,70}}, color={0,127,255}));
            annotation (
              Icon(coordinateSystem(preserveAspectRatio=false)),
              Diagram(coordinateSystem(preserveAspectRatio=false)),
              experiment(
                StopTime=950400,
                Interval=600,
                __Dymola_Algorithm="Dassl"));
    end gf_pump;

      model basic_p
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end basic_p;

      model basic_a
        Chiller chiller
          annotation (Placement(transformation(extent={{-20,0},{0,20}})));
        Fluid.Sources.MassFlowSource_T boundary(nPorts=1)
          annotation (Placement(transformation(extent={{-100,40},{-80,60}})));
        Fluid.Sources.MassFlowSource_T boundary1(nPorts=1)
          annotation (Placement(transformation(extent={{100,-40},{80,-20}})));
        Fluid.Sources.Boundary_pT bou(nPorts=1)
          annotation (Placement(transformation(extent={{-100,-40},{-80,-20}})));
        Fluid.Sources.Boundary_pT bou1(nPorts=1)
          annotation (Placement(transformation(extent={{100,40},{80,60}})));
      equation
        connect(boundary.ports[1], chiller.port_a1) annotation (Line(points={{
                -80,50},{-50,50},{-50,16},{-20,16}}, color={0,127,255}));
        connect(chiller.port_b1, bou1.ports[1]) annotation (Line(points={{0,16},
                {42,16},{42,50},{80,50}}, color={0,127,255}));
        connect(chiller.port_a2, boundary1.ports[1]) annotation (Line(points={{
                0,4},{40,4},{40,-30},{80,-30}}, color={0,127,255}));
        connect(bou.ports[1], chiller.port_b2) annotation (Line(points={{-80,
                -30},{-50,-30},{-50,4},{-20,4}}, color={0,127,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end basic_a;

      model basic_c
        Fluid.Chillers.ElectricReformulatedEIR electricReformulatedEIR(
          redeclare package Medium1 = Media.Sea_Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=800/3.6,
          m2_flow_nominal=500/3.6,
          dp1_nominal=40000,
          dp2_nominal=40000,
          per=Fluid.Chillers.Data.ElectricReformulatedEIR.ReformEIRChiller_McQuay_PEH_1635kW_7_47COP_Vanes())
          annotation (Placement(transformation(extent={{-20,0},{0,20}})));
              Fluid.Sources.Boundary_pT bou1(redeclare package Medium =
              Buildings.Media.Water, nPorts=1)
                annotation (Placement(transformation(extent={{-100,-40},{-80,
                  -20}})));
              Fluid.Sources.MassFlowSource_T boundary1(
          redeclare package Medium = Buildings.Media.Water,
          use_m_flow_in=false,
          m_flow=500/3.6,
          use_T_in=false,
          T=283.15,
          nPorts=1)
                annotation (Placement(transformation(extent={{60,-40},{40,-20}})));
              Fluid.Sources.Boundary_pT bou2(redeclare package Medium =
              Buildings.Media.Water, nPorts=1)
                annotation (Placement(transformation(extent={{60,40},{40,60}})));
              Fluid.Sources.MassFlowSource_T boundary2(
          redeclare package Medium = Buildings.Media.Water,
          use_m_flow_in=false,
          m_flow=800/3.6,
          use_T_in=false,
          T=283.15,
          nPorts=1)
                annotation (Placement(transformation(extent={{-100,40},{-80,60}})));
        Modelica.Blocks.Sources.RealExpression realExpression(y=4 + 273.15)
          annotation (Placement(transformation(extent={{-100,-10},{-80,10}})));
        Modelica.Blocks.Sources.BooleanExpression booleanExpression(y=true)
          annotation (Placement(transformation(extent={{-100,10},{-80,30}})));
      equation
        connect(electricReformulatedEIR.port_a2, boundary1.ports[1])
          annotation (Line(points={{0,4},{20,4},{20,-30},{40,-30}}, color={0,
                127,255}));
        connect(electricReformulatedEIR.port_b2, bou1.ports[1]) annotation (
            Line(points={{-20,4},{-50,4},{-50,-30},{-80,-30}}, color={0,127,255}));
        connect(boundary2.ports[1], electricReformulatedEIR.port_a1)
          annotation (Line(points={{-80,50},{-50,50},{-50,16},{-20,16}}, color=
                {0,127,255}));
        connect(electricReformulatedEIR.port_b1, bou2.ports[1]) annotation (
            Line(points={{0,16},{20,16},{20,50},{40,50}}, color={0,127,255}));
        connect(booleanExpression.y, electricReformulatedEIR.on) annotation (
            Line(points={{-79,20},{-51.5,20},{-51.5,13},{-22,13}}, color={255,0,
                255}));
        connect(realExpression.y, electricReformulatedEIR.TSet) annotation (
            Line(points={{-79,0},{-52,0},{-52,7},{-22,7}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end basic_c;

      model gf_pid
        Chiller chiller
          annotation (Placement(transformation(extent={{-20,0},{0,20}})));
        Fluid.Sources.Boundary_pT bou(use_T_in=true, nPorts=2)
          annotation (Placement(transformation(extent={{-120,-60},{-100,-40}})));
        Fluid.Movers.FlowControlled_dp fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=500/3.6,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_PEG per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          dp_nominal(displayUnit="bar") = 500000,
          constantHead(displayUnit="bar") = 500000)
          annotation (Placement(transformation(extent={{-20,-40},{0,-20}})));
        Fluid.Sources.Boundary_pT bou1(use_T_in=true, nPorts=2)
          annotation (Placement(transformation(extent={{-100,60},{-80,80}})));
        Fluid.Movers.FlowControlled_dp fan1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=500/3.6,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_PEG per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          dp_nominal(displayUnit="bar") = 500000,
          constantHead(displayUnit="bar") = 500000)
          annotation (Placement(transformation(extent={{-20,60},{0,80}})));
        Modelica.Blocks.Sources.RealExpression T_set_evap(y=4 + 273.15)
          annotation (Placement(transformation(extent={{-80,10},{-60,30}})));
        Modelica.Blocks.Sources.BooleanExpression booleanExpression(y=true)
          annotation (Placement(transformation(extent={{-120,0},{-100,20}})));
      equation
        connect(bou.ports[1], fan.port_a) annotation (Line(points={{-100,-48},{
                -48,-48},{-48,-30},{-20,-30}}, color={0,127,255}));
        connect(fan.port_b, chiller.port_a2) annotation (Line(points={{0,-30},{
                92,-30},{92,4},{0,4}}, color={0,127,255}));
        connect(chiller.port_b2, bou.ports[2]) annotation (Line(points={{-20,4},
                {-70,4},{-70,-52},{-100,-52}},color={0,127,255}));
        connect(bou1.ports[1], fan1.port_a) annotation (Line(points={{-80,72},{
                -50,72},{-50,70},{-20,70}}, color={0,127,255}));
        connect(fan1.port_b, chiller.port_a1) annotation (Line(points={{0,70},{
                20,70},{20,40},{-40,40},{-40,16},{-20,16}}, color={0,127,255}));
        connect(chiller.port_b1, bou1.ports[2]) annotation (Line(points={{0,16},
                {12,16},{12,32},{-76,32},{-76,68},{-80,68}}, color={0,127,255}));
        connect(T_set_evap.y, chiller.PEM_TT200)
          annotation (Line(points={{-59,20},{-22,20}}, color={0,0,127}));
        connect(booleanExpression.y, chiller.u)
          annotation (Line(points={{-99,10},{-22,10}}, color={255,0,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end gf_pid;

      model chiller_base
        import Fluid;



        Fluid.Sources.Boundary_pT bou1(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          use_T_in=false,                             nPorts=1)
          annotation (Placement(transformation(extent={{120,80},{100,100}})));
        Fluid.Sources.Boundary_pT bou(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=false,
          nPorts=1)
          annotation (Placement(transformation(extent={{-100,-60},{-80,-40}})));
        Modelica.Blocks.Sources.BooleanExpression booleanExpression(y=true)
          annotation (Placement(transformation(extent={{-120,20},{-100,40}})));
        Modelica.Blocks.Sources.RealExpression T_set_evap(y=4 + 273.15)
          annotation (Placement(transformation(extent={{-120,-20},{-100,0}})));
        Fluid.Sensors.TemperatureTwoPort TT0(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=50/3.6)
          annotation (Placement(transformation(extent={{70,-60},{50,-40}})));
        Fluid.Sensors.TemperatureTwoPort TT1(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=500/3.6)
          annotation (Placement(transformation(extent={{-20,-60},{-40,-40}})));
        Fluid.Sensors.TemperatureTwoPort TT2(redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water, m_flow_nominal=850/3.6)
          annotation (Placement(transformation(extent={{-40,80},{-20,100}})));
        Fluid.Sensors.TemperatureTwoPort TT3(redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water, m_flow_nominal=850/3.6)
          annotation (Placement(transformation(extent={{60,80},{80,100}})));
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource("modelica://Buildings/Data/test.txt"),
          columns={2,3,4,5,6,7})
          annotation (Placement(transformation(extent={{-140,120},{-120,140}})));

        Fluid.Chillers.ElectricReformulatedEIR electricReformulatedEIR(
          redeclare package Medium1 =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=850/3.6,
          m2_flow_nominal=500/3.6,
          dp1_nominal=40000,
          dp2_nominal=40000,
          per=Buildings.Fluid.Chillers.Data.ElectricReformulatedEIR.ReformEIRChiller_York_YT_897kW_6_27COP_VSD())
          annotation (Placement(transformation(extent={{0,0},{20,20}})));
        Fluid.Sources.MassFlowSource_T boundary(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          use_m_flow_in=true,
          use_T_in=true,
          nPorts=1)
          annotation (Placement(transformation(extent={{-80,80},{-60,100}})));
        Fluid.Sources.MassFlowSource_T boundary1(
          redeclare package Medium = Buildings.Media.Water,
          use_m_flow_in=true,
          use_T_in=true,
          nPorts=1)
          annotation (Placement(transformation(extent={{120,-60},{100,-40}})));
        Modelica.Blocks.Interfaces.RealOutput temperature[2](final unit="K",
            displayUnit="degC")
          annotation (Placement(transformation(extent={{-80,140},{-60,160}})));
      equation
        connect(TT3.port_b, bou1.ports[1]) annotation (Line(points={{80,90},{100,90}},
                                color={0,127,255}));
        connect(TT0.port_b, electricReformulatedEIR.port_a2) annotation (Line(points={
                {50,-50},{40,-50},{40,4},{20,4}}, color={0,127,255}));
        connect(TT2.port_b, electricReformulatedEIR.port_a1) annotation (Line(points={
                {-20,90},{-14,90},{-14,16},{0,16}}, color={0,127,255}));
        connect(electricReformulatedEIR.port_b1, TT3.port_a) annotation (Line(points={
                {20,16},{40,16},{40,90},{60,90}}, color={0,127,255}));
        connect(electricReformulatedEIR.port_b2, TT1.port_a) annotation (Line(points={
                {0,4},{-10,4},{-10,-50},{-20,-50}}, color={0,127,255}));
        connect(T_set_evap.y, electricReformulatedEIR.TSet) annotation (Line(points={{
                -99,-10},{-50,-10},{-50,7},{-2,7}}, color={0,0,127}));
        connect(booleanExpression.y, electricReformulatedEIR.on) annotation (Line(
              points={{-99,30},{-50,30},{-50,13},{-2,13}}, color={255,0,255}));
        connect(bou.ports[1], TT1.port_b)
          annotation (Line(points={{-80,-50},{-40,-50}}, color={0,127,255}));
        connect(TT0.port_a, boundary1.ports[1])
          annotation (Line(points={{70,-50},{100,-50}}, color={0,127,255}));
        connect(boundary.ports[1], TT2.port_a)
          annotation (Line(points={{-60,90},{-40,90}}, color={0,127,255}));
        connect(combiTimeTable.y[3], boundary.T_in) annotation (Line(points={{-119,
                130},{-112,130},{-112,94},{-82,94}},
                                                 color={0,0,127}));
        connect(combiTimeTable.y[1], boundary1.T_in) annotation (Line(points={{-119,130},
                {140,130},{140,-46},{122,-46}}, color={0,0,127}));
        connect(combiTimeTable.y[2], boundary1.m_flow_in) annotation (Line(points={{-119,
                130},{140,130},{140,-42},{122,-42}}, color={0,0,127}));
        connect(combiTimeTable.y[5], temperature[1]) annotation (Line(points={{
                -119,130},{-100,130},{-100,145},{-70,145}}, color={0,0,127}));
        connect(combiTimeTable.y[6], temperature[2]) annotation (Line(points={{
                -119,130},{-100,130},{-100,155},{-70,155}}, color={0,0,127}));
        connect(combiTimeTable.y[4], boundary.m_flow_in) annotation (Line(
              points={{-119,130},{-112,130},{-112,98},{-82,98}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=1112400,
            Interval=3600,
            __Dymola_Algorithm="Dassl"));
      end chiller_base;

      model chiller_base_2
        import Fluid;
        Fluid.Sources.Boundary_pT bou1(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=false,
          T=298.15,                                   nPorts=2)
          annotation (Placement(transformation(extent={{-120,60},{-100,80}})));
        Fluid.Movers.FlowControlled_dp fan1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=800/3.6,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_PEG per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          addPowerToMedium=false,
          dp_nominal(displayUnit="bar") = 500000,
          constantHead(displayUnit="bar") = 500000)
          annotation (Placement(transformation(extent={{-80,60},{-60,80}})));
        Fluid.Sources.Boundary_pT bou(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=false,
          T=283.15,                                  nPorts=2)
          annotation (Placement(transformation(extent={{-120,-60},{-100,-40}})));
        Fluid.Movers.FlowControlled_dp fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=500/3.6,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_PEG per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          addPowerToMedium=false,
          dp_nominal(displayUnit="bar") = 500000,
          constantHead(displayUnit="bar") = 500000)
          annotation (Placement(transformation(extent={{40,-80},{60,-60}})));
        Modelica.Blocks.Sources.BooleanExpression booleanExpression(y=true)
          annotation (Placement(transformation(extent={{-120,20},{-100,40}})));
        Modelica.Blocks.Sources.RealExpression T_set_evap(y=4 + 273.15)
          annotation (Placement(transformation(extent={{-120,-20},{-100,0}})));
        Fluid.Sensors.TemperatureTwoPort TT111(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=50/3.6)
          annotation (Placement(transformation(extent={{80,-6},{60,14}})));
        Fluid.Sensors.TemperatureTwoPort TT1(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=500/3.6)
          annotation (Placement(transformation(extent={{-20,-62},{-40,-42}})));
        Fluid.Sensors.TemperatureTwoPort TT2(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=850/3.6)
          annotation (Placement(transformation(extent={{-48,60},{-28,80}})));
        Fluid.Sensors.TemperatureTwoPort TT3(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=850/3.6)
          annotation (Placement(transformation(extent={{20,80},{0,100}})));

        Fluid.Chillers.Carnot_TEva chi(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=850/3.6,
          m2_flow_nominal=500/3.6,
          QEva_flow_nominal(displayUnit="kW") = -400000000,
          dTEva_nominal=-7,
          dTCon_nominal=5,
          use_eta_Carnot_nominal=false,
          etaCarnot_nominal=0.3,
          COP_nominal=6,
          TCon_nominal=298.15,
          TEva_nominal=277.15,
          dp1_nominal=40000,
          dp2_nominal=40000,
          QEva_flow_min(displayUnit="kW") = -7000000)
          annotation (Placement(transformation(extent={{0,0},{20,20}})));
      equation
        connect(bou.ports[1], fan.port_a) annotation (Line(points={{-100,-48},{-70,-48},
                {-70,-70},{40,-70}}, color={0,127,255}));
        connect(bou1.ports[1], fan1.port_a)
          annotation (Line(points={{-100,72},{-80,72},{-80,70}}, color={0,127,255}));
        connect(fan.port_b, TT111.port_a) annotation (Line(points={{60,-70},{100,-70},
                {100,4},{80,4}}, color={0,127,255}));
        connect(TT1.port_b, bou.ports[2])
          annotation (Line(points={{-40,-52},{-100,-52}}, color={0,127,255}));
        connect(fan1.port_b, TT2.port_a)
          annotation (Line(points={{-60,70},{-48,70}}, color={0,127,255}));
        connect(TT3.port_b, bou1.ports[2]) annotation (Line(points={{0,90},{-94,90},{-94,
                68},{-100,68}}, color={0,127,255}));
        connect(TT111.port_b, chi.port_a2)
          annotation (Line(points={{60,4},{20,4}}, color={0,127,255}));
        connect(chi.port_b2, TT1.port_a) annotation (Line(points={{0,4},{-12,4},
                {-12,-52},{-20,-52}}, color={0,127,255}));
        connect(T_set_evap.y, chi.TSet) annotation (Line(points={{-99,-10},{
                -51.5,-10},{-51.5,19},{-2,19}}, color={0,0,127}));
        connect(TT2.port_b, chi.port_a1) annotation (Line(points={{-28,70},{-14,
                70},{-14,16},{0,16}}, color={0,127,255}));
        connect(chi.port_b1, TT3.port_a) annotation (Line(points={{20,16},{36,
                16},{36,90},{20,90}}, color={0,127,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=1112400,
            Interval=3600,
            __Dymola_Algorithm="Dassl"));
      end chiller_base_2;

      model chiller_simple_pid
        import Fluid;
        Fluid.Sources.Boundary_pT bou(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=true,
          T=282.15,
          nPorts=2)
          annotation (Placement(transformation(extent={{-120,-100},{-100,-80}})));
        Fluid.Sources.Boundary_pT bou1(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=true,
          T=293.15,
          nPorts=2) annotation (Placement(transformation(extent={{140,50},{120,70}})));
        Buildings.Fluid.Movers.FlowControlled_dp fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=600/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_PEG per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          dp_nominal(displayUnit="bar") = 100000,
          constantHead(displayUnit="bar") = 100000)
          annotation (Placement(transformation(extent={{-20,-100},{0,-80}})));
        Buildings.Fluid.Movers.FlowControlled_dp fan1(
          redeclare package Medium = Media.Sea_Water,
          m_flow_nominal=10000,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          addPowerToMedium=false,
          dp_nominal(displayUnit="bar") = 1000000,
          constantHead(displayUnit="bar") = 300000)
          annotation (Placement(transformation(extent={{-122,50},{-102,70}})));
        Modelica.Blocks.Sources.BooleanExpression booleanExpression(y=true)
          annotation (Placement(transformation(extent={{-120,-10},{-100,10}})));
        Buildings.Fluid.Chillers.ElectricReformulatedEIR
                                               electricReformulatedEIR(
          redeclare package Medium1 = Media.Sea_Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=850/3.6,
          m2_flow_nominal=500/3.6,
          dp1_nominal=50000,
          dp2_nominal=50000,
          per=Buildings.Fluid.Chillers.Data.ElectricReformulatedEIR.ReformEIRChiller_Carrier_19EX_5208kW_6_88COP_Vanes())
          annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
        Buildings.Fluid.Sensors.TemperatureTwoPort
                                         TT211(
          redeclare package Medium = Media.Sea_Water,
          m_flow_nominal=850/3.6,
          T_start=293.15)
          annotation (Placement(transformation(extent={{30,50},{50,70}})));
        Buildings.Fluid.Sensors.TemperatureTwoPort
                                         TT111(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=500/3.6,
          T_start=278.15)
          annotation (Placement(transformation(extent={{-60,-70},{-80,-50}})));
        Buildings.Fluid.Sensors.MassFlowRate
                                   senMasFlo(redeclare package Medium =
              Buildings.Media.Water)         annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=270,
              origin={20,-30})));
        Controls.Continuous.LimPID FT_PID(k=0.05, Ti=10)
          annotation (Placement(transformation(extent={{120,-10},{140,10}})));
        Buildings.Fluid.Actuators.Valves.TwoWayLinear
                                            CV121(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=500/3.6,
          dpValve_nominal=5000,
          use_inputFilter=false)
          annotation (Placement(transformation(extent={{-30,-70},{-50,-50}})));
        Buildings.Fluid.Actuators.Valves.TwoWayLinear
                                            CV211(
          redeclare package Medium = Media.Sea_Water,
          m_flow_nominal=850/3.6,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          dpValve_nominal=5000,
          use_inputFilter=false)
          annotation (Placement(transformation(extent={{70,50},{90,70}})));
        Controls_a.GF.PID_Valve_cond pID_Valve_evap
          annotation (Placement(transformation(extent={{40,100},{60,120}})));
        Modelica.Blocks.Sources.RealExpression T_set_evap(y=5 + 273.15)
          annotation (Placement(transformation(extent={{-80,-30},{-60,-10}})));
        Modelica.Blocks.Sources.RealExpression FT121_set(y=500/3.6)
          annotation (Placement(transformation(extent={{40,0},{60,20}})));
        Buildings.Fluid.Sensors.MassFlowRate
                                   senMasFlo1(redeclare package Medium =
              Buildings.Media.Water)         annotation (Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={-60,60})));
        Controls_a.Switch_0 switch1
          annotation (Placement(transformation(extent={{80,-10},{100,10}})));
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource(
              "modelica://Buildings/Data/test.txt"),
          columns={2,3,4,5,6,7})
          annotation (Placement(transformation(extent={{-160,160},{-140,180}})));
      equation
        connect(bou.ports[1], fan.port_a) annotation (Line(points={{-100,-88},{
                -60,-88},{-60,-90},{-20,-90}},
                                         color={0,127,255}));
        connect(electricReformulatedEIR.port_b1,TT211. port_a) annotation (Line(
              points={{10,6},{20,6},{20,60},{30,60}}, color={0,127,255}));
        connect(electricReformulatedEIR.port_a2,senMasFlo. port_b)
          annotation (Line(points={{10,-6},{20,-6},{20,-20}}, color={0,127,255}));
        connect(senMasFlo.m_flow,FT_PID. u_m) annotation (Line(points={{31,-30},
                {130,-30},{130,-12}},
                                    color={0,0,127}));
        connect(TT211.port_b,CV211. port_a)
          annotation (Line(points={{50,60},{70,60}}, color={0,127,255}));
        connect(TT211.T,pID_Valve_evap. TT211) annotation (Line(points={{40,71},
                {40,88},{0,88},{0,110},{37.8,110}},
                                            color={0,0,127}));
        connect(pID_Valve_evap.y,CV211. y)
          annotation (Line(points={{61,111},{80,111},{80,72}}, color={0,0,127}));
        connect(T_set_evap.y,electricReformulatedEIR. TSet) annotation (Line(points={{-59,-20},
                {-40,-20},{-40,-3},{-12,-3}},          color={0,0,127}));
        connect(TT111.port_a,CV121. port_b)
          annotation (Line(points={{-60,-60},{-50,-60}}, color={0,127,255}));
        connect(CV121.port_a,electricReformulatedEIR. port_b2) annotation (Line(
              points={{-30,-60},{-20,-60},{-20,-6},{-10,-6}}, color={0,127,255}));
        connect(FT_PID.y,CV121. y) annotation (Line(points={{141,0},{160,0},{
                160,-44},{-40,-44},{-40,-48}},
                                           color={0,0,127}));
        connect(electricReformulatedEIR.port_a1, senMasFlo1.port_b) annotation (
           Line(points={{-10,6},{-40,6},{-40,60},{-50,60}}, color={0,127,255}));
        connect(senMasFlo1.m_flow, pID_Valve_evap.DPT) annotation (Line(points=
                {{-60,71},{-60,94},{20,94},{20,102},{38,102}}, color={0,0,127}));
        connect(FT121_set.y, switch1.u1) annotation (Line(points={{61,10},{70,
                10},{70,8},{78,8}}, color={0,0,127}));
        connect(switch1.y, FT_PID.u_s)
          annotation (Line(points={{101,0},{118,0}}, color={0,0,127}));
        connect(senMasFlo1.port_a, fan1.port_b)
          annotation (Line(points={{-70,60},{-102,60}}, color={0,127,255}));
        connect(CV211.port_b, bou1.ports[1]) annotation (Line(points={{90,60},{
                106,60},{106,62},{120,62}}, color={0,127,255}));
        connect(fan1.port_a, bou1.ports[2]) annotation (Line(points={{-122,60},
                {-142,60},{-142,134},{110,134},{110,58},{120,58}}, color={0,127,
                255}));
        connect(booleanExpression.y, electricReformulatedEIR.on) annotation (
            Line(points={{-99,0},{-56,0},{-56,3},{-12,3}}, color={255,0,255}));
        connect(booleanExpression.y, switch1.u2)
          annotation (Line(points={{-99,0},{78,0}}, color={255,0,255}));
        connect(fan.port_b, senMasFlo.port_a) annotation (Line(points={{0,-90},
                {72,-90},{72,-60},{20,-60},{20,-40}}, color={0,127,255}));
        connect(TT111.port_b, bou.ports[2]) annotation (Line(points={{-80,-60},
                {-90,-60},{-90,-92},{-100,-92}}, color={0,127,255}));
        connect(combiTimeTable.y[1], bou.T_in) annotation (Line(points={{-139,
                170},{-128,170},{-128,-86},{-122,-86}}, color={0,0,127}));
        connect(combiTimeTable.y[3], bou1.T_in) annotation (Line(points={{-139,
                170},{158,170},{158,64},{142,64}}, color={0,0,127}));
        connect(combiTimeTable.y[3], pID_Valve_evap.PEM_TT200) annotation (Line(
              points={{-139,170},{-52,170},{-52,118},{38,118}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end chiller_simple_pid;

      model chiller_simple_pid_esp
        import Fluid;
        Fluid.Sources.Boundary_pT bou(
          redeclare package Medium = Buildings.Media.Water,
          T=282.15,
          nPorts=2)
          annotation (Placement(transformation(extent={{-120,-100},{-100,-80}})));
        Fluid.Sources.Boundary_pT bou1(
          redeclare package Medium = Buildings.Media.Water,
          T=298.15,
          nPorts=1) annotation (Placement(transformation(extent={{140,50},{120,70}})));
        Buildings.Fluid.Movers.FlowControlled_dp fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=600/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_PEG per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          dp_nominal(displayUnit="bar") = 100000,
          constantHead(displayUnit="bar") = 100000)
          annotation (Placement(transformation(extent={{-20,-100},{0,-80}})));
        Modelica.Blocks.Sources.BooleanExpression booleanExpression(y=true)
          annotation (Placement(transformation(extent={{-120,-10},{-100,10}})));
        Buildings.Fluid.Chillers.ElectricReformulatedEIR
                                               electricReformulatedEIR(
          redeclare package Medium1 = Media.Sea_Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=850/3.6,
          m2_flow_nominal=500/3.6,
          dp1_nominal=50000,
          dp2_nominal=50000,
          per=Buildings.Fluid.Chillers.Data.ElectricReformulatedEIR.ReformEIRChiller_Carrier_19XR_1723kW_8_32COP_VSD())
          annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
        Buildings.Fluid.Sensors.TemperatureTwoPort
                                         TT211(
          redeclare package Medium = Media.Sea_Water,
          m_flow_nominal=850/3.6,
          T_start=293.15)
          annotation (Placement(transformation(extent={{30,50},{50,70}})));
        Buildings.Fluid.Sensors.TemperatureTwoPort
                                         TT111(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=500/3.6,
          T_start=278.15)
          annotation (Placement(transformation(extent={{-60,-70},{-80,-50}})));
        Buildings.Fluid.Sensors.MassFlowRate
                                   senMasFlo(redeclare package Medium =
              Buildings.Media.Water)         annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=270,
              origin={20,-30})));
        Controls.Continuous.LimPID FT_PID(k=0.05, Ti=10)
          annotation (Placement(transformation(extent={{120,-10},{140,10}})));
        Buildings.Fluid.Actuators.Valves.TwoWayLinear
                                            CV121(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=500/3.6,
          dpValve_nominal=5000,
          use_inputFilter=false)
          annotation (Placement(transformation(extent={{-30,-70},{-50,-50}})));
        Buildings.Fluid.Actuators.Valves.TwoWayLinear
                                            CV211(
          redeclare package Medium = Media.Sea_Water,
          m_flow_nominal=850/3.6,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          dpValve_nominal=5000,
          use_inputFilter=false)
          annotation (Placement(transformation(extent={{70,50},{90,70}})));
        Controls_a.GF.PID_Valve_cond pID_Valve_evap
          annotation (Placement(transformation(extent={{40,100},{60,120}})));
        Modelica.Blocks.Sources.RealExpression T_set_evap(y=5 + 273.15)
          annotation (Placement(transformation(extent={{-80,-30},{-60,-10}})));
        Modelica.Blocks.Sources.RealExpression FT121_set(y=500/3.6)
          annotation (Placement(transformation(extent={{40,0},{60,20}})));
        Buildings.Fluid.Sensors.MassFlowRate
                                   senMasFlo1(redeclare package Medium =
              Buildings.Media.Water)         annotation (Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={-60,60})));
        Controls_a.Switch_0 switch1
          annotation (Placement(transformation(extent={{80,-10},{100,10}})));
        Modelica.Blocks.Sources.RealExpression realExpression(y=20 + 273.15)
          annotation (Placement(transformation(extent={{-100,100},{-80,120}})));
        Buildings.Fluid.Sources.MassFlowSource_T boundary(
          redeclare package Medium = Buildings.Media.Water,
          use_m_flow_in=true,
          m_flow=900/3.6,
          T=293.15,
          nPorts=1)
          annotation (Placement(transformation(extent={{-120,50},{-100,70}})));
        Modelica.Blocks.Sources.Ramp ramp(
          height=200,
          duration=300,
          offset=500/3.6,
          startTime=600)
          annotation (Placement(transformation(extent={{-160,70},{-140,90}})));
      equation
        connect(bou.ports[1], fan.port_a) annotation (Line(points={{-100,-88},{
                -60,-88},{-60,-90},{-20,-90}},
                                         color={0,127,255}));
        connect(electricReformulatedEIR.port_b1,TT211. port_a) annotation (Line(
              points={{10,6},{20,6},{20,60},{30,60}}, color={0,127,255}));
        connect(electricReformulatedEIR.port_a2,senMasFlo. port_b)
          annotation (Line(points={{10,-6},{20,-6},{20,-20}}, color={0,127,255}));
        connect(senMasFlo.m_flow,FT_PID. u_m) annotation (Line(points={{31,-30},
                {130,-30},{130,-12}},
                                    color={0,0,127}));
        connect(TT211.port_b,CV211. port_a)
          annotation (Line(points={{50,60},{70,60}}, color={0,127,255}));
        connect(TT211.T,pID_Valve_evap. TT211) annotation (Line(points={{40,71},
                {40,88},{0,88},{0,110},{37.8,110}},
                                            color={0,0,127}));
        connect(pID_Valve_evap.y,CV211. y)
          annotation (Line(points={{61,111},{80,111},{80,72}}, color={0,0,127}));
        connect(T_set_evap.y,electricReformulatedEIR. TSet) annotation (Line(points={{-59,-20},
                {-40,-20},{-40,-3},{-12,-3}},          color={0,0,127}));
        connect(TT111.port_a,CV121. port_b)
          annotation (Line(points={{-60,-60},{-50,-60}}, color={0,127,255}));
        connect(CV121.port_a,electricReformulatedEIR. port_b2) annotation (Line(
              points={{-30,-60},{-20,-60},{-20,-6},{-10,-6}}, color={0,127,255}));
        connect(FT_PID.y,CV121. y) annotation (Line(points={{141,0},{160,0},{
                160,-44},{-40,-44},{-40,-48}},
                                           color={0,0,127}));
        connect(electricReformulatedEIR.port_a1, senMasFlo1.port_b) annotation (
           Line(points={{-10,6},{-40,6},{-40,60},{-50,60}}, color={0,127,255}));
        connect(senMasFlo1.m_flow, pID_Valve_evap.DPT) annotation (Line(points=
                {{-60,71},{-60,94},{20,94},{20,102},{38,102}}, color={0,0,127}));
        connect(FT121_set.y, switch1.u1) annotation (Line(points={{61,10},{70,
                10},{70,8},{78,8}}, color={0,0,127}));
        connect(switch1.y, FT_PID.u_s)
          annotation (Line(points={{101,0},{118,0}}, color={0,0,127}));
        connect(CV211.port_b, bou1.ports[1]) annotation (Line(points={{90,60},{
                106,60},{106,60},{120,60}}, color={0,127,255}));
        connect(booleanExpression.y, electricReformulatedEIR.on) annotation (
            Line(points={{-99,0},{-56,0},{-56,3},{-12,3}}, color={255,0,255}));
        connect(booleanExpression.y, switch1.u2)
          annotation (Line(points={{-99,0},{78,0}}, color={255,0,255}));
        connect(fan.port_b, senMasFlo.port_a) annotation (Line(points={{0,-90},
                {72,-90},{72,-60},{20,-60},{20,-40}}, color={0,127,255}));
        connect(TT111.port_b, bou.ports[2]) annotation (Line(points={{-80,-60},
                {-90,-60},{-90,-92},{-100,-92}}, color={0,127,255}));
        connect(realExpression.y, pID_Valve_evap.PEM_TT200) annotation (Line(
              points={{-79,110},{-20.5,110},{-20.5,118},{38,118}}, color={0,0,
                127}));
        connect(ramp.y, boundary.m_flow_in) annotation (Line(points={{-139,80},
                {-131.5,80},{-131.5,68},{-122,68}}, color={0,0,127}));
        connect(boundary.ports[1], senMasFlo1.port_a)
          annotation (Line(points={{-100,60},{-70,60}}, color={0,127,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end chiller_simple_pid_esp;

      model sst_caly_gf
        import Fluid;
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource("modelica://Buildings/Data/sst/froid_caly_ref_1h.txt"),
          columns={2,3,4,5,6,7,8,9,10,11,12,13},
          smoothness=Modelica.Blocks.Types.Smoothness.LinearSegments)
          annotation (Placement(transformation(extent={{-180,60},{-160,80}})));

        Fluid.Sources.MassFlowSource_T boundary(
          redeclare package Medium = Buildings.Media.Water,
          use_m_flow_in=true,
          use_T_in=true,
          nPorts=1)
          annotation (Placement(transformation(extent={{100,20},{80,40}})));
        Fluid.Sources.Boundary_pT bou(redeclare package Medium =
              Buildings.Media.Water, nPorts=1)
          annotation (Placement(transformation(extent={{-100,20},{-80,40}})));
        Fluid.Sensors.TemperatureTwoPort T_in_sec(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=180,
              origin={50,30})));
        Fluid.Sensors.TemperatureTwoPort T_out_sec(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=180,
              origin={-30,30})));
        Fluid.HeatExchangers.PlateHeatExchangerEffectivenessNTU hex(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=400000/(4185*15),
          m2_flow_nominal=400000/(4185*15),
          dp1_nominal(displayUnit="kPa") = 70000,
          dp2_nominal(displayUnit="kPa") = 70000,
          configuration=Buildings.Fluid.Types.HeatExchangerConfiguration.CounterFlow,
          use_Q_flow_nominal=false,
          Q_flow_nominal(displayUnit="kW") = 400000,
          T_a1_nominal=288.15,
          T_a2_nominal=278.15,
          eps_nominal=0.72)
          annotation (Placement(transformation(extent={{20,0},{0,20}})));

        Fluid.Sensors.TemperatureTwoPort T_in_prim(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={-30,-50})));
        Fluid.Sensors.TemperatureTwoPort T_out_prim(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={50,-30})));
        Fluid.Sources.Boundary_pT bou1(redeclare package Medium =
              Buildings.Media.Water,
          use_T_in=true,             nPorts=2)
          annotation (Placement(transformation(extent={{260,-40},{240,-20}})));
        Modelica.Blocks.Math.Gain gain(k=1/3.6)
          annotation (Placement(transformation(extent={{-140,60},{-120,80}})));
        Modelica.Blocks.Interfaces.RealOutput temperature[8](final unit="K",
            displayUnit="degC")
          annotation (Placement(transformation(extent={{-180,20},{-160,40}})));
        Fluid.Actuators.Valves.TwoWayLinear val(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=20,
          dpValve_nominal(displayUnit="Pa") = 5000,
          use_inputFilter=false)
          annotation (Placement(transformation(extent={{-80,-60},{-60,-40}})));
        Controls.Continuous.LimPID PID_T(
          controllerType=Modelica.Blocks.Types.SimpleController.P,
          k=0.1,
          Ti=300,
          initType=Modelica.Blocks.Types.InitPID.NoInit,
          reverseActing=false) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-90,-10})));
        Fluid.Movers.FlowControlled_m_flow fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=500/3.6,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_PEG per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          addPowerToMedium=false,
          dp_nominal(displayUnit="bar") = 1300000,
          constantMassFlowRate=500/3.6) annotation (Placement(transformation(
                extent={{160,-120},{140,-100}})));
        Fluid.Sensors.RelativePressure senRelPre(redeclare package Medium =
              Buildings.Media.Water) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={70,-70})));
        Fluid.FixedResistances.Junction jun(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={500/3.6,-20,-500/3.6 + 20},
          dp_nominal={0,0,-1000000}) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={120,-110})));
        Fluid.FixedResistances.Junction jun1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={20,500/3.6 - 20,-500/3.6},
          dp_nominal={0,0,0}) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={120,-30})));
        Chiller chiller(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          per=Fluid.Chillers.Data.ElectricReformulatedEIR.ReformEIRChiller_Carrier_19EX_5208kW_6_88COP_Vanes())
          annotation (Placement(transformation(extent={{180,-80},{200,-60}})));
        Fluid.Sources.Boundary_pT bou2(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=true,
          T=293.15,
          nPorts=2)
          annotation (Placement(transformation(extent={{280,20},{260,40}})));
        Fluid.Sensors.TemperatureTwoPort T_out_prim1(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={170,-28})));
        Fluid.Movers.FlowControlled_dp fan1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=850/3.6,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          dp_nominal(displayUnit="bar") = 300000,
          constantHead(displayUnit="bar") = 300000)
          annotation (Placement(transformation(extent={{230,20},{210,40}})));
        Modelica.Blocks.Sources.RealExpression realExpression(y=20 + 273.15)
          annotation (Placement(transformation(extent={{140,-160},{160,-140}})));
        Modelica.Blocks.Sources.BooleanExpression booleanExpression(y=true)
          annotation (Placement(transformation(extent={{140,-200},{160,-180}})));
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable1(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource(
              "modelica://Buildings/Data/pem.txt"),
          columns={2,3,4},
          smoothness=Modelica.Blocks.Types.Smoothness.LinearSegments)
          annotation (Placement(transformation(extent={{-180,140},{-160,160}})));
        Fluid.Sensors.TemperatureTwoPort PEM_TT200(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=180,
              origin={174,28})));
      equation
        for k in [1:8] loop
          temperature[k] = combiTimeTable.y[k];
        end for;
        connect(boundary.ports[1],T_in_sec. port_a)
          annotation (Line(points={{80,30},{60,30}}, color={0,127,255}));
        connect(T_in_sec.port_b,hex. port_a1) annotation (Line(points={{40,30},
                {30,30},{30,16},{20,16}},
                                  color={0,127,255}));
        connect(bou.ports[1],T_out_sec. port_b)
          annotation (Line(points={{-80,30},{-40,30}}, color={0,127,255}));
        connect(T_out_sec.port_a,hex. port_b1) annotation (Line(points={{-20,30},
                {-10,30},{-10,16},{0,16}},
                                      color={0,127,255}));
        connect(T_in_prim.port_b, hex.port_a2) annotation (Line(points={{-20,-50},
                {-12,-50},{-12,4},{0,4}},
                                       color={0,127,255}));
        connect(hex.port_b2, T_out_prim.port_a) annotation (Line(points={{20,4},{
                30,4},{30,-30},{40,-30}},
                                    color={0,127,255}));
        connect(gain.y, boundary.m_flow_in) annotation (Line(points={{-119,70},
                {110,70},{110,38},{102,38}},
                                    color={0,0,127}));
        connect(combiTimeTable.y[10], gain.u)
          annotation (Line(points={{-159,70},{-142,70}}, color={0,0,127}));
        connect(combiTimeTable.y[4], boundary.T_in) annotation (Line(points={{
                -159,70},{-150,70},{-150,100},{120,100},{120,34},{102,34}},
              color={0,0,127}));
        connect(val.port_b, T_in_prim.port_a) annotation (Line(points={{-60,-50},
                {-52,-50},{-52,-50},{-40,-50}}, color={0,127,255}));
        connect(combiTimeTable.y[3], PID_T.u_s) annotation (Line(points={{-159,
                70},{-150,70},{-150,-10},{-102,-10}}, color={0,0,127}));
        connect(T_out_sec.T, PID_T.u_m) annotation (Line(points={{-30,41},{-30,
                52},{-110,52},{-110,-30},{-90,-30},{-90,-22}}, color={0,0,127}));
        connect(PID_T.y, val.y) annotation (Line(points={{-79,-10},{-70,-10},{
                -70,-38}}, color={0,0,127}));
        connect(jun.port_1, fan.port_b)
          annotation (Line(points={{130,-110},{140,-110}}, color={0,127,255}));
        connect(T_out_prim.port_b, jun1.port_1)
          annotation (Line(points={{60,-30},{110,-30}}, color={0,127,255}));
        connect(senRelPre.port_b, T_out_prim.port_b) annotation (Line(points={{
                70,-60},{70,-30},{60,-30}}, color={0,127,255}));
        connect(jun.port_2, val.port_a) annotation (Line(points={{110,-110},{
                -100,-110},{-100,-50},{-80,-50}}, color={0,127,255}));
        connect(senRelPre.port_a, jun.port_2) annotation (Line(points={{70,-80},
                {70,-110},{110,-110}}, color={0,127,255}));
        connect(jun.port_3, jun1.port_3)
          annotation (Line(points={{120,-100},{120,-40}}, color={0,127,255}));
        connect(chiller.port_b2, fan.port_a) annotation (Line(points={{180,-76},
                {180,-110},{160,-110}}, color={0,127,255}));
        connect(chiller.port_a2, bou1.ports[1]) annotation (Line(points={{200,
                -76},{220,-76},{220,-28},{240,-28}}, color={0,127,255}));
        connect(jun1.port_2, T_out_prim1.port_a) annotation (Line(points={{130,
                -30},{150,-30},{150,-28},{160,-28}}, color={0,127,255}));
        connect(T_out_prim1.port_b, bou1.ports[2]) annotation (Line(points={{
                180,-28},{210,-28},{210,-32},{240,-32}}, color={0,127,255}));
        connect(T_out_prim1.T, bou1.T_in) annotation (Line(points={{170,-17},{
                170,-6},{280,-6},{280,-26},{262,-26}}, color={0,0,127}));
        connect(bou2.ports[1], fan1.port_a) annotation (Line(points={{260,32},{
                246,32},{246,30},{230,30}}, color={0,127,255}));
        connect(booleanExpression.y, chiller.u) annotation (Line(points={{161,
                -190},{170,-190},{170,-70},{178,-70}}, color={255,0,255}));
        connect(realExpression.y, chiller.PEM_TT200) annotation (Line(points={{
                161,-150},{166,-150},{166,-60},{178,-60}}, color={0,0,127}));
        connect(combiTimeTable1.y[1], bou2.T_in) annotation (Line(points={{-159,
                150},{298,150},{298,34},{282,34}}, color={0,0,127}));
        connect(chiller.port_b1, bou2.ports[2]) annotation (Line(points={{200,
                -64},{212,-64},{212,6},{260,6},{260,28}}, color={0,127,255}));
        connect(fan1.port_b, PEM_TT200.port_a) annotation (Line(points={{210,30},
                {194,30},{194,28},{184,28}}, color={0,127,255}));
        connect(PEM_TT200.port_b, chiller.port_a1) annotation (Line(points={{
                164,28},{152,28},{152,-64},{180,-64}}, color={0,127,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{
                  -220,-200},{220,200}})),                             Diagram(
              coordinateSystem(preserveAspectRatio=false, extent={{-220,-200},{
                  220,200}})),
          experiment(
            StopTime=13132800,
            Interval=3600,
            __Dymola_Algorithm="Dassl"));
      end sst_caly_gf;
    end Tests;

    model basic_mdoe
      Fluid.Chillers.ElectricReformulatedEIR chi(
        redeclare package Medium1 = Media.Water,
        redeclare package Medium2 = Media.Water,
        m1_flow_nominal=490/3.6,
        m2_flow_nominal=810/3.6,
        per=Fluid.Chillers.Data.ElectricReformulatedEIR.Test_quantum(),
        dp1_nominal=410,
        dp2_nominal=310)
        annotation (Placement(transformation(extent={{-160,-40},{-140,-20}})));
      Modelica.Blocks.Sources.RealExpression realExpression(y=4 + 273.15)
        annotation (Placement(transformation(extent={{-250,-4},{-230,16}})));
      Modelica.Fluid.Sensors.TemperatureTwoPort THIn(redeclare package Medium =
            Modelica.Media.Water.ConstantPropertyLiquidWater)
        annotation (Placement(transformation(extent={{-230,30},{-210,50}})));
      Modelica.Fluid.Sensors.TemperatureTwoPort TT211(redeclare package Medium =
            Modelica.Media.Water.ConstantPropertyLiquidWater)
        annotation (Placement(transformation(extent={{-90,-20},{-70,0}})));
      Modelica.Fluid.Sensors.TemperatureTwoPort TCout(redeclare package Medium =
            Modelica.Media.Water.ConstantPropertyLiquidWater)
        annotation (Placement(transformation(extent={{-220,-100},{-240,-80}})));
      Modelica.Fluid.Sensors.TemperatureTwoPort TCIn(redeclare package Medium =
            Modelica.Media.Water.ConstantPropertyLiquidWater)
        annotation (Placement(transformation(extent={{-10,-60},{-30,-40}})));
      Modelica.Fluid.Valves.ValveLinear CV121(
        redeclare package Medium =
            Modelica.Media.Water.ConstantPropertyLiquidWater,
        dp_nominal=10000,
        m_flow_nominal=500) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-110,-50})));
      Modelica.Fluid.Sensors.Pressure PT221(redeclare package Medium =
            Modelica.Media.Water.ConstantPropertyLiquidWater)
        annotation (Placement(transformation(extent={{-192,-18},{-172,2}})));
      Modelica.Fluid.Sensors.Pressure PT211(redeclare package Medium =
            Modelica.Media.Water.ConstantPropertyLiquidWater)
        annotation (Placement(transformation(extent={{-132,-18},{-112,2}})));
      Modelica.Fluid.Sensors.MassFlowRate FT121(redeclare package Medium =
            Modelica.Media.Water.ConstantPropertyLiquidWater) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-70,-50})));
      Controls.Continuous.LimPID conPID(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=5,
        Ti=10,
        initType=Modelica.Blocks.Types.InitPID.NoInit) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={-110,-100})));
      Modelica.Blocks.Sources.RealExpression Q_set(y=350/3.6)
        annotation (Placement(transformation(extent={{-150,-150},{-130,-130}})));
      Modelica.Blocks.Math.Add PDT(k2=-1)
        annotation (Placement(transformation(extent={{-60,160},{-40,180}})));
      Controls.Continuous.LimPID conPID1(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=3,
        Ti=15,
        initType=Modelica.Blocks.Types.InitPID.NoInit) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-10,210})));
      Modelica.Blocks.Sources.RealExpression PDT_set(y=0.7)
        annotation (Placement(transformation(extent={{-60,200},{-40,220}})));
      Controls.Continuous.LimPID conPID2(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=2.5,
        Ti=1.7,
        initType=Modelica.Blocks.Types.InitPID.NoInit) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-10,130})));
      Modelica.Blocks.Math.Add TDT(k2=-1)
        annotation (Placement(transformation(extent={{-60,80},{-40,100}})));
      Modelica.Blocks.Sources.RealExpression TDT_set(y=5 + 273.15)
        annotation (Placement(transformation(extent={{-60,120},{-40,140}})));
      Controls.Continuous.LimPID conPID3(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=3,
        Ti=1,
        initType=Modelica.Blocks.Types.InitPID.NoInit) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-12,52})));
      Modelica.Blocks.Sources.RealExpression TT_set(y=30 + 273.15)
        annotation (Placement(transformation(extent={{-62,42},{-42,62}})));
      Modelica.Blocks.Math.MinMax minMax(nu=3)
        annotation (Placement(transformation(extent={{40,120},{60,140}})));
      Modelica.Fluid.Valves.ValveLinear CV211(
        redeclare package Medium =
            Modelica.Media.Water.ConstantPropertyLiquidWater,
        dp_nominal=10000,
        m_flow_nominal=800) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-40,-10})));
      Modelica.Fluid.Valves.ValveDiscrete valveDiscrete(
        redeclare package Medium =
            Modelica.Media.Water.ConstantPropertyLiquidWater,
        dp_nominal=10000,
        m_flow_nominal=500,
        opening_min=0.000000000001)
        annotation (Placement(transformation(extent={{-180,-80},{-200,-100}})));
      Fluid.Movers.FlowControlled_dp fan(
        redeclare package Medium = Media.Water,
        m_flow_nominal=1000,
        redeclare Fluid.Movers.Data.Generic per,
        inputType=Buildings.Fluid.Types.InputType.Constant,
        constantHead=87000)
        annotation (Placement(transformation(extent={{-300,40},{-280,60}})));
      Modelica.Fluid.Sources.Boundary_pT pem_in(
        redeclare package Medium =
            Modelica.Media.Water.ConstantPropertyLiquidWater,
        use_T_in=true,
        nPorts=1)
        annotation (Placement(transformation(extent={{-340,40},{-320,60}})));
      Modelica.Fluid.Sources.FixedBoundary pem_out(redeclare package Medium =
            Modelica.Media.Water.ConstantPropertyLiquidWater, nPorts=1)
        annotation (Placement(transformation(extent={{140,-20},{120,0}})));
      Modelica.Blocks.Sources.CombiTimeTable pem_data(
        tableOnFile=true,
        tableName="tab1",
        fileName=ModelicaServices.ExternalReferences.loadResource(
            "modelica://Buildings/Data/froid/pem_froid.txt"),
        columns={2,3,4},
        extrapolation=Modelica.Blocks.Types.Extrapolation.Periodic)
        annotation (Placement(transformation(extent={{-420,40},{-400,60}})));
      Modelica.Thermal.HeatTransfer.Celsius.ToKelvin toKelvin
        annotation (Placement(transformation(extent={{-380,40},{-360,60}})));
      Modelica.Fluid.Sources.FixedBoundary GF_out(redeclare package Medium =
            Modelica.Media.Water.ConstantPropertyLiquidWater, nPorts=2)
        annotation (Placement(transformation(extent={{-360,-100},{-340,-80}})));
      Modelica.Blocks.Sources.CombiTimeTable deg_data(
        tableOnFile=true,
        tableName="tab1",
        fileName=ModelicaServices.ExternalReferences.loadResource(
            "modelica://Buildings/Data/froid/deg_froid.txt"),
        columns={2,3,4,5,6,7,8,9},
        extrapolation=Modelica.Blocks.Types.Extrapolation.Periodic)
        annotation (Placement(transformation(extent={{380,-40},{360,-20}})));
      Modelica.Blocks.Math.Gain gain(k=1/3.6)
        annotation (Placement(transformation(extent={{220,-40},{200,-20}})));
      Modelica.Thermal.HeatTransfer.Celsius.ToKelvin T_out
        annotation (Placement(transformation(extent={{220,-100},{200,-80}})));
      Modelica.Blocks.Math.Add add
        annotation (Placement(transformation(extent={{320,-180},{300,-160}})));
      Modelica.Blocks.Sources.CombiTimeTable tfp_data(
        tableOnFile=true,
        tableName="tab1",
        fileName=ModelicaServices.ExternalReferences.loadResource(
            "modelica://Buildings/Data/froid/tfp_froid.txt"),
        columns={7},
        extrapolation=Modelica.Blocks.Types.Extrapolation.Periodic)
        annotation (Placement(transformation(extent={{380,-160},{360,-140}})));
      Modelica.Blocks.Sources.CombiTimeTable gf_data(
        tableOnFile=true,
        tableName="tab1",
        fileName=ModelicaServices.ExternalReferences.loadResource(
            "modelica://Buildings/Data/froid/gf1_froid.txt"),
        columns={2},
        extrapolation=Modelica.Blocks.Types.Extrapolation.Periodic)
        annotation (Placement(transformation(extent={{380,-200},{360,-180}})));
      Modelica.Thermal.HeatTransfer.Celsius.ToKelvin T_in
        annotation (Placement(transformation(extent={{220,-70},{200,-50}})));
      Modelica.Blocks.Math.Add add1(k1=-1)
        annotation (Placement(transformation(extent={{280,-140},{260,-120}})));
      Modelica.Blocks.Sources.BooleanExpression booleanExpression(y=true)
        annotation (Placement(transformation(extent={{-220,-140},{-200,-120}})));
      Modelica.Fluid.Sources.Boundary_pT boundary(
        redeclare package Medium =
            Modelica.Media.Water.ConstantPropertyLiquidWater,
        use_p_in=false,
        use_T_in=true,
        p=400000,
        nPorts=1)
        annotation (Placement(transformation(extent={{140,-80},{120,-60}})));
      Modelica.Fluid.Sources.Boundary_pT boundary1(
        redeclare package Medium =
            Modelica.Media.Water.ConstantPropertyLiquidWater,
        use_p_in=false,
        use_T_in=true,
        p=400000,
        nPorts=1)
        annotation (Placement(transformation(extent={{140,-140},{120,-120}})));
      Fluid.Movers.FlowControlled_m_flow fan1(
        redeclare package Medium = Media.Water,
        m_flow_nominal=2280,
        redeclare Fluid.Movers.Data.Generic per)
        annotation (Placement(transformation(extent={{82,-80},{62,-60}})));
      Fluid.Movers.FlowControlled_m_flow fan2(
        redeclare package Medium = Media.Water,
        m_flow_nominal=2280,
        redeclare Fluid.Movers.Data.Generic per)
        annotation (Placement(transformation(extent={{80,-140},{60,-120}})));
      Modelica.Blocks.Math.Gain gain1(k=1/3.6)
        annotation (Placement(transformation(extent={{220,-140},{200,-120}})));
      Modelica.Fluid.Valves.ValveLinear CV1(
        redeclare package Medium =
            Modelica.Media.Water.ConstantPropertyLiquidWater,
        dp_nominal=10000,
        m_flow_nominal=500) annotation (Placement(transformation(
            extent={{-10,10},{10,-10}},
            rotation=180,
            origin={-90,-170})));
      Modelica.Blocks.Math.Add add2(k2=-1) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=-90,
            origin={-72,-130})));
      Modelica.Blocks.Sources.RealExpression realExpression1(y=1) annotation (
          Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=-90,
            origin={-50,-90})));
    equation
      connect(realExpression.y,chi. TSet) annotation (Line(points={{-229,6},{-166,6},
              {-166,-33},{-162,-33}},
                                color={0,0,127}));
      connect(THIn.port_b,chi. port_a1) annotation (Line(points={{-210,40},{
              -206,40},{-206,-24},{-160,-24}},
                               color={0,127,255}));
      connect(chi.port_b1,TT211. port_a)
        annotation (Line(points={{-140,-24},{-90,-24},{-90,-10}},
                                                 color={0,127,255}));
      connect(chi.port_a2,CV121. port_b) annotation (Line(points={{-140,-36},{
              -130,-36},{-130,-50},{-120,-50}},
                              color={0,127,255}));
      connect(THIn.port_b,PT221. port) annotation (Line(points={{-210,40},{-206,
              40},{-206,-18},{-182,-18}},
                           color={0,127,255}));
      connect(chi.port_b1,PT211. port)
        annotation (Line(points={{-140,-24},{-132,-24},{-132,-18},{-122,-18}},
                                                 color={0,127,255}));
      connect(CV121.port_a,FT121. port_b)
        annotation (Line(points={{-100,-50},{-80,-50}},
                                                     color={0,127,255}));
      connect(FT121.port_a,TCIn. port_b)
        annotation (Line(points={{-60,-50},{-30,-50}},color={0,127,255}));
      connect(FT121.m_flow,conPID. u_m)
        annotation (Line(points={{-70,-61},{-70,-100},{-98,-100}},
                                                              color={0,0,127}));
      connect(Q_set.y,conPID. u_s)
        annotation (Line(points={{-129,-140},{-110,-140},{-110,-112}},
                                                                color={0,0,127}));
      connect(conPID.y,CV121. opening)
        annotation (Line(points={{-110,-89},{-110,-58}},
                                                     color={0,0,127}));
      connect(PT211.p,PDT. u2) annotation (Line(points={{-111,-8},{-100,-8},{
              -100,164},{-62,164}},
                     color={0,0,127}));
      connect(PT221.p,PDT. u1) annotation (Line(points={{-171,-8},{-152,-8},{
              -152,176},{-62,176}},
                         color={0,0,127}));
      connect(PDT.y,conPID1. u_m)
        annotation (Line(points={{-39,170},{-10,170},{-10,198}}, color={0,0,127}));
      connect(PDT_set.y,conPID1. u_s)
        annotation (Line(points={{-39,210},{-22,210}}, color={0,0,127}));
      connect(TDT_set.y,conPID2. u_s)
        annotation (Line(points={{-39,130},{-22,130}}, color={0,0,127}));
      connect(TT211.T,TDT. u2)
        annotation (Line(points={{-80,1},{-80,84},{-62,84}}, color={0,0,127}));
      connect(TDT.y,conPID2. u_m)
        annotation (Line(points={{-39,90},{-10,90},{-10,118}},   color={0,0,127}));
      connect(TT_set.y,conPID3. u_s)
        annotation (Line(points={{-41,52},{-24,52}},   color={0,0,127}));
      connect(TT211.T,conPID3. u_m) annotation (Line(points={{-80,1},{-80,20},{
              -12,20},{-12,40}},
                          color={0,0,127}));
      connect(conPID2.y,minMax. u[1]) annotation (Line(points={{1,130},{20,130},
              {20,134.667},{40,134.667}},  color={0,0,127}));
      connect(conPID3.y,minMax. u[2]) annotation (Line(points={{-1,52},{20,52},
              {20,130},{40,130}},  color={0,0,127}));
      connect(conPID1.y,minMax. u[3]) annotation (Line(points={{1,210},{20,210},
              {20,125.333},{40,125.333}},  color={0,0,127}));
      connect(TT211.port_b,CV211. port_a)
        annotation (Line(points={{-70,-10},{-50,-10}},
                                                  color={0,127,255}));
      connect(minMax.yMax,CV211. opening) annotation (Line(points={{61,136},{70,
              136},{70,14},{-40,14},{-40,-2}},
                                           color={0,0,127}));
      connect(TCout.port_a,valveDiscrete. port_b)
        annotation (Line(points={{-220,-90},{-200,-90}},
                                                       color={0,127,255}));
      connect(valveDiscrete.port_a,chi. port_b2) annotation (Line(points={{-180,
              -90},{-174,-90},{-174,-36},{-160,-36}},
                                                 color={0,127,255}));
      connect(pem_in.ports[1], fan.port_a)
        annotation (Line(points={{-320,50},{-300,50}},   color={0,127,255}));
      connect(fan.port_b, THIn.port_a) annotation (Line(points={{-280,50},{-264,
              50},{-264,40},{-230,40}},         color={0,127,255}));
      connect(CV211.port_b, pem_out.ports[1])
        annotation (Line(points={{-30,-10},{120,-10}},color={0,127,255}));
      connect(pem_data.y[1], toKelvin.Celsius)
        annotation (Line(points={{-399,50},{-382,50}},   color={0,0,127}));
      connect(toKelvin.Kelvin, pem_in.T_in) annotation (Line(points={{-359,50},
              {-351.5,50},{-351.5,54},{-342,54}},  color={0,0,127}));
      connect(TCout.port_b, GF_out.ports[1])
        annotation (Line(points={{-240,-90},{-290,-90},{-290,-88},{-340,-88}},
                                                           color={0,127,255}));
      connect(deg_data.y[6], gain.u) annotation (Line(points={{359,-30},{222,
              -30}},                     color={0,0,127}));
      connect(deg_data.y[5], T_in.Celsius) annotation (Line(points={{359,-30},{
              241.5,-30},{241.5,-60},{222,-60}}, color={0,0,127}));
      connect(tfp_data.y[1], add.u1) annotation (Line(points={{359,-150},{342,
              -150},{342,-164},{322,-164}}, color={0,0,127}));
      connect(gf_data.y[1], add.u2) annotation (Line(points={{359,-190},{340,
              -190},{340,-176},{322,-176}}, color={0,0,127}));
      connect(deg_data.y[4], T_out.Celsius) annotation (Line(points={{359,-30},
              {280,-30},{280,-90},{222,-90}}, color={0,0,127}));
      connect(deg_data.y[6], add1.u1) annotation (Line(points={{359,-30},{316,
              -30},{316,-124},{282,-124}}, color={0,0,127}));
      connect(add.y, add1.u2) annotation (Line(points={{299,-170},{292,-170},{
              292,-136},{282,-136}}, color={0,0,127}));
      connect(booleanExpression.y, valveDiscrete.open) annotation (Line(points={{-199,
              -130},{-190,-130},{-190,-98}},         color={255,0,255}));
      connect(THIn.T, TDT.u1) annotation (Line(points={{-220,51},{-220,96},{-62,
              96}}, color={0,0,127}));
      connect(boundary1.ports[1], fan2.port_a)
        annotation (Line(points={{120,-130},{80,-130}}, color={0,127,255}));
      connect(fan1.port_a, boundary.ports[1])
        annotation (Line(points={{82,-70},{120,-70}}, color={0,127,255}));
      connect(fan1.port_b, TCIn.port_a) annotation (Line(points={{62,-70},{26,
              -70},{26,-50},{-10,-50}}, color={0,127,255}));
      connect(fan2.port_b, TCIn.port_a) annotation (Line(points={{60,-130},{26,
              -130},{26,-50},{-10,-50}}, color={0,127,255}));
      connect(T_out.Kelvin, boundary1.T_in) annotation (Line(points={{199,-90},
              {174,-90},{174,-126},{142,-126}}, color={0,0,127}));
      connect(boundary.T_in, T_in.Kelvin) annotation (Line(points={{142,-66},{
              170,-66},{170,-60},{199,-60}}, color={0,0,127}));
      connect(gain.y, fan1.m_flow_in) annotation (Line(points={{199,-30},{72,
              -30},{72,-58}}, color={0,0,127}));
      connect(gain1.u, add1.y)
        annotation (Line(points={{222,-130},{259,-130}}, color={0,0,127}));
      connect(gain1.y, fan2.m_flow_in) annotation (Line(points={{199,-130},{188,
              -130},{188,-100},{70,-100},{70,-118}}, color={0,0,127}));
      connect(CV1.port_a, TCIn.port_a) annotation (Line(points={{-80,-170},{-26,
              -170},{-26,-130},{26,-130},{26,-50},{-10,-50}}, color={0,127,255}));
      connect(CV1.port_b, GF_out.ports[2]) annotation (Line(points={{-100,-170},
              {-320,-170},{-320,-92},{-340,-92}}, color={0,127,255}));
      connect(conPID.y, add2.u2) annotation (Line(points={{-110,-89},{-110,-80},
              {-78,-80},{-78,-118}}, color={0,0,127}));
      connect(add2.u1, realExpression1.y) annotation (Line(points={{-66,-118},{
              -66,-110},{-50,-110},{-50,-101}}, color={0,0,127}));
      connect(add2.y, CV1.opening) annotation (Line(points={{-72,-141},{-72,
              -148},{-90,-148},{-90,-162}}, color={0,0,127}));
      connect(booleanExpression.y, chi.on) annotation (Line(points={{-199,-130},{-170,
              -130},{-170,-27},{-162,-27}}, color={255,0,255}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-440,
                -240},{440,240}})),                                  Diagram(
            coordinateSystem(preserveAspectRatio=false, extent={{-440,-240},{
                440,240}})));
    end basic_mdoe;

    model Basic
      Chiller chiller(redeclare package Medium1 =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water,                                       redeclare
          package Medium2 =
                    Buildings.Media.Water,
        dp1_chi_nominal(displayUnit="Pa"),
        dp2_chi_nominal(displayUnit="Pa"))
        annotation (Placement(transformation(extent={{-10,0},{10,20}})));

      Modelica.Blocks.Sources.RealExpression realExpression(y=4 + 273.15)
        annotation (Placement(transformation(extent={{-120,-20},{-100,0}})));
      Fluid.Sources.Boundary_pT sortie_c(redeclare package Medium =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water, nPorts=1)
        annotation (Placement(transformation(extent={{100,60},{80,80}})));
      Fluid.Sources.MassFlowSource_T entree_c(redeclare package Medium =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
        use_m_flow_in=false,
        m_flow=800/3.6,
        use_T_in=true,
        T=298.15,                                                 nPorts=1)
        annotation (Placement(transformation(extent={{-100,60},{-80,80}})));
      Fluid.Sources.Boundary_pT sortie_e(redeclare package Medium =
            Buildings.Media.Water,
        use_T_in=true,             nPorts=1)
        annotation (Placement(transformation(extent={{-100,-60},{-80,-40}})));
      Fluid.Sources.MassFlowSource_T entree_e(redeclare package Medium =
            Buildings.Media.Water,
        use_m_flow_in=true,
        m_flow=500/3.6,
        use_T_in=true,
        T=291.15,                  nPorts=1)
        annotation (Placement(transformation(extent={{100,-40},{80,-60}})));
      Modelica.Blocks.Sources.CombiTimeTable gf_data(
        tableOnFile=true,
        tableName="tab1",
        fileName=ModelicaServices.ExternalReferences.loadResource(
            "modelica://Buildings/Data/gf1.txt"),
        columns={2,6,7,8},
        extrapolation=Modelica.Blocks.Types.Extrapolation.Periodic)
        annotation (Placement(transformation(extent={{-200,60},{-180,80}})));

      Modelica.Thermal.HeatTransfer.Celsius.ToKelvin toKelvin
        annotation (Placement(transformation(extent={{-160,60},{-140,80}})));
      Modelica.Thermal.HeatTransfer.Celsius.ToKelvin toKelvin1
        annotation (Placement(transformation(extent={{160,-40},{140,-20}})));
      Modelica.Blocks.Math.Product product1
        annotation (Placement(transformation(extent={{160,-120},{140,-100}})));
      Modelica.Blocks.Sources.RealExpression realExpression1(y=4185/3.6/1000)
        annotation (Placement(transformation(extent={{160,-160},{180,-140}})));
      Modelica.Blocks.Interfaces.RealOutput y annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={-150,130})));
      Modelica.Blocks.Sources.BooleanExpression booleanExpression(y=true)
        annotation (Placement(transformation(extent={{-100,20},{-80,40}})));
    equation
      connect(realExpression.y, chiller.T_cons) annotation (Line(points={{-99,-10},
              {-56.5,-10},{-56.5,7},{-12,7}}, color={0,0,127}));
      connect(sortie_c.ports[1], chiller.port_b1) annotation (Line(points={{80,70},
              {34,70},{34,16},{10,16}},color={0,127,255}));
      connect(sortie_e.ports[1], chiller.port_b2) annotation (Line(points={{-80,-50},
              {-36,-50},{-36,4},{-10,4}}, color={0,127,255}));
      connect(entree_e.ports[1], chiller.port_a2) annotation (Line(points={{80,-50},
              {36,-50},{36,4},{10,4}}, color={0,127,255}));
      connect(entree_c.ports[1], chiller.port_a1) annotation (Line(points={{-80,70},
              {-36,70},{-36,16},{-10,16}}, color={0,127,255}));
      connect(gf_data.y[2], toKelvin.Celsius)
        annotation (Line(points={{-179,70},{-162,70}}, color={0,0,127}));
      connect(toKelvin.Kelvin, entree_c.T_in) annotation (Line(points={{-139,70},{-122,
              70},{-122,74},{-102,74}}, color={0,0,127}));
      connect(gf_data.y[3], toKelvin1.Celsius) annotation (Line(points={{-179,
              70},{-170,70},{-170,-80},{190,-80},{190,-30},{162,-30}}, color={0,
              0,127}));
      connect(toKelvin1.Kelvin, entree_e.T_in) annotation (Line(points={{139,-30},{128,
              -30},{128,-54},{102,-54}}, color={0,0,127}));
      connect(realExpression1.y, product1.u2) annotation (Line(points={{181,-150},{190,
              -150},{190,-116},{162,-116}}, color={0,0,127}));
      connect(gf_data.y[4], product1.u1) annotation (Line(points={{-179,70},{-170,
              70},{-170,-160},{218,-160},{218,-104},{162,-104}}, color={0,0,127}));
      connect(product1.y, entree_e.m_flow_in) annotation (Line(points={{139,-110},{128,
              -110},{128,-58},{102,-58}}, color={0,0,127}));
      connect(gf_data.y[1], y) annotation (Line(points={{-179,70},{-170,70},{
              -170,108},{-150,108},{-150,130}}, color={0,0,127}));
      connect(booleanExpression.y, chiller.u) annotation (Line(points={{-79,30},
              {-60,30},{-60,10},{-12,10}}, color={255,0,255}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
            coordinateSystem(preserveAspectRatio=false)),
        experiment(
          StopTime=100000,
          Interval=200,
          __Dymola_Algorithm="Dassl"));
    end Basic;

    model Basic_b
      Chiller chiller(redeclare package Medium1 =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water,                                       redeclare
          package Medium2 =
                    Buildings.Media.Water,
        dp1_chi_nominal(displayUnit="Pa"),
        dp2_chi_nominal(displayUnit="Pa"))
        annotation (Placement(transformation(extent={{-10,0},{10,20}})));

      Modelica.Blocks.Sources.RealExpression realExpression(y=4 + 273.15)
        annotation (Placement(transformation(extent={{-120,-20},{-100,0}})));
      Fluid.Sources.Boundary_pT sortie_c(redeclare package Medium =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water, nPorts=1)
        annotation (Placement(transformation(extent={{100,60},{80,80}})));
      Fluid.Sources.MassFlowSource_T entree_c(redeclare package Medium =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
        use_m_flow_in=false,
        m_flow=800/3.6,
        use_T_in=true,
        T=298.15,
        nPorts=1)
        annotation (Placement(transformation(extent={{-100,60},{-80,80}})));
      Fluid.Sources.Boundary_pT sortie_e(redeclare package Medium =
            Buildings.Media.Water,
        use_T_in=true,
        nPorts=1)
        annotation (Placement(transformation(extent={{-100,-60},{-80,-40}})));
      Fluid.Sources.MassFlowSource_T entree_e(redeclare package Medium =
            Buildings.Media.Water,
        use_m_flow_in=true,
        m_flow=500/3.6,
        use_T_in=true,
        T=291.15,
        nPorts=1)
        annotation (Placement(transformation(extent={{100,-40},{80,-60}})));
      Modelica.Blocks.Sources.CombiTimeTable gf_data(
        tableOnFile=true,
        tableName="tab1",
        fileName=ModelicaServices.ExternalReferences.loadResource(
            "modelica://Buildings/Data/gf1.txt"),
        columns={2,6,7,8},
        extrapolation=Modelica.Blocks.Types.Extrapolation.Periodic)
        annotation (Placement(transformation(extent={{-200,60},{-180,80}})));

      Modelica.Thermal.HeatTransfer.Celsius.ToKelvin toKelvin
        annotation (Placement(transformation(extent={{-160,60},{-140,80}})));
      Modelica.Thermal.HeatTransfer.Celsius.ToKelvin toKelvin1
        annotation (Placement(transformation(extent={{160,-40},{140,-20}})));
      Modelica.Blocks.Math.Product product1
        annotation (Placement(transformation(extent={{160,-120},{140,-100}})));
      Modelica.Blocks.Sources.RealExpression realExpression1(y=4185/3.6/1000)
        annotation (Placement(transformation(extent={{160,-160},{180,-140}})));
      Modelica.Blocks.Interfaces.RealOutput y annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={-150,130})));
      Modelica.Blocks.Sources.BooleanPulse booleanPulse(period=50000)
        annotation (Placement(transformation(extent={{-100,20},{-80,40}})));
      Fluid.Sensors.Pressure senPre(redeclare package Medium =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water)
        annotation (Placement(transformation(extent={{-60,72},{-40,92}})));
      Fluid.Sensors.Pressure senPre1(redeclare package Medium =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water)
        annotation (Placement(transformation(extent={{32,70},{52,90}})));
      Fluid.Sensors.Pressure senPre2(redeclare package Medium =
            Buildings.Media.Water)
        annotation (Placement(transformation(extent={{38,-38},{58,-18}})));
      Fluid.Sensors.Pressure senPre3(redeclare package Medium =
            Buildings.Media.Water)
        annotation (Placement(transformation(extent={{-60,-48},{-40,-28}})));
    equation
      connect(realExpression.y, chiller.T_cons) annotation (Line(points={{-99,-10},
              {-56.5,-10},{-56.5,7},{-12,7}}, color={0,0,127}));
      connect(chiller.y, sortie_e.T_in) annotation (Line(points={{0,-1},{0,-28},
              {-120,-28},{-120,-46},{-102,-46}},      color={0,0,127}));
      connect(gf_data.y[2], toKelvin.Celsius)
        annotation (Line(points={{-179,70},{-162,70}}, color={0,0,127}));
      connect(toKelvin.Kelvin, entree_c.T_in) annotation (Line(points={{-139,70},{-122,
              70},{-122,74},{-102,74}}, color={0,0,127}));
      connect(gf_data.y[3], toKelvin1.Celsius) annotation (Line(points={{-179,
              70},{-170,70},{-170,-80},{190,-80},{190,-30},{162,-30}}, color={0,
              0,127}));
      connect(toKelvin1.Kelvin, entree_e.T_in) annotation (Line(points={{139,-30},{128,
              -30},{128,-54},{102,-54}}, color={0,0,127}));
      connect(realExpression1.y, product1.u2) annotation (Line(points={{181,-150},{190,
              -150},{190,-116},{162,-116}}, color={0,0,127}));
      connect(gf_data.y[4], product1.u1) annotation (Line(points={{-179,70},{-170,
              70},{-170,-160},{218,-160},{218,-104},{162,-104}}, color={0,0,127}));
      connect(product1.y, entree_e.m_flow_in) annotation (Line(points={{139,-110},{128,
              -110},{128,-58},{102,-58}}, color={0,0,127}));
      connect(gf_data.y[1], y) annotation (Line(points={{-179,70},{-170,70},{
              -170,108},{-150,108},{-150,130}}, color={0,0,127}));
      connect(booleanPulse.y, chiller.u) annotation (Line(points={{-79,30},{-50,
              30},{-50,10},{-12,10}},
                                  color={255,0,255}));
      connect(entree_c.ports[1], senPre.port) annotation (Line(points={{-80,70},{-66,
              70},{-66,72},{-50,72}}, color={0,127,255}));
      connect(senPre.port, chiller.port_a1) annotation (Line(points={{-50,72},{-30,72},
              {-30,16},{-10,16}}, color={0,127,255}));
      connect(sortie_e.ports[1], senPre3.port) annotation (Line(points={{-80,-50},{-66,
              -50},{-66,-48},{-50,-48}}, color={0,127,255}));
      connect(senPre3.port, chiller.port_b2) annotation (Line(points={{-50,-48},{-30,
              -48},{-30,4},{-10,4}}, color={0,127,255}));
      connect(chiller.port_a2, senPre2.port) annotation (Line(points={{10,4},{30,4},
              {30,-38},{48,-38}}, color={0,127,255}));
      connect(senPre2.port, entree_e.ports[1]) annotation (Line(points={{48,-38},{64,
              -38},{64,-50},{80,-50}}, color={0,127,255}));
      connect(senPre1.port, chiller.port_b1) annotation (Line(points={{42,70},{26,70},
              {26,16},{10,16}}, color={0,127,255}));
      connect(senPre1.port, sortie_c.ports[1])
        annotation (Line(points={{42,70},{80,70}}, color={0,127,255}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
            coordinateSystem(preserveAspectRatio=false)),
        experiment(
          StopTime=100000,
          Interval=200,
          __Dymola_Algorithm="Dassl"));
    end Basic_b;

    model Chiller_basic

      extends Fluid.Interfaces.PartialFourPort
      annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
            coordinateSystem(preserveAspectRatio=false)));

              // Chiller parameters
      parameter Modelica.SIunits.MassFlowRate m_flow_chi_evap_nominal= 800 * 1027 / 3600
        "Nominal mass flow rate at condenser water in the chillers";
      parameter Modelica.SIunits.MassFlowRate m_flow_chi_cond_nominal= 500 * 1000 / 3600
        "Nominal mass flow rate at evaporator water in the chillers";
      parameter Modelica.SIunits.PressureDifference dp1_chi_nominal = 0.38*1000
        "Nominal pressure";
      parameter Modelica.SIunits.PressureDifference dp2_chi_nominal = 0.31*1000
        "Nominal pressure";

      Fluid.Chillers.ElectricReformulatedEIR electricReformulatedEIR(
        redeclare package Medium1 =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
        redeclare package Medium2 = Buildings.Media.Water,
        m1_flow_nominal=m_flow_chi_cond_nominal,
        m2_flow_nominal=m_flow_chi_evap_nominal,
        dp1_nominal=dp1_chi_nominal,
        dp2_nominal=dp2_chi_nominal,
        per=Fluid.Chillers.Data.ElectricReformulatedEIR.ReformEIRChiller_Carrier_19EX_5148kW_6_34COP_Vanes())
        annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
      Modelica.Blocks.Interfaces.BooleanInput u
        annotation (Placement(transformation(extent={{-140,10},{-100,50}})));
      Modelica.Blocks.Interfaces.RealInput T_cons
        annotation (Placement(transformation(extent={{-140,-50},{-100,-10}})));
      Fluid.Sensors.TemperatureTwoPort TCin(redeclare package Medium =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water, m_flow_nominal=m_flow_chi_cond_nominal)
        annotation (Placement(transformation(extent={{-50,50},{-30,70}})));
      Fluid.Sensors.TemperatureTwoPort TT211(redeclare package Medium =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water, m_flow_nominal=m_flow_chi_cond_nominal)
        annotation (Placement(transformation(extent={{30,50},{50,70}})));
      Fluid.Sensors.TemperatureTwoPort TEin(redeclare package Medium =
            Buildings.Media.Water,          m_flow_nominal=m_flow_chi_evap_nominal)
        annotation (Placement(transformation(extent={{50,-70},{30,-50}})));
      Fluid.Sensors.TemperatureTwoPort TEout(redeclare package Medium =
            Buildings.Media.Water,           m_flow_nominal=m_flow_chi_evap_nominal)
        annotation (Placement(transformation(extent={{-40,-70},{-60,-50}})));
      Modelica.Blocks.Interfaces.RealOutput y annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=-90,
            origin={-30,-110})));
      Fluid.Sensors.Pressure PT211(redeclare package Medium =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water)
        annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={10,40})));
      Fluid.Sensors.Pressure PT221(redeclare package Medium =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water)
        annotation (Placement(transformation(extent={{-80,60},{-60,80}})));
      Fluid.Actuators.Valves.TwoWayLinear CV121(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal=m_flow_chi_cond_nominal,
        dpValve_nominal=10)
        annotation (Placement(transformation(extent={{80,-70},{60,-50}})));
      Fluid.Actuators.Valves.TwoWayLinear CV211(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal=m_flow_chi_cond_nominal,
        CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
        dpValve_nominal=10)
        annotation (Placement(transformation(extent={{60,50},{80,70}})));
      Modelica.Blocks.Sources.RealExpression realExpression(y=1)
        annotation (Placement(transformation(extent={{40,100},{60,120}})));
    equation
      connect(T_cons, electricReformulatedEIR.TSet) annotation (Line(points={{-120,-30},
              {-66,-30},{-66,-3},{-12,-3}}, color={0,0,127}));
      connect(u, electricReformulatedEIR.on) annotation (Line(points={{-120,30},
              {-66,30},{-66,3},{-12,3}}, color={255,0,255}));
      connect(port_a1, TCin.port_a)
        annotation (Line(points={{-100,60},{-50,60}}, color={0,127,255}));
      connect(TCin.port_b, electricReformulatedEIR.port_a1) annotation (Line(points={{-30,60},
              {-20,60},{-20,6},{-10,6}},         color={0,127,255}));
      connect(electricReformulatedEIR.port_b1,TT211. port_a) annotation (Line(
            points={{10,6},{20,6},{20,60},{30,60}}, color={0,127,255}));
      connect(port_b2,TEout. port_b)
        annotation (Line(points={{-100,-60},{-60,-60}}, color={0,127,255}));
      connect(TEout.port_a, electricReformulatedEIR.port_b2) annotation (Line(
            points={{-40,-60},{-20,-60},{-20,-6},{-10,-6}}, color={0,127,255}));
      connect(TEout.T, y) annotation (Line(points={{-50,-49},{-50,-40},{-30,-40},
              {-30,-110}}, color={0,0,127}));
      connect(TEin.port_a, CV121.port_b)
        annotation (Line(points={{50,-60},{60,-60}}, color={0,127,255}));
      connect(CV121.port_a, port_a2)
        annotation (Line(points={{80,-60},{100,-60}}, color={0,127,255}));

      connect(TT211.port_b, CV211.port_a)
        annotation (Line(points={{50,60},{60,60}}, color={0,127,255}));
      connect(CV211.port_b, port_b1)
        annotation (Line(points={{80,60},{100,60}}, color={0,127,255}));
      connect(port_a1, PT221.port)
        annotation (Line(points={{-100,60},{-70,60}}, color={0,127,255}));
      connect(electricReformulatedEIR.port_b1, PT211.port)
        annotation (Line(points={{10,6},{20,6},{20,40}}, color={0,127,255}));
      connect(CV211.y, realExpression.y)
        annotation (Line(points={{70,72},{70,110},{61,110}}, color={0,0,127}));
      connect(realExpression.y, CV121.y) annotation (Line(points={{61,110},{140,
              110},{140,-40},{70,-40},{70,-48}}, color={0,0,127}));
      connect(electricReformulatedEIR.port_a2, TEin.port_b) annotation (Line(
            points={{10,-6},{10,-34},{30,-34},{30,-60}}, color={0,127,255}));
      annotation (Icon(graphics={
            Rectangle(
              extent={{0,-54},{100,-66}},
              lineColor={0,0,255},
              pattern=LinePattern.None,
              fillColor={0,0,255},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-100,-66},{0,-54}},
              lineColor={0,0,127},
              pattern=LinePattern.None,
              fillColor={0,0,127},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-100,54},{0,66}},
              lineColor={0,0,255},
              pattern=LinePattern.None,
              fillColor={255,170,85},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{0,54},{100,66}},
              lineColor={0,0,255},
              pattern=LinePattern.None,
              fillColor={238,46,47},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-20,40},{20,-20}},
              lineColor={28,108,200},
              lineThickness=1,
              fillColor={28,108,200},
              fillPattern=FillPattern.Solid),
            Polygon(
              points={{-40,-20},{40,-20},{0,-54},{-40,-20}},
              lineColor={28,108,200},
              lineThickness=1,
              fillColor={28,108,200},
              fillPattern=FillPattern.Solid)}));
    end Chiller_basic;

    package Calibration
      model gf

      parameter
          Buildings.Fluid.Chillers.Data.ElectricReformulatedEIR.ReformEIRChiller_York_YT_563kW_10_61COP_Vanes
          per;

      Real temperatures[6](final unit="K", displayUnit = "degC");
        GF.Chiller chiller(redeclare package Medium1 =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water, redeclare
            package Medium2 =
                      Buildings.Media.Water,
            per=per)
          annotation (Placement(transformation(extent={{-20,0},{0,20}})));
        Fluid.Sources.Boundary_pT bou2(
          redeclare package Medium = Media.Sea_Water,
          p=100000,
          use_T_in=false,
          nPorts=1)
          annotation (Placement(transformation(extent={{-140,80},{-120,100}})));
        Fluid.Sensors.TemperatureTwoPort TT200(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=190/3.6)
          annotation (Placement(transformation(extent={{-40,60},{-60,80}})));
        Fluid.Sensors.TemperatureTwoPort TT201(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=190/3.6)
          annotation (Placement(transformation(extent={{40,60},{20,80}})));
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource("modelica://Buildings/Data/gf.txt"),
          columns={2,3,4,5,6,7,8,9,10,11})
          annotation (Placement(transformation(extent={{-100,-100},{-80,-80}})));

        Fluid.Sources.MassFlowSource_T boundary1(
          redeclare package Medium = Buildings.Media.Water,
          use_m_flow_in=true,
          m_flow=180/3.6,
          use_T_in=true,
          nPorts=1)
          annotation (Placement(transformation(extent={{60,-40},{40,-20}})));
        Fluid.Sources.Boundary_pT bou1(redeclare package Medium =
              Buildings.Media.Water, nPorts=1)
          annotation (Placement(transformation(extent={{-100,-60},{-80,-40}})));
        Modelica.Blocks.Sources.RealExpression realExpression(y=500)
          annotation (Placement(transformation(extent={{-100,-30},{-80,-10}})));
        Modelica.Blocks.Sources.BooleanExpression booleanExpression(y=true)
          annotation (Placement(transformation(extent={{-100,0},{-80,20}})));
        Fluid.Sources.MassFlowSource_T boundary2(
          redeclare package Medium = Buildings.Media.Water,
          use_m_flow_in=true,
          m_flow=180/3.6,
          use_T_in=true,
          nPorts=1)
          annotation (Placement(transformation(extent={{-100,60},{-80,80}})));
      equation

            for j in 1:6 loop
            temperatures[j]=combiTimeTable.y[j];
          end for;
        connect(chiller.port_a1, TT200.port_a) annotation (Line(points={{-20,16},{-30,
                16},{-30,70},{-40,70}}, color={0,127,255}));
        connect(chiller.port_b1, TT201.port_b) annotation (Line(points={{0,16},{10,16},
                {10,70},{20,70}}, color={0,127,255}));
        connect(TT201.port_a, bou2.ports[1]) annotation (Line(points={{40,70},{60,70},
                {60,100},{-114,100},{-114,90},{-120,90}}, color={0,127,255}));
        connect(bou1.ports[1], chiller.port_b2) annotation (Line(points={{-80,-50},{-52,
                -50},{-52,4},{-20,4}}, color={0,127,255}));
        connect(chiller.port_a2, boundary1.ports[1]) annotation (Line(points={{0,4},{20,
                4},{20,-30},{40,-30}}, color={0,127,255}));
        connect(TT200.T, chiller.PEM_TT200) annotation (Line(points={{-50,81},{-50,92},
                {-36,92},{-36,20},{-22,20}}, color={0,0,127}));
        connect(realExpression.y, chiller.FT121_cons) annotation (Line(points={{-79,-20},
                {-50,-20},{-50,0},{-22,0}}, color={0,0,127}));
        connect(combiTimeTable.y[8], boundary1.m_flow_in) annotation (Line(points={{-79,
                -90},{80,-90},{80,-22},{62,-22}}, color={0,0,127}));
        connect(combiTimeTable.y[2], boundary1.T_in) annotation (Line(points={{-79,-90},
                {80,-90},{80,-26},{62,-26}}, color={0,0,127}));
        connect(booleanExpression.y, chiller.u) annotation (Line(points={{-79,10},{-52,
                10},{-52,10},{-22,10}}, color={255,0,255}));
        connect(combiTimeTable.y[5], boundary2.T_in) annotation (Line(points={{-79,-90},
                {-60,-90},{-60,-70},{-114,-70},{-114,74},{-102,74}}, color={0,0,127}));
        connect(combiTimeTable.y[10], boundary2.m_flow_in) annotation (Line(points={{-79,
                -90},{-60,-90},{-60,-70},{-114,-70},{-114,78},{-102,78}}, color={0,0,127}));
        connect(boundary2.ports[1], TT200.port_b)
          annotation (Line(points={{-80,70},{-60,70}}, color={0,127,255}));
        annotation (
          Icon(coordinateSystem(preserveAspectRatio=false)),
          Diagram(coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=950400,
            Interval=600,
            __Dymola_Algorithm="Dassl"));
      end gf;

      model gf_pump_cal
      Real temperatures[6](final unit="K", displayUnit = "degC");
        Chiller chiller(redeclare package Medium1 =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,                                                                      redeclare
            package Medium2 = Buildings.Media.Water,
          per=Buildings.Fluid.Chillers.Data.ElectricReformulatedEIR.ReformEIRChiller_McQuay_WSC_471kW_5_89COP_Vanes())
          annotation (Placement(transformation(extent={{-20,0},{0,20}})));
        Fluid.Sources.Boundary_pT bou2(
          redeclare package Medium = Media.Sea_Water,
          p=100000,
          use_T_in=true,
          nPorts=2)
          annotation (Placement(transformation(extent={{-140,80},{-120,100}})));
        Fluid.Sensors.TemperatureTwoPort TT200(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=190/3.6)
          annotation (Placement(transformation(extent={{-40,60},{-60,80}})));
        Fluid.Sensors.TemperatureTwoPort TT201(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=190/3.6)
          annotation (Placement(transformation(extent={{40,60},{20,80}})));
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource("modelica://Buildings/Data/gf.txt"),
          columns={2,3,4,5,6,7,8,9,10,11,12})
          annotation (Placement(transformation(extent={{-100,-100},{-80,-80}})));

        Fluid.Sources.MassFlowSource_T boundary1(
          redeclare package Medium = Buildings.Media.Water,
          use_m_flow_in=true,
          m_flow=180/3.6,
          use_T_in=true,
          nPorts=1)
          annotation (Placement(transformation(extent={{60,-40},{40,-20}})));
        Fluid.Sources.Boundary_pT bou1(redeclare package Medium =
              Buildings.Media.Water, nPorts=1)
          annotation (Placement(transformation(extent={{-100,-60},{-80,-40}})));
        Modelica.Blocks.Sources.RealExpression realExpression(y=500)
          annotation (Placement(transformation(extent={{-100,-30},{-80,-10}})));
        Modelica.Blocks.Sources.BooleanExpression booleanExpression(y=true)
          annotation (Placement(transformation(extent={{-100,0},{-80,20}})));
        Fluid.Movers.FlowControlled_dp fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=720/3.6,
          redeclare Fluid.Movers.Data.Pumps.Wilo.Stratos25slash1to4 per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          addPowerToMedium=false,
          constantHead(displayUnit="bar") = 187000)
          annotation (Placement(transformation(extent={{-100,60},{-80,80}})));
      equation

            for j in 1:6 loop
            temperatures[j]=combiTimeTable.y[j];
          end for;
        connect(chiller.port_a1, TT200.port_a) annotation (Line(points={{-20,16},{-30,
                16},{-30,70},{-40,70}}, color={0,127,255}));
        connect(chiller.port_b1, TT201.port_b) annotation (Line(points={{0,16},{10,16},
                {10,70},{20,70}}, color={0,127,255}));
        connect(TT201.port_a, bou2.ports[1]) annotation (Line(points={{40,70},{
                60,70},{60,100},{-114,100},{-114,92},{-120,92}},
                                                          color={0,127,255}));
        connect(bou1.ports[1], chiller.port_b2) annotation (Line(points={{-80,-50},{-52,
                -50},{-52,4},{-20,4}}, color={0,127,255}));
        connect(chiller.port_a2, boundary1.ports[1]) annotation (Line(points={{0,4},{20,
                4},{20,-30},{40,-30}}, color={0,127,255}));
        connect(TT200.T, chiller.PEM_TT200) annotation (Line(points={{-50,81},{-50,92},
                {-36,92},{-36,20},{-22,20}}, color={0,0,127}));
        connect(realExpression.y, chiller.FT121_cons) annotation (Line(points={{-79,-20},
                {-50,-20},{-50,0},{-22,0}}, color={0,0,127}));
        connect(combiTimeTable.y[8], boundary1.m_flow_in) annotation (Line(points={{-79,
                -90},{80,-90},{80,-22},{62,-22}}, color={0,0,127}));
        connect(combiTimeTable.y[2], boundary1.T_in) annotation (Line(points={{-79,-90},
                {80,-90},{80,-26},{62,-26}}, color={0,0,127}));
        connect(booleanExpression.y, chiller.u) annotation (Line(points={{-79,10},{-52,
                10},{-52,10},{-22,10}}, color={255,0,255}));
        connect(combiTimeTable.y[5], bou2.T_in) annotation (Line(points={{-79,
                -90},{-60,-90},{-60,-70},{-160,-70},{-160,94},{-142,94}}, color=
               {0,0,127}));
        connect(TT200.port_b, fan.port_b)
          annotation (Line(points={{-60,70},{-80,70}}, color={0,127,255}));
        connect(bou2.ports[2], fan.port_a) annotation (Line(points={{-120,88},{
                -112,88},{-112,70},{-100,70}}, color={0,127,255}));
        annotation (
          Icon(coordinateSystem(preserveAspectRatio=false)),
          Diagram(coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=950400,
            Interval=600,
            __Dymola_Algorithm="Dassl"));
      end gf_pump_cal;

    model gf_pump
          Real temperatures[6](final unit="K", displayUnit = "degC");
            Fluid.Sources.Boundary_pT bou2(
              redeclare package Medium = Media.Sea_Water,
        p=100000,
        use_T_in=false,
              nPorts=1)
              annotation (Placement(transformation(extent={{-140,80},{-120,100}})));
            Fluid.Sensors.TemperatureTwoPort TT200(redeclare package Medium =
                  Buildings.Media.Water, m_flow_nominal=850/3.6)
              annotation (Placement(transformation(extent={{-60,60},{-40,80}})));
            Fluid.Sensors.TemperatureTwoPort TT201(redeclare package Medium =
                  Buildings.Media.Water, m_flow_nominal=850/3.6)
              annotation (Placement(transformation(extent={{20,60},{40,80}})));
            Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
              tableOnFile=true,
              tableName="tab1",
              fileName=ModelicaServices.ExternalReferences.loadResource("modelica://Buildings/Data/gf.txt"),
              columns={2,3,4,5,6,7,8,9,10,11})
              annotation (Placement(transformation(extent={{-100,-100},{-80,-80}})));

            Fluid.Sources.MassFlowSource_T boundary1(
              redeclare package Medium = Buildings.Media.Water,
              use_m_flow_in=true,
              m_flow=180/3.6,
              use_T_in=true,
        nPorts=1)
              annotation (Placement(transformation(extent={{60,-40},{40,-20}})));
            Fluid.Sources.Boundary_pT bou1(redeclare package Medium =
                  Buildings.Media.Water, nPorts=1)
              annotation (Placement(transformation(extent={{-100,-60},{-80,-40}})));
            Modelica.Blocks.Sources.RealExpression realExpression(y=6.5 +
              273.15)
              annotation (Placement(transformation(extent={{-100,-30},{-80,-10}})));
            Modelica.Blocks.Sources.BooleanExpression booleanExpression(y=true)
              annotation (Placement(transformation(extent={{-100,0},{-80,20}})));
      Fluid.Chillers.ElectricReformulatedEIR electricReformulatedEIR(
        redeclare package Medium1 = Media.Sea_Water,
        redeclare package Medium2 = Buildings.Media.Water,
        m1_flow_nominal=800*1027/3600,
        m2_flow_nominal=500*1000/3600,
        dp1_nominal=38000,
        dp2_nominal=31000,
          per=Fluid.Chillers.Data.ElectricReformulatedEIR.ReformEIRChiller_Carrier_23XL_724kW_6_04COP_Vanes())
        annotation (Placement(transformation(extent={{-20,0},{0,20}})));
            Fluid.Sensors.TemperatureTwoPort TT111(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=500/3.6)
        annotation (Placement(transformation(extent={{-40,-60},{-60,-40}})));
            Fluid.Sensors.TemperatureTwoPort TT1(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=500/3.6)
        annotation (Placement(transformation(extent={{30,-40},{10,-20}})));
      Fluid.Sources.MassFlowSource_T boundary2(
        redeclare package Medium = Media.Sea_Water,
        use_m_flow_in=true,
        m_flow=180/3.6,
        use_T_in=true,
        nPorts=1)
        annotation (Placement(transformation(extent={{-100,60},{-80,80}})));
    equation

    for j in 1:6 loop
    temperatures[j]=combiTimeTable.y[j];
    end for;connect(combiTimeTable.y[8], boundary1.m_flow_in) annotation (Line(points={{-79,
                    -90},{80,-90},{80,-22},{62,-22}}, color={0,0,127}));
            connect(combiTimeTable.y[2], boundary1.T_in) annotation (Line(points={{-79,-90},
                    {80,-90},{80,-26},{62,-26}}, color={0,0,127}));
      connect(TT200.port_b, electricReformulatedEIR.port_a1) annotation (Line(
            points={{-40,70},{-30,70},{-30,16},{-20,16}}, color={0,127,255}));
      connect(electricReformulatedEIR.port_b1, TT201.port_a) annotation (Line(
            points={{0,16},{10,16},{10,70},{20,70}}, color={0,127,255}));
      connect(TT201.port_b, bou2.ports[1]) annotation (Line(points={{40,70},{56,70},
              {56,90},{-120,90}}, color={0,127,255}));
      connect(booleanExpression.y, electricReformulatedEIR.on) annotation (Line(
            points={{-79,10},{-52.5,10},{-52.5,13},{-22,13}}, color={255,0,255}));
      connect(realExpression.y, electricReformulatedEIR.TSet) annotation (Line(
            points={{-79,-20},{-54,-20},{-54,7},{-22,7}}, color={0,0,127}));
      connect(bou1.ports[1], TT111.port_b)
        annotation (Line(points={{-80,-50},{-60,-50}}, color={0,127,255}));
      connect(TT111.port_a, electricReformulatedEIR.port_b2)
        annotation (Line(points={{-40,-50},{-20,-50},{-20,4}}, color={0,127,255}));
      connect(electricReformulatedEIR.port_a2, TT1.port_b) annotation (Line(points={
              {0,4},{6,4},{6,-30},{10,-30}}, color={0,127,255}));
      connect(TT1.port_a, boundary1.ports[1])
        annotation (Line(points={{30,-30},{40,-30}}, color={0,127,255}));
      connect(boundary2.ports[1], TT200.port_a)
        annotation (Line(points={{-80,70},{-60,70}}, color={0,127,255}));
      connect(combiTimeTable.y[5], boundary2.T_in) annotation (Line(points={{-79,-90},
              {-68,-90},{-68,-68},{-114,-68},{-114,74},{-102,74}}, color={0,0,127}));
      connect(combiTimeTable.y[10], boundary2.m_flow_in) annotation (Line(points={{-79,
              -90},{-68,-90},{-68,-68},{-114,-68},{-114,78},{-102,78}}, color={0,0,127}));
            annotation (
              Icon(coordinateSystem(preserveAspectRatio=false)),
              Diagram(coordinateSystem(preserveAspectRatio=false)),
              experiment(
                StopTime=950400,
                Interval=600,
                __Dymola_Algorithm="Dassl"));
    end gf_pump;

    model gf_simple
        import Fluid;
          Real temperatures[6](final unit="K", displayUnit = "degC");
            Fluid.Sources.Boundary_pT bou2(
              redeclare package Medium = Media.Sea_Water,
        p=100000,
        use_T_in=false,
              nPorts=1)
              annotation (Placement(transformation(extent={{-140,80},{-120,100}})));
            Fluid.Sensors.TemperatureTwoPort TT200(redeclare package Medium =
                  Buildings.Media.Water, m_flow_nominal=850/3.6)
              annotation (Placement(transformation(extent={{-60,60},{-40,80}})));
            Fluid.Sensors.TemperatureTwoPort TT201(redeclare package Medium =
                  Buildings.Media.Water, m_flow_nominal=850/3.6)
              annotation (Placement(transformation(extent={{20,60},{40,80}})));
            Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
              tableOnFile=true,
              tableName="tab1",
              fileName=ModelicaServices.ExternalReferences.loadResource("modelica://Buildings/Data/gf.txt"),
              columns={2,3,4,5,6,7,8,9,10,11})
              annotation (Placement(transformation(extent={{-100,-100},{-80,-80}})));

            Fluid.Sources.MassFlowSource_T boundary1(
              redeclare package Medium = Buildings.Media.Water,
              use_m_flow_in=true,
              m_flow=180/3.6,
              use_T_in=true,
        nPorts=1)
              annotation (Placement(transformation(extent={{60,-40},{40,-20}})));
            Fluid.Sources.Boundary_pT bou1(redeclare package Medium =
                  Buildings.Media.Water, nPorts=1)
              annotation (Placement(transformation(extent={{-100,-60},{-80,-40}})));
            Modelica.Blocks.Sources.RealExpression realExpression(y=4 + 273.15)
              annotation (Placement(transformation(extent={{-100,-30},{-80,-10}})));
            Modelica.Blocks.Sources.BooleanExpression booleanExpression(y=true)
              annotation (Placement(transformation(extent={{-100,0},{-80,20}})));
      Fluid.Chillers.ElectricReformulatedEIR electricReformulatedEIR(
        redeclare package Medium1 = Media.Sea_Water,
        redeclare package Medium2 = Buildings.Media.Water,
        m1_flow_nominal=800*1027/3600,
        m2_flow_nominal=500*1000/3600,
        dp1_nominal=38000,
        dp2_nominal=31000,
          per=Fluid.Chillers.Data.ElectricReformulatedEIR.ReformEIRChiller_York_YT_1881kW_6_77COP_VSD())
        annotation (Placement(transformation(extent={{-20,0},{0,20}})));
            Fluid.Sensors.TemperatureTwoPort TT111(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=500/3.6)
        annotation (Placement(transformation(extent={{-40,-60},{-60,-40}})));
            Fluid.Sensors.TemperatureTwoPort TT1(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=500/3.6)
        annotation (Placement(transformation(extent={{30,-40},{10,-20}})));
      Fluid.Sources.MassFlowSource_T boundary2(
        redeclare package Medium = Media.Sea_Water,
        use_m_flow_in=true,
        m_flow=180/3.6,
        use_T_in=true,
        nPorts=1)
        annotation (Placement(transformation(extent={{-100,60},{-80,80}})));
    equation

    for j in 1:6 loop
    temperatures[j]=combiTimeTable.y[j];
    end for;connect(combiTimeTable.y[8], boundary1.m_flow_in) annotation (Line(points={{-79,
                    -90},{80,-90},{80,-22},{62,-22}}, color={0,0,127}));
            connect(combiTimeTable.y[2], boundary1.T_in) annotation (Line(points={{-79,-90},
                    {80,-90},{80,-26},{62,-26}}, color={0,0,127}));
      connect(TT200.port_b, electricReformulatedEIR.port_a1) annotation (Line(
            points={{-40,70},{-30,70},{-30,16},{-20,16}}, color={0,127,255}));
      connect(electricReformulatedEIR.port_b1, TT201.port_a) annotation (Line(
            points={{0,16},{10,16},{10,70},{20,70}}, color={0,127,255}));
      connect(TT201.port_b, bou2.ports[1]) annotation (Line(points={{40,70},{56,70},
              {56,90},{-120,90}}, color={0,127,255}));
      connect(booleanExpression.y, electricReformulatedEIR.on) annotation (Line(
            points={{-79,10},{-52.5,10},{-52.5,13},{-22,13}}, color={255,0,255}));
      connect(realExpression.y, electricReformulatedEIR.TSet) annotation (Line(
            points={{-79,-20},{-54,-20},{-54,7},{-22,7}}, color={0,0,127}));
      connect(bou1.ports[1], TT111.port_b)
        annotation (Line(points={{-80,-50},{-60,-50}}, color={0,127,255}));
      connect(TT111.port_a, electricReformulatedEIR.port_b2)
        annotation (Line(points={{-40,-50},{-20,-50},{-20,4}}, color={0,127,255}));
      connect(electricReformulatedEIR.port_a2, TT1.port_b) annotation (Line(points={
              {0,4},{6,4},{6,-30},{10,-30}}, color={0,127,255}));
      connect(TT1.port_a, boundary1.ports[1])
        annotation (Line(points={{30,-30},{40,-30}}, color={0,127,255}));
      connect(boundary2.ports[1], TT200.port_a)
        annotation (Line(points={{-80,70},{-60,70}}, color={0,127,255}));
      connect(combiTimeTable.y[5], boundary2.T_in) annotation (Line(points={{-79,-90},
              {-68,-90},{-68,-68},{-114,-68},{-114,74},{-102,74}}, color={0,0,127}));
      connect(combiTimeTable.y[10], boundary2.m_flow_in) annotation (Line(points={{-79,
              -90},{-68,-90},{-68,-68},{-114,-68},{-114,78},{-102,78}}, color={0,0,127}));
            annotation (
              Icon(coordinateSystem(preserveAspectRatio=false)),
              Diagram(coordinateSystem(preserveAspectRatio=false)),
              experiment(
                StopTime=950400,
                Interval=600,
                __Dymola_Algorithm="Dassl"));
    end gf_simple;
    end Calibration;

    model Chiller_simple

      extends Fluid.Interfaces.PartialFourPort
      annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
            coordinateSystem(preserveAspectRatio=false)));

            parameter Real T_cons=5+273.15;
      parameter Buildings.Fluid.Chillers.Data.ElectricReformulatedEIR.Generic per
        "Performance data"
        annotation (choicesAllMatching = true);
              // Chiller parameters
      parameter Modelica.SIunits.MassFlowRate m_flow_chi_evap_nominal= 489.8 * 1027 / 3600
        "Nominal mass flow rate at condenser water in the chillers";
      parameter Modelica.SIunits.MassFlowRate m_flow_chi_cond_nominal= 812.7 * 1000 / 3600
        "Nominal mass flow rate at evaporator water in the chillers";
      parameter Modelica.SIunits.PressureDifference dp1_chi_nominal = 0.38*100000
        "Nominal pressure";
      parameter Modelica.SIunits.PressureDifference dp2_chi_nominal = 0.31*100000
        "Nominal pressure";
        parameter Real V_flow_evap_set = 500 "Set point volume flow rate";

      Fluid.Chillers.ElectricReformulatedEIR electricReformulatedEIR(
        redeclare package Medium1 =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
        redeclare package Medium2 = Buildings.Media.Water,
        m1_flow_nominal=m_flow_chi_cond_nominal,
        m2_flow_nominal=m_flow_chi_evap_nominal,
        dp1_nominal=dp1_chi_nominal,
        dp2_nominal=dp2_chi_nominal,
        per=per)
        annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
      Modelica.Blocks.Interfaces.BooleanInput u
        annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
      Fluid.Sensors.TemperatureTwoPort TT211(redeclare package Medium =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water, m_flow_nominal=m_flow_chi_cond_nominal,
        T_start=278.15)
        annotation (Placement(transformation(extent={{30,50},{50,70}})));
      Fluid.Sensors.TemperatureTwoPort TT111(redeclare package Medium =
            Buildings.Media.Water,           m_flow_nominal=m_flow_chi_evap_nominal)
        annotation (Placement(transformation(extent={{-60,-70},{-80,-50}})));
      Fluid.Sensors.MassFlowRate senMasFlo(redeclare package Medium =
            Buildings.Media.Water)         annotation (Placement(transformation(
            extent={{10,-10},{-10,10}},
            rotation=270,
            origin={20,-30})));
      Controls.Continuous.LimPID FT_PID(k=4, Ti=10)
        annotation (Placement(transformation(extent={{70,-10},{90,10}})));
      Fluid.Actuators.Valves.TwoWayLinear CV121(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal=m_flow_chi_evap_nominal,
        dpValve_nominal=5000,
        use_inputFilter=false)
        annotation (Placement(transformation(extent={{-30,-70},{-50,-50}})));
      Fluid.Actuators.Valves.TwoWayLinear CV211(
        redeclare package Medium =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
        m_flow_nominal=900*1025/3600,
        CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
        dpValve_nominal=5000,
        use_inputFilter=false)
        annotation (Placement(transformation(extent={{70,50},{90,70}})));
      Modelica.Blocks.Sources.RealExpression T_set_evap(y=T_cons)
        annotation (Placement(transformation(extent={{-80,20},{-60,40}})));
      Modelica.Blocks.Sources.RealExpression FT121_set(y=V_flow_evap_set*1025/3600)
        annotation (Placement(transformation(extent={{40,-10},{60,10}})));
      Modelica.Blocks.Interfaces.RealOutput y annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={0,-110})));
      Controls.Continuous.LimPID TT_PID(k=4, Ti=10)
        annotation (Placement(transformation(extent={{-10,80},{10,100}})));
    equation
      connect(u, electricReformulatedEIR.on) annotation (Line(points={{-120,0},
              {-80,0},{-80,3},{-12,3}},  color={255,0,255}));
      connect(electricReformulatedEIR.port_b1,TT211. port_a) annotation (Line(
            points={{10,6},{20,6},{20,60},{30,60}}, color={0,127,255}));
      connect(port_b2,TT111. port_b)
        annotation (Line(points={{-100,-60},{-80,-60}}, color={0,127,255}));
      connect(electricReformulatedEIR.port_a2, senMasFlo.port_b)
        annotation (Line(points={{10,-6},{20,-6},{20,-20}}, color={0,127,255}));

      connect(senMasFlo.m_flow, FT_PID.u_m) annotation (Line(points={{31,-30},{80,-30},
              {80,-12}},          color={0,0,127}));
      connect(TT211.port_b, CV211.port_a)
        annotation (Line(points={{50,60},{70,60}}, color={0,127,255}));
      connect(CV211.port_b, port_b1)
        annotation (Line(points={{90,60},{100,60}}, color={0,127,255}));
      connect(electricReformulatedEIR.port_a1, port_a1) annotation (Line(points={{-10,
              6},{-40,6},{-40,60},{-100,60}}, color={0,127,255}));
      connect(T_set_evap.y, electricReformulatedEIR.TSet) annotation (Line(points={{-59,30},
              {-50,30},{-50,-3},{-12,-3}},           color={0,0,127}));
      connect(FT_PID.u_s, FT121_set.y)
        annotation (Line(points={{68,0},{61,0}}, color={0,0,127}));
      connect(TT111.port_a, CV121.port_b)
        annotation (Line(points={{-60,-60},{-50,-60}}, color={0,127,255}));
      connect(CV121.port_a, electricReformulatedEIR.port_b2) annotation (Line(
            points={{-30,-60},{-20,-60},{-20,-6},{-10,-6}}, color={0,127,255}));
      connect(senMasFlo.port_a, port_a2) annotation (Line(points={{20,-40},{20,
              -60},{100,-60}}, color={0,127,255}));
      connect(FT_PID.y, CV121.y) annotation (Line(points={{91,0},{100,0},{100,
              -44},{-40,-44},{-40,-48}}, color={0,0,127}));
      connect(senMasFlo.m_flow, y) annotation (Line(points={{31,-30},{40,-30},{
              40,-80},{0,-80},{0,-110}}, color={0,0,127}));
      connect(TT111.T, TT_PID.u_s) annotation (Line(points={{-70,-49},{-70,-32},
              {-140,-32},{-140,90},{-12,90}}, color={0,0,127}));
      connect(T_set_evap.y, TT_PID.u_m)
        annotation (Line(points={{-59,30},{0,30},{0,78}}, color={0,0,127}));
      connect(TT_PID.y, CV211.y)
        annotation (Line(points={{11,90},{80,90},{80,72}}, color={0,0,127}));
      annotation (Icon(graphics={
            Rectangle(
              extent={{0,-54},{100,-66}},
              lineColor={0,0,255},
              pattern=LinePattern.None,
              fillColor={0,0,255},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-100,-66},{0,-54}},
              lineColor={0,0,127},
              pattern=LinePattern.None,
              fillColor={0,0,127},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-100,54},{0,66}},
              lineColor={0,0,255},
              pattern=LinePattern.None,
              fillColor={255,170,85},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{0,54},{100,66}},
              lineColor={0,0,255},
              pattern=LinePattern.None,
              fillColor={238,46,47},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-20,40},{20,-20}},
              lineColor={28,108,200},
              lineThickness=1,
              fillColor={28,108,200},
              fillPattern=FillPattern.Solid),
            Polygon(
              points={{-40,-20},{40,-20},{0,-54},{-40,-20}},
              lineColor={28,108,200},
              lineThickness=1,
              fillColor={28,108,200},
              fillPattern=FillPattern.Solid)}));
    end Chiller_simple;
  end GF;

  package PEM
  model pem
  extends Buildings.Fluid.Interfaces.PartialTwoPortInterface;

    Fluid.Sources.Boundary_pT sea_water(
        redeclare package Medium =
          Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
        use_p_in=false,
        p(displayUnit="bar") = 100000,
        use_T_in=true,
        T=293.15,
      nPorts=7) "Boundary condition for flow source" annotation (Placement(
          transformation(
          extent={{-10,-10},{10,10}},
          rotation=0,
          origin={-150,-50})));
    Fluid.Movers.SpeedControlled_y fan1[5](redeclare package Medium =
          Buildings.Applications.DHC_Thassalia.Media.Sea_Water, redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm per)
             annotation (Placement(transformation(extent={{-70,-70},{-50,-50}})));
    Buildings.Fluid.Sensors.RelativePressure
                                   senRelPre(redeclare package Medium =
          Buildings.Applications.DHC_Thassalia.Media.Sea_Water)
      annotation (Placement(transformation(extent={{-30,-30},{-10,-10}})));
    Controls_a.PEM.control_pumps control_pumps
      annotation (Placement(transformation(extent={{-20,20},{0,40}})));
    Fluid.Sensors.TemperatureTwoPort TT200(redeclare package Medium =
          Buildings.Applications.DHC_Thassalia.Media.Sea_Water, m_flow_nominal=3600
          *1020/3600)
      annotation (Placement(transformation(extent={{70,-70},{90,-50}})));
    Fluid.Sensors.VolumeFlowRate FQT200(redeclare package Medium =
          Buildings.Applications.DHC_Thassalia.Media.Sea_Water, m_flow_nominal=3600*1020/3600)
      annotation (Placement(transformation(extent={{40,-70},{60,-50}})));
      Controls_a.PEM.PID_PEM pID_PEM
        annotation (Placement(transformation(extent={{-60,20},{-40,40}})));
    Fluid.FixedResistances.CheckValve cheVal[5](
      redeclare package Medium =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
      m_flow_nominal=720*1025/3600,
      dpValve_nominal=3000,
        dpValve_closing(displayUnit="Pa"))
      annotation (Placement(transformation(extent={{-40,-70},{-20,-50}})));
    Filters.filtrer_dp filtrer_dp(redeclare package Medium =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water, m_flow_nominal=50)
      annotation (Placement(transformation(extent={{0,-70},{20,-50}})));
    Fluid.Sensors.TemperatureTwoPort TT201(redeclare package Medium =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water, m_flow_nominal=3600*1020/3600)
        annotation (Placement(transformation(extent={{-100,-80},{-120,-60}})));
      Modelica.Blocks.Interfaces.RealOutput PEM_TT200
        annotation (Placement(transformation(extent={{100,40},{120,60}})));
      Modelica.Blocks.Interfaces.RealInput T_sea
        annotation (Placement(transformation(extent={{-140,30},{-100,70}})));
  equation
  for k in 1:5 loop
    connect(cheVal[k].port_b, filtrer_dp.port_a)
      annotation (Line(points={{-20,-60},{0,-60}}, color={0,127,255}));
  end for;
    connect(control_pumps.pump_y, fan1.y)
      annotation (Line(points={{1,30},{10,30},{10,0},{-60,0},{-60,-48}},
                                                            color={0,0,127}));
    connect(fan1.y_actual, control_pumps.pump_opening) annotation (Line(points={{-49,-53},
              {-40,-53},{-40,-6},{20,-6},{20,60},{-30,60},{-30,38},{-22,38}},
                                                                      color={0,0,127}));

    connect(senRelPre.port_a, sea_water.ports[1]) annotation (Line(points={{-30,-20},
              {-68,-20},{-68,-46.5714},{-140,-46.5714}},
                                                     color={0,127,255}));
    connect(sea_water.ports[2:6], fan1.port_a) annotation (Line(points={{-140,
              -52.2857},{-76,-52.2857},{-76,-60},{-70,-60}},
                                             color={0,127,255}));

    connect(TT200.port_b, port_b)
      annotation (Line(points={{90,-60},{100,-60},{100,0}}, color={0,127,255}));
    connect(TT200.port_a, FQT200.port_b)
      annotation (Line(points={{70,-60},{60,-60}}, color={0,127,255}));
      connect(senRelPre.p_rel, pID_PEM.P) annotation (Line(points={{-20,-29},{
              -20,-40},{40,-40},{40,70},{-70,70},{-70,35},{-62,35}},
                                                                 color={0,0,127}));
      connect(FQT200.V_flow, pID_PEM.v_flow) annotation (Line(points={{50,-49},
              {50,80},{-80,80},{-80,25},{-62,25}}, color={0,0,127}));
      connect(pID_PEM.y, control_pumps.pid) annotation (Line(points={{-39,30},{
              -30,30},{-30,22},{-22,22}}, color={0,0,127}));
    connect(fan1.port_b, cheVal.port_a)
      annotation (Line(points={{-50,-60},{-40,-60}}, color={0,127,255}));

    connect(filtrer_dp.port_b, FQT200.port_a)
      annotation (Line(points={{20,-60},{40,-60}}, color={0,127,255}));
      connect(senRelPre.port_b, filtrer_dp.port_a) annotation (Line(points={{
              -10,-20},{-6,-20},{-6,-60},{0,-60}}, color={0,127,255}));
      connect(port_a, TT201.port_a) annotation (Line(points={{-100,0},{-86,0},{
              -86,-70},{-100,-70}}, color={0,127,255}));
      connect(TT201.port_b, sea_water.ports[7]) annotation (Line(points={{-120,
              -70},{-127,-70},{-127,-53.4286},{-140,-53.4286}}, color={0,127,
              255}));
      connect(TT200.T, PEM_TT200) annotation (Line(points={{80,-49},{80,50},{
              110,50}},  color={0,0,127}));
      connect(T_sea, sea_water.T_in) annotation (Line(points={{-120,50},{-90,50},
              {-90,20},{-170,20},{-170,-46},{-162,-46}},      color={0,0,127}));
      annotation (Icon(graphics={
          Rectangle(
            extent={{-100,16},{100,-16}},
            lineColor={0,0,0},
            fillColor={0,127,255},
            fillPattern=FillPattern.HorizontalCylinder),
          Ellipse(
            extent={{-58,58},{58,-58}},
            lineColor={0,0,0},
            fillPattern=FillPattern.Sphere,
            fillColor={0,100,199}),
          Polygon(
            points={{0,50},{0,-50},{54,0},{0,50}},
            lineColor={0,0,0},
            pattern=LinePattern.None,
            fillPattern=FillPattern.HorizontalCylinder,
            fillColor={255,255,255}),
          Ellipse(
            extent={{4,16},{36,-16}},
            lineColor={0,0,0},
            fillPattern=FillPattern.Sphere,
            visible=energyDynamics <> Modelica.Fluid.Types.Dynamics.SteadyState,
            fillColor={0,100,199})}));
  end pem;
    extends Modelica.Icons.VariantsPackage;

    model pem_simple
    extends Buildings.Fluid.Interfaces.PartialTwoPort;

    parameter Real DP(final unit="Pa")=18700;
      Fluid.Sensors.MassFlowRate FQT200(redeclare package Medium =
            Media.Sea_Water)
        annotation (Placement(transformation(extent={{40,-10},{20,10}})));
      Fluid.Movers.FlowControlled_dp fan(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal=720/3.6,
        redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
        inputType=Buildings.Fluid.Types.InputType.Constant,
        addPowerToMedium=false,
        dp_nominal(displayUnit="bar") = 200000,
        constantHead(displayUnit="bar") = DP)
        annotation (Placement(transformation(extent={{-20,-10},{0,10}})));
      Fluid.Sources.Boundary_pT sea_water(
        redeclare package Medium = Media.Sea_Water,
        p=100000,
        use_T_in=true,
        nPorts=2) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={-40,-30})));
      Fluid.Sensors.TemperatureTwoPort TT200(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=190/3.6)
        annotation (Placement(transformation(extent={{80,-10},{60,10}})));
      Fluid.Sensors.TemperatureTwoPort TT201(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=190/3.6)
        annotation (Placement(transformation(extent={{-80,-10},{-60,10}})));
        Modelica.Blocks.Interfaces.RealInput T_sea
          annotation (Placement(transformation(extent={{-140,30},{-100,70}})));
        Modelica.Blocks.Interfaces.RealOutput PEM_TT200
          annotation (Placement(transformation(extent={{100,40},{120,60}})));
    equation
      connect(port_a, TT201.port_a)
        annotation (Line(points={{-100,0},{-80,0}}, color={0,127,255}));
      connect(TT201.port_b, sea_water.ports[1]) annotation (Line(points={{-60,0},
              {-42,0},{-42,-20}}, color={0,127,255}));
      connect(sea_water.ports[2], fan.port_a) annotation (Line(points={{-38,-20},
              {-38,0},{-20,0}}, color={0,127,255}));
      connect(FQT200.port_a, TT200.port_b)
        annotation (Line(points={{40,0},{60,0}}, color={0,127,255}));
      connect(port_b, TT200.port_a)
        annotation (Line(points={{100,0},{80,0}}, color={0,127,255}));
      connect(T_sea, sea_water.T_in) annotation (Line(points={{-120,50},{-92,50},
              {-92,20},{-120,20},{-120,-60},{-44,-60},{-44,-42}},
                         color={0,0,127}));
      connect(TT200.T, PEM_TT200) annotation (Line(points={{70,11},{70,50},{110,
              50}},               color={0,0,127}));
      connect(fan.port_b, FQT200.port_b)
        annotation (Line(points={{0,0},{20,0}}, color={0,127,255}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
            Rectangle(
              extent={{-100,20},{100,-12}},
              lineColor={0,0,0},
              fillColor={0,127,255},
              fillPattern=FillPattern.HorizontalCylinder),
            Ellipse(
              extent={{-58,62},{58,-54}},
              lineColor={0,0,0},
              fillPattern=FillPattern.Sphere,
              fillColor={0,100,199}),
            Polygon(
              points={{0,54},{0,-46},{54,4},{0,54}},
              lineColor={0,0,0},
              pattern=LinePattern.None,
              fillPattern=FillPattern.HorizontalCylinder,
              fillColor={255,255,255}),
            Ellipse(
              extent={{4,20},{36,-12}},
              lineColor={0,0,0},
              fillPattern=FillPattern.Sphere,
              visible=energyDynamics <> Modelica.Fluid.Types.Dynamics.SteadyState,
              fillColor={0,100,199})}),                              Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end pem_simple;

    package Filters

      model filtrer_dp
        extends Buildings.Fluid.Interfaces.PartialTwoPortInterface;

      equation

        dp = Buildings.Applications.DHC_Thassalia.PEM.Filters.filter_function(
          m_flow=m_flow);

        // Isenthalpic state transformation (no storage and no loss of energy)
        port_a.h_outflow = if allowFlowReversal then inStream(port_b.h_outflow) else Medium.h_default;
        port_b.h_outflow = inStream(port_a.h_outflow);

        // Mass balance (no storage)
        port_a.m_flow + port_b.m_flow = 0;

        // Transport of substances
        port_a.Xi_outflow = if allowFlowReversal then inStream(port_b.Xi_outflow) else Medium.X_default[1:Medium.nXi];
        port_b.Xi_outflow = inStream(port_a.Xi_outflow);

        port_a.C_outflow = if allowFlowReversal then inStream(port_b.C_outflow) else zeros(Medium.nC);
        port_b.C_outflow = inStream(port_a.C_outflow);

        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                Polygon(
                points={{-80,80},{-80,-80},{80,-60},{80,60},{-80,80}},
                lineColor={28,108,200},
                fillColor={28,108,200},
                fillPattern=FillPattern.None,
                lineThickness=1),
              Rectangle(
                extent={{-60,20},{20,-20}},
                lineColor={28,108,200},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{20,40},{20,-40},{60,0},{20,40}},
                lineColor={28,108,200},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid)}),                      Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end filtrer_dp;

      model filtrer_dp_linear
        extends Buildings.Fluid.Interfaces.PartialTwoPortInterface;

      equation

        dp =
          Buildings.Applications.DHC_Thassalia.PEM.Filters.filter_function_linear(
          m_flow=m_flow);

        // Isenthalpic state transformation (no storage and no loss of energy)
        port_a.h_outflow = if allowFlowReversal then inStream(port_b.h_outflow) else Medium.h_default;
        port_b.h_outflow = inStream(port_a.h_outflow);

        // Mass balance (no storage)
        port_a.m_flow + port_b.m_flow = 0;

        // Transport of substances
        port_a.Xi_outflow = if allowFlowReversal then inStream(port_b.Xi_outflow) else Medium.X_default[1:Medium.nXi];
        port_b.Xi_outflow = inStream(port_a.Xi_outflow);

        port_a.C_outflow = if allowFlowReversal then inStream(port_b.C_outflow) else zeros(Medium.nC);
        port_b.C_outflow = inStream(port_a.C_outflow);

        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                Polygon(
                points={{-80,80},{-80,-80},{80,-60},{80,60},{-80,80}},
                lineColor={28,108,200},
                fillColor={28,108,200},
                fillPattern=FillPattern.None,
                lineThickness=1),
              Rectangle(
                extent={{-60,20},{20,-20}},
                lineColor={28,108,200},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{20,40},{20,-40},{60,0},{20,40}},
                lineColor={28,108,200},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid)}),                      Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end filtrer_dp_linear;

    function filter_function_linear
      "Function that computes pressure drop for given mass flow rate"

      input Modelica.SIunits.MassFlowRate m_flow
        "Mass flow rate in design flow direction";
      output Modelica.SIunits.PressureDifference dp(displayUnit="Pa")
        "Pressure difference between port_a and port_b (= port_a.p - port_b.p)";

    algorithm
     dp := smooth(2, if noEvent(m_flow>300*1025/3600)
          then 16.72473868 * m_flow + 53571.42857
     else
         0.088254088 * (m_flow)^3 - 22.61511005 * (m_flow)^2 + 1931.707317 * m_flow);

    end filter_function_linear;

    function filter_function
      "Function that computes pressure drop for given mass flow rate"

      input Modelica.SIunits.MassFlowRate m_flow
        "Mass flow rate in design flow direction";
      output Modelica.SIunits.PressureDifference dp(displayUnit="Pa")
        "Pressure difference between port_a and port_b (= port_a.p - port_b.p)";

    algorithm
     dp := smooth(2, if noEvent(m_flow>300*1025/3600)
          then 0.027971688 * (m_flow)^2 - 4.778496765 * m_flow + 55204.08163
     else
         0.088254088 * (m_flow)^3 - 22.61511005 * (m_flow)^2 + 1931.707317 * m_flow);

    end filter_function;

    package Tests
      extends Modelica.Icons.ExamplesPackage;
      model test_filter
        filtrer_dp filtrer_1_1(redeclare package Medium = Buildings.Media.Water,
            m_flow_nominal=200)
          annotation (Placement(transformation(extent={{0,20},{20,40}})));
        Fluid.Sources.Boundary_pT bou(
          redeclare package Medium = Buildings.Media.Water,
            p=100000,
            nPorts=1)
                    annotation (Placement(transformation(extent={{100,20},{80,
                    40}})));
        Fluid.Sources.MassFlowSource_T boundary(
          redeclare package Medium = Buildings.Media.Water,
          use_m_flow_in=true,
          m_flow=50,
          nPorts=1)
          annotation (Placement(transformation(extent={{-40,20},{-20,40}})));
        Modelica.Blocks.Sources.Ramp ramp(
            height=2400*1025/3600,
          duration=2000,
          startTime=500)
          annotation (Placement(transformation(extent={{-100,20},{-80,40}})));
      equation
        connect(boundary.ports[1], filtrer_1_1.port_a)
          annotation (Line(points={{-20,30},{0,30}},   color={0,127,255}));
        connect(ramp.y, boundary.m_flow_in) annotation (Line(points={{-79,30},{
                  -58,30},{-58,38},{-42,38}},
                                          color={0,0,127}));
          connect(filtrer_1_1.port_b, bou.ports[1]) annotation (Line(points={{
                  20,30},{50,30},{50,30},{80,30}}, color={0,127,255}));
        annotation (
          Icon(coordinateSystem(preserveAspectRatio=false)),
          Diagram(coordinateSystem(preserveAspectRatio=false)),
          experiment(StopTime=3000, __Dymola_Algorithm="Dassl"));
      end test_filter;

      model test_filter_sea_water
        filtrer_dp filtrer_1_1(redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
            m_flow_nominal=200)
          annotation (Placement(transformation(extent={{0,20},{20,40}})));
        Fluid.Sources.Boundary_pT bou(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
            p=100000,
            nPorts=2)
                    annotation (Placement(transformation(extent={{100,20},{80,
                    40}})));
        Fluid.Sources.MassFlowSource_T boundary(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          use_m_flow_in=true,
          m_flow=50,
          nPorts=1)
          annotation (Placement(transformation(extent={{-40,20},{-20,40}})));
        Modelica.Blocks.Sources.Ramp ramp(
          height=2400*1025/3600,
          duration=2000,
          startTime=500)
          annotation (Placement(transformation(extent={{-100,20},{-80,40}})));
        filtrer_dp_linear filtrer_dp_linear1(redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
              m_flow_nominal=200)
          annotation (Placement(transformation(extent={{0,-20},{20,0}})));
        Fluid.Sources.MassFlowSource_T boundary1(
            redeclare package Medium = Media.Sea_Water,
            use_m_flow_in=true,
            m_flow=50,
            nPorts=1)
          annotation (Placement(transformation(extent={{-40,-20},{-20,0}})));
      equation
        connect(boundary.ports[1], filtrer_1_1.port_a)
          annotation (Line(points={{-20,30},{-10,30},{-10,30},{0,30}},
                                                       color={0,127,255}));
        connect(ramp.y, boundary.m_flow_in) annotation (Line(points={{-79,30},{
                  -58,30},{-58,38},{-42,38}},
                                          color={0,0,127}));
          connect(filtrer_1_1.port_b, bou.ports[1]) annotation (Line(points={{20,30},{
                50,30},{50,32},{80,32}},           color={0,127,255}));
        connect(filtrer_dp_linear1.port_b, bou.ports[2]) annotation (Line(points={{20,
                -10},{50,-10},{50,28},{80,28}}, color={0,127,255}));
          connect(boundary1.ports[1], filtrer_dp_linear1.port_a)
            annotation (Line(points={{-20,-10},{0,-10}}, color={0,127,255}));
          connect(ramp.y, boundary1.m_flow_in) annotation (Line(points={{-79,30},
                  {-62,30},{-62,-2},{-42,-2}}, color={0,0,127}));
        annotation (
          Icon(coordinateSystem(preserveAspectRatio=false)),
          Diagram(coordinateSystem(preserveAspectRatio=false)),
          experiment(StopTime=3000, __Dymola_Algorithm="Dassl"));
      end test_filter_sea_water;
    end Tests;
    end Filters;

    package Tests
      extends Modelica.Icons.ExamplesPackage;

    model compare_archi1
      Fluid.Sources.Boundary_pT sea_water(
          redeclare package Medium =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          use_p_in=false,
          p(displayUnit="bar") = 100000,
          T=293.15,
          nPorts=7)
                  "Boundary condition for flow source" annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-90,30})));
      Fluid.Actuators.Valves.TwoWayLinear val1[5](
        redeclare package Medium =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
        m_flow_nominal=720*1025/3600,
        dpValve_nominal=1000,
          riseTime=30,
        y_start=0)
        annotation (Placement(transformation(extent={{0,58},{20,78}})));
      Fluid.Movers.SpeedControlled_y fan1[5](redeclare package Medium =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water, redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm per)
               annotation (Placement(transformation(extent={{-40,58},{-20,78}})));
      Buildings.Fluid.FixedResistances.PressureDrop filters(
        redeclare package Medium =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
        m_flow_nominal=747.6*1025/3600,
        dp_nominal=65900)
        annotation (Placement(transformation(extent={{60,10},{80,-10}})));
      Buildings.Fluid.Sensors.RelativePressure
                                     senRelPre(redeclare package Medium =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water)
        annotation (Placement(transformation(extent={{0,120},{20,140}})));
      Controls_a.PEM.control_pumps control_pumps
        annotation (Placement(transformation(extent={{-100,86},{-80,106}})));
      Controls.Continuous.LimPID           conPID(
        Td=1,
        k=0.5,
        Ti=15,
        reverseActing=true)
               annotation (Placement(transformation(extent={{-140,80},{-120,100}})));
      Modelica.Blocks.Math.Gain gain1(k=-1)
        annotation (Placement(transformation(extent={{-180,40},{-160,60}})));
      Modelica.Blocks.Sources.Constant const2(k=287000)
        annotation (Placement(transformation(extent={{-180,80},{-160,100}})));
      Fluid.Sources.Boundary_pT sea_water1(
          redeclare package Medium = Media.Sea_Water,
          use_p_in=false,
          p(displayUnit="bar") = 100000,
          T=293.15,
          nPorts=7)
                  "Boundary condition for flow source" annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-90,-150})));
      Fluid.Actuators.Valves.TwoWayLinear val2(
          redeclare package Medium = Media.Sea_Water,
          m_flow_nominal=720*1025/3600,
          dpValve_nominal=1000,
          riseTime=30,
          y_start=0)
        annotation (Placement(transformation(extent={{0,-122},{20,-102}})));
      Fluid.Movers.SpeedControlled_y fan2(redeclare package Medium =
              Media.Sea_Water, redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm
            per)
               annotation (Placement(transformation(extent={{-40,-122},{-20,
                  -102}})));
      Fluid.Actuators.Valves.TwoWayLinear val3(
          redeclare package Medium = Media.Sea_Water,
          m_flow_nominal=720*1025/3600,
          dpValve_nominal=1000,
          riseTime=30,
          y_start=0)
        annotation (Placement(transformation(extent={{0,-162},{20,-142}})));
      Fluid.Movers.SpeedControlled_y fan3(redeclare package Medium =
              Media.Sea_Water, redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm
            per)
               annotation (Placement(transformation(extent={{-40,-162},{-20,
                  -142}})));
      Fluid.Actuators.Valves.TwoWayLinear val4(
          redeclare package Medium = Media.Sea_Water,
          m_flow_nominal=720*1025/3600,
          dpValve_nominal=1000,
          riseTime=30,
          y_start=0)
        annotation (Placement(transformation(extent={{0,-202},{20,-182}})));
      Fluid.Movers.SpeedControlled_y fan4(redeclare package Medium =
              Media.Sea_Water, redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm
            per)
               annotation (Placement(transformation(extent={{-40,-202},{-20,
                  -182}})));
      Fluid.Actuators.Valves.TwoWayLinear val5(
          redeclare package Medium = Media.Sea_Water,
          m_flow_nominal=720*1025/3600,
          dpValve_nominal=1000,
          riseTime=30,
          y_start=0)
        annotation (Placement(transformation(extent={{0,-242},{20,-222}})));
      Fluid.Movers.SpeedControlled_y fan5(redeclare package Medium =
              Media.Sea_Water, redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm
            per)
               annotation (Placement(transformation(extent={{-40,-242},{-20,
                  -222}})));
      Fluid.FixedResistances.PressureDrop           filters1(
          redeclare package Medium = Media.Sea_Water,
          m_flow_nominal=747.6*1025/3600,
          dp_nominal=65900)
        annotation (Placement(transformation(extent={{60,-170},{80,-190}})));
      Fluid.Sensors.RelativePressure senRelPre1(redeclare package Medium =
              Media.Sea_Water)
        annotation (Placement(transformation(extent={{0,-60},{20,-40}})));
      Fluid.Movers.SpeedControlled_y fan6(redeclare package Medium =
              Media.Sea_Water, redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm
            per)
               annotation (Placement(transformation(extent={{-40,-280},{-20,
                  -260}})));
      Fluid.Actuators.Valves.TwoWayLinear val6(
          redeclare package Medium = Media.Sea_Water,
          m_flow_nominal=720*1025/3600,
          dpValve_nominal=1000,
          riseTime=30,
          y_start=0)
        annotation (Placement(transformation(extent={{0,-280},{20,-260}})));
      Controls_a.PEM.control_pumps control_pumps1
        annotation (Placement(transformation(extent={{-100,-94},{-80,-74}})));
      Controls.Continuous.LimPID           conPID1(
          Td=1,
          k=0.5,
          Ti=15,
          reverseActing=true)
               annotation (Placement(transformation(extent={{-140,-100},{-120,
                  -80}})));
      Modelica.Blocks.Math.Gain gain2(k=-1)
        annotation (Placement(transformation(extent={{-180,-140},{-160,-120}})));
      Modelica.Blocks.Sources.Constant const1(k=287000)
        annotation (Placement(transformation(extent={{-180,-100},{-160,-80}})));
    equation
    for k in 1:5 loop
      connect(val1[k].port_b,filters.port_a);
    end for;
      connect(const2.y, conPID.u_s)
        annotation (Line(points={{-159,90},{-142,90}}, color={0,0,127}));
      connect(gain1.y, conPID.u_m)
        annotation (Line(points={{-159,50},{-130,50},{-130,78}}, color={0,0,127}));
      connect(senRelPre.p_rel, gain1.u) annotation (Line(points={{10,121},{10,112},
                {-194,112},{-194,50},{-182,50}},
                                               color={0,0,127}));
        connect(conPID.y, control_pumps.pid) annotation (Line(points={{-119,90},{
                -110,90},{-110,88},{-102,88}}, color={0,0,127}));
        connect(senRelPre.port_b, filters.port_a) annotation (Line(points={{20,
                130},{30,130},{30,0},{60,0}}, color={0,127,255}));
      connect(control_pumps.pump_y, fan1.y)
        annotation (Line(points={{-79,96},{-30,96},{-30,80}}, color={0,0,127}));
      connect(control_pumps.valve_open, val1.y)
        annotation (Line(points={{-79,105},{10,105},{10,80}}, color={0,0,127}));
      connect(fan1.y_actual, control_pumps.pump_opening) annotation (Line(points={{-19,
              75},{-10,75},{-10,110},{-110,110},{-110,104},{-102,104}}, color={0,0,127}));
      connect(fan1.port_b, val1.port_a)
        annotation (Line(points={{-20,68},{0,68}}, color={0,127,255}));

        connect(filters.port_b, sea_water.ports[1]) annotation (Line(points={{80,0},{
                100,0},{100,-20},{-74,-20},{-74,33.4286},{-80,33.4286}},
              color={0,127,255}));
        connect(senRelPre.port_a, sea_water.ports[2]) annotation (Line(points={{0,130},
                {-68,130},{-68,32.2857},{-80,32.2857}},         color={0,127,
                255}));
        connect(sea_water.ports[3:7], fan1.port_a) annotation (Line(points={{-80,
                26.5714},{-60,26.5714},{-60,68},{-40,68}},     color={0,127,255}));
      connect(fan2.port_b,val2. port_a)
        annotation (Line(points={{-20,-112},{0,-112}},
                                                   color={0,127,255}));
      connect(fan3.port_b,val3. port_a)
        annotation (Line(points={{-20,-152},{0,-152}},
                                                   color={0,127,255}));
      connect(fan5.port_b,val5. port_a)
        annotation (Line(points={{-20,-232},{0,-232}},
                                                     color={0,127,255}));
      connect(fan4.port_b,val4. port_a)
        annotation (Line(points={{-20,-192},{0,-192}},
                                                     color={0,127,255}));
        connect(sea_water1.ports[1], fan2.port_a) annotation (Line(points={{-80,
                -146.571},{-60,-146.571},{-60,-112},{-40,-112}}, color={0,127,
                255}));
        connect(sea_water1.ports[2], fan3.port_a) annotation (Line(points={{-80,
                -147.714},{-60,-147.714},{-60,-152},{-40,-152}}, color={0,127,
                255}));
        connect(sea_water1.ports[3], fan4.port_a) annotation (Line(points={{-80,
                -148.857},{-80,-154},{-60,-154},{-60,-192},{-40,-192}}, color={
                0,127,255}));
        connect(sea_water1.ports[4], fan5.port_a) annotation (Line(points={{-80,
                -150},{-60,-150},{-60,-232},{-40,-232}}, color={0,127,255}));
        connect(val2.port_b, filters1.port_a) annotation (Line(points={{20,-112},
                {40,-112},{40,-180},{60,-180}}, color={0,127,255}));
        connect(val3.port_b, filters1.port_a) annotation (Line(points={{20,-152},
                {40,-152},{40,-180},{60,-180}}, color={0,127,255}));
        connect(val4.port_b, filters1.port_a) annotation (Line(points={{20,-192},
                {40,-192},{40,-180},{60,-180}}, color={0,127,255}));
        connect(val5.port_b, filters1.port_a) annotation (Line(points={{20,-232},
                {40,-232},{40,-180},{60,-180}}, color={0,127,255}));
        connect(sea_water1.ports[5], fan6.port_a) annotation (Line(points={{-80,
                -151.143},{-60,-151.143},{-60,-270},{-40,-270}}, color={0,127,
                255}));
      connect(fan6.port_b,val6. port_a)
        annotation (Line(points={{-20,-270},{0,-270}},
                                                     color={0,127,255}));
        connect(val6.port_b, filters1.port_a) annotation (Line(points={{20,-270},
                {40,-270},{40,-180},{60,-180}}, color={0,127,255}));
        connect(control_pumps1.pump_y[1], fan2.y) annotation (Line(points={{-79,
                -84.8},{-30,-84.8},{-30,-100}}, color={0,0,127}));
        connect(control_pumps1.pump_y[2], fan3.y) annotation (Line(points={{-79,
                -84.4},{-54,-84.4},{-54,-134},{-30,-134},{-30,-140}}, color={0,
                0,127}));
        connect(control_pumps1.pump_y[3], fan4.y) annotation (Line(points={{-79,-84},
                {-79,-94},{-54,-94},{-54,-174},{-30,-174},{-30,-180}},
              color={0,0,127}));
        connect(control_pumps1.pump_y[4], fan5.y) annotation (Line(points={{-79,
                -83.6},{-79,-94},{-54,-94},{-54,-214},{-30,-214},{-30,-220}},
              color={0,0,127}));
        connect(control_pumps1.valve_open[1], val2.y) annotation (Line(points={
                {-79,-75.8},{10,-75.8},{10,-100}}, color={0,0,127}));
        connect(control_pumps1.valve_open[2], val3.y) annotation (Line(points={
                {-79,-75.4},{-6,-75.4},{-6,-140},{10,-140}}, color={0,0,127}));
        connect(const1.y, conPID1.u_s)
          annotation (Line(points={{-159,-90},{-142,-90}}, color={0,0,127}));
        connect(gain2.y, conPID1.u_m) annotation (Line(points={{-159,-130},{
                -130,-130},{-130,-102}}, color={0,0,127}));
        connect(senRelPre1.p_rel, gain2.u) annotation (Line(points={{10,-59},{
                10,-68},{-194,-68},{-194,-130},{-182,-130}}, color={0,0,127}));
        connect(conPID1.y, control_pumps1.pid) annotation (Line(points={{-119,
                -90},{-110,-90},{-110,-92},{-102,-92}}, color={0,0,127}));
        connect(control_pumps1.valve_open[3], val4.y) annotation (Line(points={
                {-79,-75},{-6,-75},{-6,-174},{10,-174},{10,-180}}, color={0,0,
                127}));
        connect(control_pumps1.valve_open[4], val5.y) annotation (Line(points={
                {-79,-74.6},{-6,-74.6},{-6,-214},{10,-214},{10,-220}}, color={0,
                0,127}));
        connect(control_pumps1.valve_open[5], val6.y) annotation (Line(points={
                {-79,-74.2},{-6,-74.2},{-6,-254},{10,-254},{10,-258}}, color={0,
                0,127}));
        connect(control_pumps1.pump_y[5], fan6.y) annotation (Line(points={{-79,
                -83.2},{-66,-83.2},{-66,-92},{-54,-92},{-54,-254},{-30,-254},{
                -30,-258}}, color={0,0,127}));
        connect(filters1.port_b, sea_water1.ports[6]) annotation (Line(points={{80,-180},
                {100,-180},{100,-300},{-72,-300},{-72,-152.286},{-80,-152.286}},
                            color={0,127,255}));
        connect(senRelPre1.port_b, filters1.port_a) annotation (Line(points={{
                20,-50},{30,-50},{30,-180},{60,-180}}, color={0,127,255}));
        connect(senRelPre1.port_a, sea_water1.ports[7]) annotation (Line(points={{0,-50},
                {-50,-50},{-50,-153.429},{-80,-153.429}},         color={0,127,
                255}));
        connect(fan2.y_actual, control_pumps1.pump_opening[1]) annotation (Line(
              points={{-19,-105},{-14,-105},{-14,-58},{-110,-58},{-110,-77.6},{
                -102,-77.6}}, color={0,0,127}));
        connect(fan3.y_actual, control_pumps1.pump_opening[2]) annotation (Line(
              points={{-19,-145},{-14,-145},{-14,-58},{-110,-58},{-110,-76.8},{
                -102,-76.8}}, color={0,0,127}));
        connect(fan4.y_actual, control_pumps1.pump_opening[3]) annotation (Line(
              points={{-19,-185},{-14,-185},{-14,-58},{-110,-58},{-110,-76},{
                -102,-76}}, color={0,0,127}));
        connect(fan5.y_actual, control_pumps1.pump_opening[4]) annotation (Line(
              points={{-19,-225},{-14,-225},{-14,-58},{-110,-58},{-110,-75.2},{
                -102,-75.2}}, color={0,0,127}));
        connect(fan6.y_actual, control_pumps1.pump_opening[5]) annotation (Line(
              points={{-19,-263},{-14,-263},{-14,-58},{-110,-58},{-110,-74.4},{
                -102,-74.4}}, color={0,0,127}));
        annotation (Icon(graphics={
            Rectangle(
              extent={{-100,16},{100,-16}},
              lineColor={0,0,0},
              fillColor={0,127,255},
              fillPattern=FillPattern.HorizontalCylinder),
            Ellipse(
              extent={{-58,58},{58,-58}},
              lineColor={0,0,0},
              fillPattern=FillPattern.Sphere,
              fillColor={0,100,199}),
            Polygon(
              points={{0,50},{0,-50},{54,0},{0,50}},
              lineColor={0,0,0},
              pattern=LinePattern.None,
              fillPattern=FillPattern.HorizontalCylinder,
              fillColor={255,255,255}),
            Ellipse(
              extent={{4,16},{36,-16}},
              lineColor={0,0,0},
              fillPattern=FillPattern.Sphere,
              visible=energyDynamics <> Modelica.Fluid.Types.Dynamics.SteadyState,
              fillColor={0,100,199})}));
    end compare_archi1;

    model pem_test

      Fluid.Sources.Boundary_pT sea_water(
          redeclare package Medium =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          use_p_in=false,
          p(displayUnit="bar") = 100000,
        T=293.15,
        nPorts=8) "Boundary condition for flow source" annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-90,-10})));
      Fluid.Movers.SpeedControlled_y fan1[5](redeclare package Medium =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water, redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm per)
               annotation (Placement(transformation(extent={{-70,-50},{-50,-30}})));
      Buildings.Fluid.FixedResistances.PressureDrop filters(
        redeclare package Medium =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
        m_flow_nominal=720*1025/3600,
        dp_nominal=65900)
        annotation (Placement(transformation(extent={{0,-30},{20,-50}})));
      Buildings.Fluid.Sensors.RelativePressure
                                     senRelPre(redeclare package Medium =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water)
        annotation (Placement(transformation(extent={{-10,4},{10,24}})));
      Controls_a.PEM.control_pumps control_pumps
        annotation (Placement(transformation(extent={{-40,60},{-20,80}})));
      Fluid.Sensors.TemperatureTwoPort TT200(redeclare package Medium =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water, m_flow_nominal=3600
            *1020/3600)
        annotation (Placement(transformation(extent={{70,-50},{90,-30}})));
      Fluid.Sensors.VolumeFlowRate FQT200(redeclare package Medium =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water, m_flow_nominal=3600*1020/3600)
        annotation (Placement(transformation(extent={{40,-50},{60,-30}})));
        Controls_a.PEM.PID_PEM pID_PEM
          annotation (Placement(transformation(extent={{-80,60},{-60,80}})));
      Fluid.Sensors.RelativePressure senRelPre1(redeclare package Medium =
            Media.Sea_Water)
        annotation (Placement(transformation(extent={{-36,-10},{-16,10}})));
      Fluid.FixedResistances.PressureDrop           filters1(
        redeclare package Medium = Media.Sea_Water,
        m_flow_nominal=747.6*1025/3600,
        dp_nominal=65900)
        annotation (Placement(transformation(extent={{20,-60},{0,-80}})));
      Fluid.FixedResistances.CheckValve cheVal[5](
        redeclare package Medium = Media.Sea_Water,
        m_flow_nominal=720*1025/3600,
        dpValve_nominal=3000)
        annotation (Placement(transformation(extent={{-40,-50},{-20,-30}})));
    equation
    for k in 1:5 loop
      connect(cheVal[k].port_b, filters.port_a) annotation (Line(points={{-20,-40},{
              -10,-40},{-10,-40},{0,-40}}, color={0,127,255}));
    end for;
      connect(control_pumps.pump_y, fan1.y)
        annotation (Line(points={{-19,70},{-10,70},{-10,44},{-52,44},{-52,8},{
                -60,8},{-60,-28}},                            color={0,0,127}));
      connect(fan1.y_actual, control_pumps.pump_opening) annotation (Line(points={{-49,-33},
              {-46,-33},{-46,32},{10,32},{10,90},{-50,90},{-50,78},{-42,78}},
                                                                        color={0,0,127}));

      connect(senRelPre.port_a, sea_water.ports[1]) annotation (Line(points={{-10,14},
              {-68,14},{-68,-6.5},{-80,-6.5}},         color={0,127,255}));
      connect(sea_water.ports[2:6], fan1.port_a) annotation (Line(points={{-80,-11.5},
              {-76,-11.5},{-76,-40},{-70,-40}},color={0,127,255}));

      connect(TT200.port_a, FQT200.port_b)
        annotation (Line(points={{70,-40},{60,-40}}, color={0,127,255}));
      connect(filters.port_b, FQT200.port_a)
        annotation (Line(points={{20,-40},{40,-40}}, color={0,127,255}));
      connect(senRelPre.port_b, FQT200.port_a) annotation (Line(points={{10,14},{26,
              14},{26,-40},{40,-40}}, color={0,127,255}));
        connect(senRelPre.p_rel, pID_PEM.P) annotation (Line(points={{0,5},{0,0},{40,
              0},{40,100},{-88,100},{-88,75},{-82,75}},            color={0,0,127}));
        connect(FQT200.V_flow, pID_PEM.v_flow) annotation (Line(points={{50,-29},{50,
              106},{-92,106},{-92,65},{-82,65}},     color={0,0,127}));
        connect(pID_PEM.y, control_pumps.pid) annotation (Line(points={{-59,70},{-50,
              70},{-50,62},{-42,62}},       color={0,0,127}));
      connect(sea_water.ports[7], senRelPre1.port_a) annotation (Line(points={{-80,-12.5},
              {-60,-12.5},{-60,0},{-36,0}},     color={0,127,255}));
      connect(senRelPre1.port_b, filters.port_a) annotation (Line(points={{-16,0},{-10,
              0},{-10,-40},{0,-40}},         color={0,127,255}));
      connect(TT200.port_b, filters1.port_a) annotation (Line(points={{90,-40},{100,
              -40},{100,-70},{20,-70}}, color={0,127,255}));
      connect(filters1.port_b, sea_water.ports[8]) annotation (Line(points={{0,-70},
              {-80,-70},{-80,-13.5}}, color={0,127,255}));
      connect(fan1.port_b, cheVal.port_a)
        annotation (Line(points={{-50,-40},{-40,-40}}, color={0,127,255}));

        annotation (Icon(graphics={
            Rectangle(
              extent={{-100,16},{100,-16}},
              lineColor={0,0,0},
              fillColor={0,127,255},
              fillPattern=FillPattern.HorizontalCylinder),
            Ellipse(
              extent={{-58,58},{58,-58}},
              lineColor={0,0,0},
              fillPattern=FillPattern.Sphere,
              fillColor={0,100,199}),
            Polygon(
              points={{0,50},{0,-50},{54,0},{0,50}},
              lineColor={0,0,0},
              pattern=LinePattern.None,
              fillPattern=FillPattern.HorizontalCylinder,
              fillColor={255,255,255}),
            Ellipse(
              extent={{4,16},{36,-16}},
              lineColor={0,0,0},
              fillPattern=FillPattern.Sphere,
              visible=energyDynamics <> Modelica.Fluid.Types.Dynamics.SteadyState,
              fillColor={0,100,199})}));
    end pem_test;

      model essai_debit_pem
        Fluid.Sources.Boundary_pT sea_water(
          redeclare package Medium = Media.Sea_Water,
          use_p_in=false,
          p(displayUnit="bar") = 100000,
          use_T_in=false,
          T=293.15,
          nPorts=7) "Boundary condition for flow source" annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-110,-50})));
        Fluid.Movers.SpeedControlled_y fan1[5](redeclare package Medium =
              Media.Sea_Water, redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          use_inputFilter=true,
          riseTime=120)
                 annotation (Placement(transformation(extent={{-70,-70},{-50,-50}})));
        Fluid.Sensors.RelativePressure senRelPre(redeclare package Medium =
              Media.Sea_Water)
          annotation (Placement(transformation(extent={{-30,-30},{-10,-10}})));
        Controls_a.PEM.control_pumps control_pumps
          annotation (Placement(transformation(extent={{-20,20},{0,40}})));
        Fluid.Sensors.TemperatureTwoPort TT200(redeclare package Medium =
              Media.Sea_Water, m_flow_nominal=3600*1020/3600)
          annotation (Placement(transformation(extent={{70,-70},{90,-50}})));
        Fluid.Sensors.VolumeFlowRate FQT200(redeclare package Medium =
              Media.Sea_Water, m_flow_nominal=3600*1020/3600)
          annotation (Placement(transformation(extent={{40,-70},{60,-50}})));
          Controls_a.PEM.PID_PEM pID_PEM
            annotation (Placement(transformation(extent={{-60,20},{-40,40}})));
        Fluid.FixedResistances.CheckValve cheVal[5](
          redeclare package Medium = Media.Sea_Water,
          m_flow_nominal=720*1025/3600,
          dpValve_nominal=3000)
          annotation (Placement(transformation(extent={{-40,-70},{-20,-50}})));
        Filters.filtrer_dp filtrer_dp(redeclare package Medium =
              Media.Sea_Water,
            m_flow_nominal=50)
          annotation (Placement(transformation(extent={{0,-70},{20,-50}})));
          Modelica.Blocks.Interfaces.RealOutput PEM_TT200
            annotation (Placement(transformation(extent={{100,90},{120,110}})));
        Fluid.FixedResistances.PressureDrop           filters1(
          redeclare package Medium = Media.Sea_Water,
          m_flow_nominal=1000*1025/3600,
          dp_nominal=5000)
          annotation (Placement(transformation(extent={{0,-80},{-20,-100}})));
      equation
      for k in 1:5 loop
        connect(cheVal[k].port_b,filtrer_dp. port_a)
          annotation (Line(points={{-20,-60},{0,-60}}, color={0,127,255}));
      end for;
        connect(control_pumps.pump_y,fan1. y)
          annotation (Line(points={{1,30},{10,30},{10,0},{-60,0},{-60,-48}},
                                                                color={0,0,127}));
        connect(fan1.y_actual,control_pumps. pump_opening) annotation (Line(points={{-49,-53},
                {-40,-53},{-40,-6},{20,-6},{20,60},{-30,60},{-30,38},{-22,38}},
                                                                          color={0,0,127}));
        connect(senRelPre.port_a,sea_water. ports[1]) annotation (Line(points={{-30,-20},
                {-68,-20},{-68,-46.5714},{-100,-46.5714}},
                                                         color={0,127,255}));
        connect(sea_water.ports[2:6],fan1. port_a) annotation (Line(points={{-100,
                -52.2857},{-76,-52.2857},{-76,-60},{-70,-60}},
                                                 color={0,127,255}));
        connect(TT200.port_a,FQT200. port_b)
          annotation (Line(points={{70,-60},{60,-60}}, color={0,127,255}));
          connect(senRelPre.p_rel,pID_PEM. P) annotation (Line(points={{-20,-29},{-20,
                -40},{40,-40},{40,70},{-70,70},{-70,35},{-62,35}},   color={0,0,127}));
          connect(FQT200.V_flow,pID_PEM. v_flow) annotation (Line(points={{50,-49},{50,
                80},{-80,80},{-80,25},{-62,25}},       color={0,0,127}));
          connect(pID_PEM.y,control_pumps. pid) annotation (Line(points={{-39,30},{-30,
                30},{-30,22},{-22,22}},       color={0,0,127}));
        connect(fan1.port_b,cheVal. port_a)
          annotation (Line(points={{-50,-60},{-40,-60}}, color={0,127,255}));
        connect(filtrer_dp.port_b,FQT200. port_a)
          annotation (Line(points={{20,-60},{40,-60}}, color={0,127,255}));
          connect(senRelPre.port_b,filtrer_dp. port_a) annotation (Line(points={{-10,-20},
                {-6,-20},{-6,-60},{0,-60}},            color={0,127,255}));
          connect(TT200.T,PEM_TT200)  annotation (Line(points={{80,-49},{80,100},{110,
                100}},       color={0,0,127}));
        connect(TT200.port_b, filters1.port_a) annotation (Line(points={{90,-60},{100,
                -60},{100,-90},{0,-90}}, color={0,127,255}));
        connect(filters1.port_b, sea_water.ports[7]) annotation (Line(points={{-20,-90},
                {-90,-90},{-90,-53.4286},{-100,-53.4286}}, color={0,127,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end essai_debit_pem;

      model test_checkvalve
        Fluid.FixedResistances.CheckValve cheVal(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=100,
          dpValve_nominal=1000)
          annotation (Placement(transformation(extent={{0,0},{20,20}})));
        Fluid.Sources.Boundary_pT bou(
          redeclare package Medium = Buildings.Media.Water,
          T=288.15,
          nPorts=2)
          annotation (Placement(transformation(extent={{100,0},{80,20}})));
        Fluid.Movers.FlowControlled_dp fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=100,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          dp_nominal=500000)
          annotation (Placement(transformation(extent={{-40,0},{-20,20}})));
        Modelica.Blocks.Sources.Ramp ramp(
          height=600000,
          duration=500,
          startTime=200)
          annotation (Placement(transformation(extent={{-80,40},{-60,60}})));
      equation
        connect(cheVal.port_b, bou.ports[1]) annotation (Line(points={{20,10},{
                50,10},{50,12},{80,12}}, color={0,127,255}));
        connect(fan.port_b, cheVal.port_a)
          annotation (Line(points={{-20,10},{0,10}}, color={0,127,255}));
        connect(fan.port_a, bou.ports[2]) annotation (Line(points={{-40,10},{
                -60,10},{-60,-16},{66,-16},{66,8},{80,8}}, color={0,127,255}));
        connect(ramp.y, fan.dp_in) annotation (Line(points={{-59,50},{-30,50},{
                -30,22}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end test_checkvalve;
    end Tests;

  model pem_esp0
    Fluid.Sources.Boundary_pT sea_water(
        redeclare package Medium =
          Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
        use_p_in=false,
        p(displayUnit="bar") = 100000,
        T=293.15,
      nPorts=7) "Boundary condition for flow source" annotation (Placement(
          transformation(
          extent={{-10,-10},{10,10}},
          rotation=0,
          origin={-90,30})));
    Fluid.Actuators.Valves.TwoWayLinear val1(
      redeclare package Medium =
          Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
      m_flow_nominal=720*1025/3600,
      dpValve_nominal=1000,
        riseTime=30,
      y_start=0)
      annotation (Placement(transformation(extent={{0,58},{20,78}})));
    Fluid.Movers.SpeedControlled_y fan1(redeclare package Medium =
          Buildings.Applications.DHC_Thassalia.Media.Sea_Water, redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm per)
             annotation (Placement(transformation(extent={{-40,58},{-20,78}})));
    Fluid.Actuators.Valves.TwoWayLinear val2(
      redeclare package Medium =
          Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
      m_flow_nominal=720*1025/3600,
      dpValve_nominal=1000,
        riseTime=30,
      y_start=0)
      annotation (Placement(transformation(extent={{0,18},{20,38}})));
    Fluid.Movers.SpeedControlled_y fan2(redeclare package Medium =
          Buildings.Applications.DHC_Thassalia.Media.Sea_Water, redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm per)
             annotation (Placement(transformation(extent={{-40,18},{-20,38}})));
    Fluid.Actuators.Valves.TwoWayLinear val3(
      redeclare package Medium =
          Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
      m_flow_nominal=720*1025/3600,
      dpValve_nominal=1000,
        riseTime=30,
      y_start=0)
      annotation (Placement(transformation(extent={{0,-22},{20,-2}})));
    Fluid.Movers.SpeedControlled_y fan3(redeclare package Medium =
          Buildings.Applications.DHC_Thassalia.Media.Sea_Water, redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm per)
             annotation (Placement(transformation(extent={{-40,-22},{-20,-2}})));
    Fluid.Actuators.Valves.TwoWayLinear val4(
      redeclare package Medium =
          Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
      m_flow_nominal=720*1025/3600,
      dpValve_nominal=1000,
        riseTime=30,
      y_start=0)
      annotation (Placement(transformation(extent={{0,-62},{20,-42}})));
    Fluid.Movers.SpeedControlled_y fan4(redeclare package Medium =
          Buildings.Applications.DHC_Thassalia.Media.Sea_Water, redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm per)
             annotation (Placement(transformation(extent={{-40,-62},{-20,-42}})));
    Buildings.Fluid.FixedResistances.PressureDrop filters(
      redeclare package Medium =
          Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
      m_flow_nominal=747.6*1025/3600,
      dp_nominal=65900)
      annotation (Placement(transformation(extent={{60,10},{80,-10}})));
    Buildings.Fluid.Sensors.RelativePressure
                                   senRelPre(redeclare package Medium =
          Buildings.Applications.DHC_Thassalia.Media.Sea_Water)
      annotation (Placement(transformation(extent={{0,120},{20,140}})));
    Fluid.Movers.SpeedControlled_y fan5(redeclare package Medium =
          Buildings.Applications.DHC_Thassalia.Media.Sea_Water, redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm per)
             annotation (Placement(transformation(extent={{-40,-100},{-20,-80}})));
    Fluid.Actuators.Valves.TwoWayLinear val5(
      redeclare package Medium =
          Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
      m_flow_nominal=720*1025/3600,
      dpValve_nominal=1000,
        riseTime=30,
      y_start=0)
      annotation (Placement(transformation(extent={{0,-100},{20,-80}})));
    Controls_a.PEM.control_pumps control_pumps
      annotation (Placement(transformation(extent={{-100,86},{-80,106}})));
    Controls.Continuous.LimPID           conPID(
      Td=1,
      k=0.5,
      Ti=15,
      reverseActing=true)
             annotation (Placement(transformation(extent={{-140,80},{-120,100}})));
    Modelica.Blocks.Math.Gain gain1(k=-1)
      annotation (Placement(transformation(extent={{-180,40},{-160,60}})));
    Modelica.Blocks.Sources.Constant const2(k=287000)
      annotation (Placement(transformation(extent={{-180,80},{-160,100}})));
    Fluid.Sources.Boundary_pT sea_water1(
        redeclare package Medium = Media.Sea_Water,
        use_p_in=false,
        p(displayUnit="bar") = 100000,
        T=293.15,
        nPorts=7)
                "Boundary condition for flow source" annotation (Placement(
          transformation(
          extent={{-10,-10},{10,10}},
          rotation=0,
          origin={-42,-450})));
    Fluid.Actuators.Valves.TwoWayLinear val6[5](
        redeclare package Medium = Media.Sea_Water,
        m_flow_nominal=720*1025/3600,
        dpValve_nominal=1000,
        riseTime=30,
        y_start=0)
      annotation (Placement(transformation(extent={{48,-422},{68,-402}})));
    Fluid.Movers.SpeedControlled_y fan6[5](redeclare package Medium =
            Media.Sea_Water, redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm per)
             annotation (Placement(transformation(extent={{8,-422},{28,-402}})));
    Fluid.FixedResistances.PressureDrop           filters1(
        redeclare package Medium = Media.Sea_Water,
        m_flow_nominal=747.6*1025/3600,
        dp_nominal=65900)
      annotation (Placement(transformation(extent={{108,-470},{128,-490}})));
    Fluid.Sensors.RelativePressure senRelPre1(redeclare package Medium =
            Media.Sea_Water)
      annotation (Placement(transformation(extent={{48,-360},{68,-340}})));
    Controls_a.PEM.control_pumps control_pumps1
      annotation (Placement(transformation(extent={{-52,-394},{-32,-374}})));
    Controls.Continuous.LimPID           conPID1(
        Td=1,
        k=0.5,
        Ti=15,
        reverseActing=true)
             annotation (Placement(transformation(extent={{-92,-400},{-72,-380}})));
    Modelica.Blocks.Math.Gain gain2(k=-1)
      annotation (Placement(transformation(extent={{-132,-440},{-112,-420}})));
    Modelica.Blocks.Sources.Constant const1(k=287000)
      annotation (Placement(transformation(extent={{-132,-400},{-112,-380}})));
  equation
    connect(fan1.port_b, val1.port_a)
      annotation (Line(points={{-20,68},{0,68}}, color={0,127,255}));
    connect(fan2.port_b, val2.port_a)
      annotation (Line(points={{-20,28},{0,28}}, color={0,127,255}));
    connect(fan4.port_b, val4.port_a)
      annotation (Line(points={{-20,-52},{0,-52}}, color={0,127,255}));
    connect(fan3.port_b, val3.port_a)
      annotation (Line(points={{-20,-12},{0,-12}}, color={0,127,255}));
    connect(sea_water.ports[1], fan1.port_a) annotation (Line(points={{-80,
              33.4286},{-60,33.4286},{-60,68},{-40,68}},
                                              color={0,127,255}));
    connect(sea_water.ports[2], fan2.port_a) annotation (Line(points={{-80,
              32.2857},{-60,32.2857},{-60,28},{-40,28}},
                                              color={0,127,255}));
    connect(sea_water.ports[3], fan3.port_a) annotation (Line(points={{-80,
              31.1429},{-80,26},{-60,26},{-60,-12},{-40,-12}},
                                                    color={0,127,255}));
    connect(sea_water.ports[4], fan4.port_a) annotation (Line(points={{-80,30},
              {-60,30},{-60,-52},{-40,-52}},
                                      color={0,127,255}));
    connect(val1.port_b, filters.port_a) annotation (Line(points={{20,68},{40,68},
            {40,0},{60,0}}, color={0,127,255}));
    connect(val2.port_b, filters.port_a) annotation (Line(points={{20,28},{40,28},
            {40,0},{60,0}}, color={0,127,255}));
    connect(val3.port_b, filters.port_a) annotation (Line(points={{20,-12},{40,-12},
            {40,0},{60,0}}, color={0,127,255}));
    connect(val4.port_b, filters.port_a) annotation (Line(points={{20,-52},{40,-52},
            {40,0},{60,0}}, color={0,127,255}));
    connect(sea_water.ports[5], fan5.port_a) annotation (Line(points={{-80,
              28.8571},{-60,28.8571},{-60,-90},{-40,-90}},
                                                color={0,127,255}));
    connect(fan5.port_b, val5.port_a)
      annotation (Line(points={{-20,-90},{0,-90}}, color={0,127,255}));
    connect(val5.port_b, filters.port_a) annotation (Line(points={{20,-90},{40,-90},
            {40,0},{60,0}}, color={0,127,255}));
    connect(control_pumps.pump_y[1], fan1.y) annotation (Line(points={{-79,95.2},
              {-30,95.2},{-30,80}},
                                 color={0,0,127}));
    connect(control_pumps.pump_y[2], fan2.y) annotation (Line(points={{-79,95.6},
              {-54,95.6},{-54,46},{-30,46},{-30,40}},
                                              color={0,0,127}));
    connect(control_pumps.pump_y[3], fan3.y) annotation (Line(points={{-79,96},
              {-79,86},{-54,86},{-54,6},{-30,6},{-30,0}},
                                           color={0,0,127}));
    connect(control_pumps.pump_y[4], fan4.y) annotation (Line(points={{-79,96.4},
              {-79,86},{-54,86},{-54,-34},{-30,-34},{-30,-40}},
                                                   color={0,0,127}));
    connect(control_pumps.valve_open[1], val1.y) annotation (Line(points={{-79,
              104.2},{10,104.2},{10,80}},
                                 color={0,0,127}));
    connect(control_pumps.valve_open[2], val2.y) annotation (Line(points={{-79,
              104.6},{-6,104.6},{-6,40},{10,40}},
                                         color={0,0,127}));
    connect(const2.y, conPID.u_s)
      annotation (Line(points={{-159,90},{-142,90}}, color={0,0,127}));
    connect(gain1.y, conPID.u_m)
      annotation (Line(points={{-159,50},{-130,50},{-130,78}}, color={0,0,127}));
    connect(senRelPre.p_rel, gain1.u) annotation (Line(points={{10,121},{10,112},
              {-194,112},{-194,50},{-182,50}},
                                             color={0,0,127}));
      connect(conPID.y, control_pumps.pid) annotation (Line(points={{-119,90},{
              -110,90},{-110,88},{-102,88}}, color={0,0,127}));
    connect(control_pumps.valve_open[3], val3.y) annotation (Line(points={{-79,105},
              {-6,105},{-6,6},{10,6},{10,0}},
                                            color={0,0,127}));
    connect(control_pumps.valve_open[4], val4.y) annotation (Line(points={{-79,
              105.4},{-6,105.4},{-6,-34},{10,-34},{10,-40}},
                                                    color={0,0,127}));
    connect(control_pumps.valve_open[5], val5.y) annotation (Line(points={{-79,
              105.8},{-6,105.8},{-6,-74},{10,-74},{10,-78}},
                                                    color={0,0,127}));
    connect(control_pumps.pump_y[5], fan5.y) annotation (Line(points={{-79,96.8},
              {-66,96.8},{-66,88},{-54,88},{-54,-74},{-30,-74},{-30,-78}},
                                                      color={0,0,127}));
    connect(filters.port_b, sea_water.ports[6]) annotation (Line(points={{80,0},{
              100,0},{100,-120},{-72,-120},{-72,27.7143},{-80,27.7143}},
                                                                   color={0,127,255}));
      connect(senRelPre.port_b, filters.port_a) annotation (Line(points={{20,
              130},{30,130},{30,0},{60,0}}, color={0,127,255}));
      connect(senRelPre.port_a, sea_water.ports[7]) annotation (Line(points={{0,130},
              {-50,130},{-50,26.5714},{-80,26.5714}},      color={0,127,255}));
      connect(fan1.y_actual, control_pumps.pump_opening[1]) annotation (Line(
            points={{-19,75},{-14,75},{-14,122},{-110,122},{-110,102.4},{-102,
              102.4}}, color={0,0,127}));
      connect(fan2.y_actual, control_pumps.pump_opening[2]) annotation (Line(
            points={{-19,35},{-14,35},{-14,122},{-110,122},{-110,103.2},{-102,
              103.2}}, color={0,0,127}));
      connect(fan3.y_actual, control_pumps.pump_opening[3]) annotation (Line(
            points={{-19,-5},{-14,-5},{-14,122},{-110,122},{-110,104},{-102,104}},
            color={0,0,127}));
      connect(fan4.y_actual, control_pumps.pump_opening[4]) annotation (Line(
            points={{-19,-45},{-14,-45},{-14,122},{-110,122},{-110,104.8},{-102,
              104.8}}, color={0,0,127}));
      connect(fan5.y_actual, control_pumps.pump_opening[5]) annotation (Line(
            points={{-19,-83},{-14,-83},{-14,122},{-110,122},{-110,105.6},{-102,
              105.6}}, color={0,0,127}));
      connect(const1.y, conPID1.u_s)
        annotation (Line(points={{-111,-390},{-94,-390}}, color={0,0,127}));
      connect(gain2.y, conPID1.u_m) annotation (Line(points={{-111,-430},{-82,
              -430},{-82,-402}}, color={0,0,127}));
      connect(senRelPre1.p_rel, gain2.u) annotation (Line(points={{58,-359},{58,
              -368},{-146,-368},{-146,-430},{-134,-430}}, color={0,0,127}));
      connect(conPID1.y, control_pumps1.pid) annotation (Line(points={{-71,-390},
              {-62,-390},{-62,-392},{-54,-392}}, color={0,0,127}));
      connect(senRelPre1.port_b, filters1.port_a) annotation (Line(points={{68,
              -350},{78,-350},{78,-480},{108,-480}}, color={0,127,255}));
      connect(control_pumps1.pump_y, fan6.y) annotation (Line(points={{-31,-384},
              {18,-384},{18,-400}}, color={0,0,127}));
      connect(control_pumps1.valve_open, val6.y) annotation (Line(points={{-31,
              -375},{58,-375},{58,-400}}, color={0,0,127}));
      connect(fan6.y_actual, control_pumps1.pump_opening) annotation (Line(
            points={{29,-405},{38,-405},{38,-370},{-62,-370},{-62,-376},{-54,
              -376}}, color={0,0,127}));
    connect(fan6.port_b,val6. port_a)
      annotation (Line(points={{28,-412},{48,-412}},
                                                 color={0,127,255}));
      connect(filters1.port_b, sea_water1.ports[1]) annotation (Line(points={{128,
              -480},{148,-480},{148,-500},{-26,-500},{-26,-446.571},{-32,
              -446.571}}, color={0,127,255}));
      connect(senRelPre1.port_a, sea_water1.ports[2]) annotation (Line(points={{48,-350},
              {-20,-350},{-20,-447.714},{-32,-447.714}},           color={0,127,
              255}));
      connect(sea_water1.ports[3:7], fan6.port_a) annotation (Line(points={{-32,
              -453.429},{-12,-453.429},{-12,-412},{8,-412}}, color={0,127,255}));
      annotation (Icon(graphics={
          Rectangle(
            extent={{-100,16},{100,-16}},
            lineColor={0,0,0},
            fillColor={0,127,255},
            fillPattern=FillPattern.HorizontalCylinder),
          Ellipse(
            extent={{-58,58},{58,-58}},
            lineColor={0,0,0},
            fillPattern=FillPattern.Sphere,
            fillColor={0,100,199}),
          Polygon(
            points={{0,50},{0,-50},{54,0},{0,50}},
            lineColor={0,0,0},
            pattern=LinePattern.None,
            fillPattern=FillPattern.HorizontalCylinder,
            fillColor={255,255,255}),
          Ellipse(
            extent={{4,16},{36,-16}},
            lineColor={0,0,0},
            fillPattern=FillPattern.Sphere,
            visible=energyDynamics <> Modelica.Fluid.Types.Dynamics.SteadyState,
            fillColor={0,100,199})}));
  end pem_esp0;

  model pem_simplifie
  extends Buildings.Fluid.Interfaces.PartialTwoPortInterface;

  parameter Modelica.SIunits.Pressure p_pumps(displayUnit="bar",min=100000) = 187000
      "Pressure setpoint for pumps";

    Fluid.Sources.Boundary_pT sea_water(
        redeclare package Medium =
          Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
        use_p_in=false,
        p(displayUnit="bar") = 100000,
      T=293.15,
      nPorts=7) "Boundary condition for flow source" annotation (Placement(
          transformation(
          extent={{-10,-10},{10,10}},
          rotation=0,
          origin={-90,-30})));
    Fluid.Actuators.Valves.TwoWayLinear val1[5](
      redeclare package Medium =
          Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
      m_flow_nominal=720*1025/3600,
      dpValve_nominal=1000,
        riseTime=30,
      y_start=0)
      annotation (Placement(transformation(extent={{-30,-70},{-10,-50}})));
    Fluid.Movers.SpeedControlled_y fan1[5](redeclare package Medium =
          Buildings.Applications.DHC_Thassalia.Media.Sea_Water, redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm per)
             annotation (Placement(transformation(extent={{-62,-70},{-42,-50}})));
    Buildings.Fluid.Sensors.RelativePressure
                                   senRelPre(redeclare package Medium =
          Buildings.Applications.DHC_Thassalia.Media.Sea_Water)
      annotation (Placement(transformation(extent={{-10,-16},{10,4}})));
    Controls_a.PEM.control_pumps control_pumps
      annotation (Placement(transformation(extent={{20,40},{40,60}})));
    Controls.Continuous.LimPID           conPID(
      Td=1,
      k=0.5,
      Ti=15,
      reverseActing=true)
             annotation (Placement(transformation(extent={{-20,40},{0,60}})));
    Modelica.Blocks.Math.Gain gain1(k=-1)
      annotation (Placement(transformation(extent={{-80,20},{-60,40}})));
    Fluid.Sensors.TemperatureTwoPort TT200(redeclare package Medium =
          Buildings.Applications.DHC_Thassalia.Media.Sea_Water, m_flow_nominal=3600
          *1020/3600)
      annotation (Placement(transformation(extent={{70,-70},{90,-50}})));
    Modelica.Blocks.Sources.RealExpression realExpression(y=p_pumps)
      annotation (Placement(transformation(extent={{-60,40},{-40,60}})));
    Fluid.Sensors.VolumeFlowRate FQT200(redeclare package Medium =
          Buildings.Applications.DHC_Thassalia.Media.Sea_Water, m_flow_nominal=3600*1020/3600)
      annotation (Placement(transformation(extent={{40,-70},{60,-50}})));
  equation
  for k in 1:5 loop
    connect(val1[k].port_b, FQT200.port_a)
      annotation (Line(points={{-10,-60},{40,-60}}, color={0,127,255}));
  end for;
    connect(gain1.y, conPID.u_m)
      annotation (Line(points={{-59,30},{-10,30},{-10,38}},    color={0,0,127}));
    connect(senRelPre.p_rel, gain1.u) annotation (Line(points={{0,-15},{0,-30},
              {80,-30},{80,80},{-90,80},{-90,30},{-82,30}},
                                             color={0,0,127}));
    connect(control_pumps.pump_y, fan1.y)
      annotation (Line(points={{41,50},{50,50},{50,24},{-52,24},{-52,-48}},
                                                            color={0,0,127}));
    connect(control_pumps.valve_open, val1.y)
      annotation (Line(points={{41,59},{60,59},{60,20},{-20,20},{-20,-48}},
                                                            color={0,0,127}));
    connect(fan1.y_actual, control_pumps.pump_opening) annotation (Line(points={{-41,-53},
              {-36,-53},{-36,12},{70,12},{70,70},{10,70},{10,58},{18,58}},
                                                                      color={0,0,127}));
    connect(fan1.port_b, val1.port_a)
      annotation (Line(points={{-42,-60},{-30,-60}},
                                                 color={0,127,255}));

    connect(senRelPre.port_a, sea_water.ports[1]) annotation (Line(points={{-10,-6},
              {-68,-6},{-68,-26.5714},{-80,-26.5714}},
                                                     color={0,127,255}));
    connect(sea_water.ports[2:6], fan1.port_a) annotation (Line(points={{-80,
              -32.2857},{-76,-32.2857},{-76,-60},{-62,-60}},
                                             color={0,127,255}));
    connect(conPID.y, control_pumps.pid) annotation (Line(points={{1,50},{10,50},{
            10,42},{18,42}},    color={0,0,127}));
    connect(port_a, sea_water.ports[7]) annotation (Line(points={{-100,0},{-74,
              0},{-74,-33.4286},{-80,-33.4286}},
                                            color={0,127,255}));

    connect(TT200.port_b, port_b)
      annotation (Line(points={{90,-60},{100,-60},{100,0}}, color={0,127,255}));
    connect(realExpression.y, conPID.u_s)
      annotation (Line(points={{-39,50},{-22,50}}, color={0,0,127}));
    connect(TT200.port_a, FQT200.port_b)
      annotation (Line(points={{70,-60},{60,-60}}, color={0,127,255}));
    connect(senRelPre.port_b, FQT200.port_a) annotation (Line(points={{10,-6},{26,
            -6},{26,-60},{40,-60}}, color={0,127,255}));

      annotation (Icon(graphics={
          Rectangle(
            extent={{-100,16},{100,-16}},
            lineColor={0,0,0},
            fillColor={0,127,255},
            fillPattern=FillPattern.HorizontalCylinder),
          Ellipse(
            extent={{-58,58},{58,-58}},
            lineColor={0,0,0},
            fillPattern=FillPattern.Sphere,
            fillColor={0,100,199}),
          Polygon(
            points={{0,50},{0,-50},{54,0},{0,50}},
            lineColor={0,0,0},
            pattern=LinePattern.None,
            fillPattern=FillPattern.HorizontalCylinder,
            fillColor={255,255,255}),
          Ellipse(
            extent={{4,16},{36,-16}},
            lineColor={0,0,0},
            fillPattern=FillPattern.Sphere,
            visible=energyDynamics <> Modelica.Fluid.Types.Dynamics.SteadyState,
            fillColor={0,100,199})}));
  end pem_simplifie;

  model pem_without_valve
  extends Buildings.Fluid.Interfaces.PartialTwoPortInterface;

    Fluid.Sources.Boundary_pT sea_water(
        redeclare package Medium =
          Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
        use_p_in=false,
        p(displayUnit="bar") = 100000,
        use_T_in=true,
        T=293.15,
      nPorts=7) "Boundary condition for flow source" annotation (Placement(
          transformation(
          extent={{-10,-10},{10,10}},
          rotation=0,
          origin={-150,-50})));
    Fluid.Movers.SpeedControlled_y fan1[5](redeclare package Medium =
          Buildings.Applications.DHC_Thassalia.Media.Sea_Water, redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm per)
             annotation (Placement(transformation(extent={{-70,-70},{-50,-50}})));
    Buildings.Fluid.Sensors.RelativePressure
                                   senRelPre(redeclare package Medium =
          Buildings.Applications.DHC_Thassalia.Media.Sea_Water)
      annotation (Placement(transformation(extent={{-30,-30},{-10,-10}})));
    Controls_a.PEM.control_pumps control_pumps
      annotation (Placement(transformation(extent={{-20,20},{0,40}})));
    Fluid.Sensors.TemperatureTwoPort TT200(redeclare package Medium =
          Buildings.Applications.DHC_Thassalia.Media.Sea_Water, m_flow_nominal=3600
          *1020/3600)
      annotation (Placement(transformation(extent={{70,-70},{90,-50}})));
    Fluid.Sensors.VolumeFlowRate FQT200(redeclare package Medium =
          Buildings.Applications.DHC_Thassalia.Media.Sea_Water, m_flow_nominal=3600*1020/3600)
      annotation (Placement(transformation(extent={{40,-70},{60,-50}})));
      Controls_a.PEM.PID_PEM pID_PEM
        annotation (Placement(transformation(extent={{-60,20},{-40,40}})));
    Fluid.Sensors.TemperatureTwoPort TT201(redeclare package Medium =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water, m_flow_nominal=3600*1020/3600)
        annotation (Placement(transformation(extent={{-100,-80},{-120,-60}})));
      Modelica.Blocks.Interfaces.RealOutput PEM_TT200
        annotation (Placement(transformation(extent={{100,90},{120,110}})));
      Modelica.Blocks.Interfaces.RealInput T_sea
        annotation (Placement(transformation(extent={{-140,80},{-100,120}})));
  equation
  for k in 1:5 loop
      connect(fan1[k].port_b, FQT200.port_a)
      annotation (Line(points={{-50,-60},{40,-60}}, color={0,127,255}));
  end for;
    connect(control_pumps.pump_y, fan1.y)
      annotation (Line(points={{1,30},{10,30},{10,0},{-60,0},{-60,-48}},
                                                            color={0,0,127}));
    connect(fan1.y_actual, control_pumps.pump_opening) annotation (Line(points={{-49,-53},
              {-40,-53},{-40,-6},{20,-6},{20,60},{-30,60},{-30,38},{-22,38}},
                                                                      color={0,0,127}));

    connect(senRelPre.port_a, sea_water.ports[1]) annotation (Line(points={{-30,-20},
              {-68,-20},{-68,-46.5714},{-140,-46.5714}},
                                                     color={0,127,255}));
    connect(sea_water.ports[2:6], fan1.port_a) annotation (Line(points={{-140,
              -52.2857},{-76,-52.2857},{-76,-60},{-70,-60}},
                                             color={0,127,255}));

    connect(TT200.port_b, port_b)
      annotation (Line(points={{90,-60},{100,-60},{100,0}}, color={0,127,255}));
    connect(TT200.port_a, FQT200.port_b)
      annotation (Line(points={{70,-60},{60,-60}}, color={0,127,255}));
      connect(senRelPre.p_rel, pID_PEM.P) annotation (Line(points={{-20,-29},{
              -20,-40},{40,-40},{40,70},{-70,70},{-70,35},{-62,35}},
                                                                 color={0,0,127}));
      connect(FQT200.V_flow, pID_PEM.v_flow) annotation (Line(points={{50,-49},
              {50,80},{-80,80},{-80,25},{-62,25}}, color={0,0,127}));
      connect(pID_PEM.y, control_pumps.pid) annotation (Line(points={{-39,30},{
              -30,30},{-30,22},{-22,22}}, color={0,0,127}));

      connect(port_a, TT201.port_a) annotation (Line(points={{-100,0},{-86,0},{
              -86,-70},{-100,-70}}, color={0,127,255}));
      connect(TT201.port_b, sea_water.ports[7]) annotation (Line(points={{-120,
              -70},{-127,-70},{-127,-53.4286},{-140,-53.4286}}, color={0,127,
              255}));
      connect(TT200.T, PEM_TT200) annotation (Line(points={{80,-49},{80,100},{
              110,100}}, color={0,0,127}));
      connect(T_sea, sea_water.T_in) annotation (Line(points={{-120,100},{-90,
              100},{-90,40},{-170,40},{-170,-46},{-162,-46}}, color={0,0,127}));
    connect(senRelPre.port_b, FQT200.port_a) annotation (Line(points={{-10,-20},{16,
            -20},{16,-60},{40,-60}}, color={0,127,255}));

      annotation (Icon(graphics={
          Rectangle(
            extent={{-100,16},{100,-16}},
            lineColor={0,0,0},
            fillColor={0,127,255},
            fillPattern=FillPattern.HorizontalCylinder),
          Ellipse(
            extent={{-58,58},{58,-58}},
            lineColor={0,0,0},
            fillPattern=FillPattern.Sphere,
            fillColor={0,100,199}),
          Polygon(
            points={{0,50},{0,-50},{54,0},{0,50}},
            lineColor={0,0,0},
            pattern=LinePattern.None,
            fillPattern=FillPattern.HorizontalCylinder,
            fillColor={255,255,255}),
          Ellipse(
            extent={{4,16},{36,-16}},
            lineColor={0,0,0},
            fillPattern=FillPattern.Sphere,
            visible=energyDynamics <> Modelica.Fluid.Types.Dynamics.SteadyState,
            fillColor={0,100,199})}));
  end pem_without_valve;
  end PEM;

    package RJC
    extends Modelica.Icons.VariantsPackage;

      model Heat_exchanger

      extends Fluid.Interfaces.PartialFourPort
      annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
            coordinateSystem(preserveAspectRatio=false)));

        Fluid.HeatExchangers.PlateHeatExchangerEffectivenessNTU RJC(
          redeclare package Medium1 =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          redeclare package Medium2 = Buildings.Media.Water,
        m1_flow_nominal=864.9*1020/3600,
        m2_flow_nominal=853.2*994/3600,
        dp1_nominal=69500,
        dp2_nominal=65600,                                            configuration=
             Buildings.Fluid.Types.HeatExchangerConfiguration.CounterFlow,
          use_Q_flow_nominal=true,
        Q_flow_nominal=4925000,
          T_a1_nominal=298.15,
          T_a2_nominal=305.15)
          annotation (Placement(transformation(extent={{-20,44},{0,64}})));
        Fluid.Sensors.TemperatureTwoPort ECH_TT211(redeclare package Medium =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal=1025*865/3600)   annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={30,60})));
        Modelica.Blocks.Interfaces.RealInput PEM_TT200
          annotation (Placement(transformation(extent={{-140,-60},{-100,-20}})));
      Fluid.Movers.FlowControlled_m_flow fan(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal=650*994/3600,
        redeclare Fluid.Movers.Data.Pumps.KSB.KSB_RJC per,
        inputType=Buildings.Fluid.Types.InputType.Stages,
        addPowerToMedium=true,
        use_inputFilter=false,
        massFlowRates=210/3.6*{1,0,0})
        annotation (Placement(transformation(extent={{0,-70},{-20,-50}})));
        Fluid.FixedResistances.Junction jun(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal={994*853.2/3600,-994*853.2/3600,-994*853.2/3600},
        dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=270,
              origin={20,-60})));
        Fluid.FixedResistances.Junction jun1(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal={994*853.2/3600,994*853.2/3600,-994*853.2/3600},
        dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{10,-10},{-10,10}},
              rotation=0,
              origin={-70,-60})));
        Modelica.Blocks.Interfaces.RealInput TFP_CV522 annotation (Placement(
            transformation(
            extent={{-20,-20},{20,20}},
            rotation=0,
            origin={-120,40})));
        Modelica.Blocks.Interfaces.IntegerInput mode
          annotation (Placement(transformation(extent={{-20,-20},{20,20}},
            rotation=90,
            origin={70,-120}),
              iconTransformation(extent={{-20,-20},{20,20}},
            rotation=90,
            origin={-60,-120})));
      Controls_a.RJC_RJF.PID_RJC pID_RJC
        annotation (Placement(transformation(extent={{20,100},{40,120}})));
        Fluid.Sensors.TemperatureTwoPort TT521(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=1025*747.6/3600) annotation (
          Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={30,20})));
        Fluid.Sensors.TemperatureTwoPort TT511(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=1025*747.6/3600) annotation (
          Placement(transformation(
            extent={{10,-10},{-10,10}},
            rotation=0,
            origin={-40,20})));
        Fluid.Sensors.VolumeFlowRate senVolFlo(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=1001*726.2/3600)
          annotation (Placement(transformation(extent={{70,10},{50,30}})));
        Fluid.Actuators.Valves.TwoWayLinear val(
        redeclare package Medium =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
        m_flow_nominal=864.9*1025/3600,
        dpValve_nominal=31367,
        use_inputFilter=false,
        dpFixed_nominal=77986)
          annotation (Placement(transformation(extent={{60,50},{80,70}})));
        Fluid.Sensors.VolumeFlowRate senVolFlo1(redeclare package Medium =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal=1025*865/3600)
          annotation (Placement(transformation(extent={{-50,50},{-30,70}})));
      Fluid.Actuators.Valves.TwoWayLinear val1(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal=211/3.6,
        dpValve_nominal=5000,
        use_inputFilter=false)
        annotation (Placement(transformation(extent={{-50,-70},{-30,-50}})));
      Controls_a.RJC_RJF.Switch_pump switch_pump1(value=1)
        annotation (Placement(transformation(extent={{60,-50},{40,-30}})));
      Fluid.Actuators.Valves.TwoWayLinear val2(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal=211/3.6,
        dpValve_nominal=5000,
        use_inputFilter=false)
        annotation (Placement(transformation(extent={{-40,-110},{-20,-90}})));
      Controls_a.opposite opposite annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={0,-80})));
      equation
      connect(RJC.port_b1, ECH_TT211.port_a)
        annotation (Line(points={{0,60},{20,60}},   color={0,127,255}));
      connect(port_b2, jun1.port_2) annotation (Line(points={{-100,-60},{-91,
              -60},{-91,-60},{-80,-60}}, color={0,127,255}));
      connect(mode, pID_RJC.u) annotation (Line(points={{70,-120},{70,10},{-60,
              10},{-60,106},{18,106}},                 color={255,127,0}));
      connect(ECH_TT211.T, pID_RJC.ECH_TT211) annotation (Line(points={{30,71},
              {30,94},{8,94},{8,114},{18,114}},   color={0,0,127}));
      connect(PEM_TT200, pID_RJC.PEM_TT200) annotation (Line(points={{-120,-40},
              {-80,-40},{-80,118},{18,118}},
                                           color={0,0,127}));
      connect(TFP_CV522, pID_RJC.CV522) annotation (Line(points={{-120,40},{-70,
              40},{-70,110},{18,110}},
                                     color={0,0,127}));
      connect(RJC.port_a2, TT521.port_a) annotation (Line(points={{0,48},{8,48},
              {8,20},{20,20}}, color={0,127,255}));
      connect(RJC.port_b2, TT511.port_a) annotation (Line(points={{-20,48},{-26,
              48},{-26,20},{-30,20}}, color={0,127,255}));
      connect(TT511.port_b, jun.port_1) annotation (Line(points={{-50,20},{-54,
              20},{-54,-30},{20,-30},{20,-50}}, color={0,127,255}));
      connect(TT521.port_b, senVolFlo.port_b)
        annotation (Line(points={{40,20},{50,20}}, color={0,127,255}));
      connect(senVolFlo.port_a, port_a2) annotation (Line(points={{70,20},{80,
              20},{80,-60},{100,-60}}, color={0,127,255}));
      connect(ECH_TT211.port_b, val.port_a)
        annotation (Line(points={{40,60},{60,60}}, color={0,127,255}));
      connect(port_b1, val.port_b)
        annotation (Line(points={{100,60},{80,60}}, color={0,127,255}));
      connect(pID_RJC.y, val.y)
        annotation (Line(points={{41,110},{70,110},{70,72}}, color={0,0,127}));
      connect(port_a1, senVolFlo1.port_a)
        annotation (Line(points={{-100,60},{-50,60}}, color={0,127,255}));
      connect(senVolFlo1.port_b, RJC.port_a1)
        annotation (Line(points={{-30,60},{-20,60}}, color={0,127,255}));
        connect(senVolFlo1.V_flow, pID_RJC.v_flow)
          annotation (Line(points={{-40,71},{-40,101},{18,101}}, color={0,0,127}));
      connect(jun1.port_1, val1.port_a)
        annotation (Line(points={{-60,-60},{-50,-60}}, color={0,127,255}));
      connect(val1.port_b, fan.port_b)
        annotation (Line(points={{-30,-60},{-20,-60}}, color={0,127,255}));
      connect(mode, switch_pump1.TFP_mode) annotation (Line(points={{70,-120},{
              70,-40},{62,-40}}, color={255,127,0}));
      connect(switch_pump1.y, val1.y) annotation (Line(points={{39,-40},{-40,
              -40},{-40,-48}}, color={0,0,127}));
      connect(jun1.port_3, val2.port_a) annotation (Line(points={{-70,-70},{-70,
              -100},{-40,-100}}, color={0,127,255}));
      connect(val2.port_b, jun.port_2) annotation (Line(points={{-20,-100},{20,
              -100},{20,-70}}, color={0,127,255}));
      connect(opposite.u, val1.y) annotation (Line(points={{12,-80},{36,-80},{
              36,-40},{-40,-40},{-40,-48}}, color={0,0,127}));
      connect(opposite.y, val2.y) annotation (Line(points={{-11,-80},{-30,-80},
              {-30,-88}}, color={0,0,127}));
      connect(fan.port_a, jun.port_3)
        annotation (Line(points={{0,-60},{10,-60}}, color={0,127,255}));
      connect(mode, fan.stage) annotation (Line(points={{70,-120},{70,-20},{-10,
              -20},{-10,-48}}, color={255,127,0}));
        annotation (Icon(coordinateSystem(extent={{-100,-100},{100,100}}),
                         graphics={
              Rectangle(
                extent={{2,-55},{102,-66}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={238,46,47},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-100,-55},{0,-66}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={244,125,35},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-72,80},{68,-80}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-102,65},{99,55}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid),
                                    Rectangle(
                extent={{-72,78},{68,-80}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid),
                                    Rectangle(
                extent={{-72,78},{68,-80}},
                lineColor={0,0,255},
                pattern=LinePattern.None,
                fillColor={95,95,95},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-64,60},{-52,-58}},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None),
              Rectangle(
                extent={{-52,60},{-36,-58}},
                fillColor={238,46,47},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None,
                lineColor={0,0,0}),
              Rectangle(
                extent={{-24,60},{-8,-58}},
                fillColor={238,46,47},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None,
                lineColor={0,0,0}),
              Rectangle(
                extent={{-36,60},{-24,-58}},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None),
              Rectangle(
                extent={{4,60},{20,-58}},
                fillColor={238,46,47},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None,
                lineColor={0,0,0}),
              Rectangle(
                extent={{-8,60},{4,-58}},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None),
              Rectangle(
                extent={{32,60},{48,-58}},
                fillColor={238,46,47},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None,
                lineColor={0,0,0}),
              Rectangle(
                extent={{20,60},{32,-58}},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None),
              Rectangle(
                extent={{48,60},{60,-58}},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None)}), Diagram(coordinateSystem(extent={{-100,-100},
                  {100,100}})));
      end Heat_exchanger;

      package Tests
      extends Modelica.Icons.ExamplesPackage;
        model test_mover
        Fluid.Movers.FlowControlled_m_flow fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=200,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          inputType=Buildings.Fluid.Types.InputType.Continuous,
          nominalValuesDefineDefaultPressureCurve=true,
          dp_nominal=600000)
          annotation (Placement(transformation(extent={{-18,0},{2,20}})));
          Fluid.Sources.MassFlowSource_T boundary1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow=200,
          T=281.15,
          nPorts=1)
            annotation (Placement(transformation(extent={{-100,0},{-80,20}})));
          Fluid.Sources.Boundary_pT bou1(
          redeclare package Medium = Buildings.Media.Water,
          p=100000,
          nPorts=1)
            annotation (Placement(transformation(extent={{100,0},{80,20}})));
        Modelica.Blocks.Sources.Ramp ramp(
          height=200,
          duration=200,
          startTime=200)
          annotation (Placement(transformation(extent={{-60,60},{-40,80}})));
        equation
        connect(boundary1.ports[1], fan.port_a)
          annotation (Line(points={{-80,10},{-18,10}}, color={0,127,255}));
        connect(fan.port_b, bou1.ports[1])
          annotation (Line(points={{2,10},{80,10}}, color={0,127,255}));
        connect(ramp.y, fan.m_flow_in) annotation (Line(points={{-39,70},{-8,70},
                {-8,22}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
        end test_mover;

        model test_exchanger
          Fluid.Sources.MassFlowSource_T boundary(
            redeclare package Medium =
                Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
              use_m_flow_in=true,
            m_flow=1025*747/3600,
              use_T_in=true,
              T=288.15,
            nPorts=1)
            annotation (Placement(transformation(extent={{-102,80},{-82,100}})));
          Fluid.Sources.MassFlowSource_T boundary1(
            redeclare package Medium = Buildings.Media.Water,
              use_m_flow_in=true,
            m_flow=726.2/3600,
              use_T_in=true,
              T=281.15,                            nPorts=1)
            annotation (Placement(transformation(extent={{100,-100},{80,-80}})));
          Fluid.Sources.Boundary_pT bou(
            redeclare package Medium =
                Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
            p=100000,
            nPorts=1) annotation (Placement(transformation(extent={{100,80},{80,100}})));
          Fluid.Sources.Boundary_pT bou1(
            redeclare package Medium = Buildings.Media.Water,
            p=100000,                    nPorts=1)
            annotation (Placement(transformation(extent={{-100,-100},{-80,-80}})));
          Modelica.Blocks.Sources.Constant CVset(k=0.8)
            "Scaled differential pressure setpoint"
            annotation (Placement(transformation(extent={{-100,20},{-80,40}})));
          Fluid.Sensors.TemperatureTwoPort senTem(redeclare package Medium =
                Buildings.Applications.DHC_Thassalia.Media.Sea_Water, m_flow_nominal=1025*747/3600)
            annotation (Placement(transformation(extent={{-70,80},{-50,100}})));
          Fluid.Sensors.TemperatureTwoPort senTem1(redeclare package Medium =
                Buildings.Applications.DHC_Thassalia.Media.Sea_Water, m_flow_nominal=1025*747/3600)
            annotation (Placement(transformation(extent={{40,80},{60,100}})));
          Fluid.Sensors.TemperatureTwoPort senTem2(redeclare package Medium =
                Buildings.Media.Water, m_flow_nominal=726.2/3600,
              T_start=283.15)
            annotation (Placement(transformation(extent={{60,-100},{40,-80}})));
          Fluid.Sensors.TemperatureTwoPort senTem3(redeclare package Medium =
                  Buildings.Media.Water,           m_flow_nominal=726.2/3600,
              T_start=283.15)
            annotation (Placement(transformation(extent={{-50,-100},{-70,-80}})));
          Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
              tableOnFile=true,
              tableName="tab1",
            fileName=ModelicaServices.ExternalReferences.loadResource("modelica://Buildings/Data/rjc.txt"),
            columns={2,3,4,5,6,7,8,9,10,11,12,13,14,15})
            annotation (Placement(transformation(extent={{-180,80},{-160,100}})));

          Heat_exchanger heat_exchanger(redeclare package Medium1 =
                Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
                 redeclare package Medium2 =
                Buildings.Media.Water)
            annotation (Placement(transformation(extent={{-20,0},{0,20}})));
          Modelica.Blocks.Sources.Constant CVset1(k=50)
            "Scaled differential pressure setpoint"
            annotation (Placement(transformation(extent={{-100,-40},{-80,-20}})));
        Modelica.Blocks.Sources.IntegerExpression integerExpression(y=0)
          annotation (Placement(transformation(extent={{-100,-70},{-80,-50}})));
        equation
          connect(boundary.ports[1], senTem.port_a)
            annotation (Line(points={{-82,90},{-70,90}}, color={0,127,255}));
          connect(senTem1.port_b, bou.ports[1])
            annotation (Line(points={{60,90},{80,90}}, color={0,127,255}));
          connect(senTem2.port_a, boundary1.ports[1])
            annotation (Line(points={{60,-90},{80,-90}}, color={0,127,255}));
          connect(bou1.ports[1], senTem3.port_b)
            annotation (Line(points={{-80,-90},{-70,-90}}, color={0,127,255}));
          connect(senTem.port_b, heat_exchanger.port_a1) annotation (Line(points={{-50,90},
                  {-36,90},{-36,16},{-20,16}}, color={0,127,255}));
          connect(senTem3.port_a, heat_exchanger.port_b2) annotation (Line(points={{-50,
                  -90},{-36,-90},{-36,4},{-20,4}}, color={0,127,255}));
          connect(heat_exchanger.port_b1, senTem1.port_a) annotation (Line(points={{0,16},
                  {20,16},{20,90},{40,90}}, color={0,127,255}));
          connect(heat_exchanger.port_a2, senTem2.port_b) annotation (Line(points={{0,4},
                  {20,4},{20,-90},{40,-90}}, color={0,127,255}));
          connect(CVset.y, heat_exchanger.TFP_CV522) annotation (Line(points={{-79,30},{
                  -52,30},{-52,14},{-22,14}}, color={0,0,127}));
          connect(CVset1.y, heat_exchanger.TFP_debit_cons)
            annotation (Line(points={{-79,-30},{-4,-30},{-4,-2}}, color={0,0,127}));
        connect(combiTimeTable.y[14], boundary.m_flow_in) annotation (Line(
              points={{-159,90},{-132,90},{-132,98},{-104,98}}, color={0,0,127}));
        connect(combiTimeTable.y[9], boundary.T_in) annotation (Line(points={{
                -159,90},{-132,90},{-132,94},{-104,94}}, color={0,0,127}));
        connect(combiTimeTable.y[11], boundary1.m_flow_in) annotation (Line(
              points={{-159,90},{-132,90},{-132,-120},{138,-120},{138,-82},{102,
                -82}}, color={0,0,127}));
        connect(combiTimeTable.y[8], boundary1.T_in) annotation (Line(points={{
                -159,90},{-132,90},{-132,-120},{138,-120},{138,-86},{102,-86}},
              color={0,0,127}));
        connect(integerExpression.y, heat_exchanger.mode) annotation (Line(
              points={{-79,-60},{-16,-60},{-16,-2}}, color={255,127,0}));
        connect(senTem.T, heat_exchanger.PEM_TT200) annotation (Line(points={{
                -60,101},{-60,118},{-42,118},{-42,6},{-22,6}}, color={0,0,127}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                coordinateSystem(preserveAspectRatio=false)),
              experiment(
            StopTime=1121400,
            Interval=600,
            __Dymola_Algorithm="Dassl"));
        end test_exchanger;

        model test_exchanger_pump
          Fluid.Sources.MassFlowSource_T boundary(
            redeclare package Medium =
                Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
              use_m_flow_in=true,
            m_flow=1025*747/3600,
              use_T_in=true,
              T=288.15,
            nPorts=1)
            annotation (Placement(transformation(extent={{-102,80},{-82,100}})));
          Fluid.Sources.Boundary_pT bou(
            redeclare package Medium =
                Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
            p=100000,
            nPorts=1) annotation (Placement(transformation(extent={{100,80},{80,100}})));
          Fluid.Sources.Boundary_pT bou1(
            redeclare package Medium = Buildings.Media.Water,
          p=100000,
          use_T_in=true,                 nPorts=2)
            annotation (Placement(transformation(extent={{-100,-140},{-80,-120}})));
          Modelica.Blocks.Sources.Constant CVset(k=0.8)
            "Scaled differential pressure setpoint"
            annotation (Placement(transformation(extent={{-100,20},{-80,40}})));
          Fluid.Sensors.TemperatureTwoPort senTem(redeclare package Medium =
                Buildings.Applications.DHC_Thassalia.Media.Sea_Water, m_flow_nominal=1025*747/3600)
            annotation (Placement(transformation(extent={{-70,80},{-50,100}})));
          Fluid.Sensors.TemperatureTwoPort senTem1(redeclare package Medium =
                Buildings.Applications.DHC_Thassalia.Media.Sea_Water, m_flow_nominal=1025*747/3600)
            annotation (Placement(transformation(extent={{40,80},{60,100}})));
          Fluid.Sensors.TemperatureTwoPort senTem2(redeclare package Medium =
                Buildings.Media.Water, m_flow_nominal=726.2/3600,
              T_start=283.15)
            annotation (Placement(transformation(extent={{60,-100},{40,-80}})));
          Fluid.Sensors.TemperatureTwoPort senTem3(redeclare package Medium =
                  Buildings.Media.Water,           m_flow_nominal=726.2/3600,
              T_start=283.15)
            annotation (Placement(transformation(extent={{-50,-100},{-70,-80}})));
          Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
              tableOnFile=true,
              tableName="tab1",
            fileName=ModelicaServices.ExternalReferences.loadResource("modelica://Buildings/Data/rjc.txt"),
            columns={2,3,4,5,6,7,8,9,10,11,12,13,14,15})
            annotation (Placement(transformation(extent={{-180,80},{-160,100}})));

          Heat_exchanger heat_exchanger(redeclare package Medium1 =
                Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
                 redeclare package Medium2 =
                Buildings.Media.Water)
            annotation (Placement(transformation(extent={{-20,0},{0,20}})));
          Modelica.Blocks.Sources.Constant CVset1(k=50)
            "Scaled differential pressure setpoint"
            annotation (Placement(transformation(extent={{-100,-40},{-80,-20}})));
        Modelica.Blocks.Sources.IntegerExpression integerExpression(y=0)
          annotation (Placement(transformation(extent={{-100,-70},{-80,-50}})));
        Fluid.Movers.FlowControlled_m_flow fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=50,
          redeclare Fluid.Movers.Data.Pumps.Wilo.Stratos25slash1to8 per,
          addPowerToMedium=false)
          annotation (Placement(transformation(extent={{-20,-140},{0,-120}})));
        equation
          connect(boundary.ports[1], senTem.port_a)
            annotation (Line(points={{-82,90},{-70,90}}, color={0,127,255}));
          connect(senTem1.port_b, bou.ports[1])
            annotation (Line(points={{60,90},{80,90}}, color={0,127,255}));
          connect(bou1.ports[1], senTem3.port_b)
            annotation (Line(points={{-80,-128},{-76,-128},{-76,-90},{-70,-90}},
                                                           color={0,127,255}));
          connect(senTem.port_b, heat_exchanger.port_a1) annotation (Line(points={{-50,90},
                  {-36,90},{-36,16},{-20,16}}, color={0,127,255}));
          connect(senTem3.port_a, heat_exchanger.port_b2) annotation (Line(points={{-50,
                  -90},{-36,-90},{-36,4},{-20,4}}, color={0,127,255}));
          connect(heat_exchanger.port_b1, senTem1.port_a) annotation (Line(points={{0,16},
                  {20,16},{20,90},{40,90}}, color={0,127,255}));
          connect(heat_exchanger.port_a2, senTem2.port_b) annotation (Line(points={{0,4},
                  {20,4},{20,-90},{40,-90}}, color={0,127,255}));
          connect(CVset.y, heat_exchanger.TFP_CV522) annotation (Line(points={{-79,30},{
                  -52,30},{-52,14},{-22,14}}, color={0,0,127}));
          connect(CVset1.y, heat_exchanger.TFP_debit_cons)
            annotation (Line(points={{-79,-30},{-4,-30},{-4,-2}}, color={0,0,127}));
        connect(combiTimeTable.y[14], boundary.m_flow_in) annotation (Line(
              points={{-159,90},{-132,90},{-132,98},{-104,98}}, color={0,0,127}));
        connect(combiTimeTable.y[9], boundary.T_in) annotation (Line(points={{
                -159,90},{-132,90},{-132,94},{-104,94}}, color={0,0,127}));
        connect(integerExpression.y, heat_exchanger.mode) annotation (Line(
              points={{-79,-60},{-16,-60},{-16,-2}}, color={255,127,0}));
        connect(senTem.T, heat_exchanger.PEM_TT200) annotation (Line(points={{
                -60,101},{-60,118},{-42,118},{-42,6},{-22,6}}, color={0,0,127}));
        connect(bou1.ports[2], fan.port_a) annotation (Line(points={{-80,-132},
                {-50,-132},{-50,-130},{-20,-130}}, color={0,127,255}));
        connect(fan.port_b, senTem2.port_a) annotation (Line(points={{0,-130},{
                100,-130},{100,-90},{60,-90}}, color={0,127,255}));
        connect(combiTimeTable.y[8], bou1.T_in) annotation (Line(points={{-159,
                90},{-132,90},{-132,-126},{-102,-126}}, color={0,0,127}));
        connect(combiTimeTable.y[11], fan.m_flow_in) annotation (Line(points={{
                -159,90},{-132,90},{-132,-110},{-10,-110},{-10,-118}}, color={0,
                0,127}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                coordinateSystem(preserveAspectRatio=false)),
              experiment(
            StopTime=1121400,
            Interval=600,
            __Dymola_Algorithm="Dassl"));
        end test_exchanger_pump;

        model test_exchanger_dp
          Fluid.Sources.MassFlowSource_T boundary(
            redeclare package Medium = Media.Sea_Water,
            use_m_flow_in=false,
            m_flow=1025*747/3600,
            use_T_in=false,
          T=288.15,
            nPorts=1)
            annotation (Placement(transformation(extent={{-100,40},{-80,60}})));
          Fluid.Sources.Boundary_pT bou1(
            redeclare package Medium = Media.Sea_Water,
          p=100000,
            use_T_in=false,
            nPorts=1)
            annotation (Placement(transformation(extent={{100,40},{80,60}})));
          Fluid.HeatExchangers.PlateHeatExchangerEffectivenessNTU RJC(
            redeclare package Medium1 = Media.Sea_Water,
            redeclare package Medium2 = Buildings.Media.Water,
            m1_flow_nominal=1020*864.9/3600,
            m2_flow_nominal=994*853.2/3600,
            dp1_nominal=65600,
            dp2_nominal=69500,
            configuration=Buildings.Fluid.Types.HeatExchangerConfiguration.CounterFlow,
            use_Q_flow_nominal=true,
            Q_flow_nominal=4925000,
          T_a1_nominal=298.15,
          T_a2_nominal=305.15)
            annotation (Placement(transformation(extent={{-10,-10},{10,10}})));

          Fluid.Sources.MassFlowSource_T boundary1(
          redeclare package Medium = Buildings.Media.Water,
          use_m_flow_in=true,
          m_flow=800*747/3600,
            use_T_in=false,
          T=328.15,
            nPorts=1)
            annotation (Placement(transformation(extent={{100,-60},{80,-40}})));
          Fluid.Sources.Boundary_pT bou2(
            redeclare package Medium = Buildings.Media.Water,
          p=100000,
            use_T_in=false,
            nPorts=1)
            annotation (Placement(transformation(extent={{-100,-60},{-80,-40}})));
        Modelica.Blocks.Sources.Ramp ramp(
          height=994*853.2/3600,
          duration=70000,
          startTime=10000)
          annotation (Placement(transformation(extent={{60,-100},{80,-80}})));
        equation
          connect(boundary.ports[1], RJC.port_a1) annotation (Line(points={{-80,50},{-50,
                  50},{-50,6},{-10,6}}, color={0,127,255}));
          connect(RJC.port_b1, bou1.ports[1]) annotation (Line(points={{10,6},{40,6},{40,
                  50},{80,50}}, color={0,127,255}));
          connect(bou2.ports[1], RJC.port_b2) annotation (Line(points={{-80,-50},{-50,-50},
                  {-50,-6},{-10,-6}}, color={0,127,255}));
          connect(boundary1.ports[1], RJC.port_a2) annotation (Line(points={{80,-50},{40,
                  -50},{40,-6},{10,-6}}, color={0,127,255}));
        connect(ramp.y, boundary1.m_flow_in) annotation (Line(points={{81,-90},
                {120,-90},{120,-42},{102,-42}}, color={0,0,127}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=86400,
            Interval=600,
            __Dymola_Algorithm="Dassl"));
        end test_exchanger_dp;

        model test_2vannes
        Fluid.Sources.Boundary_pT bou(redeclare package Medium =
              Buildings.Media.Water, nPorts=2)
          annotation (Placement(transformation(extent={{-100,0},{-80,20}})));
        Fluid.Actuators.Valves.TwoWayLinear val1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=100,
          dpValve_nominal=2000)
          annotation (Placement(transformation(extent={{20,0},{40,20}})));
        Fluid.FixedResistances.PressureDrop res1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=100,
          dp_nominal=2000)
          annotation (Placement(transformation(extent={{140,0},{160,20}})));
        Fluid.Actuators.Valves.TwoWayLinear val2(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=100,
          dpValve_nominal=2000)
          annotation (Placement(transformation(extent={{20,-60},{40,-40}})));
        Modelica.Blocks.Sources.Step step(
          height=-1,
          offset=1,
          startTime=300)
          annotation (Placement(transformation(extent={{0,80},{20,100}})));
        Modelica.Blocks.Sources.Step step1(startTime=500)
          annotation (Placement(transformation(extent={{-60,-40},{-40,-20}})));
        Fluid.Movers.FlowControlled_m_flow fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=100,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_PEC per,
          dp_nominal(displayUnit="bar") = 200000)
          annotation (Placement(transformation(extent={{-40,0},{-20,20}})));
        Modelica.Blocks.Sources.Step step2(
          height=-100,
          offset=100,
          startTime=300)
          annotation (Placement(transformation(extent={{-100,80},{-80,100}})));
        Fluid.Movers.FlowControlled_m_flow fan1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=100,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_PEC per,
          dp_nominal(displayUnit="bar") = 200000)
          annotation (Placement(transformation(extent={{60,-60},{80,-40}})));
        Modelica.Blocks.Sources.Step step3(height=100, startTime=500)
          annotation (Placement(transformation(extent={{20,-100},{40,-80}})));
        Fluid.Sources.Boundary_pT bou1(redeclare package Medium =
              Buildings.Media.Water, nPorts=1)
          annotation (Placement(transformation(extent={{-28,-76},{-8,-56}})));
        equation
        connect(val1.port_b, res1.port_a) annotation (Line(points={{40,10},{90,
                10},{90,10},{140,10}}, color={0,127,255}));
        connect(res1.port_b, bou.ports[1]) annotation (Line(points={{160,10},{
                182,10},{182,58},{-68,58},{-68,12},{-80,12}}, color={0,127,255}));
        connect(step1.y, val2.y) annotation (Line(points={{-39,-30},{-4.5,-30},
                {-4.5,-38},{30,-38}}, color={0,0,127}));
        connect(step.y, val1.y)
          annotation (Line(points={{21,90},{30,90},{30,22}}, color={0,0,127}));
        connect(bou.ports[2], fan.port_a) annotation (Line(points={{-80,8},{-60,
                8},{-60,10},{-40,10}}, color={0,127,255}));
        connect(fan.port_b, val1.port_a) annotation (Line(points={{-20,10},{-1,
                10},{-1,10},{20,10}}, color={0,127,255}));
        connect(step2.y, fan.m_flow_in) annotation (Line(points={{-79,90},{-30,
                90},{-30,22}}, color={0,0,127}));
        connect(val2.port_b, fan1.port_a)
          annotation (Line(points={{40,-50},{60,-50}}, color={0,127,255}));
        connect(fan1.port_b, res1.port_a) annotation (Line(points={{80,-50},{90,
                -50},{90,10},{140,10}}, color={0,127,255}));
        connect(step3.y, fan1.m_flow_in) annotation (Line(points={{41,-90},{50,
                -90},{50,-28},{70,-28},{70,-38}}, color={0,0,127}));
        connect(bou1.ports[1], val2.port_a) annotation (Line(points={{-8,-66},{
                6,-66},{6,-50},{20,-50}}, color={0,127,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
        end test_2vannes;
      end Tests;

    end RJC;

  package RJF
    extends Modelica.Icons.VariantsPackage;

    model Cold_exchanger

    extends Fluid.Interfaces.PartialFourPort
    annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
          coordinateSystem(preserveAspectRatio=false)));

      Fluid.HeatExchangers.PlateHeatExchangerEffectivenessNTU RJF(
        redeclare package Medium1 =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
        redeclare package Medium2 = Buildings.Media.Water,
        m1_flow_nominal=747.6*1025/3600,
        m2_flow_nominal=726.2*1001/3600,
        dp1_nominal=69900,
        dp2_nominal=61900,                                        configuration=
           Buildings.Fluid.Types.HeatExchangerConfiguration.CounterFlow,
        use_Q_flow_nominal=true,
        Q_flow_nominal=4250000,
        T_a1_nominal=283.65,
        T_a2_nominal=277.15)
        annotation (Placement(transformation(extent={{-20,-40},{0,-20}})));
      Fluid.Sensors.TemperatureTwoPort ECH_TT211(redeclare package Medium =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal=1025*747.6/3600) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={30,-10})));
      Modelica.Blocks.Interfaces.RealInput PEM_TT200(unit="K",
                                              displayUnit = "degC")
        annotation (Placement(transformation(extent={{-140,-60},{-100,-20}})));
      Modelica.Blocks.Interfaces.RealInput TFP_CV122
        annotation (Placement(transformation(extent={{-140,20},{-100,60}})));
      Fluid.Sensors.TemperatureTwoPort TT221(redeclare package Medium =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water, m_flow_nominal=1001*726.2/3600) annotation (
          Placement(transformation(
            extent={{10,-10},{-10,10}},
            rotation=0,
            origin={30,-60})));
      Fluid.Sensors.TemperatureTwoPort TT211(redeclare package Medium =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water, m_flow_nominal=1001*726.2/3600) annotation (
          Placement(transformation(
            extent={{10,-10},{-10,10}},
            rotation=0,
            origin={-70,-60})));
      Fluid.Sensors.VolumeFlowRate senVolFlo(redeclare package Medium =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water, m_flow_nominal=1001*726.2/3600)
        annotation (Placement(transformation(extent={{80,-70},{60,-50}})));
      Controls_a.RJC_RJF.PID_temperature pID_RJF
        annotation (Placement(transformation(extent={{20,40},{40,60}})));
      Fluid.Actuators.Valves.TwoWayLinear CV211(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal=747.6*1025/3600,
        dpValve_nominal=22356,
        use_inputFilter=false,
        dpFixed_nominal=85369)
        annotation (Placement(transformation(extent={{60,-20},{80,0}})));
      Fluid.Sensors.VolumeFlowRate senVolFlo1(redeclare package Medium =
            Media.Sea_Water, m_flow_nominal=1001*726.2/3600)
        annotation (Placement(transformation(extent={{-60,-34},{-40,-14}})));
    equation
      connect(RJF.port_b1, ECH_TT211.port_a) annotation (Line(points={{0,-24},{
              10,-24},{10,-10},{20,-10}},color={0,127,255}));
      connect(TT221.port_b, RJF.port_a2) annotation (Line(points={{20,-60},{10,
              -60},{10,-36},{0,-36}},   color={0,127,255}));
      connect(TT211.port_a, RJF.port_b2) annotation (Line(points={{-60,-60},{
              -50,-60},{-50,-36},{-20,-36}},
                                         color={0,127,255}));
      connect(TT211.port_b, port_b2) annotation (Line(points={{-80,-60},{-100,
              -60}},                 color={0,127,255}));
      connect(port_a2, senVolFlo.port_a)
        annotation (Line(points={{100,-60},{80,-60}}, color={0,127,255}));
      connect(senVolFlo.port_b, TT221.port_a)
        annotation (Line(points={{60,-60},{40,-60}}, color={0,127,255}));
      connect(ECH_TT211.T, pID_RJF.ECH_TT211) annotation (Line(points={{30,1},{
              30,20},{0,20},{0,46},{18,46}}, color={0,0,127}));
      connect(PEM_TT200, pID_RJF.PEM_TT200) annotation (Line(points={{-120,-40},
              {-86,-40},{-86,0},{-60,0},{-60,54},{18,54}}, color={0,0,127}));
      connect(TFP_CV122, pID_RJF.TFP_CV122) annotation (Line(points={{-120,40},
              {-70,40},{-70,60},{18,60}}, color={0,0,127}));
      connect(ECH_TT211.port_b, CV211.port_a)
        annotation (Line(points={{40,-10},{60,-10}}, color={0,127,255}));
      connect(CV211.port_b, port_b1) annotation (Line(points={{80,-10},{90,-10},
              {90,60},{100,60}}, color={0,127,255}));
      connect(pID_RJF.y, CV211.y)
        annotation (Line(points={{41,50},{70,50},{70,2}}, color={0,0,127}));
      connect(port_a1, senVolFlo1.port_a) annotation (Line(points={{-100,60},{
              -80,60},{-80,-24},{-60,-24}}, color={0,127,255}));
      connect(senVolFlo1.port_b, RJF.port_a1)
        annotation (Line(points={{-40,-24},{-20,-24}}, color={0,127,255}));
      connect(senVolFlo1.V_flow, pID_RJF.V_flow) annotation (Line(points={{-50,
              -13},{-50,40},{18,40}}, color={0,0,127}));
      annotation (Icon(coordinateSystem(extent={{-100,-100},{100,100}}),
                       graphics={
            Rectangle(
              extent={{-100,-55},{0,-66}},
              lineColor={0,0,255},
              pattern=LinePattern.None,
              fillColor={0,0,127},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{0,-55},{100,-66}},
              lineColor={0,0,255},
              pattern=LinePattern.None,
              fillColor={28,108,200},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-72,80},{68,-80}},
              lineColor={0,0,255},
              pattern=LinePattern.None,
              fillColor={95,95,95},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-102,65},{99,55}},
              lineColor={0,0,255},
              pattern=LinePattern.None,
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid),
                                  Rectangle(
              extent={{-72,78},{68,-80}},
              lineColor={0,0,255},
              pattern=LinePattern.None,
              fillColor={95,95,95},
              fillPattern=FillPattern.Solid),
                                  Rectangle(
              extent={{-72,78},{68,-80}},
              lineColor={0,0,255},
              pattern=LinePattern.None,
              fillColor={95,95,95},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-64,60},{-52,-58}},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None),
            Rectangle(
              extent={{-52,60},{-36,-58}},
              fillColor={28,108,200},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None,
              lineColor={0,0,0}),
            Rectangle(
              extent={{-24,60},{-8,-58}},
              fillColor={28,108,200},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None,
              lineColor={0,0,0}),
            Rectangle(
              extent={{-36,60},{-24,-58}},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None),
            Rectangle(
              extent={{4,60},{20,-58}},
              fillColor={28,108,200},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None,
              lineColor={0,0,0}),
            Rectangle(
              extent={{-8,60},{4,-58}},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None),
            Rectangle(
              extent={{32,60},{48,-58}},
              fillColor={28,108,200},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None,
              lineColor={0,0,0}),
            Rectangle(
              extent={{20,60},{32,-58}},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None),
            Rectangle(
              extent={{48,60},{60,-58}},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None)}), Diagram(coordinateSystem(extent={{-100,-100},
                {100,100}})));
    end Cold_exchanger;

  package Tests
    extends Modelica.Icons.ExamplesPackage;
    model test_0
      Cold_exchanger cold_exchanger(redeclare package Medium1 =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water, redeclare
            package Medium2 =
            Buildings.Media.Water)
        annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
      Fluid.Sources.MassFlowSource_T boundary(
        redeclare package Medium =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          use_m_flow_in=true,
        m_flow=1025*747/3600,
          use_T_in=true,
          T=288.15,
        nPorts=1)
        annotation (Placement(transformation(extent={{-102,80},{-82,100}})));
      Fluid.Sources.MassFlowSource_T boundary1(
        redeclare package Medium = Buildings.Media.Water,
          use_m_flow_in=true,
        m_flow=726.2/3600,
          use_T_in=true,
          T=281.15,
          nPorts=1)
        annotation (Placement(transformation(extent={{100,-100},{80,-80}})));
      Fluid.Sources.Boundary_pT bou(
        redeclare package Medium =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
        p=100000,
        nPorts=1) annotation (Placement(transformation(extent={{100,80},{80,100}})));
      Fluid.Sources.Boundary_pT bou1(
        redeclare package Medium = Buildings.Media.Water,
        p=100000,
          nPorts=1)
        annotation (Placement(transformation(extent={{-100,-100},{-80,-80}})));
      Modelica.Blocks.Sources.Constant CVset(k=0.8)
        "Scaled differential pressure setpoint"
        annotation (Placement(transformation(extent={{-100,20},{-80,40}})));
      Fluid.Sensors.TemperatureTwoPort senTem(redeclare package Medium =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water, m_flow_nominal=1025*747/3600)
        annotation (Placement(transformation(extent={{-70,80},{-50,100}})));
      Fluid.Sensors.TemperatureTwoPort senTem1(redeclare package Medium =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water, m_flow_nominal=1025*747/3600)
        annotation (Placement(transformation(extent={{40,80},{60,100}})));
      Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource(
              "modelica://Buildings/Data/rjf.txt"),
          columns={2,3,4,5,6,7,8,9,10})
        annotation (Placement(transformation(extent={{-180,80},{-160,100}})));
    equation
      connect(CVset.y, cold_exchanger.TFP_CV122) annotation (Line(points={{-79,30},
                {-46,30},{-46,4},{-12,4}},
                                        color={0,0,127}));
      connect(boundary.ports[1], senTem.port_a)
        annotation (Line(points={{-82,90},{-70,90}}, color={0,127,255}));
      connect(senTem.port_b, cold_exchanger.port_a1) annotation (Line(points={{-50,90},
              {-30,90},{-30,6},{-10,6}}, color={0,127,255}));
      connect(cold_exchanger.port_b1, senTem1.port_a) annotation (Line(points={{10,6},
              {20,6},{20,90},{40,90}}, color={0,127,255}));
      connect(senTem1.port_b, bou.ports[1])
        annotation (Line(points={{60,90},{80,90}}, color={0,127,255}));
        connect(combiTimeTable.y[7], boundary.m_flow_in) annotation (Line(
              points={{-159,90},{-122,90},{-122,98},{-104,98}}, color={0,0,127}));
        connect(combiTimeTable.y[5], boundary.T_in) annotation (Line(points={{
                -159,90},{-122,90},{-122,94},{-104,94}}, color={0,0,127}));
        connect(combiTimeTable.y[8], boundary1.m_flow_in) annotation (Line(
              points={{-159,90},{-140,90},{-140,-120},{140,-120},{140,-82},{102,
                -82}}, color={0,0,127}));
        connect(combiTimeTable.y[1], boundary1.T_in) annotation (Line(points={{
                -159,90},{-140,90},{-140,-120},{140,-120},{140,-86},{102,-86}},
              color={0,0,127}));
        connect(senTem.T, cold_exchanger.PEM_TT200) annotation (Line(points={{-60,101},
                {-60,120},{-200,120},{-200,-4},{-12,-4}},          color={0,0,
                127}));
        connect(bou1.ports[1], cold_exchanger.port_b2) annotation (Line(points=
                {{-80,-90},{-46,-90},{-46,-6},{-10,-6}}, color={0,127,255}));
        connect(cold_exchanger.port_a2, boundary1.ports[1]) annotation (Line(
              points={{10,-6},{46,-6},{46,-90},{80,-90}}, color={0,127,255}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
            coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=2245200,
            Interval=600,
            __Dymola_Algorithm="Dassl"));
    end test_0;

    model Cold_exchanger_basic

      Real sortie2(unit="K");
      Real sortie6(unit="K");

      Fluid.HeatExchangers.PlateHeatExchangerEffectivenessNTU RJF(
        redeclare package Medium1 = Media.Sea_Water,
        redeclare package Medium2 = Buildings.Media.Water,
        m1_flow_nominal=1025*747.6/3600,
        m2_flow_nominal=1001*726.2/3600,
        dp1_nominal=69900,
        dp2_nominal=61900,
        configuration=Buildings.Fluid.Types.HeatExchangerConfiguration.CounterFlow,
        use_Q_flow_nominal=true,
          Q_flow_nominal=4250000,
          T_a1_nominal=283.65,
          T_a2_nominal=277.15)
        annotation (Placement(transformation(extent={{0,0},{20,20}})));

      Fluid.Sources.MassFlowSource_T boundary(
        redeclare package Medium = Media.Sea_Water,
        use_m_flow_in=true,
        m_flow=1025*747/3600,
        use_T_in=true,
        T=288.15,
        nPorts=1)
        annotation (Placement(transformation(extent={{-72,60},{-52,80}})));
      Fluid.Sensors.TemperatureTwoPort senTem(redeclare package Medium =
            Media.Sea_Water, m_flow_nominal=1025*747/3600)
        annotation (Placement(transformation(extent={{-40,60},{-20,80}})));
      Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
        tableOnFile=true,
        tableName="tab1",
        fileName=ModelicaServices.ExternalReferences.loadResource("modelica://Buildings/Data/rjf.txt"),
        columns={2,3,4,5,6,7,8,9,10})
        annotation (Placement(transformation(extent={{-140,60},{-120,80}})));

      Fluid.Sources.Boundary_pT bou(
        redeclare package Medium = Media.Sea_Water,
        p=100000,
        nPorts=1) annotation (Placement(transformation(extent={{100,60},{80,80}})));
      Fluid.Sensors.TemperatureTwoPort senTem1(redeclare package Medium =
            Media.Sea_Water, m_flow_nominal=1025*747/3600)
        annotation (Placement(transformation(extent={{40,60},{60,80}})));
      Fluid.Sources.MassFlowSource_T boundary1(
        redeclare package Medium = Buildings.Media.Water,
        use_m_flow_in=true,
        m_flow=726.2/3600,
        use_T_in=true,
        T=281.15,
        nPorts=1)
        annotation (Placement(transformation(extent={{100,-80},{80,-60}})));
      Fluid.Sources.Boundary_pT bou1(
        redeclare package Medium = Buildings.Media.Water,
        p=100000,
        nPorts=1)
        annotation (Placement(transformation(extent={{-100,-80},{-80,-60}})));
      Fluid.Sensors.TemperatureTwoPort senTem2(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal=726.2/3600,
        T_start=283.15)
        annotation (Placement(transformation(extent={{60,-80},{40,-60}})));
      Fluid.Sensors.TemperatureTwoPort senTem3(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal=726.2/3600,
        T_start=283.15)
        annotation (Placement(transformation(extent={{-50,-80},{-70,-60}})));
    equation
      sortie2=combiTimeTable.y[2];
      sortie6=combiTimeTable.y[6];
      connect(boundary.ports[1],senTem. port_a)
        annotation (Line(points={{-52,70},{-40,70}}, color={0,127,255}));
      connect(combiTimeTable.y[7], boundary.m_flow_in) annotation (Line(points={{-119,
              70},{-92,70},{-92,78},{-74,78}}, color={0,0,127}));
      connect(combiTimeTable.y[5], boundary.T_in) annotation (Line(points={{-119,70},
              {-92,70},{-92,74},{-74,74}}, color={0,0,127}));
      connect(senTem1.port_b,bou. ports[1])
        annotation (Line(points={{60,70},{80,70}}, color={0,127,255}));
      connect(senTem2.port_a,boundary1. ports[1])
        annotation (Line(points={{60,-70},{80,-70}}, color={0,127,255}));
      connect(bou1.ports[1],senTem3. port_b)
        annotation (Line(points={{-80,-70},{-70,-70}}, color={0,127,255}));
      connect(senTem2.port_b, RJF.port_a2) annotation (Line(points={{40,-70},{32,-70},
              {32,4},{20,4}}, color={0,127,255}));
      connect(RJF.port_b2, senTem3.port_a) annotation (Line(points={{0,4},{-26,4},{-26,
              -70},{-50,-70}}, color={0,127,255}));
      connect(senTem.port_b, RJF.port_a1) annotation (Line(points={{-20,70},{-12,70},
              {-12,16},{0,16}}, color={0,127,255}));
      connect(RJF.port_b1, senTem1.port_a) annotation (Line(points={{20,16},{30,16},
              {30,70},{40,70}}, color={0,127,255}));
      connect(combiTimeTable.y[8], boundary1.m_flow_in) annotation (Line(points={{-119,
              70},{-110,70},{-110,-120},{140,-120},{140,-62},{102,-62}}, color={0,0,
              127}));
      connect(combiTimeTable.y[1], boundary1.T_in) annotation (Line(points={{-119,70},
              {-110,70},{-110,-120},{140,-120},{140,-66},{102,-66}}, color={0,0,127}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
            coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=2244600,
            Interval=600,
            __Dymola_Algorithm="Dassl"));
    end Cold_exchanger_basic;

    model test_pump
      Cold_exchanger cold_exchanger(redeclare package Medium1 =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water, redeclare
            package Medium2 =
            Buildings.Media.Water)
        annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
      Fluid.Sources.MassFlowSource_T boundary1(
        redeclare package Medium = Buildings.Media.Water,
          use_m_flow_in=true,
        m_flow=726.2/3600,
          use_T_in=true,
          T=281.15,                            nPorts=1)
        annotation (Placement(transformation(extent={{100,-100},{80,-80}})));
      Fluid.Sources.Boundary_pT bou(
        redeclare package Medium =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
        p=100000,
        nPorts=2) annotation (Placement(transformation(extent={{100,80},{80,100}})));
      Fluid.Sources.Boundary_pT bou1(
        redeclare package Medium = Buildings.Media.Water,
        p=100000,                    nPorts=1)
        annotation (Placement(transformation(extent={{-100,-100},{-80,-80}})));
      Modelica.Blocks.Sources.Constant CVset(k=0.8)
        "Scaled differential pressure setpoint"
        annotation (Placement(transformation(extent={{-100,20},{-80,40}})));
      Fluid.Sensors.TemperatureTwoPort senTem(redeclare package Medium =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water, m_flow_nominal=1025*747/3600)
        annotation (Placement(transformation(extent={{-70,80},{-50,100}})));
      Fluid.Sensors.TemperatureTwoPort senTem1(redeclare package Medium =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water, m_flow_nominal=1025*747/3600)
        annotation (Placement(transformation(extent={{40,80},{60,100}})));
      Fluid.Sensors.TemperatureTwoPort senTem2(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=726.2/3600,
          T_start=283.15)
        annotation (Placement(transformation(extent={{60,-100},{40,-80}})));
      Fluid.Sensors.TemperatureTwoPort senTem3(redeclare package Medium =
              Buildings.Media.Water,           m_flow_nominal=726.2/3600,
          T_start=283.15)
        annotation (Placement(transformation(extent={{-50,-100},{-70,-80}})));
      Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource(
              "modelica://Buildings/Data/rjf.txt"),
          columns={2,3,4,5,6,7,8,9,10})
        annotation (Placement(transformation(extent={{-180,80},{-160,100}})));
      Fluid.Movers.FlowControlled_m_flow fan(
        redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
        m_flow_nominal=1025*747/3600,
        redeclare Fluid.Movers.Data.Pumps.Wilo.Stratos40slash1to8 per,
        inputType=Buildings.Fluid.Types.InputType.Continuous,
        addPowerToMedium=false,
        nominalValuesDefineDefaultPressureCurve=false)
        annotation (Placement(transformation(extent={{-120,80},{-100,100}})));
    equation
      connect(CVset.y, cold_exchanger.TFP_CV122) annotation (Line(points={{-79,30},
                {-46,30},{-46,4},{-12,4}},
                                        color={0,0,127}));
      connect(senTem.port_b, cold_exchanger.port_a1) annotation (Line(points={{-50,90},
              {-30,90},{-30,6},{-10,6}}, color={0,127,255}));
      connect(cold_exchanger.port_b1, senTem1.port_a) annotation (Line(points={{10,6},
              {20,6},{20,90},{40,90}}, color={0,127,255}));
      connect(senTem1.port_b, bou.ports[1])
        annotation (Line(points={{60,90},{70,90},{70,92},{80,92}},
                                                   color={0,127,255}));
      connect(cold_exchanger.port_a2, senTem2.port_b) annotation (Line(points={{10,-6},
              {20,-6},{20,-90},{40,-90}}, color={0,127,255}));
      connect(senTem2.port_a, boundary1.ports[1])
        annotation (Line(points={{60,-90},{80,-90}}, color={0,127,255}));
      connect(bou1.ports[1], senTem3.port_b)
        annotation (Line(points={{-80,-90},{-70,-90}}, color={0,127,255}));
      connect(senTem3.port_a, cold_exchanger.port_b2) annotation (Line(points={{-50,
              -90},{-40,-90},{-40,-6},{-10,-6}}, color={0,127,255}));
        connect(combiTimeTable.y[8], boundary1.m_flow_in) annotation (Line(
              points={{-159,90},{-140,90},{-140,-120},{140,-120},{140,-82},{102,
                -82}}, color={0,0,127}));
        connect(combiTimeTable.y[1], boundary1.T_in) annotation (Line(points={{
                -159,90},{-140,90},{-140,-120},{140,-120},{140,-86},{102,-86}},
              color={0,0,127}));
      connect(senTem.T, cold_exchanger.PEM_TT200) annotation (Line(points={{-60,101},
                {-60,120},{-200,120},{-200,-4},{-12,-4}},
                                                        color={0,0,127}));
      connect(fan.port_b, senTem.port_a)
        annotation (Line(points={{-100,90},{-70,90},{-70,90}}, color={0,127,255}));
      connect(combiTimeTable.y[7], fan.m_flow_in) annotation (Line(points={{-159,90},
              {-140,90},{-140,112},{-110,112},{-110,102}}, color={0,0,127}));
      connect(fan.port_a, bou.ports[2]) annotation (Line(points={{-120,90},{-130,90},
              {-130,140},{74,140},{74,88},{80,88}}, color={0,127,255}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
            coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=2245200,
            Interval=600,
            __Dymola_Algorithm="Dassl"));
    end test_pump;

    model test_temp
      Cold_exchanger cold_exchanger
        annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
      Fluid.Sources.MassFlowSource_T boundary(
        redeclare package Medium =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          use_m_flow_in=true,
        m_flow=1025*747/3600,
          use_T_in=true,
          T=288.15,
        nPorts=1)
        annotation (Placement(transformation(extent={{-102,80},{-82,100}})));
      Fluid.Sources.MassFlowSource_T boundary1(
        redeclare package Medium = Buildings.Media.Water,
          use_m_flow_in=true,
        m_flow=726.2/3600,
          use_T_in=true,
          T=281.15,                            nPorts=1)
        annotation (Placement(transformation(extent={{100,-100},{80,-80}})));
      Fluid.Sources.Boundary_pT bou(
        redeclare package Medium =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
        p=100000,
        nPorts=1) annotation (Placement(transformation(extent={{100,80},{80,100}})));
      Fluid.Sources.Boundary_pT bou1(
        redeclare package Medium = Buildings.Media.Water,
        p=100000,                    nPorts=1)
        annotation (Placement(transformation(extent={{-100,-100},{-80,-80}})));
      Modelica.Blocks.Sources.Constant CVset(k=0.8)
        "Scaled differential pressure setpoint"
        annotation (Placement(transformation(extent={{-100,20},{-80,40}})));
      Fluid.Sensors.TemperatureTwoPort senTem(redeclare package Medium =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water, m_flow_nominal=1025*747/3600)
        annotation (Placement(transformation(extent={{-70,80},{-50,100}})));
      Fluid.Sensors.TemperatureTwoPort senTem1(redeclare package Medium =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water, m_flow_nominal=1025*747/3600)
        annotation (Placement(transformation(extent={{40,80},{60,100}})));
      Fluid.Sensors.TemperatureTwoPort senTem2(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=726.2/3600,
          T_start=283.15)
        annotation (Placement(transformation(extent={{60,-100},{40,-80}})));
      Fluid.Sensors.TemperatureTwoPort senTem3(redeclare package Medium =
              Buildings.Media.Water,           m_flow_nominal=726.2/3600,
          T_start=283.15)
        annotation (Placement(transformation(extent={{-50,-100},{-70,-80}})));
      Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource(
              "modelica://Buildings/Data/rjf.txt"),
          columns={2,3,4,5,6,7,8,9,10})
        annotation (Placement(transformation(extent={{-180,80},{-160,100}})));
    equation
      connect(CVset.y, cold_exchanger.TFP_CV122) annotation (Line(points={{-79,30},
                {-46,30},{-46,4},{-12,4}},
                                        color={0,0,127}));
      connect(boundary.ports[1], senTem.port_a)
        annotation (Line(points={{-82,90},{-70,90}}, color={0,127,255}));
      connect(senTem.port_b, cold_exchanger.port_a1) annotation (Line(points={{-50,90},
              {-30,90},{-30,6},{-10,6}}, color={0,127,255}));
      connect(cold_exchanger.port_b1, senTem1.port_a) annotation (Line(points={{10,6},
              {20,6},{20,90},{40,90}}, color={0,127,255}));
      connect(senTem1.port_b, bou.ports[1])
        annotation (Line(points={{60,90},{80,90}}, color={0,127,255}));
      connect(cold_exchanger.port_a2, senTem2.port_b) annotation (Line(points={{10,-6},
              {20,-6},{20,-90},{40,-90}}, color={0,127,255}));
      connect(senTem2.port_a, boundary1.ports[1])
        annotation (Line(points={{60,-90},{80,-90}}, color={0,127,255}));
      connect(bou1.ports[1], senTem3.port_b)
        annotation (Line(points={{-80,-90},{-70,-90}}, color={0,127,255}));
      connect(senTem3.port_a, cold_exchanger.port_b2) annotation (Line(points={{-50,
              -90},{-40,-90},{-40,-6},{-10,-6}}, color={0,127,255}));
        connect(combiTimeTable.y[7], boundary.m_flow_in) annotation (Line(
              points={{-159,90},{-122,90},{-122,98},{-104,98}}, color={0,0,127}));
        connect(combiTimeTable.y[5], boundary.T_in) annotation (Line(points={{
                -159,90},{-122,90},{-122,94},{-104,94}}, color={0,0,127}));
        connect(combiTimeTable.y[8], boundary1.m_flow_in) annotation (Line(
              points={{-159,90},{-140,90},{-140,-120},{140,-120},{140,-82},{102,
                -82}}, color={0,0,127}));
        connect(combiTimeTable.y[1], boundary1.T_in) annotation (Line(points={{
                -159,90},{-140,90},{-140,-120},{140,-120},{140,-86},{102,-86}},
              color={0,0,127}));
        connect(senTem.T, cold_exchanger.PEM_TT200) annotation (Line(points={{-60,101},
                {-60,120},{-200,120},{-200,-4},{-12,-4}},          color={0,0,
                127}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
            coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=2245200,
            Interval=600,
            __Dymola_Algorithm="Dassl"));
    end test_temp;

    model test_exchanger_dp
      Fluid.Sources.MassFlowSource_T boundary(
        redeclare package Medium = Media.Sea_Water,
          use_m_flow_in=true,
        m_flow=1025*747/3600,
        use_T_in=false,
          T=288.15,
          nPorts=1)
        annotation (Placement(transformation(extent={{-100,40},{-80,60}})));
      Fluid.Sources.Boundary_pT bou1(
        redeclare package Medium = Media.Sea_Water,
      p=100000,
        use_T_in=false,
          nPorts=1)
        annotation (Placement(transformation(extent={{100,40},{80,60}})));

      Fluid.Sources.MassFlowSource_T boundary1(
      redeclare package Medium = Buildings.Media.Water,
          use_m_flow_in=false,
      m_flow=800*747/3600,
        use_T_in=false,
          T=293.15,
          nPorts=1)
        annotation (Placement(transformation(extent={{100,-60},{80,-40}})));
      Fluid.Sources.Boundary_pT bou2(
        redeclare package Medium = Buildings.Media.Water,
      p=100000,
        use_T_in=false,
          nPorts=1)
        annotation (Placement(transformation(extent={{-100,-60},{-80,-40}})));
    Modelica.Blocks.Sources.Ramp ramp(
          height=747.6*1025/3600,
      duration=70000,
      startTime=10000)
      annotation (Placement(transformation(extent={{-140,60},{-120,80}})));
      Fluid.HeatExchangers.PlateHeatExchangerEffectivenessNTU RJF(
          redeclare package Medium1 = Media.Sea_Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=747.6*1025/3600,
          m2_flow_nominal=726.2*1001/3600,
          dp1_nominal=69900,
          dp2_nominal=61900,
          configuration=Buildings.Fluid.Types.HeatExchangerConfiguration.CounterFlow,
          use_Q_flow_nominal=true,
          Q_flow_nominal=4250000,
          T_a1_nominal=283.65,
          T_a2_nominal=277.15)
        annotation (Placement(transformation(extent={{-20,0},{0,20}})));

      Fluid.Sensors.VolumeFlowRate senVolFlo(redeclare package Medium =
            Media.Sea_Water, m_flow_nominal=747.6*1025/3600)
        annotation (Placement(transformation(extent={{-70,40},{-50,60}})));
      Modelica.Blocks.Math.Gain gain1(k=3600)
        annotation (Placement(transformation(extent={{-40,80},{-20,100}})));
    equation
        connect(bou2.ports[1], RJF.port_b2) annotation (Line(points={{-80,-50},
                {-50,-50},{-50,4},{-20,4}}, color={0,127,255}));
        connect(RJF.port_a2, boundary1.ports[1]) annotation (Line(points={{0,4},
                {42,4},{42,-48},{80,-48},{80,-50}}, color={0,127,255}));
        connect(RJF.port_b1, bou1.ports[1]) annotation (Line(points={{0,16},{40,
                16},{40,50},{80,50}}, color={0,127,255}));
        connect(ramp.y, boundary.m_flow_in) annotation (Line(points={{-119,70},
                {-110,70},{-110,58},{-102,58}}, color={0,0,127}));
      connect(RJF.port_a1, senVolFlo.port_b) annotation (Line(points={{-20,16},{-40,
              16},{-40,50},{-50,50}}, color={0,127,255}));
      connect(senVolFlo.port_a, boundary.ports[1])
        annotation (Line(points={{-70,50},{-80,50}}, color={0,127,255}));
      connect(senVolFlo.V_flow, gain1.u)
        annotation (Line(points={{-60,61},{-60,90},{-42,90}}, color={0,0,127}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
            coordinateSystem(preserveAspectRatio=false)),
      experiment(
        StopTime=86400,
        Interval=600,
        __Dymola_Algorithm="Dassl"));
    end test_exchanger_dp;
  end Tests;

  end RJF;

  package SST
    extends Modelica.Icons.VariantsPackage;


    model sst_hot
      extends Fluid.Interfaces.PartialTwoPort;
      parameter Real T_out_set=45+273.15;
      parameter Real T_out_delta_set=0.2;
      parameter Real T_out_sec_set=58+273.15;
      parameter Real T_in_sec_set=43+273.15;
      parameter Real Q_flow_set(final quantity="Power", unit="W")=400000;
      parameter Real P_set(final quantity="Power", unit="W")=390000;
      parameter Real P_delta_set=0.1;
      parameter String fileName=
          ModelicaServices.ExternalReferences.loadResource(
          "modelica://Buildings/Data/tfp_he.txt") "File where matrix is stored"
    annotation (Dialog(
          loadSelector(filter="Text files (*.txt);;MATLAB MAT-files (*.mat)",
              caption="Open file in which table is present")));

      Fluid.Sources.MassFlowSource_T boundary(redeclare package Medium =
            Buildings.Media.Water,
        use_m_flow_in=true,
        use_T_in=true,             nPorts=1)
        annotation (Placement(transformation(extent={{100,60},{80,80}})));
      Fluid.Sources.Boundary_pT bou(redeclare package Medium =
            Buildings.Media.Water, nPorts=1)
        annotation (Placement(transformation(extent={{-100,60},{-80,80}})));
      Fluid.HeatExchangers.PlateHeatExchangerEffectivenessNTU hex(redeclare
          package Medium1 = Buildings.Media.Water, redeclare package Medium2 =
            Buildings.Media.Water,
        m1_flow_nominal=Q_flow_set/(4185*15),
        m2_flow_nominal=Q_flow_set/(4185*15),
        dp1_nominal=50000,
        dp2_nominal=50000,
        configuration=Buildings.Fluid.Types.HeatExchangerConfiguration.CounterFlow,
        use_Q_flow_nominal=false,
        Q_flow_nominal=Q_flow_set,
        T_a1_nominal=316.15,
        T_a2_nominal=333.15,
        eps_nominal=0.95)
        annotation (Placement(transformation(extent={{20,-4},{0,16}})));
      Fluid.Actuators.Valves.TwoWayLinear val(
        redeclare package Medium = Buildings.Media.Water,
                                              m_flow_nominal=Q_flow_set/(4185*15),
          dpValve_nominal=1000,
        use_inputFilter=false)
        annotation (Placement(transformation(extent={{-40,-60},{-20,-40}})));
      Fluid.Sensors.TemperatureTwoPort T_in_sec(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=Q_flow_set/(4185*15))
                                                       annotation (Placement(
            transformation(
            extent={{-10,10},{10,-10}},
            rotation=180,
            origin={50,70})));
      Fluid.Sensors.TemperatureTwoPort T_out_sec(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=Q_flow_set/(4185*15))
                                                       annotation (Placement(
            transformation(
            extent={{-10,10},{10,-10}},
            rotation=180,
            origin={-30,70})));
      Fluid.Sensors.TemperatureTwoPort T_out_prim(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=Q_flow_set/(4185*15))
                                                       annotation (Placement(
            transformation(
            extent={{10,10},{-10,-10}},
            rotation=180,
            origin={50,-50})));
      Fluid.Sensors.TemperatureTwoPort T_in_prim(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=Q_flow_set/(4185*15))
                                                       annotation (Placement(
            transformation(
            extent={{10,10},{-10,-10}},
            rotation=180,
            origin={-70,-50})));
      Controls_a.SST.PID_sst_hot pID_sst_hot(T_out_set=T_out_set,
        T_out_delta_set=T_out_delta_set,
        P_set=P_set,
        P_delta_set=P_delta_set,
        T_out_sec_set=T_out_sec_set,
        T_in_sec_set=T_in_sec_set)
        annotation (Placement(transformation(extent={{-200,-40},{-180,-20}})));
      Fluid.Sensors.VolumeFlowRate senVolFlo(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=Q_flow_set/(4185*15))
        annotation (Placement(transformation(extent={{-120,-60},{-100,-40}})));
      Controls_a.power_meter power_meter
        annotation (Placement(transformation(extent={{-20,-100},{0,-80}})));
      Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
        tableOnFile=true,
        tableName="tab1",
        fileName=fileName,
        columns={2,3})
        annotation (Placement(transformation(extent={{80,100},{100,120}})));

    equation
      connect(val.port_b, hex.port_a2)
        annotation (Line(points={{-20,-50},{-10,-50},{-10,0},{0,0}},
                                                 color={0,127,255}));
      connect(boundary.ports[1], T_in_sec.port_a)
        annotation (Line(points={{80,70},{60,70}}, color={0,127,255}));
      connect(T_in_sec.port_b, hex.port_a1) annotation (Line(points={{40,70},{30,70},
              {30,12},{20,12}}, color={0,127,255}));
      connect(bou.ports[1], T_out_sec.port_b)
        annotation (Line(points={{-80,70},{-40,70}}, color={0,127,255}));
      connect(T_out_sec.port_a, hex.port_b1) annotation (Line(points={{-20,70},{-10,
              70},{-10,12},{0,12}}, color={0,127,255}));
      connect(hex.port_b2, T_out_prim.port_a) annotation (Line(points={{20,0},{30,
              0},{30,-50},{40,-50}}, color={0,127,255}));
      connect(T_out_prim.port_b, port_b) annotation (Line(points={{60,-50},{80,-50},
              {80,0},{100,0}}, color={0,127,255}));
      connect(T_in_prim.port_b, val.port_a)
        annotation (Line(points={{-60,-50},{-40,-50}}, color={0,127,255}));
      connect(pID_sst_hot.T_sec, val.y) annotation (Line(points={{-179,-30},{-30,-30},
              {-30,-38}}, color={0,0,127}));
      connect(T_out_sec.T, pID_sst_hot.T_out_sec) annotation (Line(points={{-30,81},
              {-30,100},{-220,100},{-220,-36},{-202,-36}}, color={0,0,127}));
      connect(T_out_prim.T, pID_sst_hot.T_out_prim) annotation (Line(points={{50,-39},
              {50,-30},{70,-30},{70,-100},{-212,-100},{-212,-30},{-202,-30}},
            color={0,0,127}));
      connect(port_a, senVolFlo.port_a) annotation (Line(points={{-100,0},{-160,0},
              {-160,-50},{-120,-50}}, color={0,127,255}));
      connect(senVolFlo.port_b, T_in_prim.port_a)
        annotation (Line(points={{-100,-50},{-80,-50}}, color={0,127,255}));
      connect(T_in_prim.T, power_meter.T_in) annotation (Line(points={{-70,-39},{-70,
              -34},{-50,-34},{-50,-84},{-22,-84}}, color={0,0,127}));
      connect(T_out_prim.T, power_meter.T_out) annotation (Line(points={{50,-39},{
              50,-30},{70,-30},{70,-100},{-40,-100},{-40,-90},{-22,-90}}, color={0,
              0,127}));
      connect(senVolFlo.V_flow, power_meter.m_flow) annotation (Line(points={{-110,
              -39},{-110,-34},{-88,-34},{-88,-96},{-22,-96}}, color={0,0,127}));
      connect(power_meter.P, pID_sst_hot.Power) annotation (Line(points={{-10,-79},
              {-10,-72},{20,-72},{20,-110},{-232,-110},{-232,-24},{-202,-24}},
            color={0,0,127}));
      connect(combiTimeTable.y[1], boundary.m_flow_in) annotation (Line(points=
              {{101,110},{120,110},{120,78},{102,78}}, color={0,0,127}));
      connect(combiTimeTable.y[2], boundary.T_in) annotation (Line(points={{101,
              110},{120,110},{120,74},{102,74}}, color={0,0,127}));
      annotation (Icon(graphics={
            Rectangle(
              extent={{-100,100},{-90,80}},
              lineColor={0,0,0},
              fillColor={244,125,35},
              fillPattern=FillPattern.Solid),
            Line(points={{-100,-60}}, color={28,108,200}),
            Line(points={{-100,0},{-100,20},{100,20},{100,0}}, color={0,0,0}),
            Rectangle(extent={{-100,100},{-80,80}}, lineColor={0,0,0}),
            Rectangle(extent={{-100,94},{-80,80}}, lineColor={0,0,0}),
            Rectangle(extent={{-100,88},{-80,80}}, lineColor={0,0,0}),
            Line(points={{-60,100},{-60,40},{60,40},{60,100}}, color={0,0,0}),
            Rectangle(
              extent={{-40,-40},{40,-100}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Polygon(
              points={{-40,-40},{0,-10},{40,-40},{-40,-40}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-52,60},{48,0}},
              lineColor={0,0,0},
              fillColor={238,46,47},
              fillPattern=FillPattern.Solid)}));
    end sst_hot;

    model sst_cold
      extends Fluid.Interfaces.PartialTwoPort;
      parameter Real T_out_set=14+273.15;
      parameter Real T_out_delta_set=0.2;
      parameter Real T_out_sec_set=6+273.15;
      parameter Real T_in_sec_set=15+273.15;
      parameter Real Q_flow_set(final quantity="Power", unit="W")=400000;
      parameter Real P_set(final quantity="Power", unit="W")=390000;
      parameter Real P_delta_set=0.1;
      parameter String fileName=
          ModelicaServices.ExternalReferences.loadResource(
          "modelica://Buildings/Data/tfp_he.txt") "File where matrix is stored"
    annotation (Dialog(
          loadSelector(filter="Text files (*.txt);;MATLAB MAT-files (*.mat)",
              caption="Open file in which table is present")));

      Fluid.Sources.MassFlowSource_T boundary(redeclare package Medium =
            Buildings.Media.Water,
        use_m_flow_in=true,
        use_T_in=true,             nPorts=1)
        annotation (Placement(transformation(extent={{100,60},{80,80}})));
      Fluid.Sources.Boundary_pT bou(redeclare package Medium =
            Buildings.Media.Water, nPorts=1)
        annotation (Placement(transformation(extent={{-100,60},{-80,80}})));
      Fluid.HeatExchangers.PlateHeatExchangerEffectivenessNTU hex(redeclare
          package Medium1 = Buildings.Media.Water, redeclare package Medium2 =
            Buildings.Media.Water,
        m1_flow_nominal=Q_flow_set/(4185*15),
        m2_flow_nominal=Q_flow_set/(4185*15),
        dp1_nominal=5000,
        dp2_nominal=5000,
        configuration=Buildings.Fluid.Types.HeatExchangerConfiguration.CounterFlow,
        use_Q_flow_nominal=false,
        Q_flow_nominal=Q_flow_set,
        T_a1_nominal=288.15,
        T_a2_nominal=278.15,
        eps_nominal=0.9)
        annotation (Placement(transformation(extent={{20,-4},{0,16}})));
      Fluid.Actuators.Valves.TwoWayLinear val(redeclare package Medium =
            Buildings.Media.Water,
        m_flow_nominal=Q_flow_set/(4185*15),
        dpValve_nominal=5000,
        use_inputFilter=false)
        annotation (Placement(transformation(extent={{-40,-60},{-20,-40}})));
      Fluid.Sensors.TemperatureTwoPort T_in_sec(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
            transformation(
            extent={{-10,10},{10,-10}},
            rotation=180,
            origin={50,70})));
      Fluid.Sensors.TemperatureTwoPort T_out_sec(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
            transformation(
            extent={{-10,10},{10,-10}},
            rotation=180,
            origin={-30,70})));
      Fluid.Sensors.TemperatureTwoPort T_out_prim(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
            transformation(
            extent={{10,10},{-10,-10}},
            rotation=180,
            origin={50,-50})));
      Fluid.Sensors.TemperatureTwoPort T_in_prim(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
            transformation(
            extent={{10,10},{-10,-10}},
            rotation=180,
            origin={-70,-50})));
      Controls_a.SST.PID_sst_cold pID_sst_cold(
        T_out_set=T_out_set,
        T_out_delta_set=T_out_delta_set,
        P_set=P_set,
        P_delta_set=P_delta_set,
        T_out_sec_set=T_out_sec_set,
        T_in_sec_set=T_in_sec_set)
        annotation (Placement(transformation(extent={{-200,-40},{-180,-20}})));
      Fluid.Sensors.VolumeFlowRate senVolFlo(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=Q_flow_set/(4185*15))
        annotation (Placement(transformation(extent={{-120,-60},{-100,-40}})));
      Controls_a.power_meter power_meter
        annotation (Placement(transformation(extent={{-20,-100},{0,-80}})));
      Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
        tableOnFile=true,
        tableName="tab1",
        fileName=fileName,
        columns={2,3})
        annotation (Placement(transformation(extent={{80,100},{100,120}})));
    equation
      connect(val.port_b, hex.port_a2)
        annotation (Line(points={{-20,-50},{-10,-50},{-10,0},{0,0}},
                                                 color={0,127,255}));
      connect(boundary.ports[1], T_in_sec.port_a)
        annotation (Line(points={{80,70},{60,70}}, color={0,127,255}));
      connect(T_in_sec.port_b, hex.port_a1) annotation (Line(points={{40,70},{30,70},
              {30,12},{20,12}}, color={0,127,255}));
      connect(bou.ports[1], T_out_sec.port_b)
        annotation (Line(points={{-80,70},{-40,70}}, color={0,127,255}));
      connect(T_out_sec.port_a, hex.port_b1) annotation (Line(points={{-20,70},{-10,
              70},{-10,12},{0,12}}, color={0,127,255}));
      connect(hex.port_b2, T_out_prim.port_a) annotation (Line(points={{20,0},{30,
              0},{30,-50},{40,-50}}, color={0,127,255}));
      connect(T_out_prim.port_b, port_b) annotation (Line(points={{60,-50},{80,-50},
              {80,0},{100,0}}, color={0,127,255}));
      connect(T_in_prim.port_b, val.port_a)
        annotation (Line(points={{-60,-50},{-40,-50}}, color={0,127,255}));
      connect(pID_sst_cold.T_sec, val.y) annotation (Line(points={{-179,-30},{-30,
              -30},{-30,-38}}, color={0,0,127}));
      connect(T_out_sec.T, pID_sst_cold.T_out_sec) annotation (Line(points={{-30,
              81},{-30,100},{-220,100},{-220,-36},{-202,-36}}, color={0,0,127}));
      connect(T_out_prim.T, pID_sst_cold.T_out_prim) annotation (Line(points={{
              50,-39},{50,-30},{70,-30},{70,-100},{-212,-100},{-212,-30},{-202,
              -30}}, color={0,0,127}));
      connect(port_a, senVolFlo.port_a) annotation (Line(points={{-100,0},{-160,0},
              {-160,-50},{-120,-50}}, color={0,127,255}));
      connect(senVolFlo.port_b, T_in_prim.port_a)
        annotation (Line(points={{-100,-50},{-80,-50}}, color={0,127,255}));
      connect(T_in_prim.T, power_meter.T_in) annotation (Line(points={{-70,-39},{-70,
              -34},{-50,-34},{-50,-84},{-22,-84}}, color={0,0,127}));
      connect(T_out_prim.T, power_meter.T_out) annotation (Line(points={{50,-39},{
              50,-30},{70,-30},{70,-100},{-40,-100},{-40,-90},{-22,-90}}, color={0,
              0,127}));
      connect(senVolFlo.V_flow, power_meter.m_flow) annotation (Line(points={{-110,
              -39},{-110,-34},{-88,-34},{-88,-96},{-22,-96}}, color={0,0,127}));
      connect(power_meter.P, pID_sst_cold.Power) annotation (Line(points={{-10,
              -79},{-10,-72},{20,-72},{20,-110},{-232,-110},{-232,-24},{-202,-24}},
            color={0,0,127}));
      connect(combiTimeTable.y[1], boundary.T_in) annotation (Line(points={{101,110},
              {120,110},{120,74},{102,74}}, color={0,0,127}));
      connect(combiTimeTable.y[2], boundary.m_flow_in) annotation (Line(points={{101,
              110},{120,110},{120,78},{102,78}}, color={0,0,127}));
      annotation (Icon(graphics={
            Rectangle(
              extent={{-100,100},{-90,80}},
              lineColor={0,0,0},
              fillColor={244,125,35},
              fillPattern=FillPattern.Solid),
            Line(points={{-100,-60}}, color={28,108,200}),
            Line(points={{-100,0},{-100,20},{100,20},{100,0}}, color={0,0,0}),
            Rectangle(extent={{-100,100},{-80,80}}, lineColor={0,0,0}),
            Rectangle(extent={{-100,94},{-80,80}}, lineColor={0,0,0}),
            Rectangle(extent={{-100,88},{-80,80}}, lineColor={0,0,0}),
            Line(points={{-60,100},{-60,40},{60,40},{60,100}}, color={0,0,0}),
            Rectangle(
              extent={{-40,-40},{40,-100}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Polygon(
              points={{-40,-40},{0,-10},{40,-40},{-40,-40}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-52,60},{48,0}},
              lineColor={0,0,0},
              fillColor={28,108,200},
              fillPattern=FillPattern.Solid)}));
    end sst_cold;

    model distribution_hot
    extends Fluid.Interfaces.PartialTwoPort;
      sst_cold caly(redeclare package Medium = Buildings.Media.Water, fileName=
            ModelicaServices.ExternalReferences.loadResource(
            "modelica://Buildings/Data/sst/froid_caly.txt"))
        annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
    equation
      connect(port_a, caly.port_a)
        annotation (Line(points={{-100,0},{-10,0}}, color={0,127,255}));
      connect(caly.port_b, port_b) annotation (Line(points={{10,0},{56,0},{56,0},
              {100,0}}, color={0,127,255}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
            Rectangle(
              extent={{-60,60},{60,40}},
              lineColor={0,0,0},
              fillPattern=FillPattern.HorizontalCylinder,
              fillColor={238,46,47}),
            Rectangle(
              extent={{-60,-40},{60,-60}},
              lineColor={0,0,0},
              fillPattern=FillPattern.HorizontalCylinder,
              fillColor={244,125,35}),
            Rectangle(
              extent={{-10,10},{10,-10}},
              lineColor={0,0,255},
              pattern=LinePattern.None,
              fillColor={95,95,95},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-2,6},{2,-6}},
              fillColor={238,46,47},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None,
              lineColor={0,0,0},
              origin={0,4},
              rotation=90),
            Rectangle(
              extent={{-2,6},{2,-6}},
              fillColor={238,46,47},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None,
              lineColor={0,0,0},
              origin={0,-4},
              rotation=90),
            Rectangle(
              extent={{-2,6},{2,-6}},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None,
              origin={0,0},
              rotation=90),
            Rectangle(
              extent={{-50,10},{-30,-10}},
              lineColor={0,0,255},
              pattern=LinePattern.None,
              fillColor={95,95,95},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-2,6},{2,-6}},
              fillColor={238,46,47},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None,
              lineColor={0,0,0},
              origin={-40,4},
              rotation=90),
            Rectangle(
              extent={{-2,6},{2,-6}},
              fillColor={238,46,47},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None,
              lineColor={0,0,0},
              origin={-40,-4},
              rotation=90),
            Rectangle(
              extent={{-2,6},{2,-6}},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None,
              origin={-40,0},
              rotation=90),
            Rectangle(
              extent={{30,10},{50,-10}},
              lineColor={0,0,255},
              pattern=LinePattern.None,
              fillColor={95,95,95},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-2,6},{2,-6}},
              fillColor={238,46,47},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None,
              lineColor={0,0,0},
              origin={40,4},
              rotation=90),
            Rectangle(
              extent={{-2,6},{2,-6}},
              fillColor={238,46,47},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None,
              lineColor={0,0,0},
              origin={40,-4},
              rotation=90),
            Rectangle(
              extent={{-2,6},{2,-6}},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None,
              origin={40,0},
              rotation=90),
            Line(points={{-40,40},{-40,10}}, color={238,46,47}),
            Line(points={{-40,-10},{-40,-40}}, color={238,46,47}),
            Line(points={{0,-10},{0,-40}}, color={238,46,47}),
            Line(points={{0,40},{0,10}}, color={238,46,47}),
            Line(points={{40,40},{40,10}}, color={238,46,47}),
            Line(points={{40,-10},{40,-40}}, color={238,46,47})}),   Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end distribution_hot;

    model distribution_cold
    extends Fluid.Interfaces.PartialTwoPort;
      sst_cold caly(redeclare package Medium = Buildings.Media.Water, fileName=
            ModelicaServices.ExternalReferences.loadResource(
            "modelica://Buildings/Data/sst/froid_caly.txt"))
        annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
    equation
      connect(port_a, caly.port_a)
        annotation (Line(points={{-100,0},{-10,0}}, color={0,127,255}));
      connect(caly.port_b, port_b)
        annotation (Line(points={{10,0},{100,0}}, color={0,127,255}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
            Rectangle(
              extent={{-60,60},{60,40}},
              lineColor={0,0,0},
              fillPattern=FillPattern.HorizontalCylinder,
              fillColor={28,108,200}),
            Rectangle(
              extent={{-60,-40},{60,-60}},
              lineColor={0,0,0},
              fillPattern=FillPattern.HorizontalCylinder,
              fillColor={170,213,255}),
            Rectangle(
              extent={{-10,10},{10,-10}},
              lineColor={0,0,255},
              pattern=LinePattern.None,
              fillColor={95,95,95},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-2,6},{2,-6}},
              fillColor={28,108,200},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None,
              lineColor={0,0,0},
              origin={0,4},
              rotation=90),
            Rectangle(
              extent={{-2,6},{2,-6}},
              fillColor={28,108,200},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None,
              lineColor={0,0,0},
              origin={0,-4},
              rotation=90),
            Rectangle(
              extent={{-2,6},{2,-6}},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None,
              origin={0,0},
              rotation=90),
            Rectangle(
              extent={{-50,10},{-30,-10}},
              lineColor={0,0,255},
              pattern=LinePattern.None,
              fillColor={95,95,95},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-2,6},{2,-6}},
              fillColor={28,108,200},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None,
              lineColor={0,0,0},
              origin={-40,4},
              rotation=90),
            Rectangle(
              extent={{-2,6},{2,-6}},
              fillColor={28,108,200},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None,
              lineColor={0,0,0},
              origin={-40,-4},
              rotation=90),
            Rectangle(
              extent={{-2,6},{2,-6}},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None,
              origin={-40,0},
              rotation=90),
            Rectangle(
              extent={{30,10},{50,-10}},
              lineColor={0,0,255},
              pattern=LinePattern.None,
              fillColor={95,95,95},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-2,6},{2,-6}},
              fillColor={28,108,200},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None,
              lineColor={0,0,0},
              origin={40,4},
              rotation=90),
            Rectangle(
              extent={{-2,6},{2,-6}},
              fillColor={28,108,200},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None,
              lineColor={0,0,0},
              origin={40,-4},
              rotation=90),
            Rectangle(
              extent={{-2,6},{2,-6}},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None,
              origin={40,0},
              rotation=90,
              lineColor={0,0,0}),
            Line(points={{-40,40},{-40,10}}, color={28,108,200}),
            Line(points={{-40,-10},{-40,-40}}, color={28,108,200}),
            Line(points={{0,-10},{0,-40}}, color={28,108,200}),
            Line(points={{0,40},{0,10}}, color={28,108,200}),
            Line(points={{40,40},{40,10}}, color={28,108,200}),
            Line(points={{40,-10},{40,-40}}, color={28,108,200})}),  Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end distribution_cold;

    model sst_hot_simple
      extends Fluid.Interfaces.PartialTwoPort;
      parameter Real eps_nom=0.72;
      parameter Real Q_flow_set(final quantity="Power", unit="W")=400000;
      parameter String fileName=
          ModelicaServices.ExternalReferences.loadResource(
          "modelica://Buildings/Data/tfp_he.txt") "File where matrix is stored"
    annotation (Dialog(
          loadSelector(filter="Text files (*.txt);;MATLAB MAT-files (*.mat)",
              caption="Open file in which table is present")));

      Fluid.Sources.MassFlowSource_T boundary(redeclare package Medium =
            Buildings.Media.Water,
        use_m_flow_in=true,
        use_T_in=true,             nPorts=1)
        annotation (Placement(transformation(extent={{100,60},{80,80}})));
      Fluid.Sources.Boundary_pT bou(redeclare package Medium =
            Buildings.Media.Water, nPorts=1)
        annotation (Placement(transformation(extent={{-100,60},{-80,80}})));
      Fluid.HeatExchangers.PlateHeatExchangerEffectivenessNTU hex(redeclare
          package Medium1 = Buildings.Media.Water, redeclare package Medium2 =
            Buildings.Media.Water,
        m1_flow_nominal=Q_flow_set/(4185*15),
        m2_flow_nominal=Q_flow_set/(4185*15),
        dp1_nominal=5000,
        dp2_nominal=5000,
        configuration=Buildings.Fluid.Types.HeatExchangerConfiguration.CounterFlow,
        use_Q_flow_nominal=false,
        eps_nominal=eps_nom)
        annotation (Placement(transformation(extent={{20,-4},{0,16}})));
      Fluid.Actuators.Valves.TwoWayLinear val(redeclare package Medium =
            Buildings.Media.Water,
        m_flow_nominal=Q_flow_set/(4185*15),
        dpValve_nominal=5000,
        use_inputFilter=false)
        annotation (Placement(transformation(extent={{-40,-40},{-20,-20}})));
      Fluid.Sensors.TemperatureTwoPort T_in_sec(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
            transformation(
            extent={{-10,10},{10,-10}},
            rotation=180,
            origin={50,70})));
      Fluid.Sensors.TemperatureTwoPort T_out_sec(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
            transformation(
            extent={{-10,10},{10,-10}},
            rotation=180,
            origin={-30,70})));
      Fluid.Sensors.TemperatureTwoPort T_out_prim(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
            transformation(
            extent={{10,10},{-10,-10}},
            rotation=180,
            origin={50,-30})));
      Fluid.Sensors.TemperatureTwoPort T_in_prim(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
            transformation(
            extent={{10,10},{-10,-10}},
            rotation=180,
            origin={-70,-30})));
      Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
        tableOnFile=true,
        tableName="tab1",
        fileName=fileName,
        columns={2,3,4})
        annotation (Placement(transformation(extent={{-180,110},{-160,130}})));
      Controls.Continuous.LimPID PID_T(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=0.05,
        Ti=15,
        initType=Modelica.Blocks.Types.InitPID.NoInit,
        reverseActing=true)  annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-90,40})));
      Modelica.Blocks.Interfaces.RealOutput y annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={0,110})));
      Controls_a.SST.Switch_off switch1
        annotation (Placement(transformation(extent={{-60,20},{-40,40}})));
    equation
      connect(val.port_b, hex.port_a2)
        annotation (Line(points={{-20,-30},{-10,-30},{-10,0},{0,0}},
                                                 color={0,127,255}));
      connect(boundary.ports[1], T_in_sec.port_a)
        annotation (Line(points={{80,70},{60,70}}, color={0,127,255}));
      connect(T_in_sec.port_b, hex.port_a1) annotation (Line(points={{40,70},{30,70},
              {30,12},{20,12}}, color={0,127,255}));
      connect(bou.ports[1], T_out_sec.port_b)
        annotation (Line(points={{-80,70},{-40,70}}, color={0,127,255}));
      connect(T_out_sec.port_a, hex.port_b1) annotation (Line(points={{-20,70},{-10,
              70},{-10,12},{0,12}}, color={0,127,255}));
      connect(hex.port_b2, T_out_prim.port_a) annotation (Line(points={{20,0},{
              30,0},{30,-30},{40,-30}},
                                     color={0,127,255}));
      connect(T_out_prim.port_b, port_b) annotation (Line(points={{60,-30},{80,
              -30},{80,0},{100,0}},
                               color={0,127,255}));
      connect(T_in_prim.port_b, val.port_a)
        annotation (Line(points={{-60,-30},{-40,-30}}, color={0,127,255}));
      connect(combiTimeTable.y[3], PID_T.u_s) annotation (Line(points={{-159,
              120},{-110,120},{-110,40},{-102,40}},color={0,0,127}));
      connect(T_out_sec.T, PID_T.u_m) annotation (Line(points={{-30,81},{-30,90},
              {-120,90},{-120,20},{-90,20},{-90,28}}, color={0,0,127}));
      connect(port_a, T_in_prim.port_a) annotation (Line(points={{-100,0},{-90,
              0},{-90,-30},{-80,-30}}, color={0,127,255}));
      connect(combiTimeTable.y[1], boundary.m_flow_in) annotation (Line(points=
              {{-159,120},{120,120},{120,78},{102,78}}, color={0,0,127}));
      connect(combiTimeTable.y[2], boundary.T_in) annotation (Line(points={{
              -159,120},{120,120},{120,74},{102,74}}, color={0,0,127}));
      connect(PID_T.y, switch1.u1) annotation (Line(points={{-79,40},{-70,40},{
              -70,38},{-62,38}}, color={0,0,127}));
      connect(switch1.y, val.y) annotation (Line(points={{-39,30},{-30,30},{-30,
              -18}}, color={0,0,127}));
      connect(combiTimeTable.y[1], switch1.u2) annotation (Line(points={{-159,
              120},{-110,120},{-110,12},{-70,12},{-70,30},{-62,30}}, color={0,0,
              127}));
      connect(val.y_actual, y) annotation (Line(points={{-25,-23},{-20,-23},{
              -20,40},{0,40},{0,110}}, color={0,0,127}));
      annotation (Icon(graphics={
            Rectangle(
              extent={{-100,100},{-90,80}},
              lineColor={0,0,0},
              fillColor={244,125,35},
              fillPattern=FillPattern.Solid),
            Line(points={{-100,-60}}, color={28,108,200}),
            Line(points={{-100,0},{-100,20},{100,20},{100,0}}, color={0,0,0}),
            Rectangle(extent={{-100,100},{-80,80}}, lineColor={0,0,0}),
            Rectangle(extent={{-100,94},{-80,80}}, lineColor={0,0,0}),
            Rectangle(extent={{-100,88},{-80,80}}, lineColor={0,0,0}),
            Line(points={{-60,100},{-60,40},{60,40},{60,100}}, color={0,0,0}),
            Rectangle(
              extent={{-40,-40},{40,-100}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Polygon(
              points={{-40,-40},{0,-10},{40,-40},{-40,-40}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-52,60},{48,0}},
              lineColor={0,0,0},
              fillColor={238,46,47},
              fillPattern=FillPattern.Solid)}));
    end sst_hot_simple;

    model sst_cold_simple
      extends Fluid.Interfaces.PartialTwoPort;
      parameter Real eps_nom=0.72;
      parameter Real Q_flow_set(final quantity="Power", unit="W")=400000;
      parameter String fileName=
          ModelicaServices.ExternalReferences.loadResource(
          "modelica://Buildings/Data/tfp_he.txt") "File where matrix is stored"
    annotation (Dialog(
          loadSelector(filter="Text files (*.txt);;MATLAB MAT-files (*.mat)",
              caption="Open file in which table is present")));

      Fluid.Sources.MassFlowSource_T boundary(redeclare package Medium =
            Buildings.Media.Water,
        use_m_flow_in=true,
        use_T_in=true,             nPorts=1)
        annotation (Placement(transformation(extent={{100,60},{80,80}})));
      Fluid.Sources.Boundary_pT bou(redeclare package Medium =
            Buildings.Media.Water, nPorts=1)
        annotation (Placement(transformation(extent={{-100,60},{-80,80}})));
      Fluid.HeatExchangers.PlateHeatExchangerEffectivenessNTU hex(redeclare
          package Medium1 = Buildings.Media.Water, redeclare package Medium2 =
            Buildings.Media.Water,
        m1_flow_nominal=Q_flow_set/(4185*15),
        m2_flow_nominal=Q_flow_set/(4185*15),
        dp1_nominal=5000,
        dp2_nominal=5000,
        configuration=Buildings.Fluid.Types.HeatExchangerConfiguration.CounterFlow,
        use_Q_flow_nominal=false,
        eps_nominal=eps_nom)
        annotation (Placement(transformation(extent={{20,-4},{0,16}})));
      Fluid.Actuators.Valves.TwoWayLinear val(redeclare package Medium =
            Buildings.Media.Water,
        m_flow_nominal=Q_flow_set/(4185*15),
        dpValve_nominal=5000,
        use_inputFilter=false)
        annotation (Placement(transformation(extent={{-40,-40},{-20,-20}})));
      Fluid.Sensors.TemperatureTwoPort T_in_sec(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
            transformation(
            extent={{-10,10},{10,-10}},
            rotation=180,
            origin={50,70})));
      Fluid.Sensors.TemperatureTwoPort T_out_sec(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
            transformation(
            extent={{-10,10},{10,-10}},
            rotation=180,
            origin={-30,70})));
      Fluid.Sensors.TemperatureTwoPort T_out_prim(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
            transformation(
            extent={{10,10},{-10,-10}},
            rotation=180,
            origin={50,-30})));
      Fluid.Sensors.TemperatureTwoPort T_in_prim(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
            transformation(
            extent={{10,10},{-10,-10}},
            rotation=180,
            origin={-70,-30})));
      Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
        tableOnFile=true,
        tableName="tab1",
        fileName=fileName,
        columns={2,3,4})
        annotation (Placement(transformation(extent={{-180,110},{-160,130}})));
      Controls.Continuous.LimPID PID_T(
        controllerType=Modelica.Blocks.Types.SimpleController.PI,
        k=0.05,
        Ti=15,
        initType=Modelica.Blocks.Types.InitPID.NoInit,
        reverseActing=false) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-90,40})));
      Modelica.Blocks.Interfaces.RealOutput y annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={0,110})));
      Controls_a.SST.Switch_off switch1
        annotation (Placement(transformation(extent={{-60,20},{-40,40}})));
    equation
      connect(val.port_b, hex.port_a2)
        annotation (Line(points={{-20,-30},{-10,-30},{-10,0},{0,0}},
                                                 color={0,127,255}));
      connect(boundary.ports[1], T_in_sec.port_a)
        annotation (Line(points={{80,70},{60,70}}, color={0,127,255}));
      connect(T_in_sec.port_b, hex.port_a1) annotation (Line(points={{40,70},{30,70},
              {30,12},{20,12}}, color={0,127,255}));
      connect(bou.ports[1], T_out_sec.port_b)
        annotation (Line(points={{-80,70},{-40,70}}, color={0,127,255}));
      connect(T_out_sec.port_a, hex.port_b1) annotation (Line(points={{-20,70},{-10,
              70},{-10,12},{0,12}}, color={0,127,255}));
      connect(hex.port_b2, T_out_prim.port_a) annotation (Line(points={{20,0},{
              30,0},{30,-30},{40,-30}},
                                     color={0,127,255}));
      connect(T_out_prim.port_b, port_b) annotation (Line(points={{60,-30},{80,
              -30},{80,0},{100,0}},
                               color={0,127,255}));
      connect(T_in_prim.port_b, val.port_a)
        annotation (Line(points={{-60,-30},{-40,-30}}, color={0,127,255}));
      connect(combiTimeTable.y[3], PID_T.u_s) annotation (Line(points={{-159,
              120},{-110,120},{-110,40},{-102,40}},color={0,0,127}));
      connect(T_out_sec.T, PID_T.u_m) annotation (Line(points={{-30,81},{-30,90},
              {-120,90},{-120,20},{-90,20},{-90,28}}, color={0,0,127}));
      connect(port_a, T_in_prim.port_a) annotation (Line(points={{-100,0},{-90,
              0},{-90,-30},{-80,-30}}, color={0,127,255}));
      connect(combiTimeTable.y[1], boundary.m_flow_in) annotation (Line(points=
              {{-159,120},{120,120},{120,78},{102,78}}, color={0,0,127}));
      connect(combiTimeTable.y[2], boundary.T_in) annotation (Line(points={{
              -159,120},{120,120},{120,74},{102,74}}, color={0,0,127}));
      connect(PID_T.y, switch1.u1) annotation (Line(points={{-79,40},{-70,40},{
              -70,38},{-62,38}}, color={0,0,127}));
      connect(switch1.y, val.y) annotation (Line(points={{-39,30},{-30,30},{-30,
              -18}}, color={0,0,127}));
      connect(combiTimeTable.y[1], switch1.u2) annotation (Line(points={{-159,
              120},{-110,120},{-110,12},{-70,12},{-70,30},{-62,30}}, color={0,0,
              127}));
      connect(val.y_actual, y) annotation (Line(points={{-25,-23},{-20,-23},{
              -20,40},{0,40},{0,110}}, color={0,0,127}));
      annotation (Icon(graphics={
            Rectangle(
              extent={{-100,100},{-90,80}},
              lineColor={0,0,0},
              fillColor={244,125,35},
              fillPattern=FillPattern.Solid),
            Line(points={{-100,-60}}, color={28,108,200}),
            Line(points={{-100,0},{-100,20},{100,20},{100,0}}, color={0,0,0}),
            Rectangle(extent={{-100,100},{-80,80}}, lineColor={0,0,0}),
            Rectangle(extent={{-100,94},{-80,80}}, lineColor={0,0,0}),
            Rectangle(extent={{-100,88},{-80,80}}, lineColor={0,0,0}),
            Line(points={{-60,100},{-60,40},{60,40},{60,100}}, color={0,0,0}),
            Rectangle(
              extent={{-40,-40},{40,-100}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Polygon(
              points={{-40,-40},{0,-10},{40,-40},{-40,-40}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-52,60},{48,0}},
              lineColor={0,0,0},
              fillColor={28,108,200},
              fillPattern=FillPattern.Solid)}));
    end sst_cold_simple;

    model distribution_hot_simple
    extends Fluid.Interfaces.PartialTwoPort;
      Modelica.Blocks.Math.MinMax minMax(nu=1)
        annotation (Placement(transformation(extent={{-40,60},{-20,80}})));
      Modelica.Blocks.Interfaces.RealOutput y annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={0,110})));
      sst_hot_simple sst_hot_simple1(
        redeclare package Medium = Buildings.Media.Water,
        eps_nom=0.84,
        fileName=ModelicaServices.ExternalReferences.loadResource(
            "modelica://Buildings/Data/sst/chaud_nexi_1h.txt"))
        annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
    equation
      connect(minMax.yMax, y)
        annotation (Line(points={{-19,76},{0,76},{0,110}}, color={0,0,127}));
      connect(port_a, sst_hot_simple1.port_a)
        annotation (Line(points={{-100,0},{-10,0}}, color={0,127,255}));
      connect(sst_hot_simple1.port_b, port_b)
        annotation (Line(points={{10,0},{100,0}}, color={0,127,255}));
      connect(sst_hot_simple1.y, minMax.u[1]) annotation (Line(points={{0,11},{
              0,40},{-60,40},{-60,70},{-40,70}}, color={0,0,127}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
            Rectangle(
              extent={{-60,60},{60,40}},
              lineColor={0,0,0},
              fillPattern=FillPattern.HorizontalCylinder,
              fillColor={238,46,47}),
            Rectangle(
              extent={{-60,-40},{60,-60}},
              lineColor={0,0,0},
              fillPattern=FillPattern.HorizontalCylinder,
              fillColor={244,125,35}),
            Rectangle(
              extent={{-10,10},{10,-10}},
              lineColor={0,0,255},
              pattern=LinePattern.None,
              fillColor={95,95,95},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-2,6},{2,-6}},
              fillColor={238,46,47},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None,
              lineColor={0,0,0},
              origin={0,4},
              rotation=90),
            Rectangle(
              extent={{-2,6},{2,-6}},
              fillColor={238,46,47},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None,
              lineColor={0,0,0},
              origin={0,-4},
              rotation=90),
            Rectangle(
              extent={{-2,6},{2,-6}},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None,
              origin={0,0},
              rotation=90),
            Rectangle(
              extent={{-50,10},{-30,-10}},
              lineColor={0,0,255},
              pattern=LinePattern.None,
              fillColor={95,95,95},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-2,6},{2,-6}},
              fillColor={238,46,47},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None,
              lineColor={0,0,0},
              origin={-40,4},
              rotation=90),
            Rectangle(
              extent={{-2,6},{2,-6}},
              fillColor={238,46,47},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None,
              lineColor={0,0,0},
              origin={-40,-4},
              rotation=90),
            Rectangle(
              extent={{-2,6},{2,-6}},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None,
              origin={-40,0},
              rotation=90),
            Rectangle(
              extent={{30,10},{50,-10}},
              lineColor={0,0,255},
              pattern=LinePattern.None,
              fillColor={95,95,95},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-2,6},{2,-6}},
              fillColor={238,46,47},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None,
              lineColor={0,0,0},
              origin={40,4},
              rotation=90),
            Rectangle(
              extent={{-2,6},{2,-6}},
              fillColor={238,46,47},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None,
              lineColor={0,0,0},
              origin={40,-4},
              rotation=90),
            Rectangle(
              extent={{-2,6},{2,-6}},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None,
              origin={40,0},
              rotation=90),
            Line(points={{-40,40},{-40,10}}, color={238,46,47}),
            Line(points={{-40,-10},{-40,-40}}, color={238,46,47}),
            Line(points={{0,-10},{0,-40}}, color={238,46,47}),
            Line(points={{0,40},{0,10}}, color={238,46,47}),
            Line(points={{40,40},{40,10}}, color={238,46,47}),
            Line(points={{40,-10},{40,-40}}, color={238,46,47})}),   Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end distribution_hot_simple;

    model distribution_cold_simple
    extends Fluid.Interfaces.PartialTwoPort;
      sst_cold_simple sst_cold_simple1(
        redeclare package Medium = Buildings.Media.Water,
        eps_nom=0.72,
        fileName=ModelicaServices.ExternalReferences.loadResource(
            "modelica://Buildings/Data/sst/froid_caly_1h.txt"))
        annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
      Modelica.Blocks.Interfaces.RealOutput y annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={0,110})));
      Modelica.Blocks.Math.MinMax minMax(nu=1)
        annotation (Placement(transformation(extent={{-40,80},{-20,100}})));
    equation
      connect(port_a, sst_cold_simple1.port_a)
        annotation (Line(points={{-100,0},{-10,0}}, color={0,127,255}));
      connect(sst_cold_simple1.port_b, port_b)
        annotation (Line(points={{10,0},{100,0}}, color={0,127,255}));
      connect(sst_cold_simple1.y, minMax.u[1]) annotation (Line(points={{0,11},
              {0,72},{-58,72},{-58,90},{-40,90}}, color={0,0,127}));
      connect(minMax.yMax, y)
        annotation (Line(points={{-19,96},{0,96},{0,110}}, color={0,0,127}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
            Rectangle(
              extent={{-60,60},{60,40}},
              lineColor={0,0,0},
              fillPattern=FillPattern.HorizontalCylinder,
              fillColor={28,108,200}),
            Rectangle(
              extent={{-60,-40},{60,-60}},
              lineColor={0,0,0},
              fillPattern=FillPattern.HorizontalCylinder,
              fillColor={170,213,255}),
            Rectangle(
              extent={{-10,10},{10,-10}},
              lineColor={0,0,255},
              pattern=LinePattern.None,
              fillColor={95,95,95},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-2,6},{2,-6}},
              fillColor={28,108,200},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None,
              lineColor={0,0,0},
              origin={0,4},
              rotation=90),
            Rectangle(
              extent={{-2,6},{2,-6}},
              fillColor={28,108,200},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None,
              lineColor={0,0,0},
              origin={0,-4},
              rotation=90),
            Rectangle(
              extent={{-2,6},{2,-6}},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None,
              origin={0,0},
              rotation=90),
            Rectangle(
              extent={{-50,10},{-30,-10}},
              lineColor={0,0,255},
              pattern=LinePattern.None,
              fillColor={95,95,95},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-2,6},{2,-6}},
              fillColor={28,108,200},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None,
              lineColor={0,0,0},
              origin={-40,4},
              rotation=90),
            Rectangle(
              extent={{-2,6},{2,-6}},
              fillColor={28,108,200},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None,
              lineColor={0,0,0},
              origin={-40,-4},
              rotation=90),
            Rectangle(
              extent={{-2,6},{2,-6}},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None,
              origin={-40,0},
              rotation=90),
            Rectangle(
              extent={{30,10},{50,-10}},
              lineColor={0,0,255},
              pattern=LinePattern.None,
              fillColor={95,95,95},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-2,6},{2,-6}},
              fillColor={28,108,200},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None,
              lineColor={0,0,0},
              origin={40,4},
              rotation=90),
            Rectangle(
              extent={{-2,6},{2,-6}},
              fillColor={28,108,200},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None,
              lineColor={0,0,0},
              origin={40,-4},
              rotation=90),
            Rectangle(
              extent={{-2,6},{2,-6}},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None,
              origin={40,0},
              rotation=90,
              lineColor={0,0,0}),
            Line(points={{-40,40},{-40,10}}, color={28,108,200}),
            Line(points={{-40,-10},{-40,-40}}, color={28,108,200}),
            Line(points={{0,-10},{0,-40}}, color={28,108,200}),
            Line(points={{0,40},{0,10}}, color={28,108,200}),
            Line(points={{40,40},{40,10}}, color={28,108,200}),
            Line(points={{40,-10},{40,-40}}, color={28,108,200})}),  Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end distribution_cold_simple;

    package Tests
    extends Modelica.Icons.ExamplesPackage;
      model sst
        Fluid.Sources.MassFlowSource_T boundary(redeclare package Medium =
              Buildings.Media.Water, nPorts=1)
          annotation (Placement(transformation(extent={{100,60},{80,80}})));
        Fluid.Sources.Boundary_pT bou(redeclare package Medium =
              Buildings.Media.Water, nPorts=1)
          annotation (Placement(transformation(extent={{-100,60},{-80,80}})));
        Fluid.HeatExchangers.PlateHeatExchangerEffectivenessNTU hex(redeclare
            package Medium1 = Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water,
          configuration=Buildings.Fluid.Types.HeatExchangerConfiguration.CounterFlow)
          annotation (Placement(transformation(extent={{20,-4},{0,16}})));
        Fluid.Actuators.Valves.TwoWayLinear val
          annotation (Placement(transformation(extent={{-40,-60},{-20,-40}})));
        Fluid.Sensors.TemperatureTwoPort T_in_sec(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=180,
              origin={50,70})));
        Fluid.Sensors.TemperatureTwoPort T_out_sec(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=180,
              origin={-30,70})));
        Fluid.Sensors.TemperatureTwoPort T_out_prim(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={50,-50})));
        Fluid.Sensors.TemperatureTwoPort T_in_prim(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={-70,-50})));
        Controls_a.SST.PID_sst_hot pID_sst_hot
          annotation (Placement(transformation(extent={{-200,-40},{-180,-20}})));
        Fluid.Sensors.VolumeFlowRate senVolFlo(redeclare package Medium =
              Buildings.Media.Water)
          annotation (Placement(transformation(extent={{-120,-60},{-100,-40}})));
        Controls_a.power_meter power_meter
          annotation (Placement(transformation(extent={{-20,-100},{0,-80}})));
      equation
        connect(val.port_b, hex.port_a2)
          annotation (Line(points={{-20,-50},{-10,-50},{-10,0},{0,0}},
                                                   color={0,127,255}));
        connect(boundary.ports[1], T_in_sec.port_a)
          annotation (Line(points={{80,70},{60,70}}, color={0,127,255}));
        connect(T_in_sec.port_b, hex.port_a1) annotation (Line(points={{40,70},{30,70},
                {30,12},{20,12}}, color={0,127,255}));
        connect(bou.ports[1], T_out_sec.port_b)
          annotation (Line(points={{-80,70},{-40,70}}, color={0,127,255}));
        connect(T_out_sec.port_a, hex.port_b1) annotation (Line(points={{-20,70},{-10,
                70},{-10,12},{0,12}}, color={0,127,255}));
        connect(hex.port_b2, T_out_prim.port_a) annotation (Line(points={{20,0},{30,
                0},{30,-50},{40,-50}}, color={0,127,255}));
        connect(T_out_prim.port_b, port_b) annotation (Line(points={{60,-50},{80,-50},
                {80,0},{100,0}}, color={0,127,255}));
        connect(T_in_prim.port_b, val.port_a)
          annotation (Line(points={{-60,-50},{-40,-50}}, color={0,127,255}));
        connect(pID_sst_hot.T_sec, val.y) annotation (Line(points={{-179,-30},{-30,-30},
                {-30,-38}}, color={0,0,127}));
        connect(T_out_sec.T, pID_sst_hot.T_out_sec) annotation (Line(points={{-30,81},
                {-30,100},{-220,100},{-220,-36},{-202,-36}}, color={0,0,127}));
        connect(T_out_prim.T, pID_sst_hot.T_out_prim) annotation (Line(points={{50,-39},
                {50,-30},{70,-30},{70,-100},{-212,-100},{-212,-30},{-202,-30}},
              color={0,0,127}));
        connect(port_a, senVolFlo.port_a) annotation (Line(points={{-100,0},{-160,0},
                {-160,-50},{-120,-50}}, color={0,127,255}));
        connect(senVolFlo.port_b, T_in_prim.port_a)
          annotation (Line(points={{-100,-50},{-80,-50}}, color={0,127,255}));
        connect(T_in_prim.T, power_meter.T_in) annotation (Line(points={{-70,-39},{-70,
                -34},{-50,-34},{-50,-84},{-22,-84}}, color={0,0,127}));
        connect(T_out_prim.T, power_meter.T_out) annotation (Line(points={{50,-39},{
                50,-30},{70,-30},{70,-100},{-40,-100},{-40,-90},{-22,-90}}, color={0,
                0,127}));
        connect(senVolFlo.V_flow, power_meter.m_flow) annotation (Line(points={{-110,
                -39},{-110,-34},{-88,-34},{-88,-96},{-22,-96}}, color={0,0,127}));
        connect(power_meter.P, pID_sst_hot.Power) annotation (Line(points={{-10,-79},
                {-10,-72},{20,-72},{20,-110},{-232,-110},{-232,-24},{-202,-24}},
              color={0,0,127}));
        annotation (Icon(graphics={
              Rectangle(
                extent={{-100,100},{-90,80}},
                lineColor={0,0,0},
                fillColor={244,125,35},
                fillPattern=FillPattern.Solid),
              Line(points={{-100,-60}}, color={28,108,200}),
              Line(points={{-100,0},{-100,20},{100,20},{100,0}}, color={0,0,0}),
              Rectangle(extent={{-100,100},{-80,80}}, lineColor={0,0,0}),
              Rectangle(extent={{-100,94},{-80,80}}, lineColor={0,0,0}),
              Rectangle(extent={{-100,88},{-80,80}}, lineColor={0,0,0}),
              Line(points={{-60,48},{-60,32},{-60,26},{60,26},{60,40},{60,50}},
                  color={0,0,0}),
              Rectangle(
                extent={{-40,-40},{40,-100}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{-40,-40},{0,-10},{40,-40},{-40,-40}},
                lineColor={0,0,0},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-40,34},{40,12}},
                lineColor={0,0,0},
                fillColor={0,140,72},
                fillPattern=FillPattern.Solid)}));
      end sst;

      model sst_1
        sst_cold sst_cold1(redeclare package Medium = Buildings.Media.Water, fileName=
             ModelicaServices.ExternalReferences.loadResource("modelica://Buildings/Data/sst/froid_caly_1h.txt"))
          annotation (Placement(transformation(extent={{-20,0},{0,20}})));
        Fluid.Sources.Boundary_pT bou(redeclare package Medium =
              Buildings.Media.Water,
          use_T_in=true,             nPorts=2)
          annotation (Placement(transformation(extent={{100,-20},{80,0}})));
        Fluid.Movers.FlowControlled_dp fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=200/3.6,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_PEG per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          dp_nominal(displayUnit="bar") = 500000,
          constantHead(displayUnit="bar") = 500000)
          annotation (Placement(transformation(extent={{-80,0},{-60,20}})));
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource("modelica://Buildings/Data/sst/froid_caly_ref_1h.txt"),
          columns={2,3,4,5,6,7,8,9,10,11,12,13})
          annotation (Placement(transformation(extent={{-100,80},{-80,100}})));

        Modelica.Blocks.Interfaces.RealOutput temperature[8](final unit="K",
                                                  displayUnit="degC")
          annotation (Placement(transformation(extent={{0,80},{20,100}})));
      equation
        for k in [1:8] loop
          temperature[k] = combiTimeTable.y[k];
        end for;
        connect(sst_cold1.port_b, bou.ports[1]) annotation (Line(points={{0,10},{30,10},
                {30,-8},{80,-8}},           color={0,127,255}));
        connect(fan.port_b, sst_cold1.port_a)
          annotation (Line(points={{-60,10},{-20,10}}, color={0,127,255}));
        connect(fan.port_a, bou.ports[2]) annotation (Line(points={{-80,10},{-90,10},{
                -90,-40},{80,-40},{80,-12}}, color={0,127,255}));

        connect(combiTimeTable.y[1], bou.T_in) annotation (Line(points={{-79,90},{-70,
                90},{-70,110},{112,110},{112,-6},{102,-6}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end sst_1;

      model time_table
        Real temp;
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource("modelica://Buildings/Data/sst/froid_caly_b.txt"),
          columns={2,3})
          annotation (Placement(transformation(extent={{0,0},{20,20}})));

      equation
        temp = combiTimeTable.y[1] - 273.15;
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end time_table;

      model test
        Fluid.Sources.MassFlowSource_T boundary(
          redeclare package Medium = Buildings.Media.Water,
          use_m_flow_in=true,
          use_T_in=true,
          nPorts=1)
          annotation (Placement(transformation(extent={{100,40},{80,60}})));
        Fluid.Sources.Boundary_pT bou(redeclare package Medium =
              Buildings.Media.Water, nPorts=1)
          annotation (Placement(transformation(extent={{-100,40},{-80,60}})));
        Fluid.HeatExchangers.PlateHeatExchangerEffectivenessNTU hex(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=500000/(4185*15),
          m2_flow_nominal=500000/(4185*15),
          dp1_nominal=5000,
          dp2_nominal=5000,
          configuration=Buildings.Fluid.Types.HeatExchangerConfiguration.CounterFlow,
          use_Q_flow_nominal=false,
          Q_flow_nominal(displayUnit="kW") = 500000,
          T_a1_nominal=288.15,
          T_a2_nominal=278.15,
          eps_nominal=0.95)
          annotation (Placement(transformation(extent={{20,-20},{0,0}})));

        Fluid.Sensors.TemperatureTwoPort T_in_sec(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=180,
              origin={50,50})));
        Fluid.Sensors.TemperatureTwoPort T_out_sec(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=180,
              origin={-30,50})));
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource(
              "modelica://Buildings/Data/sst/froid_caly_b.txt"),
          columns={2,3})
          annotation (Placement(transformation(extent={{80,80},{100,100}})));
        Fluid.Sources.MassFlowSource_T boundary1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow=3,
          T=278.15,
          nPorts=1)
          annotation (Placement(transformation(extent={{-100,-60},{-80,-40}})));
        Fluid.Sources.Boundary_pT bou1(redeclare package Medium =
              Buildings.Media.Water, nPorts=1)
          annotation (Placement(transformation(extent={{80,-40},{60,-20}})));
      equation
        connect(boundary.ports[1],T_in_sec. port_a)
          annotation (Line(points={{80,50},{60,50}}, color={0,127,255}));
        connect(T_in_sec.port_b,hex. port_a1) annotation (Line(points={{40,50},
                {30,50},{30,-4},{20,-4}},
                                  color={0,127,255}));
        connect(bou.ports[1],T_out_sec. port_b)
          annotation (Line(points={{-80,50},{-40,50}}, color={0,127,255}));
        connect(T_out_sec.port_a,hex. port_b1) annotation (Line(points={{-20,50},
                {-10,50},{-10,-4},{0,-4}},
                                      color={0,127,255}));
        connect(combiTimeTable.y[1],boundary. T_in) annotation (Line(points={{101,90},
                {120,90},{120,54},{102,54}},  color={0,0,127}));
        connect(combiTimeTable.y[2],boundary. m_flow_in) annotation (Line(points={{101,90},
                {120,90},{120,58},{102,58}},       color={0,0,127}));
        connect(boundary1.ports[1], hex.port_a2) annotation (Line(points={{-80,-50},
                {-60,-50},{-60,-16},{0,-16}},      color={0,127,255}));
        connect(hex.port_b2, bou1.ports[1]) annotation (Line(points={{20,-16},{
                40,-16},{40,-30},{60,-30}}, color={0,127,255}));
        annotation (
          Icon(coordinateSystem(preserveAspectRatio=false)),
          Diagram(coordinateSystem(preserveAspectRatio=false)),
          experiment(StopTime=6000, __Dymola_Algorithm="Dassl"));
      end test;

      model test_2
        Fluid.Sources.Boundary_pT bou1(redeclare package Medium =
              Buildings.Media.Water, nPorts=1)
          annotation (Placement(transformation(extent={{80,0},{60,20}})));
        distribution_cold distribution_cold1(redeclare package Medium =
              Buildings.Media.Water)
          annotation (Placement(transformation(extent={{0,0},{20,20}})));
        Fluid.Sources.Boundary_pT bou2(
          redeclare package Medium = Buildings.Media.Water,
          p(displayUnit="Pa") = 100000 + 10000,
          T=279.15,
          nPorts=1)
          annotation (Placement(transformation(extent={{-60,0},{-40,20}})));
      equation
        connect(distribution_cold1.port_b, bou1.ports[1])
          annotation (Line(points={{20,10},{60,10}}, color={0,127,255}));
        connect(distribution_cold1.port_a, bou2.ports[1]) annotation (Line(
              points={{0,10},{-22,10},{-22,10},{-40,10}}, color={0,127,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end test_2;

      model distri
        distribution_cold distribution_cold1(redeclare package Medium =
              Buildings.Media.Water)
          annotation (Placement(transformation(extent={{40,20},{60,40}})));
        Fluid.Movers.FlowControlled_m_flow fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=200/3.6,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_PEG per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          constantMassFlowRate=200/3.6)
          annotation (Placement(transformation(extent={{-60,20},{-40,40}})));
        Fluid.Sources.Boundary_pT bou(
          redeclare package Medium = Buildings.Media.Water,
          T=278.15,
          nPorts=4)
          annotation (Placement(transformation(extent={{-100,-80},{-80,-60}})));
        Fluid.Actuators.Valves.TwoWayLinear val(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=200/3.6,
          dpValve_nominal=10000,
          use_inputFilter=false) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={-10,-50})));
        Controls.Continuous.LimPID conPID(reverseActing=false)
          annotation (Placement(transformation(extent={{120,-20},{140,0}})));
        Fluid.Sensors.RelativePressure senRelPre annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={30,-30})));
        Modelica.Blocks.Sources.RealExpression realExpression(y=10000)
          annotation (Placement(transformation(extent={{86,-20},{106,0}})));
      equation
        connect(fan.port_a, bou.ports[1]) annotation (Line(points={{-60,30},{
                -70,30},{-70,-67},{-80,-67}}, color={0,127,255}));
        connect(fan.port_b, distribution_cold1.port_a)
          annotation (Line(points={{-40,30},{40,30}}, color={0,127,255}));
        connect(distribution_cold1.port_b, bou.ports[2]) annotation (Line(
              points={{60,30},{80,30},{80,-69},{-80,-69}}, color={0,127,255}));
        connect(fan.port_b, val.port_a) annotation (Line(points={{-40,30},{-10,
                30},{-10,-40}}, color={0,127,255}));
        connect(val.port_b, bou.ports[3]) annotation (Line(points={{-10,-60},{
                -10,-71},{-80,-71}}, color={0,127,255}));
        connect(senRelPre.port_a, fan.port_b) annotation (Line(points={{30,-20},
                {30,30},{-40,30}}, color={0,127,255}));
        connect(senRelPre.port_b, bou.ports[4]) annotation (Line(points={{30,
                -40},{30,-73},{-80,-73}}, color={0,127,255}));
        connect(senRelPre.p_rel, conPID.u_m) annotation (Line(points={{21,-30},
                {14,-30},{14,-44},{130,-44},{130,-22}}, color={0,0,127}));
        connect(conPID.y, val.y) annotation (Line(points={{141,-10},{160,-10},{
                160,-50},{2,-50}}, color={0,0,127}));
        connect(realExpression.y, conPID.u_s)
          annotation (Line(points={{107,-10},{118,-10}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end distri;

      model temp
        Modelica.Blocks.Interfaces.RealInput u
          annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
        Modelica.Blocks.Interfaces.RealOutput y
          annotation (Placement(transformation(extent={{100,-10},{120,10}})));
      equation
        y=u-273.15;
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end temp;

      model aa
        Modelica.Blocks.Interfaces.RealInput u[8]
          annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
        Modelica.Blocks.Interfaces.RealOutput y[8]
          annotation (Placement(transformation(extent={{100,-10},{120,10}})));

        temp temp1
          annotation (Placement(transformation(extent={{-20,60},{0,80}})));
        temp temp2
          annotation (Placement(transformation(extent={{20,40},{40,60}})));
        temp temp3
          annotation (Placement(transformation(extent={{-20,20},{0,40}})));
        temp temp4
          annotation (Placement(transformation(extent={{20,0},{40,20}})));
        temp temp5
          annotation (Placement(transformation(extent={{-20,-20},{0,0}})));
        temp temp6
          annotation (Placement(transformation(extent={{20,-40},{40,-20}})));
        temp temp7
          annotation (Placement(transformation(extent={{-20,-60},{0,-40}})));
        temp temp8
          annotation (Placement(transformation(extent={{20,-80},{40,-60}})));
      equation
        connect(u[1], temp1.u) annotation (Line(points={{-120,-17.5},{-72,-17.5},
                {-72,70},{-22,70}}, color={0,0,127}));
        connect(u[2], temp2.u) annotation (Line(points={{-120,-12.5},{-50,-12.5},
                {-50,50},{18,50}}, color={0,0,127}));
        connect(u[3], temp3.u) annotation (Line(points={{-120,-7.5},{-72,-7.5},
                {-72,30},{-22,30}}, color={0,0,127}));
        connect(u[4], temp4.u) annotation (Line(points={{-120,-2.5},{-52,-2.5},
                {-52,10},{18,10}}, color={0,0,127}));
        connect(u[5], temp5.u) annotation (Line(points={{-120,2.5},{-74,2.5},{
                -74,-10},{-22,-10}}, color={0,0,127}));
        connect(u[6], temp6.u) annotation (Line(points={{-120,7.5},{-52,7.5},{
                -52,-30},{18,-30}}, color={0,0,127}));
        connect(u[7], temp7.u) annotation (Line(points={{-120,12.5},{-72,12.5},
                {-72,-50},{-22,-50}}, color={0,0,127}));
        connect(u[8], temp8.u) annotation (Line(points={{-120,17.5},{-52,17.5},
                {-52,-70},{18,-70}}, color={0,0,127}));
        connect(temp1.y, y[1]) annotation (Line(points={{1,70},{50,70},{50,
                -8.75},{110,-8.75}}, color={0,0,127}));
        connect(temp2.y, y[2]) annotation (Line(points={{41,50},{74,50},{74,
                -6.25},{110,-6.25}}, color={0,0,127}));
        connect(temp3.y, y[3]) annotation (Line(points={{1,30},{52,30},{52,
                -3.75},{110,-3.75}}, color={0,0,127}));
        connect(temp8.y, y[8]) annotation (Line(points={{41,-70},{72,-70},{72,
                8.75},{110,8.75}}, color={0,0,127}));
        connect(temp7.y, y[7]) annotation (Line(points={{1,-50},{52,-50},{52,
                6.25},{110,6.25}}, color={0,0,127}));
        connect(temp6.y, y[6]) annotation (Line(points={{41,-30},{70,-30},{70,
                3.75},{110,3.75}}, color={0,0,127}));
        connect(temp5.y, y[5]) annotation (Line(points={{1,-10},{52,-10},{52,
                1.25},{110,1.25}}, color={0,0,127}));
        connect(temp4.y, y[4]) annotation (Line(points={{41,10},{72.5,10},{72.5,
                -1.25},{110,-1.25}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end aa;

      model sst_caly
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource("modelica://Buildings/Data/sst/froid_caly_ref_1h.txt"),
          columns={2,3,4,5,6,7,8,9,10,11,12,13},
          smoothness=Modelica.Blocks.Types.Smoothness.LinearSegments)
          annotation (Placement(transformation(extent={{-180,60},{-160,80}})));

        Fluid.Sources.MassFlowSource_T boundary(
          redeclare package Medium = Buildings.Media.Water,
          use_m_flow_in=true,
          use_T_in=true,
          nPorts=1)
          annotation (Placement(transformation(extent={{100,20},{80,40}})));
        Fluid.Sources.Boundary_pT bou(redeclare package Medium =
              Buildings.Media.Water, nPorts=1)
          annotation (Placement(transformation(extent={{-100,20},{-80,40}})));
        Fluid.Sensors.TemperatureTwoPort T_in_sec(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=180,
              origin={50,30})));
        Fluid.Sensors.TemperatureTwoPort T_out_sec(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=180,
              origin={-30,30})));
        Fluid.HeatExchangers.PlateHeatExchangerEffectivenessNTU hex(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=400000/(4185*15),
          m2_flow_nominal=400000/(4185*15),
          dp1_nominal=5000,
          dp2_nominal=5000,
          configuration=Buildings.Fluid.Types.HeatExchangerConfiguration.CounterFlow,
          use_Q_flow_nominal=false,
          Q_flow_nominal(displayUnit="kW") = 400000,
          T_a1_nominal=288.15,
          T_a2_nominal=278.15,
          eps_nominal=0.72)
          annotation (Placement(transformation(extent={{20,0},{0,20}})));

        Fluid.Sensors.TemperatureTwoPort T_in_prim(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={-30,-30})));
        Fluid.Sensors.TemperatureTwoPort T_out_prim(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={50,-30})));
        Fluid.Sources.MassFlowSource_T boundary1(
          redeclare package Medium = Buildings.Media.Water,
          use_m_flow_in=true,
          use_T_in=true,
          nPorts=1)
          annotation (Placement(transformation(extent={{-100,-40},{-80,-20}})));
        Fluid.Sources.Boundary_pT bou1(redeclare package Medium =
              Buildings.Media.Water, nPorts=1)
          annotation (Placement(transformation(extent={{100,-40},{80,-20}})));
        Modelica.Blocks.Math.Gain gain(k=1/3.6)
          annotation (Placement(transformation(extent={{-140,60},{-120,80}})));
        Modelica.Blocks.Math.Gain gain1(k=1/3.6)
          annotation (Placement(transformation(extent={{-140,-20},{-120,0}})));
        Modelica.Blocks.Interfaces.RealOutput temperature[8](final unit="K",
            displayUnit="degC")
          annotation (Placement(transformation(extent={{-100,-80},{-80,-60}})));
      equation
        for k in [1:8] loop
          temperature[k] = combiTimeTable.y[k];
        end for;
        connect(boundary.ports[1],T_in_sec. port_a)
          annotation (Line(points={{80,30},{60,30}}, color={0,127,255}));
        connect(T_in_sec.port_b,hex. port_a1) annotation (Line(points={{40,30},
                {30,30},{30,16},{20,16}},
                                  color={0,127,255}));
        connect(bou.ports[1],T_out_sec. port_b)
          annotation (Line(points={{-80,30},{-40,30}}, color={0,127,255}));
        connect(T_out_sec.port_a,hex. port_b1) annotation (Line(points={{-20,30},
                {-10,30},{-10,16},{0,16}},
                                      color={0,127,255}));
        connect(T_in_prim.port_b, hex.port_a2) annotation (Line(points={{-20,-30},
                {-12,-30},{-12,4},{0,4}},
                                       color={0,127,255}));
        connect(hex.port_b2, T_out_prim.port_a) annotation (Line(points={{20,4},{
                30,4},{30,-30},{40,-30}},
                                    color={0,127,255}));
        connect(T_out_prim.port_b, bou1.ports[1])
          annotation (Line(points={{60,-30},{80,-30}}, color={0,127,255}));
        connect(T_in_prim.port_a, boundary1.ports[1])
          annotation (Line(points={{-40,-30},{-80,-30}}, color={0,127,255}));
        connect(gain.y, boundary.m_flow_in) annotation (Line(points={{-119,70},
                {110,70},{110,38},{102,38}},
                                    color={0,0,127}));
        connect(combiTimeTable.y[9], gain1.u) annotation (Line(points={{-159,70},
                {-150,70},{-150,-10},{-142,-10}},
                                          color={0,0,127}));
        connect(combiTimeTable.y[10], gain.u)
          annotation (Line(points={{-159,70},{-142,70}}, color={0,0,127}));
        connect(combiTimeTable.y[1], boundary1.T_in) annotation (Line(points={{-159,70},
                {-150,70},{-150,-26},{-102,-26}},
                                                color={0,0,127}));
        connect(gain1.y, boundary1.m_flow_in) annotation (Line(points={{-119,
                -10},{-112,-10},{-112,-22},{-102,-22}},
                                          color={0,0,127}));
        connect(combiTimeTable.y[4], boundary.T_in) annotation (Line(points={{
                -159,70},{-150,70},{-150,100},{120,100},{120,34},{102,34}},
              color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=13132800,
            Interval=3600,
            __Dymola_Algorithm="Dassl"));
      end sst_caly;

      model sst_caly_pid
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource("modelica://Buildings/Data/sst/froid_caly_ref_1h.txt"),
          columns={2,3,4,5,6,7,8,9,10,11,12,13},
          smoothness=Modelica.Blocks.Types.Smoothness.LinearSegments)
          annotation (Placement(transformation(extent={{-180,60},{-160,80}})));

        Fluid.Sources.MassFlowSource_T boundary(
          redeclare package Medium = Buildings.Media.Water,
          use_m_flow_in=true,
          use_T_in=true,
          nPorts=1)
          annotation (Placement(transformation(extent={{100,20},{80,40}})));
        Fluid.Sources.Boundary_pT bou(redeclare package Medium =
              Buildings.Media.Water, nPorts=1)
          annotation (Placement(transformation(extent={{-100,20},{-80,40}})));
        Fluid.Sensors.TemperatureTwoPort T_in_sec(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=180,
              origin={50,30})));
        Fluid.Sensors.TemperatureTwoPort T_out_sec(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=180,
              origin={-30,30})));
        Fluid.HeatExchangers.PlateHeatExchangerEffectivenessNTU hex(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=400000/(4185*15),
          m2_flow_nominal=400000/(4185*15),
          dp1_nominal(displayUnit="kPa") = 70000,
          dp2_nominal(displayUnit="kPa") = 70000,
          configuration=Buildings.Fluid.Types.HeatExchangerConfiguration.CounterFlow,
          use_Q_flow_nominal=false,
          Q_flow_nominal(displayUnit="kW") = 400000,
          T_a1_nominal=288.15,
          T_a2_nominal=278.15,
          eps_nominal=0.72)
          annotation (Placement(transformation(extent={{20,0},{0,20}})));

        Fluid.Sensors.TemperatureTwoPort T_in_prim(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={-30,-50})));
        Fluid.Sensors.TemperatureTwoPort T_out_prim(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={50,-30})));
        Fluid.Sources.Boundary_pT bou1(redeclare package Medium =
              Buildings.Media.Water,
          use_T_in=true,             nPorts=2)
          annotation (Placement(transformation(extent={{100,-40},{80,-20}})));
        Modelica.Blocks.Math.Gain gain(k=1/3.6)
          annotation (Placement(transformation(extent={{-140,60},{-120,80}})));
        Modelica.Blocks.Interfaces.RealOutput temperature[8](final unit="K",
            displayUnit="degC")
          annotation (Placement(transformation(extent={{-180,20},{-160,40}})));
        Fluid.Movers.FlowControlled_dp fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=50,
          redeclare Fluid.Movers.Data.Generic per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          addPowerToMedium=false,
          nominalValuesDefineDefaultPressureCurve=true,
          dp_nominal(displayUnit="bar") = 1300000,
          constantHead(displayUnit="bar") = 1300000) annotation (Placement(
              transformation(extent={{-120,-60},{-100,-40}})));
        Fluid.Actuators.Valves.TwoWayLinear val(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=20,
          dpValve_nominal(displayUnit="Pa") = 5000,
          use_inputFilter=false)
          annotation (Placement(transformation(extent={{-80,-60},{-60,-40}})));
        Controls.Continuous.LimPID PID_T(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=0.05,
          Ti=15,
          initType=Modelica.Blocks.Types.InitPID.NoInit,
          reverseActing=false) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-90,-10})));
      equation
        for k in [1:8] loop
          temperature[k] = combiTimeTable.y[k];
        end for;
        connect(boundary.ports[1],T_in_sec. port_a)
          annotation (Line(points={{80,30},{60,30}}, color={0,127,255}));
        connect(T_in_sec.port_b,hex. port_a1) annotation (Line(points={{40,30},
                {30,30},{30,16},{20,16}},
                                  color={0,127,255}));
        connect(bou.ports[1],T_out_sec. port_b)
          annotation (Line(points={{-80,30},{-40,30}}, color={0,127,255}));
        connect(T_out_sec.port_a,hex. port_b1) annotation (Line(points={{-20,30},
                {-10,30},{-10,16},{0,16}},
                                      color={0,127,255}));
        connect(T_in_prim.port_b, hex.port_a2) annotation (Line(points={{-20,-50},
                {-12,-50},{-12,4},{0,4}},
                                       color={0,127,255}));
        connect(hex.port_b2, T_out_prim.port_a) annotation (Line(points={{20,4},{
                30,4},{30,-30},{40,-30}},
                                    color={0,127,255}));
        connect(T_out_prim.port_b, bou1.ports[1])
          annotation (Line(points={{60,-30},{70,-30},{70,-28},{80,-28}},
                                                       color={0,127,255}));
        connect(gain.y, boundary.m_flow_in) annotation (Line(points={{-119,70},
                {110,70},{110,38},{102,38}},
                                    color={0,0,127}));
        connect(combiTimeTable.y[10], gain.u)
          annotation (Line(points={{-159,70},{-142,70}}, color={0,0,127}));
        connect(combiTimeTable.y[4], boundary.T_in) annotation (Line(points={{
                -159,70},{-150,70},{-150,100},{120,100},{120,34},{102,34}},
              color={0,0,127}));
        connect(fan.port_b, val.port_a)
          annotation (Line(points={{-100,-50},{-80,-50}}, color={0,127,255}));
        connect(val.port_b, T_in_prim.port_a) annotation (Line(points={{-60,-50},
                {-52,-50},{-52,-50},{-40,-50}}, color={0,127,255}));
        connect(fan.port_a, bou1.ports[2]) annotation (Line(points={{-120,-50},
                {-140,-50},{-140,-80},{74,-80},{74,-32},{80,-32}}, color={0,127,
                255}));
        connect(combiTimeTable.y[1], bou1.T_in) annotation (Line(points={{-159,
                70},{-150,70},{-150,100},{120,100},{120,-26},{102,-26}}, color=
                {0,0,127}));
        connect(combiTimeTable.y[3], PID_T.u_s) annotation (Line(points={{-159,
                70},{-150,70},{-150,-10},{-102,-10}}, color={0,0,127}));
        connect(T_out_sec.T, PID_T.u_m) annotation (Line(points={{-30,41},{-30,
                52},{-110,52},{-110,-30},{-90,-30},{-90,-22}}, color={0,0,127}));
        connect(PID_T.y, val.y) annotation (Line(points={{-79,-10},{-70,-10},{
                -70,-38}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=13132800,
            Interval=3600,
            __Dymola_Algorithm="Dassl"));
      end sst_caly_pid;

      model sst_caly_pid_b
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource("modelica://Buildings/Data/sst/froid_caly_ref_1h.txt"),
          columns={2,3,4,5,6,7,8,9,10,11,12,13},
          smoothness=Modelica.Blocks.Types.Smoothness.LinearSegments)
          annotation (Placement(transformation(extent={{-180,60},{-160,80}})));

        Fluid.Sources.MassFlowSource_T boundary(
          redeclare package Medium = Buildings.Media.Water,
          use_m_flow_in=true,
          use_T_in=true,
          nPorts=1)
          annotation (Placement(transformation(extent={{100,20},{80,40}})));
        Fluid.Sources.Boundary_pT bou(redeclare package Medium =
              Buildings.Media.Water, nPorts=1)
          annotation (Placement(transformation(extent={{-100,20},{-80,40}})));
        Fluid.Sensors.TemperatureTwoPort T_in_sec(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=180,
              origin={50,30})));
        Fluid.Sensors.TemperatureTwoPort T_out_sec(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=180,
              origin={-30,30})));
        Fluid.HeatExchangers.PlateHeatExchangerEffectivenessNTU hex(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=400000/(4185*15),
          m2_flow_nominal=400000/(4185*15),
          dp1_nominal=5000,
          dp2_nominal=5000,
          configuration=Buildings.Fluid.Types.HeatExchangerConfiguration.CounterFlow,
          use_Q_flow_nominal=false,
          Q_flow_nominal(displayUnit="kW") = 400000,
          T_a1_nominal=288.15,
          T_a2_nominal=278.15,
          eps_nominal=0.72)
          annotation (Placement(transformation(extent={{20,0},{0,20}})));

        Fluid.Sensors.TemperatureTwoPort T_in_prim(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={-30,-50})));
        Fluid.Sensors.TemperatureTwoPort T_out_prim(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={50,-30})));
        Fluid.Sources.Boundary_pT bou1(redeclare package Medium =
              Buildings.Media.Water,
          use_T_in=true,             nPorts=2)
          annotation (Placement(transformation(extent={{100,-40},{80,-20}})));
        Modelica.Blocks.Math.Gain gain(k=1/3.6)
          annotation (Placement(transformation(extent={{-140,60},{-120,80}})));
        Modelica.Blocks.Interfaces.RealOutput temperature[8](final unit="K",
            displayUnit="degC")
          annotation (Placement(transformation(extent={{-180,20},{-160,40}})));
        Fluid.Movers.FlowControlled_dp fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=20,
          redeclare Fluid.Movers.Data.Generic per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          dp_nominal(displayUnit="bar") = 200000,
          constantHead(displayUnit="bar") = 200000) annotation (Placement(
              transformation(extent={{-120,-60},{-100,-40}})));
        Fluid.Actuators.Valves.TwoWayLinear val(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=20,
          dpValve_nominal=5000)
          annotation (Placement(transformation(extent={{-80,-60},{-60,-40}})));
        Controls.Continuous.LimPID PID_T(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=0.01,
          Ti=5,
          initType=Modelica.Blocks.Types.InitPID.NoInit,
          reverseActing=false) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-90,-10})));
      equation
        for k in [1:8] loop
          temperature[k] = combiTimeTable.y[k];
        end for;
        connect(boundary.ports[1],T_in_sec. port_a)
          annotation (Line(points={{80,30},{60,30}}, color={0,127,255}));
        connect(T_in_sec.port_b,hex. port_a1) annotation (Line(points={{40,30},
                {30,30},{30,16},{20,16}},
                                  color={0,127,255}));
        connect(bou.ports[1],T_out_sec. port_b)
          annotation (Line(points={{-80,30},{-40,30}}, color={0,127,255}));
        connect(T_out_sec.port_a,hex. port_b1) annotation (Line(points={{-20,30},
                {-10,30},{-10,16},{0,16}},
                                      color={0,127,255}));
        connect(T_in_prim.port_b, hex.port_a2) annotation (Line(points={{-20,-50},
                {-12,-50},{-12,4},{0,4}},
                                       color={0,127,255}));
        connect(hex.port_b2, T_out_prim.port_a) annotation (Line(points={{20,4},{
                30,4},{30,-30},{40,-30}},
                                    color={0,127,255}));
        connect(T_out_prim.port_b, bou1.ports[1])
          annotation (Line(points={{60,-30},{70,-30},{70,-28},{80,-28}},
                                                       color={0,127,255}));
        connect(gain.y, boundary.m_flow_in) annotation (Line(points={{-119,70},
                {110,70},{110,38},{102,38}},
                                    color={0,0,127}));
        connect(combiTimeTable.y[10], gain.u)
          annotation (Line(points={{-159,70},{-142,70}}, color={0,0,127}));
        connect(combiTimeTable.y[4], boundary.T_in) annotation (Line(points={{
                -159,70},{-150,70},{-150,100},{120,100},{120,34},{102,34}},
              color={0,0,127}));
        connect(fan.port_b, val.port_a)
          annotation (Line(points={{-100,-50},{-80,-50}}, color={0,127,255}));
        connect(val.port_b, T_in_prim.port_a) annotation (Line(points={{-60,-50},
                {-52,-50},{-52,-50},{-40,-50}}, color={0,127,255}));
        connect(fan.port_a, bou1.ports[2]) annotation (Line(points={{-120,-50},
                {-140,-50},{-140,-80},{74,-80},{74,-32},{80,-32}}, color={0,127,
                255}));
        connect(combiTimeTable.y[1], bou1.T_in) annotation (Line(points={{-159,
                70},{-150,70},{-150,100},{120,100},{120,-26},{102,-26}}, color=
                {0,0,127}));
        connect(combiTimeTable.y[3], PID_T.u_s) annotation (Line(points={{-159,
                70},{-150,70},{-150,-10},{-102,-10}}, color={0,0,127}));
        connect(T_out_sec.T, PID_T.u_m) annotation (Line(points={{-30,41},{-30,
                52},{-110,52},{-110,-30},{-90,-30},{-90,-22}}, color={0,0,127}));
        connect(PID_T.y, val.y) annotation (Line(points={{-79,-10},{-70,-10},{
                -70,-38}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=13132800,
            Interval=3600,
            __Dymola_Algorithm="Dassl"));
      end sst_caly_pid_b;

      model sst_caly_pid_source
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource("modelica://Buildings/Data/sst/froid_caly_ref_1h.txt"),
          columns={2,3,4,5,6,7,8,9,10,11,12,13},
          smoothness=Modelica.Blocks.Types.Smoothness.LinearSegments)
          annotation (Placement(transformation(extent={{-180,60},{-160,80}})));

        Fluid.Sources.MassFlowSource_T boundary(
          redeclare package Medium = Buildings.Media.Water,
          use_m_flow_in=true,
          use_T_in=true,
          nPorts=1)
          annotation (Placement(transformation(extent={{100,20},{80,40}})));
        Fluid.Sources.Boundary_pT bou(redeclare package Medium =
              Buildings.Media.Water, nPorts=1)
          annotation (Placement(transformation(extent={{-100,20},{-80,40}})));
        Fluid.Sensors.TemperatureTwoPort T_in_sec(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=180,
              origin={50,30})));
        Fluid.Sensors.TemperatureTwoPort T_out_sec(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=180,
              origin={-30,30})));
        Fluid.HeatExchangers.PlateHeatExchangerEffectivenessNTU hex(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=400000/(4185*15),
          m2_flow_nominal=400000/(4185*15),
          dp1_nominal=5000,
          dp2_nominal=5000,
          configuration=Buildings.Fluid.Types.HeatExchangerConfiguration.CounterFlow,
          use_Q_flow_nominal=false,
          Q_flow_nominal(displayUnit="kW") = 400000,
          T_a1_nominal=288.15,
          T_a2_nominal=278.15,
          eps_nominal=0.72)
          annotation (Placement(transformation(extent={{20,0},{0,20}})));

        Fluid.Sensors.TemperatureTwoPort T_in_prim(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={-30,-30})));
        Fluid.Sensors.TemperatureTwoPort T_out_prim(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={50,-30})));
        Fluid.Sources.MassFlowSource_T boundary1(
          redeclare package Medium = Buildings.Media.Water,
          use_m_flow_in=true,
          use_T_in=true,
          nPorts=1)
          annotation (Placement(transformation(extent={{-80,-40},{-60,-20}})));
        Fluid.Sources.Boundary_pT bou1(redeclare package Medium =
              Buildings.Media.Water, nPorts=1)
          annotation (Placement(transformation(extent={{100,-40},{80,-20}})));
        Modelica.Blocks.Math.Gain gain(k=1/3.6)
          annotation (Placement(transformation(extent={{-140,60},{-120,80}})));
        Modelica.Blocks.Interfaces.RealOutput temperature[8](final unit="K",
            displayUnit="degC")
          annotation (Placement(transformation(extent={{-100,-80},{-80,-60}})));
        Controls.Continuous.LimPID PID_T(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=0.01,
          Ti=5,
          yMax=20,
          initType=Modelica.Blocks.Types.InitPID.NoInit,
          reverseActing=false) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-110,0})));
      equation
        for k in [1:8] loop
          temperature[k] = combiTimeTable.y[k];
        end for;
        connect(boundary.ports[1],T_in_sec. port_a)
          annotation (Line(points={{80,30},{60,30}}, color={0,127,255}));
        connect(T_in_sec.port_b,hex. port_a1) annotation (Line(points={{40,30},
                {30,30},{30,16},{20,16}},
                                  color={0,127,255}));
        connect(bou.ports[1],T_out_sec. port_b)
          annotation (Line(points={{-80,30},{-40,30}}, color={0,127,255}));
        connect(T_out_sec.port_a,hex. port_b1) annotation (Line(points={{-20,30},
                {-10,30},{-10,16},{0,16}},
                                      color={0,127,255}));
        connect(T_in_prim.port_b, hex.port_a2) annotation (Line(points={{-20,-30},
                {-12,-30},{-12,4},{0,4}},
                                       color={0,127,255}));
        connect(hex.port_b2, T_out_prim.port_a) annotation (Line(points={{20,4},{
                30,4},{30,-30},{40,-30}},
                                    color={0,127,255}));
        connect(T_out_prim.port_b, bou1.ports[1])
          annotation (Line(points={{60,-30},{80,-30}}, color={0,127,255}));
        connect(T_in_prim.port_a, boundary1.ports[1])
          annotation (Line(points={{-40,-30},{-60,-30}}, color={0,127,255}));
        connect(gain.y, boundary.m_flow_in) annotation (Line(points={{-119,70},
                {110,70},{110,38},{102,38}},
                                    color={0,0,127}));
        connect(combiTimeTable.y[10], gain.u)
          annotation (Line(points={{-159,70},{-142,70}}, color={0,0,127}));
        connect(combiTimeTable.y[1], boundary1.T_in) annotation (Line(points={{-159,70},
                {-150,70},{-150,-26},{-82,-26}},color={0,0,127}));
        connect(combiTimeTable.y[4], boundary.T_in) annotation (Line(points={{
                -159,70},{-150,70},{-150,100},{120,100},{120,34},{102,34}},
              color={0,0,127}));
        connect(combiTimeTable.y[3], PID_T.u_s) annotation (Line(points={{-159,
                70},{-150,70},{-150,0},{-122,0}}, color={0,0,127}));
        connect(T_out_sec.T, PID_T.u_m) annotation (Line(points={{-30,41},{-30,
                50},{-130,50},{-130,-20},{-110,-20},{-110,-12}}, color={0,0,127}));
        connect(PID_T.y, boundary1.m_flow_in) annotation (Line(points={{-99,0},
                {-92,0},{-92,-22},{-82,-22}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=13132800,
            Interval=3600,
            __Dymola_Algorithm="Dassl"));
      end sst_caly_pid_source;

      model sst_caly_essai_bypass
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource("modelica://Buildings/Data/sst/froid_caly_ref_1h.txt"),
          columns={2,3,4,5,6,7,8,9,10,11,12,13},
          smoothness=Modelica.Blocks.Types.Smoothness.LinearSegments)
          annotation (Placement(transformation(extent={{-180,60},{-160,80}})));

        Fluid.Sources.MassFlowSource_T boundary(
          redeclare package Medium = Buildings.Media.Water,
          use_m_flow_in=true,
          use_T_in=true,
          nPorts=1)
          annotation (Placement(transformation(extent={{100,20},{80,40}})));
        Fluid.Sources.Boundary_pT bou(redeclare package Medium =
              Buildings.Media.Water, nPorts=1)
          annotation (Placement(transformation(extent={{-100,20},{-80,40}})));
        Fluid.Sensors.TemperatureTwoPort T_in_sec(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=180,
              origin={50,30})));
        Fluid.Sensors.TemperatureTwoPort T_out_sec(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=180,
              origin={-30,30})));
        Fluid.HeatExchangers.PlateHeatExchangerEffectivenessNTU hex(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=400000/(4185*15),
          m2_flow_nominal=400000/(4185*15),
          dp1_nominal(displayUnit="kPa") = 70000,
          dp2_nominal(displayUnit="kPa") = 70000,
          configuration=Buildings.Fluid.Types.HeatExchangerConfiguration.CounterFlow,
          use_Q_flow_nominal=false,
          Q_flow_nominal(displayUnit="kW") = 400000,
          T_a1_nominal=288.15,
          T_a2_nominal=278.15,
          eps_nominal=0.72)
          annotation (Placement(transformation(extent={{20,0},{0,20}})));

        Fluid.Sensors.TemperatureTwoPort T_in_prim(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={-30,-50})));
        Fluid.Sensors.TemperatureTwoPort T_out_prim(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={50,-30})));
        Fluid.Sources.Boundary_pT bou1(redeclare package Medium =
              Buildings.Media.Water,
          use_T_in=true,             nPorts=2)
          annotation (Placement(transformation(extent={{200,-40},{180,-20}})));
        Modelica.Blocks.Math.Gain gain(k=1/3.6)
          annotation (Placement(transformation(extent={{-140,60},{-120,80}})));
        Modelica.Blocks.Interfaces.RealOutput temperature[8](final unit="K",
            displayUnit="degC")
          annotation (Placement(transformation(extent={{-180,20},{-160,40}})));
        Fluid.Actuators.Valves.TwoWayLinear val(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=20,
          dpValve_nominal(displayUnit="Pa") = 5000,
          use_inputFilter=false)
          annotation (Placement(transformation(extent={{-80,-60},{-60,-40}})));
        Controls.Continuous.LimPID PID_T(
          controllerType=Modelica.Blocks.Types.SimpleController.P,
          k=0.1,
          Ti=300,
          initType=Modelica.Blocks.Types.InitPID.NoInit,
          reverseActing=false) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-90,-10})));
        Fluid.Movers.FlowControlled_m_flow fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=500/3.6,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_PEG per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          addPowerToMedium=false,
          dp_nominal(displayUnit="bar") = 1300000,
          constantMassFlowRate=500/3.6) annotation (Placement(transformation(
                extent={{160,-120},{140,-100}})));
        Fluid.Sensors.RelativePressure senRelPre(redeclare package Medium =
              Buildings.Media.Water) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={70,-70})));
        Fluid.FixedResistances.Junction jun(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={500/3.6,-20,-500/3.6 + 20},
          dp_nominal={0,0,-1000000}) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={120,-110})));
        Fluid.FixedResistances.Junction jun1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={20,500/3.6 - 20,-500/3.6},
          dp_nominal={0,0,0}) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={120,-30})));
      equation
        for k in [1:8] loop
          temperature[k] = combiTimeTable.y[k];
        end for;
        connect(boundary.ports[1],T_in_sec. port_a)
          annotation (Line(points={{80,30},{60,30}}, color={0,127,255}));
        connect(T_in_sec.port_b,hex. port_a1) annotation (Line(points={{40,30},
                {30,30},{30,16},{20,16}},
                                  color={0,127,255}));
        connect(bou.ports[1],T_out_sec. port_b)
          annotation (Line(points={{-80,30},{-40,30}}, color={0,127,255}));
        connect(T_out_sec.port_a,hex. port_b1) annotation (Line(points={{-20,30},
                {-10,30},{-10,16},{0,16}},
                                      color={0,127,255}));
        connect(T_in_prim.port_b, hex.port_a2) annotation (Line(points={{-20,-50},
                {-12,-50},{-12,4},{0,4}},
                                       color={0,127,255}));
        connect(hex.port_b2, T_out_prim.port_a) annotation (Line(points={{20,4},{
                30,4},{30,-30},{40,-30}},
                                    color={0,127,255}));
        connect(gain.y, boundary.m_flow_in) annotation (Line(points={{-119,70},
                {110,70},{110,38},{102,38}},
                                    color={0,0,127}));
        connect(combiTimeTable.y[10], gain.u)
          annotation (Line(points={{-159,70},{-142,70}}, color={0,0,127}));
        connect(combiTimeTable.y[4], boundary.T_in) annotation (Line(points={{
                -159,70},{-150,70},{-150,100},{120,100},{120,34},{102,34}},
              color={0,0,127}));
        connect(val.port_b, T_in_prim.port_a) annotation (Line(points={{-60,-50},
                {-52,-50},{-52,-50},{-40,-50}}, color={0,127,255}));
        connect(combiTimeTable.y[1], bou1.T_in) annotation (Line(points={{-159,70},
                {-150,70},{-150,100},{220,100},{220,-26},{202,-26}},     color=
                {0,0,127}));
        connect(combiTimeTable.y[3], PID_T.u_s) annotation (Line(points={{-159,
                70},{-150,70},{-150,-10},{-102,-10}}, color={0,0,127}));
        connect(T_out_sec.T, PID_T.u_m) annotation (Line(points={{-30,41},{-30,
                52},{-110,52},{-110,-30},{-90,-30},{-90,-22}}, color={0,0,127}));
        connect(PID_T.y, val.y) annotation (Line(points={{-79,-10},{-70,-10},{
                -70,-38}}, color={0,0,127}));
        connect(fan.port_a, bou1.ports[1]) annotation (Line(points={{160,-110},
                {172,-110},{172,-28},{180,-28}}, color={0,127,255}));
        connect(jun.port_1, fan.port_b)
          annotation (Line(points={{130,-110},{140,-110}}, color={0,127,255}));
        connect(T_out_prim.port_b, jun1.port_1)
          annotation (Line(points={{60,-30},{110,-30}}, color={0,127,255}));
        connect(jun1.port_2, bou1.ports[2]) annotation (Line(points={{130,-30},
                {150,-30},{150,-32},{180,-32}}, color={0,127,255}));
        connect(senRelPre.port_b, T_out_prim.port_b) annotation (Line(points={{
                70,-60},{70,-30},{60,-30}}, color={0,127,255}));
        connect(jun.port_2, val.port_a) annotation (Line(points={{110,-110},{
                -100,-110},{-100,-50},{-80,-50}}, color={0,127,255}));
        connect(senRelPre.port_a, jun.port_2) annotation (Line(points={{70,-80},
                {70,-110},{110,-110}}, color={0,127,255}));
        connect(jun.port_3, jun1.port_3)
          annotation (Line(points={{120,-100},{120,-40}}, color={0,127,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=13132800,
            Interval=3600,
            __Dymola_Algorithm="Dassl"));
      end sst_caly_essai_bypass;

      model sst_caly_essai_bypass_b
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource("modelica://Buildings/Data/sst/froid_caly_ref_1h.txt"),
          columns={2,3,4,5,6,7,8,9,10,11,12,13},
          smoothness=Modelica.Blocks.Types.Smoothness.LinearSegments)
          annotation (Placement(transformation(extent={{-180,60},{-160,80}})));

        Fluid.Sources.MassFlowSource_T boundary(
          redeclare package Medium = Buildings.Media.Water,
          use_m_flow_in=true,
          use_T_in=true,
          nPorts=1)
          annotation (Placement(transformation(extent={{100,20},{80,40}})));
        Fluid.Sources.Boundary_pT bou(redeclare package Medium =
              Buildings.Media.Water, nPorts=1)
          annotation (Placement(transformation(extent={{-100,20},{-80,40}})));
        Fluid.Sensors.TemperatureTwoPort T_in_sec(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=180,
              origin={50,30})));
        Fluid.Sensors.TemperatureTwoPort T_out_sec(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=180,
              origin={-30,30})));
        Fluid.HeatExchangers.PlateHeatExchangerEffectivenessNTU hex(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=400000/(4185*15),
          m2_flow_nominal=400000/(4185*15),
          dp1_nominal(displayUnit="kPa") = 70000,
          dp2_nominal(displayUnit="kPa") = 70000,
          configuration=Buildings.Fluid.Types.HeatExchangerConfiguration.CounterFlow,
          use_Q_flow_nominal=false,
          Q_flow_nominal(displayUnit="kW") = 400000,
          T_a1_nominal=288.15,
          T_a2_nominal=278.15,
          eps_nominal=0.72)
          annotation (Placement(transformation(extent={{20,0},{0,20}})));

        Fluid.Sensors.TemperatureTwoPort T_in_prim(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={-30,-50})));
        Fluid.Sensors.TemperatureTwoPort T_out_prim(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={50,-30})));
        Fluid.Sources.Boundary_pT bou1(redeclare package Medium =
              Buildings.Media.Water,
          use_T_in=true,             nPorts=2)
          annotation (Placement(transformation(extent={{200,-40},{180,-20}})));
        Modelica.Blocks.Math.Gain gain(k=1/3.6)
          annotation (Placement(transformation(extent={{-140,60},{-120,80}})));
        Modelica.Blocks.Interfaces.RealOutput temperature[8](final unit="K",
            displayUnit="degC")
          annotation (Placement(transformation(extent={{-180,20},{-160,40}})));
        Fluid.Actuators.Valves.TwoWayLinear val(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=20,
          dpValve_nominal(displayUnit="Pa") = 5000,
          use_inputFilter=false)
          annotation (Placement(transformation(extent={{-80,-60},{-60,-40}})));
        Controls.Continuous.LimPID PID_T(
          controllerType=Modelica.Blocks.Types.SimpleController.P,
          k=0.1,
          Ti=300,
          initType=Modelica.Blocks.Types.InitPID.NoInit,
          reverseActing=false) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-90,-10})));
        Fluid.Movers.FlowControlled_m_flow fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=500/3.6,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_PEG per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          addPowerToMedium=false,
          dp_nominal(displayUnit="bar") = 1300000,
          constantMassFlowRate=500/3.6) annotation (Placement(transformation(
                extent={{160,-120},{140,-100}})));
        Fluid.Sensors.RelativePressure senRelPre(redeclare package Medium =
              Buildings.Media.Water) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={70,-70})));
        Fluid.FixedResistances.Junction jun(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={500/3.6,-20,-500/3.6 + 20},
          dp_nominal={0,0,0})        annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={120,-110})));
        Fluid.FixedResistances.Junction jun1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={20,500/3.6 - 20,-500/3.6},
          dp_nominal={0,0,0}) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={120,-30})));
        Fluid.Actuators.Valves.TwoWayLinear val1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=500/3.6,
          dpValve_nominal(displayUnit="Pa") = 100000,
          use_inputFilter=false)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=90,
              origin={120,-70})));
        Controls.Continuous.LimPID PID_T1(
          controllerType=Modelica.Blocks.Types.SimpleController.P,
          k=0.1,
          Ti=300,
          initType=Modelica.Blocks.Types.InitPID.NoInit,
          reverseActing=true)  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={70,-150})));
        Modelica.Blocks.Sources.Constant const(k=200000)
          annotation (Placement(transformation(extent={{40,-200},{60,-180}})));
      equation
        for k in [1:8] loop
          temperature[k] = combiTimeTable.y[k];
        end for;
        connect(boundary.ports[1],T_in_sec. port_a)
          annotation (Line(points={{80,30},{60,30}}, color={0,127,255}));
        connect(T_in_sec.port_b,hex. port_a1) annotation (Line(points={{40,30},
                {30,30},{30,16},{20,16}},
                                  color={0,127,255}));
        connect(bou.ports[1],T_out_sec. port_b)
          annotation (Line(points={{-80,30},{-40,30}}, color={0,127,255}));
        connect(T_out_sec.port_a,hex. port_b1) annotation (Line(points={{-20,30},
                {-10,30},{-10,16},{0,16}},
                                      color={0,127,255}));
        connect(T_in_prim.port_b, hex.port_a2) annotation (Line(points={{-20,-50},
                {-12,-50},{-12,4},{0,4}},
                                       color={0,127,255}));
        connect(hex.port_b2, T_out_prim.port_a) annotation (Line(points={{20,4},{
                30,4},{30,-30},{40,-30}},
                                    color={0,127,255}));
        connect(gain.y, boundary.m_flow_in) annotation (Line(points={{-119,70},
                {110,70},{110,38},{102,38}},
                                    color={0,0,127}));
        connect(combiTimeTable.y[10], gain.u)
          annotation (Line(points={{-159,70},{-142,70}}, color={0,0,127}));
        connect(combiTimeTable.y[4], boundary.T_in) annotation (Line(points={{
                -159,70},{-150,70},{-150,100},{120,100},{120,34},{102,34}},
              color={0,0,127}));
        connect(val.port_b, T_in_prim.port_a) annotation (Line(points={{-60,-50},
                {-52,-50},{-52,-50},{-40,-50}}, color={0,127,255}));
        connect(combiTimeTable.y[1], bou1.T_in) annotation (Line(points={{-159,70},
                {-150,70},{-150,100},{220,100},{220,-26},{202,-26}},     color=
                {0,0,127}));
        connect(combiTimeTable.y[3], PID_T.u_s) annotation (Line(points={{-159,
                70},{-150,70},{-150,-10},{-102,-10}}, color={0,0,127}));
        connect(T_out_sec.T, PID_T.u_m) annotation (Line(points={{-30,41},{-30,
                52},{-110,52},{-110,-30},{-90,-30},{-90,-22}}, color={0,0,127}));
        connect(PID_T.y, val.y) annotation (Line(points={{-79,-10},{-70,-10},{
                -70,-38}}, color={0,0,127}));
        connect(fan.port_a, bou1.ports[1]) annotation (Line(points={{160,-110},
                {172,-110},{172,-28},{180,-28}}, color={0,127,255}));
        connect(jun.port_1, fan.port_b)
          annotation (Line(points={{130,-110},{140,-110}}, color={0,127,255}));
        connect(T_out_prim.port_b, jun1.port_1)
          annotation (Line(points={{60,-30},{110,-30}}, color={0,127,255}));
        connect(jun1.port_2, bou1.ports[2]) annotation (Line(points={{130,-30},
                {150,-30},{150,-32},{180,-32}}, color={0,127,255}));
        connect(senRelPre.port_b, T_out_prim.port_b) annotation (Line(points={{
                70,-60},{70,-30},{60,-30}}, color={0,127,255}));
        connect(jun.port_2, val.port_a) annotation (Line(points={{110,-110},{
                -100,-110},{-100,-50},{-80,-50}}, color={0,127,255}));
        connect(senRelPre.port_a, jun.port_2) annotation (Line(points={{70,-80},
                {70,-110},{110,-110}}, color={0,127,255}));
        connect(senRelPre.p_rel, PID_T1.u_s) annotation (Line(points={{79,-70},
                {86,-70},{86,-130},{50,-130},{50,-150},{58,-150}}, color={0,0,
                127}));
        connect(const.y, PID_T1.u_m) annotation (Line(points={{61,-190},{70,
                -190},{70,-162}}, color={0,0,127}));
        connect(PID_T1.y, val1.y) annotation (Line(points={{81,-150},{96,-150},
                {96,-70},{108,-70}}, color={0,0,127}));
        connect(val1.port_a, jun.port_3)
          annotation (Line(points={{120,-80},{120,-100}}, color={0,127,255}));
        connect(val1.port_b, jun1.port_3) annotation (Line(points={{120,-60},{
                120,-40},{120,-40}}, color={0,127,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=13132800,
            Interval=3600,
            __Dymola_Algorithm="Dassl"));
      end sst_caly_essai_bypass_b;

      model sst_caly_bypass_gf
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource("modelica://Buildings/Data/sst/froid_caly_ref_1h.txt"),
          columns={2,3,4,5,6,7,8,9,10,11,12,13},
          smoothness=Modelica.Blocks.Types.Smoothness.LinearSegments)
          annotation (Placement(transformation(extent={{-180,60},{-160,80}})));

        Fluid.Sources.MassFlowSource_T boundary(
          redeclare package Medium = Buildings.Media.Water,
          use_m_flow_in=true,
          use_T_in=true,
          nPorts=1)
          annotation (Placement(transformation(extent={{100,20},{80,40}})));
        Fluid.Sources.Boundary_pT bou(redeclare package Medium =
              Buildings.Media.Water, nPorts=1)
          annotation (Placement(transformation(extent={{-100,20},{-80,40}})));
        Fluid.Sensors.TemperatureTwoPort T_in_sec(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=180,
              origin={50,30})));
        Fluid.Sensors.TemperatureTwoPort T_out_sec(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=180,
              origin={-30,30})));
        Fluid.HeatExchangers.PlateHeatExchangerEffectivenessNTU hex(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=400000/(4185*15),
          m2_flow_nominal=400000/(4185*15),
          dp1_nominal(displayUnit="kPa") = 70000,
          dp2_nominal(displayUnit="kPa") = 70000,
          configuration=Buildings.Fluid.Types.HeatExchangerConfiguration.CounterFlow,
          use_Q_flow_nominal=false,
          Q_flow_nominal(displayUnit="kW") = 400000,
          T_a1_nominal=288.15,
          T_a2_nominal=278.15,
          eps_nominal=0.72)
          annotation (Placement(transformation(extent={{20,0},{0,20}})));

        Fluid.Sensors.TemperatureTwoPort T_in_prim(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={-30,-50})));
        Fluid.Sensors.TemperatureTwoPort T_out_prim(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={50,-30})));
        Fluid.Sources.Boundary_pT bou1(redeclare package Medium =
              Buildings.Media.Water,
          use_T_in=true,             nPorts=2)
          annotation (Placement(transformation(extent={{340,-40},{320,-20}})));
        Modelica.Blocks.Math.Gain gain(k=1/3.6)
          annotation (Placement(transformation(extent={{-140,60},{-120,80}})));
        Modelica.Blocks.Interfaces.RealOutput temperature[8](final unit="K",
            displayUnit="degC")
          annotation (Placement(transformation(extent={{-180,20},{-160,40}})));
        Fluid.Actuators.Valves.TwoWayLinear val(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=20,
          dpValve_nominal(displayUnit="Pa") = 5000,
          use_inputFilter=false)
          annotation (Placement(transformation(extent={{-80,-60},{-60,-40}})));
        Controls.Continuous.LimPID PID_T(
          controllerType=Modelica.Blocks.Types.SimpleController.P,
          k=0.1,
          Ti=300,
          initType=Modelica.Blocks.Types.InitPID.NoInit,
          reverseActing=false) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-90,-10})));
        Fluid.Movers.FlowControlled_m_flow fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=500/3.6,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_PEG per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          addPowerToMedium=false,
          dp_nominal(displayUnit="bar") = 1300000,
          constantMassFlowRate=450/3.6) annotation (Placement(transformation(
                extent={{180,-120},{160,-100}})));
        Fluid.Sensors.RelativePressure senRelPre(redeclare package Medium =
              Buildings.Media.Water) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={70,-70})));
        Fluid.FixedResistances.Junction jun(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={500/3.6,-20,-500/3.6 + 20},
          dp_nominal={0,0,0})        annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={120,-110})));
        Fluid.FixedResistances.Junction jun1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={20,500/3.6 - 20,-500/3.6},
          dp_nominal={0,0,0}) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={120,-30})));
        Fluid.Actuators.Valves.TwoWayLinear val1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=(500*2 + 211)/3.6,
          dpValve_nominal(displayUnit="Pa") = 100000,
          use_inputFilter=false)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=90,
              origin={120,-70})));
        Controls.Continuous.LimPID PID_T1(
          controllerType=Modelica.Blocks.Types.SimpleController.P,
          k=0.1,
          Ti=20,
          initType=Modelica.Blocks.Types.InitPID.NoInit,
          reverseActing=false) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={70,-150})));
        Modelica.Blocks.Sources.Constant const(k=50000)
          annotation (Placement(transformation(extent={{14,-160},{34,-140}})));
        GF.Chiller chiller(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          per=Fluid.Chillers.Data.ElectricReformulatedEIR.ReformEIRChiller_Carrier_19EX_5208kW_6_88COP_Vanes())
          annotation (Placement(transformation(extent={{220,-114},{240,-94}})));
        Fluid.Sources.Boundary_pT bou2(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=true,
          nPorts=2)
          annotation (Placement(transformation(extent={{340,-80},{320,-60}})));
        Fluid.Movers.FlowControlled_dp fan1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=800/3.6,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          dp_nominal(displayUnit="bar") = 300000,
          constantHead(displayUnit="bar") = 300000)
          annotation (Placement(transformation(extent={{180,-80},{200,-60}})));
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable1(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource(
              "modelica://Buildings/Data/sst/froid_caly_ref_1h.txt"),
          columns={2,3,4},
          smoothness=Modelica.Blocks.Types.Smoothness.LinearSegments)
          annotation (Placement(transformation(extent={{380,-40},{400,-20}})));
        Modelica.Blocks.Sources.BooleanExpression booleanExpression(y=true)
          annotation (Placement(transformation(extent={{180,-150},{200,-130}})));
      equation
        for k in [1:8] loop
          temperature[k] = combiTimeTable.y[k];
        end for;
        connect(boundary.ports[1],T_in_sec. port_a)
          annotation (Line(points={{80,30},{60,30}}, color={0,127,255}));
        connect(T_in_sec.port_b,hex. port_a1) annotation (Line(points={{40,30},
                {30,30},{30,16},{20,16}},
                                  color={0,127,255}));
        connect(bou.ports[1],T_out_sec. port_b)
          annotation (Line(points={{-80,30},{-40,30}}, color={0,127,255}));
        connect(T_out_sec.port_a,hex. port_b1) annotation (Line(points={{-20,30},
                {-10,30},{-10,16},{0,16}},
                                      color={0,127,255}));
        connect(T_in_prim.port_b, hex.port_a2) annotation (Line(points={{-20,-50},
                {-12,-50},{-12,4},{0,4}},
                                       color={0,127,255}));
        connect(hex.port_b2, T_out_prim.port_a) annotation (Line(points={{20,4},{
                30,4},{30,-30},{40,-30}},
                                    color={0,127,255}));
        connect(gain.y, boundary.m_flow_in) annotation (Line(points={{-119,70},
                {110,70},{110,38},{102,38}},
                                    color={0,0,127}));
        connect(combiTimeTable.y[10], gain.u)
          annotation (Line(points={{-159,70},{-142,70}}, color={0,0,127}));
        connect(combiTimeTable.y[4], boundary.T_in) annotation (Line(points={{
                -159,70},{-150,70},{-150,100},{120,100},{120,34},{102,34}},
              color={0,0,127}));
        connect(val.port_b, T_in_prim.port_a) annotation (Line(points={{-60,-50},
                {-52,-50},{-52,-50},{-40,-50}}, color={0,127,255}));
        connect(combiTimeTable.y[1], bou1.T_in) annotation (Line(points={{-159,70},
                {-150,70},{-150,100},{360,100},{360,-26},{342,-26}},     color=
                {0,0,127}));
        connect(combiTimeTable.y[3], PID_T.u_s) annotation (Line(points={{-159,
                70},{-150,70},{-150,-10},{-102,-10}}, color={0,0,127}));
        connect(T_out_sec.T, PID_T.u_m) annotation (Line(points={{-30,41},{-30,
                52},{-110,52},{-110,-30},{-90,-30},{-90,-22}}, color={0,0,127}));
        connect(PID_T.y, val.y) annotation (Line(points={{-79,-10},{-70,-10},{
                -70,-38}}, color={0,0,127}));
        connect(jun.port_1, fan.port_b)
          annotation (Line(points={{130,-110},{160,-110}}, color={0,127,255}));
        connect(T_out_prim.port_b, jun1.port_1)
          annotation (Line(points={{60,-30},{110,-30}}, color={0,127,255}));
        connect(jun1.port_2, bou1.ports[1]) annotation (Line(points={{130,-30},
                {150,-30},{150,-28},{320,-28}}, color={0,127,255}));
        connect(senRelPre.port_b, T_out_prim.port_b) annotation (Line(points={{
                70,-60},{70,-30},{60,-30}}, color={0,127,255}));
        connect(jun.port_2, val.port_a) annotation (Line(points={{110,-110},{
                -100,-110},{-100,-50},{-80,-50}}, color={0,127,255}));
        connect(senRelPre.port_a, jun.port_2) annotation (Line(points={{70,-80},
                {70,-110},{110,-110}}, color={0,127,255}));
        connect(PID_T1.y, val1.y) annotation (Line(points={{81,-150},{96,-150},
                {96,-70},{108,-70}}, color={0,0,127}));
        connect(val1.port_a, jun.port_3)
          annotation (Line(points={{120,-80},{120,-100}}, color={0,127,255}));
        connect(val1.port_b, jun1.port_3) annotation (Line(points={{120,-60},{
                120,-40},{120,-40}}, color={0,127,255}));
        connect(fan.port_a, chiller.port_b2)
          annotation (Line(points={{180,-110},{220,-110}}, color={0,127,255}));
        connect(chiller.port_a2, bou1.ports[2]) annotation (Line(points={{240,
                -110},{280,-110},{280,-32},{320,-32}}, color={0,127,255}));
        connect(chiller.port_b1, bou2.ports[1]) annotation (Line(points={{240,
                -98},{260,-98},{260,-68},{320,-68}}, color={0,127,255}));
        connect(fan1.port_b, chiller.port_a1) annotation (Line(points={{200,-70},
                {210,-70},{210,-98},{220,-98}}, color={0,127,255}));
        connect(fan1.port_a, bou2.ports[2]) annotation (Line(points={{180,-70},
                {170,-70},{170,-50},{318,-50},{318,-72},{320,-72}}, color={0,
                127,255}));
        connect(combiTimeTable1.y[1], bou2.T_in) annotation (Line(points={{401,
                -30},{418,-30},{418,-66},{342,-66}}, color={0,0,127}));
        connect(combiTimeTable1.y[1], chiller.PEM_TT200) annotation (Line(
              points={{401,-30},{418,-30},{418,-86},{214,-86},{214,-94},{218,
                -94}}, color={0,0,127}));
        connect(booleanExpression.y, chiller.u) annotation (Line(points={{201,
                -140},{210,-140},{210,-104},{218,-104}}, color={255,0,255}));
        connect(senRelPre.p_rel, PID_T1.u_m) annotation (Line(points={{79,-70},
                {86,-70},{86,-126},{46,-126},{46,-176},{70,-176},{70,-162}},
              color={0,0,127}));
        connect(const.y, PID_T1.u_s) annotation (Line(points={{35,-150},{46,
                -150},{46,-150},{58,-150}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=13132800,
            Interval=3600,
            __Dymola_Algorithm="Dassl"));
      end sst_caly_bypass_gf;

      model sst_caly_bypass_tfp
        import Fluid;
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource("modelica://Buildings/Data/sst/froid_caly_ref_1h.txt"),
          columns={2,3,4,5,6,7,8,9,10,11,12,13},
          smoothness=Modelica.Blocks.Types.Smoothness.LinearSegments)
          annotation (Placement(transformation(extent={{-180,60},{-160,80}})));

        Fluid.Sources.MassFlowSource_T boundary(
          redeclare package Medium = Buildings.Media.Water,
          use_m_flow_in=true,
          use_T_in=true,
          nPorts=1)
          annotation (Placement(transformation(extent={{100,20},{80,40}})));
        Fluid.Sources.Boundary_pT bou(redeclare package Medium =
              Buildings.Media.Water, nPorts=1)
          annotation (Placement(transformation(extent={{-100,20},{-80,40}})));
        Fluid.Sensors.TemperatureTwoPort T_in_sec(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=180,
              origin={50,30})));
        Fluid.Sensors.TemperatureTwoPort T_out_sec(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=180,
              origin={-30,30})));
        Fluid.HeatExchangers.PlateHeatExchangerEffectivenessNTU hex(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=400000/(4185*15),
          m2_flow_nominal=400000/(4185*15),
          dp1_nominal(displayUnit="kPa") = 70000,
          dp2_nominal(displayUnit="kPa") = 70000,
          configuration=Buildings.Fluid.Types.HeatExchangerConfiguration.CounterFlow,
          use_Q_flow_nominal=false,
          Q_flow_nominal(displayUnit="kW") = 400000,
          T_a1_nominal=288.15,
          T_a2_nominal=278.15,
          eps_nominal=0.72)
          annotation (Placement(transformation(extent={{20,0},{0,20}})));

        Fluid.Sensors.TemperatureTwoPort T_in_prim(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={-30,-50})));
        Fluid.Sensors.TemperatureTwoPort T_out_prim(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={50,-30})));
        Fluid.Sources.Boundary_pT bou1(redeclare package Medium =
              Buildings.Media.Water,
          use_T_in=true,             nPorts=2)
          annotation (Placement(transformation(extent={{340,-40},{320,-20}})));
        Modelica.Blocks.Math.Gain gain(k=1/3.6)
          annotation (Placement(transformation(extent={{-140,60},{-120,80}})));
        Modelica.Blocks.Interfaces.RealOutput temperature[8](final unit="K",
            displayUnit="degC")
          annotation (Placement(transformation(extent={{-180,20},{-160,40}})));
        Fluid.Actuators.Valves.TwoWayLinear val(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=20,
          dpValve_nominal(displayUnit="Pa") = 5000,
          use_inputFilter=false)
          annotation (Placement(transformation(extent={{-80,-60},{-60,-40}})));
        Controls.Continuous.LimPID PID_T(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=0.05,
          Ti=15,
          initType=Modelica.Blocks.Types.InitPID.NoInit,
          reverseActing=false) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-90,-10})));
        Fluid.Movers.FlowControlled_m_flow fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=500/3.6,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_PEG per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          addPowerToMedium=false,
          dp_nominal(displayUnit="bar") = 1300000,
          constantMassFlowRate=450/3.6) annotation (Placement(transformation(
                extent={{180,-120},{160,-100}})));
        Fluid.Sensors.RelativePressure senRelPre(redeclare package Medium =
              Buildings.Media.Water) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={70,-70})));
        Fluid.FixedResistances.Junction jun(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={500/3.6,-20,-500/3.6 + 20},
          dp_nominal={0,0,0})        annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={120,-110})));
        Fluid.FixedResistances.Junction jun1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={20,500/3.6 - 20,-500/3.6},
          dp_nominal={0,0,0}) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={120,-30})));
        Fluid.Actuators.Valves.TwoWayLinear val1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=500/3.6,
          dpValve_nominal(displayUnit="Pa") = 100000,
          use_inputFilter=false)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=90,
              origin={120,-70})));
        Controls.Continuous.LimPID PID_T1(
          controllerType=Modelica.Blocks.Types.SimpleController.P,
          k=0.05,
          Ti=15,
          initType=Modelica.Blocks.Types.InitPID.NoInit,
          reverseActing=true)  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={70,-150})));
        Modelica.Blocks.Sources.Constant const(k=200000)
          annotation (Placement(transformation(extent={{40,-200},{60,-180}})));
        Fluid.Sources.Boundary_pT bou3(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=true,
          T=293.15,
          nPorts=3)
          annotation (Placement(transformation(extent={{422,-186},{402,-166}})));
        Fluid.Movers.FlowControlled_dp fan2(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=850/3.6,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          dp_nominal(displayUnit="bar") = 300000,
          constantHead(displayUnit="bar") = 300000)
          annotation (Placement(transformation(extent={{366,-176},{346,-156}})));
        TFP.TFP_duo_simple tFP_duo_simple(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          redeclare package Medium3 = Buildings.Media.Water,
          redeclare package Medium4 = Buildings.Media.Water,
          m1_flow_nominal=332/3.6,
          m2_flow_nominal=332/3.6,
          m3_flow_nominal=332/3.6,
          m4_flow_nominal=332/3.6) annotation (Placement(transformation(extent=
                  {{236,-216},{256,-196}})));
        RJC.Heat_exchanger heat_exchanger(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water) annotation (Placement(transformation(
                extent={{320,-218},{340,-198}})));
        RJF.Cold_exchanger cold_exchanger(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water) annotation (Placement(transformation(
                extent={{318,-286},{338,-266}})));
        Fluid.Sensors.TemperatureTwoPort PEM_TT200(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=180,
              origin={326,-166})));
        Modelica.Blocks.Sources.IntegerExpression integerExpression(y=1)
          annotation (Placement(transformation(extent={{196,-276},{216,-256}})));
        Modelica.Blocks.Sources.RealExpression realExpression(y=50 + 273.15)
          annotation (Placement(transformation(extent={{196,-306},{216,-286}})));
        Fluid.Movers.FlowControlled_m_flow fan3(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=500/3.6,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_PEG per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          addPowerToMedium=false,
          dp_nominal(displayUnit="bar") = 1300000,
          constantMassFlowRate=0)       annotation (Placement(transformation(
                extent={{10,-10},{-10,10}},
              rotation=90,
              origin={224,-166})));
        Fluid.Sources.Boundary_pT bou4(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=false,
          T=313.15,
          nPorts=2)
          annotation (Placement(transformation(extent={{270,-146},{250,-126}})));
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable2(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource(
              "modelica://Buildings/Data/pem.txt"),
          columns={2,3,4},
          smoothness=Modelica.Blocks.Types.Smoothness.LinearSegments)
          annotation (Placement(transformation(extent={{376,-116},{396,-96}})));
      equation
        for k in [1:8] loop
          temperature[k] = combiTimeTable.y[k];
        end for;
        connect(boundary.ports[1],T_in_sec. port_a)
          annotation (Line(points={{80,30},{60,30}}, color={0,127,255}));
        connect(T_in_sec.port_b,hex. port_a1) annotation (Line(points={{40,30},
                {30,30},{30,16},{20,16}},
                                  color={0,127,255}));
        connect(bou.ports[1],T_out_sec. port_b)
          annotation (Line(points={{-80,30},{-40,30}}, color={0,127,255}));
        connect(T_out_sec.port_a,hex. port_b1) annotation (Line(points={{-20,30},
                {-10,30},{-10,16},{0,16}},
                                      color={0,127,255}));
        connect(T_in_prim.port_b, hex.port_a2) annotation (Line(points={{-20,-50},
                {-12,-50},{-12,4},{0,4}},
                                       color={0,127,255}));
        connect(hex.port_b2, T_out_prim.port_a) annotation (Line(points={{20,4},{
                30,4},{30,-30},{40,-30}},
                                    color={0,127,255}));
        connect(gain.y, boundary.m_flow_in) annotation (Line(points={{-119,70},
                {110,70},{110,38},{102,38}},
                                    color={0,0,127}));
        connect(combiTimeTable.y[10], gain.u)
          annotation (Line(points={{-159,70},{-142,70}}, color={0,0,127}));
        connect(combiTimeTable.y[4], boundary.T_in) annotation (Line(points={{
                -159,70},{-150,70},{-150,100},{120,100},{120,34},{102,34}},
              color={0,0,127}));
        connect(val.port_b, T_in_prim.port_a) annotation (Line(points={{-60,-50},
                {-52,-50},{-52,-50},{-40,-50}}, color={0,127,255}));
        connect(combiTimeTable.y[1], bou1.T_in) annotation (Line(points={{-159,70},
                {-150,70},{-150,100},{360,100},{360,-26},{342,-26}},     color=
                {0,0,127}));
        connect(combiTimeTable.y[3], PID_T.u_s) annotation (Line(points={{-159,
                70},{-150,70},{-150,-10},{-102,-10}}, color={0,0,127}));
        connect(T_out_sec.T, PID_T.u_m) annotation (Line(points={{-30,41},{-30,
                52},{-110,52},{-110,-30},{-90,-30},{-90,-22}}, color={0,0,127}));
        connect(PID_T.y, val.y) annotation (Line(points={{-79,-10},{-70,-10},{
                -70,-38}}, color={0,0,127}));
        connect(jun.port_1, fan.port_b)
          annotation (Line(points={{130,-110},{160,-110}}, color={0,127,255}));
        connect(T_out_prim.port_b, jun1.port_1)
          annotation (Line(points={{60,-30},{110,-30}}, color={0,127,255}));
        connect(jun1.port_2, bou1.ports[1]) annotation (Line(points={{130,-30},
                {150,-30},{150,-28},{320,-28}}, color={0,127,255}));
        connect(senRelPre.port_b, T_out_prim.port_b) annotation (Line(points={{
                70,-60},{70,-30},{60,-30}}, color={0,127,255}));
        connect(jun.port_2, val.port_a) annotation (Line(points={{110,-110},{
                -100,-110},{-100,-50},{-80,-50}}, color={0,127,255}));
        connect(senRelPre.port_a, jun.port_2) annotation (Line(points={{70,-80},
                {70,-110},{110,-110}}, color={0,127,255}));
        connect(senRelPre.p_rel, PID_T1.u_s) annotation (Line(points={{79,-70},
                {86,-70},{86,-130},{50,-130},{50,-150},{58,-150}}, color={0,0,
                127}));
        connect(const.y, PID_T1.u_m) annotation (Line(points={{61,-190},{70,
                -190},{70,-162}}, color={0,0,127}));
        connect(PID_T1.y, val1.y) annotation (Line(points={{81,-150},{96,-150},
                {96,-70},{108,-70}}, color={0,0,127}));
        connect(val1.port_a, jun.port_3)
          annotation (Line(points={{120,-80},{120,-100}}, color={0,127,255}));
        connect(val1.port_b, jun1.port_3) annotation (Line(points={{120,-60},{
                120,-40},{120,-40}}, color={0,127,255}));
        connect(bou3.ports[1],fan2. port_a) annotation (Line(points={{402,
                -173.333},{388,-173.333},{388,-166},{366,-166}},
                                            color={0,127,255}));
        connect(heat_exchanger.port_b1, bou3.ports[2]) annotation (Line(points=
                {{340,-202},{370,-202},{370,-176},{402,-176}}, color={0,127,255}));
        connect(fan2.port_b, PEM_TT200.port_a)
          annotation (Line(points={{346,-166},{336,-166}}, color={0,127,255}));
        connect(PEM_TT200.port_b, heat_exchanger.port_a1) annotation (Line(
              points={{316,-166},{296,-166},{296,-202},{320,-202}}, color={0,
                127,255}));
        connect(PEM_TT200.port_b, cold_exchanger.port_a1) annotation (Line(
              points={{316,-166},{298,-166},{298,-270},{318,-270}}, color={0,
                127,255}));
        connect(cold_exchanger.port_b1, bou3.ports[3]) annotation (Line(points=
                {{338,-270},{368,-270},{368,-178.667},{402,-178.667}}, color={0,
                127,255}));
        connect(tFP_duo_simple.port_b2, heat_exchanger.port_a2) annotation (
            Line(points={{236,-203},{234,-203},{234,-204},{220,-204},{220,-238},
                {358,-238},{358,-214},{340,-214}}, color={0,127,255}));
        connect(heat_exchanger.port_b2, tFP_duo_simple.port_a2) annotation (
            Line(points={{320,-214},{290,-214},{290,-203},{256,-203}}, color={0,
                127,255}));
        connect(cold_exchanger.port_b2, tFP_duo_simple.port_a3) annotation (
            Line(points={{318,-282},{230,-282},{230,-209.2},{236,-209.2}},
              color={0,127,255}));
        connect(tFP_duo_simple.port_b3, cold_exchanger.port_a2) annotation (
            Line(points={{256,-209.1},{264,-209.1},{264,-208},{280,-208},{280,
                -306},{358,-306},{358,-282},{338,-282}}, color={0,127,255}));
        connect(tFP_duo_simple.CV522_pid, heat_exchanger.TFP_CV522) annotation (
           Line(points={{259,-200},{302,-200},{302,-204},{318,-204}}, color={0,
                0,127}));
        connect(PEM_TT200.T, heat_exchanger.PEM_TT200) annotation (Line(points=
                {{326,-155},{326,-140},{308,-140},{308,-212},{318,-212}}, color=
               {0,0,127}));
        connect(PEM_TT200.T, cold_exchanger.PEM_TT200) annotation (Line(points=
                {{326,-155},{326,-144},{304,-144},{304,-280},{316,-280}}, color=
               {0,0,127}));
        connect(tFP_duo_simple.CV122_pid, cold_exchanger.TFP_CV122) annotation (
           Line(points={{259,-212},{288,-212},{288,-272},{316,-272}}, color={0,
                0,127}));
        connect(PEM_TT200.T, tFP_duo_simple.PEM_TT200) annotation (Line(points=
                {{326,-155},{326,-140},{284,-140},{284,-230},{246,-230},{246,
                -218}}, color={0,0,127}));
        connect(realExpression.y, tFP_duo_simple.DEG_TT121) annotation (Line(
              points={{217,-296},{234,-296},{234,-298},{254,-298},{254,-218}},
              color={0,0,127}));
        connect(integerExpression.y, tFP_duo_simple.mode) annotation (Line(
              points={{217,-266},{228,-266},{228,-218},{238,-218}}, color={255,
                127,0}));
        connect(integerExpression.y, heat_exchanger.mode) annotation (Line(
              points={{217,-266},{270,-266},{270,-220},{324,-220}}, color={255,
                127,0}));
        connect(tFP_duo_simple.port_a1, fan3.port_b) annotation (Line(points={{
                236,-198},{224,-198},{224,-176}}, color={0,127,255}));
        connect(fan3.port_a, bou4.ports[1]) annotation (Line(points={{224,-156},
                {224,-134},{250,-134}}, color={0,127,255}));
        connect(tFP_duo_simple.port_b1, bou4.ports[2]) annotation (Line(points=
                {{256,-198},{254,-198},{254,-150},{244,-150},{244,-138},{250,
                -138}}, color={0,127,255}));
        connect(combiTimeTable2.y[1], bou3.T_in) annotation (Line(points={{397,
                -106},{410,-106},{410,-104},{436,-104},{436,-172},{424,-172}},
              color={0,0,127}));
        connect(tFP_duo_simple.port_b4, fan.port_a) annotation (Line(points={{
                236,-214.5},{210,-214.5},{210,-110},{180,-110}}, color={0,127,
                255}));
        connect(tFP_duo_simple.port_a4, bou1.ports[2]) annotation (Line(points=
                {{256,-214},{278,-214},{278,-32},{320,-32}}, color={0,127,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=13132800,
            Interval=3600,
            __Dymola_Algorithm="Dassl"));
      end sst_caly_bypass_tfp;

      model sst_nexi
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource("modelica://Buildings/Data/sst/chaud_nexi_ref_1h.txt"),
          columns={2,3,4,5,6,7},
          smoothness=Modelica.Blocks.Types.Smoothness.LinearSegments)
          annotation (Placement(transformation(extent={{-180,60},{-160,80}})));

        Fluid.Sources.MassFlowSource_T boundary(
          redeclare package Medium = Buildings.Media.Water,
          use_m_flow_in=true,
          use_T_in=true,
          nPorts=1)
          annotation (Placement(transformation(extent={{100,20},{80,40}})));
        Fluid.Sources.Boundary_pT bou(redeclare package Medium =
              Buildings.Media.Water, nPorts=1)
          annotation (Placement(transformation(extent={{-100,20},{-80,40}})));
        Fluid.Sensors.TemperatureTwoPort T_in_sec(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=180,
              origin={50,30})));
        Fluid.Sensors.TemperatureTwoPort T_out_sec(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=180,
              origin={-30,30})));
        Fluid.HeatExchangers.PlateHeatExchangerEffectivenessNTU hex(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=400000/(4185*15),
          m2_flow_nominal=400000/(4185*15),
          dp1_nominal=5000,
          dp2_nominal=5000,
          configuration=Buildings.Fluid.Types.HeatExchangerConfiguration.CounterFlow,
          use_Q_flow_nominal=false,
          Q_flow_nominal(displayUnit="kW") = 400000,
          T_a1_nominal=288.15,
          T_a2_nominal=278.15,
          eps_nominal=0.84)
          annotation (Placement(transformation(extent={{20,0},{0,20}})));

        Fluid.Sensors.TemperatureTwoPort T_in_prim(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={-30,-30})));
        Fluid.Sensors.TemperatureTwoPort T_out_prim(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={50,-30})));
        Fluid.Sources.MassFlowSource_T boundary1(
          redeclare package Medium = Buildings.Media.Water,
          use_m_flow_in=true,
          use_T_in=true,
          nPorts=1)
          annotation (Placement(transformation(extent={{-100,-40},{-80,-20}})));
        Fluid.Sources.Boundary_pT bou1(redeclare package Medium =
              Buildings.Media.Water, nPorts=1)
          annotation (Placement(transformation(extent={{100,-40},{80,-20}})));
        Modelica.Blocks.Math.Gain gain(k=1/3.6)
          annotation (Placement(transformation(extent={{-140,60},{-120,80}})));
        Modelica.Blocks.Math.Gain gain1(k=1/3.6)
          annotation (Placement(transformation(extent={{-140,-20},{-120,0}})));
        Modelica.Blocks.Interfaces.RealOutput temperature[4](final unit="K",
            displayUnit="degC")
          annotation (Placement(transformation(extent={{-100,-80},{-80,-60}})));
      equation
        for k in [1:4] loop
          temperature[k] = combiTimeTable.y[k];
        end for;
        connect(boundary.ports[1],T_in_sec. port_a)
          annotation (Line(points={{80,30},{60,30}}, color={0,127,255}));
        connect(T_in_sec.port_b,hex. port_a1) annotation (Line(points={{40,30},
                {30,30},{30,16},{20,16}},
                                  color={0,127,255}));
        connect(bou.ports[1],T_out_sec. port_b)
          annotation (Line(points={{-80,30},{-40,30}}, color={0,127,255}));
        connect(T_out_sec.port_a,hex. port_b1) annotation (Line(points={{-20,30},
                {-10,30},{-10,16},{0,16}},
                                      color={0,127,255}));
        connect(T_in_prim.port_b, hex.port_a2) annotation (Line(points={{-20,-30},
                {-12,-30},{-12,4},{0,4}},
                                       color={0,127,255}));
        connect(hex.port_b2, T_out_prim.port_a) annotation (Line(points={{20,4},{
                30,4},{30,-30},{40,-30}},
                                    color={0,127,255}));
        connect(T_out_prim.port_b, bou1.ports[1])
          annotation (Line(points={{60,-30},{80,-30}}, color={0,127,255}));
        connect(T_in_prim.port_a, boundary1.ports[1])
          annotation (Line(points={{-40,-30},{-80,-30}}, color={0,127,255}));
        connect(gain.y, boundary.m_flow_in) annotation (Line(points={{-119,70},
                {110,70},{110,38},{102,38}},
                                    color={0,0,127}));
        connect(gain1.y, boundary1.m_flow_in) annotation (Line(points={{-119,
                -10},{-112,-10},{-112,-22},{-102,-22}},
                                          color={0,0,127}));
        connect(combiTimeTable.y[6], gain.u)
          annotation (Line(points={{-159,70},{-142,70}}, color={0,0,127}));
        connect(combiTimeTable.y[5], gain1.u) annotation (Line(points={{-159,70},{-150,
                70},{-150,-10},{-142,-10}}, color={0,0,127}));
        connect(combiTimeTable.y[4], boundary.T_in) annotation (Line(points={{
                -159,70},{-150,70},{-150,100},{120,100},{120,34},{102,34}},
              color={0,0,127}));
        connect(combiTimeTable.y[1], boundary1.T_in) annotation (Line(points={{
                -159,70},{-150,70},{-150,-26},{-102,-26}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=3880800,
            Interval=3600,
            __Dymola_Algorithm="Dassl"));
      end sst_nexi;

      model frfre
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource(
              "modelica://Buildings/Data/sst/chaud_nexi_ref_1h.txt"),
          columns={2,3,4,5,6,7},
          smoothness=Modelica.Blocks.Types.Smoothness.LinearSegments)
          annotation (Placement(transformation(extent={{-64,8},{-44,28}})));
        annotation (
          Icon(coordinateSystem(preserveAspectRatio=false)),
          Diagram(coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=8287200,
            Interval=3600,
            __Dymola_Algorithm="Dassl"));
      end frfre;

      model sst_nexi_pid
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource("modelica://Buildings/Data/sst/chaud_nexi_ref_1h.txt"),
          columns={2,3,4,5,6,7},
          smoothness=Modelica.Blocks.Types.Smoothness.LinearSegments)
          annotation (Placement(transformation(extent={{-180,60},{-160,80}})));

        Fluid.Sources.MassFlowSource_T boundary(
          redeclare package Medium = Buildings.Media.Water,
          use_m_flow_in=true,
          use_T_in=true,
          nPorts=1)
          annotation (Placement(transformation(extent={{100,20},{80,40}})));
        Fluid.Sources.Boundary_pT bou(redeclare package Medium =
              Buildings.Media.Water, nPorts=1)
          annotation (Placement(transformation(extent={{-100,20},{-80,40}})));
        Fluid.Sensors.TemperatureTwoPort T_in_sec(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=180,
              origin={50,30})));
        Fluid.Sensors.TemperatureTwoPort T_out_sec(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=180,
              origin={-30,30})));
        Fluid.HeatExchangers.PlateHeatExchangerEffectivenessNTU hex(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=400000/(4185*15),
          m2_flow_nominal=400000/(4185*15),
          dp1_nominal(displayUnit="kPa") = 70000,
          dp2_nominal(displayUnit="kPa") = 70000,
          configuration=Buildings.Fluid.Types.HeatExchangerConfiguration.CounterFlow,
          use_Q_flow_nominal=false,
          Q_flow_nominal(displayUnit="kW") = 400000,
          T_a1_nominal=288.15,
          T_a2_nominal=278.15,
          eps_nominal=0.84)
          annotation (Placement(transformation(extent={{20,0},{0,20}})));

        Fluid.Sensors.TemperatureTwoPort T_in_prim(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={-30,-50})));
        Fluid.Sensors.TemperatureTwoPort T_out_prim(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={50,-30})));
        Fluid.Sources.Boundary_pT bou1(redeclare package Medium =
              Buildings.Media.Water,
          p(displayUnit="Pa"),
          use_T_in=true,
          T(displayUnit="K") = 303.15,
                                     nPorts=2)
          annotation (Placement(transformation(extent={{100,-40},{80,-20}})));
        Modelica.Blocks.Math.Gain gain(k=1/3.6)
          annotation (Placement(transformation(extent={{-140,60},{-120,80}})));
        Modelica.Blocks.Interfaces.RealOutput temperature[4](final unit="K",
            displayUnit="degC")
          annotation (Placement(transformation(extent={{-180,20},{-160,40}})));
        Fluid.Movers.FlowControlled_dp fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=50,
          redeclare Fluid.Movers.Data.Generic per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          addPowerToMedium=false,
          nominalValuesDefineDefaultPressureCurve=true,
          dp_nominal(displayUnit="bar") = 1300000,
          constantHead(displayUnit="bar") = 1300000) annotation (Placement(
              transformation(extent={{-120,-60},{-100,-40}})));
        Fluid.Actuators.Valves.TwoWayLinear val(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=20,
          dpValve_nominal(displayUnit="Pa") = 5000,
          use_inputFilter=false)
          annotation (Placement(transformation(extent={{-80,-60},{-60,-40}})));
        Controls.Continuous.LimPID PID_T(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=0.05,
          Ti=15,
          initType=Modelica.Blocks.Types.InitPID.NoInit,
          reverseActing=true)  annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-90,-10})));
      equation
        for k in [1:4] loop
          temperature[k] = combiTimeTable.y[k];
        end for;
        connect(boundary.ports[1],T_in_sec. port_a)
          annotation (Line(points={{80,30},{60,30}}, color={0,127,255}));
        connect(T_in_sec.port_b,hex. port_a1) annotation (Line(points={{40,30},
                {30,30},{30,16},{20,16}},
                                  color={0,127,255}));
        connect(bou.ports[1],T_out_sec. port_b)
          annotation (Line(points={{-80,30},{-40,30}}, color={0,127,255}));
        connect(T_out_sec.port_a,hex. port_b1) annotation (Line(points={{-20,30},
                {-10,30},{-10,16},{0,16}},
                                      color={0,127,255}));
        connect(T_in_prim.port_b, hex.port_a2) annotation (Line(points={{-20,-50},
                {-12,-50},{-12,4},{0,4}},
                                       color={0,127,255}));
        connect(hex.port_b2, T_out_prim.port_a) annotation (Line(points={{20,4},{
                30,4},{30,-30},{40,-30}},
                                    color={0,127,255}));
        connect(T_out_prim.port_b, bou1.ports[1])
          annotation (Line(points={{60,-30},{70,-30},{70,-28},{80,-28}},
                                                       color={0,127,255}));
        connect(gain.y, boundary.m_flow_in) annotation (Line(points={{-119,70},
                {110,70},{110,38},{102,38}},
                                    color={0,0,127}));
        connect(fan.port_b, val.port_a)
          annotation (Line(points={{-100,-50},{-80,-50}}, color={0,127,255}));
        connect(val.port_b, T_in_prim.port_a) annotation (Line(points={{-60,-50},
                {-52,-50},{-52,-50},{-40,-50}}, color={0,127,255}));
        connect(fan.port_a, bou1.ports[2]) annotation (Line(points={{-120,-50},
                {-140,-50},{-140,-80},{74,-80},{74,-32},{80,-32}}, color={0,127,
                255}));
        connect(T_out_sec.T, PID_T.u_m) annotation (Line(points={{-30,41},{-30,
                52},{-110,52},{-110,-30},{-90,-30},{-90,-22}}, color={0,0,127}));
        connect(PID_T.y, val.y) annotation (Line(points={{-79,-10},{-70,-10},{
                -70,-38}}, color={0,0,127}));
        connect(combiTimeTable.y[6], gain.u)
          annotation (Line(points={{-159,70},{-142,70}}, color={0,0,127}));
        connect(combiTimeTable.y[4], boundary.T_in) annotation (Line(points={{-159,70},
                {-150,70},{-150,100},{120,100},{120,34},{102,34}}, color={0,0,127}));
        connect(combiTimeTable.y[3], PID_T.u_s) annotation (Line(points={{-159,70},{-150,
                70},{-150,-10},{-102,-10}}, color={0,0,127}));
        connect(combiTimeTable.y[1], bou1.T_in) annotation (Line(points={{-159,
                70},{-150,70},{-150,100},{120,100},{120,-26},{102,-26}}, color=
                {0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=3880800,
            Interval=3600,
            __Dymola_Algorithm="Dassl"));
      end sst_nexi_pid;

      model tfp_nexi
        Buildings.Applications.DHC_Thassalia.TFP.TFP_duo_simple tFP_duo_simple(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          redeclare package Medium3 = Buildings.Media.Water,
          redeclare package Medium4 = Buildings.Media.Water,
          m1_flow_nominal=211/3.6,
          m2_flow_nominal=211/3.6,
          m3_flow_nominal=322/3.6,
          m4_flow_nominal=322/3.6)
          annotation (Placement(transformation(extent={{-16,0},{4,20}})));
        RJC.Heat_exchanger heat_exchanger(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water)
          annotation (Placement(transformation(extent={{40,40},{60,60}})));
        RJF.Cold_exchanger cold_exchanger(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water)
          annotation (Placement(transformation(extent={{40,-40},{60,-20}})));
        Fluid.Sources.Boundary_pT bou2(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=true,
          T=278.15,
          nPorts=3)
          annotation (Placement(transformation(extent={{-60,100},{-40,120}})));
        Buildings.Fluid.Movers.FlowControlled_dp fan2(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=800/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          dp_nominal(displayUnit="bar") = 200000,
          constantHead(displayUnit="bar") = 200000)
          annotation (Placement(transformation(extent={{0,100},{20,120}})));
        Buildings.Fluid.Sources.Boundary_pT bou(redeclare package Medium =
              Buildings.Media.Water, nPorts=1) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-90,-70})));
        Buildings.Fluid.Sources.MassFlowSource_T boundary(
          redeclare package Medium = Buildings.Media.Water,
          m_flow=166/3.6,
          use_T_in=false,
          T=281.15,
          nPorts=1)
          annotation (Placement(transformation(extent={{60,-80},{40,-60}})));
        Buildings.Fluid.Sources.Boundary_pT bou1(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=true,
          nPorts=2) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={-10,50})));
        Buildings.Fluid.Movers.FlowControlled_m_flow fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=211/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_PEC per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          constantMassFlowRate=200/3.6)
          annotation (Placement(transformation(extent={{-90,40},{-110,60}})));
        Buildings.Fluid.Sensors.TemperatureTwoPort
                                         Tcondsort(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=190/3.6)
          annotation (Placement(transformation(extent={{-120,40},{-140,60}})));
        Modelica.Blocks.Sources.IntegerExpression integerExpression(y=2)
          annotation (Placement(transformation(extent={{-100,-40},{-80,-20}})));
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource(
              "modelica://Buildings/Data/pem.txt"),
          columns={2})
          annotation (Placement(transformation(extent={{-140,120},{-120,140}})));
        Buildings.Fluid.Sensors.TemperatureTwoPort
                                         Tevapsort1(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=190/3.6)
          annotation (Placement(transformation(extent={{-74,-80},{-54,-60}})));
        distribution_hot_simple distribution_hot_simple1(redeclare package
            Medium = Buildings.Media.Water) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-212,70})));
        DEC_DEG.DEC_simple dEC_simple(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-170,50})));
        DE_PE.cold cold
          annotation (Placement(transformation(extent={{-354,22},{-334,42}})));
      equation
        connect(tFP_duo_simple.port_b2, heat_exchanger.port_a2) annotation (
            Line(points={{-16,13},{-28,13},{-28,14},{-40,14},{-40,30},{70,30},{
                70,44},{60,44}}, color={0,127,255}));
        connect(heat_exchanger.port_b2, tFP_duo_simple.port_a2)
          annotation (Line(points={{40,44},{40,13},{4,13}}, color={0,0,127}));
        connect(cold_exchanger.port_b2, tFP_duo_simple.port_a3) annotation (
            Line(points={{40,-36},{-36,-36},{-36,6.8},{-16,6.8}}, color={0,127,
                255}));
        connect(cold_exchanger.port_a2, tFP_duo_simple.port_b3) annotation (
            Line(points={{60,-36},{74,-36},{74,6.9},{4,6.9}}, color={0,127,255}));
        connect(fan2.port_b, heat_exchanger.port_a1) annotation (Line(points={{
                20,110},{40,110},{40,56}}, color={0,127,255}));
        connect(fan2.port_b, cold_exchanger.port_a1) annotation (Line(points={{
                20,110},{30,110},{30,-24},{40,-24}}, color={0,127,255}));
        connect(cold_exchanger.port_b1, bou2.ports[1]) annotation (Line(points={{60,-24},
                {100,-24},{100,132},{-40,132},{-40,112.667}},           color={
                0,127,255}));
        connect(heat_exchanger.port_b1, bou2.ports[2]) annotation (Line(points=
                {{60,56},{78,56},{78,126},{-36,126},{-36,110},{-40,110}}, color=
               {0,127,255}));
        connect(bou2.ports[3], fan2.port_a) annotation (Line(points={{-40,
                107.333},{-22,107.333},{-22,110},{0,110}}, color={0,127,255}));
        connect(tFP_duo_simple.CV122_pid, cold_exchanger.TFP_CV122) annotation (
           Line(points={{7,4},{22,4},{22,-26},{38,-26}}, color={0,0,127}));
        connect(tFP_duo_simple.CV522_pid, heat_exchanger.TFP_CV522) annotation (
           Line(points={{7,16},{22,16},{22,54},{38,54}}, color={0,0,127}));
        connect(tFP_duo_simple.port_a4, boundary.ports[1]) annotation (Line(
              points={{4,2},{20,2},{20,-70},{40,-70}}, color={0,127,255}));
        connect(Tcondsort.T, bou1.T_in) annotation (Line(points={{-130,61},{
                -130,78},{12,78},{12,54},{2,54}}, color={0,0,127}));
        connect(integerExpression.y, tFP_duo_simple.mode) annotation (Line(
              points={{-79,-30},{-14,-30},{-14,-2}}, color={255,127,0}));
        connect(integerExpression.y, heat_exchanger.mode) annotation (Line(
              points={{-79,-30},{28,-30},{28,18},{44,18},{44,38}}, color={255,
                127,0}));
        connect(combiTimeTable.y[1], bou2.T_in) annotation (Line(points={{-119,
                130},{-72,130},{-72,114},{-62,114}}, color={0,0,127}));
        connect(combiTimeTable.y[1], tFP_duo_simple.PEM_TT200) annotation (Line(
              points={{-119,130},{-72,130},{-72,-12},{-6,-12},{-6,-2}}, color={
                0,0,127}));
        connect(combiTimeTable.y[1], heat_exchanger.PEM_TT200) annotation (Line(
              points={{-119,130},{-72,130},{-72,66},{28,66},{28,46},{38,46}},
              color={0,0,127}));
        connect(fan.port_a, tFP_duo_simple.port_b1) annotation (Line(points={{
                -90,50},{-28,50},{-28,24},{4,24},{4,18}}, color={0,127,255}));
        connect(bou1.ports[1], tFP_duo_simple.port_a1) annotation (Line(points={{-20,52},
                {-34,52},{-34,18},{-16,18}},           color={0,127,255}));
        connect(tFP_duo_simple.port_b4, Tevapsort1.port_b) annotation (Line(
              points={{-16,1.5},{-20,1.5},{-20,2},{-52,2},{-52,-70},{-54,-70}},
              color={0,127,255}));
        connect(Tevapsort1.port_a, bou.ports[1])
          annotation (Line(points={{-74,-70},{-80,-70}}, color={0,127,255}));
        connect(Tcondsort.T, tFP_duo_simple.DEG_TT121) annotation (Line(points=
                {{-130,61},{-130,78},{-30,78},{-30,-20},{2,-20},{2,-2}}, color=
                {0,0,127}));
        connect(combiTimeTable.y[1], cold_exchanger.PEM_TT200) annotation (Line(
              points={{-119,130},{-72,130},{-72,-34},{38,-34}}, color={0,0,127}));
        connect(Tcondsort.port_a, fan.port_b)
          annotation (Line(points={{-120,50},{-110,50}}, color={0,127,255}));
        connect(dEC_simple.port_a1, Tcondsort.port_b) annotation (Line(points={
                {-160,44},{-150,44},{-150,50},{-140,50}}, color={0,127,255}));
        connect(dEC_simple.port_b1, distribution_hot_simple1.port_a)
          annotation (Line(points={{-180,44},{-212,44},{-212,60}}, color={0,127,
                255}));
        connect(distribution_hot_simple1.port_b, dEC_simple.port_a2)
          annotation (Line(points={{-212,80},{-212,92},{-188,92},{-188,56},{
                -180,56}}, color={0,127,255}));
        connect(dEC_simple.port_b2, bou1.ports[2]) annotation (Line(points={{
                -160,56},{-152,56},{-152,88},{-20,88},{-20,48}}, color={0,127,
                255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=50000,
            Interval=500,
            __Dymola_Algorithm="Dassl"));
      end tfp_nexi;

      model tfp_nexi_fast
        Buildings.Applications.DHC_Thassalia.TFP.TFP_duo_simple tFP_duo_simple(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          redeclare package Medium3 = Buildings.Media.Water,
          redeclare package Medium4 = Buildings.Media.Water,
          m1_flow_nominal=211/3.6,
          m2_flow_nominal=211/3.6,
          m3_flow_nominal=322/3.6,
          m4_flow_nominal=322/3.6)
          annotation (Placement(transformation(extent={{-16,0},{4,20}})));
        RJC.Heat_exchanger heat_exchanger(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water)
          annotation (Placement(transformation(extent={{40,40},{60,60}})));
        RJF.Cold_exchanger cold_exchanger(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water)
          annotation (Placement(transformation(extent={{40,-40},{60,-20}})));
        Fluid.Sources.Boundary_pT bou2(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=true,
          T=278.15,
          nPorts=3)
          annotation (Placement(transformation(extent={{-60,100},{-40,120}})));
        Buildings.Fluid.Movers.FlowControlled_dp fan2(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=800/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          dp_nominal(displayUnit="bar") = 200000,
          constantHead(displayUnit="bar") = 200000)
          annotation (Placement(transformation(extent={{0,100},{20,120}})));
        Buildings.Fluid.Sources.Boundary_pT bou(redeclare package Medium =
              Buildings.Media.Water, nPorts=2) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-90,-70})));
        Buildings.Fluid.Sources.Boundary_pT bou1(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=true,
          nPorts=2) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={-10,50})));
        Buildings.Fluid.Movers.FlowControlled_m_flow fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=211/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_PEC per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          constantMassFlowRate=0)
          annotation (Placement(transformation(extent={{-40,40},{-60,60}})));
        Modelica.Blocks.Sources.IntegerExpression integerExpression(y=1)
          annotation (Placement(transformation(extent={{-100,-40},{-80,-20}})));
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource(
              "modelica://Buildings/Data/pem.txt"),
          columns={2})
          annotation (Placement(transformation(extent={{-140,120},{-120,140}})));
        Buildings.Fluid.Sensors.TemperatureTwoPort
                                         Tevapsort1(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=190/3.6)
          annotation (Placement(transformation(extent={{-74,-80},{-54,-60}})));
        Fluid.Sensors.TemperatureTwoPort Tcondsort(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=190/3.6)
          annotation (Placement(transformation(extent={{-100,0},{-120,20}})));
        Fluid.Movers.FlowControlled_dp fan1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=500/3.6,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_PEC per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          dp_nominal=100000,
          constantHead=100000)
          annotation (Placement(transformation(extent={{-220,40},{-240,60}})));
        Fluid.Sources.Boundary_pT           bou3(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=true,
          nPorts=2) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={-190,50})));
        distribution_hot_simple distribution_hot_simple1(redeclare package
            Medium = Buildings.Media.Water) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-270,70})));
        Fluid.Sensors.TemperatureTwoPort Tcondsort1(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=190/3.6)
          annotation (Placement(transformation(extent={{-220,80},{-200,100}})));
        Fluid.Movers.FlowControlled_m_flow           fan3(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=166/3.6,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_PEC per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          addPowerToMedium=true,
          dp_nominal=100000,
          constantMassFlowRate=300/3.6)
          annotation (Placement(transformation(extent={{40,-80},{20,-60}})));
      equation
        connect(tFP_duo_simple.port_b2, heat_exchanger.port_a2) annotation (
            Line(points={{-16,13},{-28,13},{-28,14},{-40,14},{-40,30},{70,30},{
                70,44},{60,44}}, color={0,127,255}));
        connect(heat_exchanger.port_b2, tFP_duo_simple.port_a2)
          annotation (Line(points={{40,44},{40,13},{4,13}}, color={0,0,127}));
        connect(cold_exchanger.port_b2, tFP_duo_simple.port_a3) annotation (
            Line(points={{40,-36},{-36,-36},{-36,6.8},{-16,6.8}}, color={0,127,
                255}));
        connect(cold_exchanger.port_a2, tFP_duo_simple.port_b3) annotation (
            Line(points={{60,-36},{74,-36},{74,6.9},{4,6.9}}, color={0,127,255}));
        connect(fan2.port_b, heat_exchanger.port_a1) annotation (Line(points={{
                20,110},{40,110},{40,56}}, color={0,127,255}));
        connect(fan2.port_b, cold_exchanger.port_a1) annotation (Line(points={{
                20,110},{30,110},{30,-24},{40,-24}}, color={0,127,255}));
        connect(cold_exchanger.port_b1, bou2.ports[1]) annotation (Line(points={{60,-24},
                {100,-24},{100,132},{-40,132},{-40,112.667}},           color={
                0,127,255}));
        connect(heat_exchanger.port_b1, bou2.ports[2]) annotation (Line(points=
                {{60,56},{78,56},{78,126},{-36,126},{-36,110},{-40,110}}, color=
               {0,127,255}));
        connect(bou2.ports[3], fan2.port_a) annotation (Line(points={{-40,
                107.333},{-22,107.333},{-22,110},{0,110}}, color={0,127,255}));
        connect(tFP_duo_simple.CV122_pid, cold_exchanger.TFP_CV122) annotation (
           Line(points={{7,4},{22,4},{22,-26},{38,-26}}, color={0,0,127}));
        connect(tFP_duo_simple.CV522_pid, heat_exchanger.TFP_CV522) annotation (
           Line(points={{7,16},{22,16},{22,54},{38,54}}, color={0,0,127}));
        connect(integerExpression.y, tFP_duo_simple.mode) annotation (Line(
              points={{-79,-30},{-14,-30},{-14,-2}}, color={255,127,0}));
        connect(integerExpression.y, heat_exchanger.mode) annotation (Line(
              points={{-79,-30},{28,-30},{28,18},{44,18},{44,38}}, color={255,
                127,0}));
        connect(combiTimeTable.y[1], bou2.T_in) annotation (Line(points={{-119,
                130},{-72,130},{-72,114},{-62,114}}, color={0,0,127}));
        connect(combiTimeTable.y[1], tFP_duo_simple.PEM_TT200) annotation (Line(
              points={{-119,130},{-72,130},{-72,-12},{-6,-12},{-6,-2}}, color={
                0,0,127}));
        connect(combiTimeTable.y[1], heat_exchanger.PEM_TT200) annotation (Line(
              points={{-119,130},{-72,130},{-72,66},{28,66},{28,46},{38,46}},
              color={0,0,127}));
        connect(tFP_duo_simple.port_b4, Tevapsort1.port_b) annotation (Line(
              points={{-16,1.5},{-20,1.5},{-20,2},{-52,2},{-52,-70},{-54,-70}},
              color={0,127,255}));
        connect(Tevapsort1.port_a, bou.ports[1])
          annotation (Line(points={{-74,-70},{-78,-70},{-78,-68},{-80,-68}},
                                                         color={0,127,255}));
        connect(combiTimeTable.y[1], cold_exchanger.PEM_TT200) annotation (Line(
              points={{-119,130},{-72,130},{-72,-34},{38,-34}}, color={0,0,127}));
        connect(bou1.ports[1], fan.port_a) annotation (Line(points={{-20,52},{
                -30,52},{-30,50},{-40,50}}, color={0,127,255}));
        connect(tFP_duo_simple.port_b1, Tcondsort.port_a) annotation (Line(
              points={{4,18},{8,18},{8,36},{-60,36},{-60,10},{-100,10}}, color=
                {0,127,255}));
        connect(fan.port_b, tFP_duo_simple.port_a1) annotation (Line(points={{
                -60,50},{-68,50},{-68,18},{-16,18}}, color={0,127,255}));
        connect(Tcondsort.port_b, bou1.ports[2]) annotation (Line(points={{-120,
                10},{-124,10},{-124,62},{-20,62},{-20,48}}, color={0,127,255}));
        connect(fan1.port_a, bou3.ports[1]) annotation (Line(points={{-220,50},
                {-210,50},{-210,52},{-200,52}}, color={0,127,255}));
        connect(Tcondsort.T, bou3.T_in) annotation (Line(points={{-110,21},{
                -110,54},{-178,54}}, color={0,0,127}));
        connect(fan1.port_b, distribution_hot_simple1.port_a) annotation (Line(
              points={{-240,50},{-270,50},{-270,60}}, color={0,127,255}));
        connect(distribution_hot_simple1.port_b, Tcondsort1.port_a) annotation (
           Line(points={{-270,80},{-270,92},{-220,92},{-220,90}}, color={0,127,
                255}));
        connect(Tcondsort1.port_b, bou3.ports[2]) annotation (Line(points={{
                -200,90},{-200,90},{-200,48}}, color={0,127,255}));
        connect(Tcondsort1.T, bou1.T_in) annotation (Line(points={{-210,101},{
                -210,110},{-94,110},{-94,80},{14,80},{14,54},{2,54}}, color={0,
                0,127}));
        connect(Tcondsort1.T, tFP_duo_simple.DEG_TT121) annotation (Line(points=
               {{-210,101},{-210,110},{-152,110},{-152,-46},{2,-46},{2,-2}},
              color={0,0,127}));
        connect(fan3.port_b, tFP_duo_simple.port_a4) annotation (Line(points={{
                20,-70},{10,-70},{10,2},{4,2}}, color={0,127,255}));
        connect(bou.ports[2], fan3.port_a) annotation (Line(points={{-80,-72},{
                -78,-72},{-78,-96},{60,-96},{60,-70},{40,-70}}, color={0,127,
                255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=50000,
            Interval=500,
            __Dymola_Algorithm="Dassl"));
      end tfp_nexi_fast;
    end Tests;

    model distribution_cold_simple_bis
    extends Fluid.Interfaces.PartialTwoPort;
      sst_cold_simple sst_cold_simple1(
        redeclare package Medium = Buildings.Media.Water,
        eps_nom=0.72,
        fileName=ModelicaServices.ExternalReferences.loadResource(
            "modelica://Buildings/Data/sst/froid_caly_1h.txt"))
        annotation (Placement(transformation(extent={{-10,40},{10,60}})));
      Modelica.Blocks.Interfaces.RealOutput y annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={0,110})));
      Modelica.Blocks.Math.MinMax minMax(nu=1)
        annotation (Placement(transformation(extent={{-40,80},{-20,100}})));
      sst_cold_simple sst_cold_simple2(
        redeclare package Medium = Buildings.Media.Water,
        eps_nom=0.72,
        fileName=ModelicaServices.ExternalReferences.loadResource(
            "modelica://Buildings/Data/sst/froid_caly_1h.txt"))
        annotation (Placement(transformation(extent={{-10,2},{10,22}})));
      sst_cold_simple sst_cold_simple3(
        redeclare package Medium = Buildings.Media.Water,
        eps_nom=0.72,
        fileName=ModelicaServices.ExternalReferences.loadResource(
            "modelica://Buildings/Data/sst/froid_caly_1h.txt"))
        annotation (Placement(transformation(extent={{-12,-38},{8,-18}})));
      sst_cold_simple sst_cold_simple4(
        redeclare package Medium = Buildings.Media.Water,
        eps_nom=0.72,
        fileName=ModelicaServices.ExternalReferences.loadResource(
            "modelica://Buildings/Data/sst/froid_caly_1h.txt"))
        annotation (Placement(transformation(extent={{-12,-78},{8,-58}})));
      sst_cold_simple sst_cold_simple5(
        redeclare package Medium = Buildings.Media.Water,
        eps_nom=0.72,
        fileName=ModelicaServices.ExternalReferences.loadResource(
            "modelica://Buildings/Data/sst/froid_caly_1h.txt"))
        annotation (Placement(transformation(extent={{-10,-112},{10,-92}})));
    equation
      connect(port_a, sst_cold_simple1.port_a)
        annotation (Line(points={{-100,0},{-56,0},{-56,50},{-10,50}},
                                                    color={0,127,255}));
      connect(sst_cold_simple1.port_b, port_b) annotation (Line(points={{10,50},
              {56,50},{56,0},{100,0}}, color={0,127,255}));
      connect(sst_cold_simple1.y, minMax.u[1]) annotation (Line(points={{0,61},
              {0,72},{-58,72},{-58,90},{-40,90}}, color={0,0,127}));
      connect(minMax.yMax, y)
        annotation (Line(points={{-19,96},{0,96},{0,110}}, color={0,0,127}));
      connect(port_a, sst_cold_simple2.port_a) annotation (Line(points={{-100,0},
              {-56,0},{-56,12},{-10,12}}, color={0,127,255}));
      connect(sst_cold_simple2.port_b, port_b) annotation (Line(points={{10,12},
              {54,12},{54,0},{100,0}}, color={0,127,255}));
      connect(port_a, sst_cold_simple3.port_a) annotation (Line(points={{-100,0},
              {-58,0},{-58,-28},{-12,-28}}, color={0,127,255}));
      connect(sst_cold_simple3.port_b, port_b) annotation (Line(points={{8,-28},
              {54,-28},{54,0},{100,0}}, color={0,127,255}));
      connect(port_a, sst_cold_simple4.port_a) annotation (Line(points={{-100,0},
              {-58,0},{-58,-68},{-12,-68}}, color={0,127,255}));
      connect(sst_cold_simple4.port_b, port_b) annotation (Line(points={{8,-68},
              {54,-68},{54,0},{100,0}}, color={0,127,255}));
      connect(port_a, sst_cold_simple5.port_a) annotation (Line(points={{-100,0},
              {-56,0},{-56,-102},{-10,-102}}, color={0,127,255}));
      connect(sst_cold_simple5.port_b, port_b) annotation (Line(points={{10,
              -102},{56,-102},{56,0},{100,0}}, color={0,127,255}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
            Rectangle(
              extent={{-60,60},{60,40}},
              lineColor={0,0,0},
              fillPattern=FillPattern.HorizontalCylinder,
              fillColor={28,108,200}),
            Rectangle(
              extent={{-60,-40},{60,-60}},
              lineColor={0,0,0},
              fillPattern=FillPattern.HorizontalCylinder,
              fillColor={170,213,255}),
            Rectangle(
              extent={{-10,10},{10,-10}},
              lineColor={0,0,255},
              pattern=LinePattern.None,
              fillColor={95,95,95},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-2,6},{2,-6}},
              fillColor={28,108,200},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None,
              lineColor={0,0,0},
              origin={0,4},
              rotation=90),
            Rectangle(
              extent={{-2,6},{2,-6}},
              fillColor={28,108,200},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None,
              lineColor={0,0,0},
              origin={0,-4},
              rotation=90),
            Rectangle(
              extent={{-2,6},{2,-6}},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None,
              origin={0,0},
              rotation=90),
            Rectangle(
              extent={{-50,10},{-30,-10}},
              lineColor={0,0,255},
              pattern=LinePattern.None,
              fillColor={95,95,95},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-2,6},{2,-6}},
              fillColor={28,108,200},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None,
              lineColor={0,0,0},
              origin={-40,4},
              rotation=90),
            Rectangle(
              extent={{-2,6},{2,-6}},
              fillColor={28,108,200},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None,
              lineColor={0,0,0},
              origin={-40,-4},
              rotation=90),
            Rectangle(
              extent={{-2,6},{2,-6}},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None,
              origin={-40,0},
              rotation=90),
            Rectangle(
              extent={{30,10},{50,-10}},
              lineColor={0,0,255},
              pattern=LinePattern.None,
              fillColor={95,95,95},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-2,6},{2,-6}},
              fillColor={28,108,200},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None,
              lineColor={0,0,0},
              origin={40,4},
              rotation=90),
            Rectangle(
              extent={{-2,6},{2,-6}},
              fillColor={28,108,200},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None,
              lineColor={0,0,0},
              origin={40,-4},
              rotation=90),
            Rectangle(
              extent={{-2,6},{2,-6}},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None,
              origin={40,0},
              rotation=90,
              lineColor={0,0,0}),
            Line(points={{-40,40},{-40,10}}, color={28,108,200}),
            Line(points={{-40,-10},{-40,-40}}, color={28,108,200}),
            Line(points={{0,-10},{0,-40}}, color={28,108,200}),
            Line(points={{0,40},{0,10}}, color={28,108,200}),
            Line(points={{40,40},{40,10}}, color={28,108,200}),
            Line(points={{40,-10},{40,-40}}, color={28,108,200})}),  Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end distribution_cold_simple_bis;
  end SST;

  package TFP
    extends Modelica.Icons.VariantsPackage;
    model TFP_solo
      extends Fluid.Interfaces.PartialEightPortInterface;

      parameter Modelica.SIunits.MassFlowRate m_flow_hot= 332*1000/3600;
      parameter Modelica.SIunits.MassFlowRate m_flow_cold= 211*1000/3600;
      parameter Real T_set_hot = 61;
      parameter Real T_set_hot_max = 63;
      parameter Real T_set_hot_min = 41;
      parameter Real T_set_cold_max = 14;
      parameter Real T_set_cold = 4;

      Fluid.FixedResistances.Junction jun(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal={m_flow_hot,-m_flow_hot,-m_flow_hot},
        dp_nominal={0,0,0})
        annotation (Placement(transformation(extent={{-10,-10},{10,10}},
            rotation=270,
            origin={10,250})));
      Fluid.Actuators.Valves.TwoWayLinear XV521(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal=m_flow_hot,
        CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
        dpValve_nominal=10)
        annotation (Placement(transformation(extent={{-40,180},{-60,200}})));
      Fluid.Actuators.Valves.TwoWayLinear XV522(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal=m_flow_hot,
        CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
        dpValve_nominal=10) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={70,230})));
      Fluid.Actuators.Valves.TwoWayLinear CV522(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal=m_flow_hot,
        CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
        dpValve_nominal=10,
        use_inputFilter=false)
        annotation (Placement(transformation(extent={{-60,140},{-40,160}})));
      Fluid.Actuators.Valves.TwoWayLinear CV521(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal=m_flow_hot,
        CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
        dpValve_nominal=10,
        use_inputFilter=false)
                            annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={10,210})));
      Fluid.Actuators.Valves.TwoWayLinear CV523(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal=m_flow_hot,
        CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
        dpValve_nominal=10,
        use_inputFilter=false)
                            annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={10,50})));
      Fluid.FixedResistances.Junction jun1(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal={m_flow_hot,-m_flow_hot,m_flow_hot},
        dp_nominal={0,0,0})
        annotation (Placement(transformation(extent={{-10,10},{10,-10}},
            rotation=270,
            origin={-90,190})));
      Fluid.FixedResistances.Junction jun2(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal={m_flow_hot,-m_flow_hot,m_flow_hot},
        dp_nominal={0,0,0})
        annotation (Placement(transformation(extent={{-10,-10},{10,10}},
            rotation=270,
            origin={10,150})));
      Fluid.FixedResistances.Junction jun3(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal={m_flow_hot,-m_flow_hot,-m_flow_hot},
        dp_nominal={0,0,0})
        annotation (Placement(transformation(extent={{-10,10},{10,-10}},
            rotation=90,
            origin={70,190})));
      Fluid.Chillers.ElectricReformulatedEIR TFPA(redeclare package Medium1 =
            Buildings.Media.Water, redeclare package Medium2 =
            Buildings.Media.Water,
        m1_flow_nominal=m_flow_hot,
        m2_flow_nominal=m_flow_cold/2,
        dp1_nominal=70000,
        dp2_nominal=70000,
        per=Buildings.Fluid.Chillers.Data.ElectricReformulatedEIR.ReformEIRChiller_Trane_RTHB_1051kW_5_05COP_Valve())
        annotation (Placement(transformation(extent={{-40,-20},{-20,0}})));
      Fluid.Actuators.Valves.TwoWayLinear XV112A(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal=100,
        CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
        dpValve_nominal=10) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={-50,-90})));
      Fluid.Actuators.Valves.TwoWayLinear CV121(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal=100,
        CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
        dpValve_nominal=10,
        use_inputFilter=false)
                            annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={50,-210})));
      Fluid.Actuators.Valves.TwoWayLinear CV123(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal=100,
        CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
        dpValve_nominal=10) annotation (Placement(
            transformation(
            extent={{-10,10},{10,-10}},
            rotation=90,
            origin={50,-110})));
      Fluid.FixedResistances.Junction jun5(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal={100,-100,-100},
        dp_nominal={0,0,0})
        annotation (Placement(transformation(extent={{-10,-10},{10,10}},
            rotation=90,
            origin={50,-250})));
      Fluid.Actuators.Valves.TwoWayLinear CV122(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal=100,
        CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
        dpValve_nominal=10,
        use_inputFilter=false)
                            annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-10,-200})));
      Fluid.FixedResistances.Junction jun7(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal={100,-100,100},
        dp_nominal={0,0,0})
        annotation (Placement(transformation(extent={{10,-10},{-10,10}},
            rotation=270,
            origin={50,-170})));
      Fluid.Sensors.VolumeFlowRate FT521(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=-90,
            origin={10,90})));
      Controls.Continuous.LimPID FT_PID_521(k=1, Ti=1)
        annotation (Placement(transformation(extent={{200,120},{220,140}})));
      Controls.Continuous.LimPID FT_PID_123(k=1, Ti=1)
        annotation (Placement(transformation(extent={{180,-100},{200,-80}})));
      Modelica.Blocks.Sources.RealExpression CV123_reg(y=if mode == 1 or mode
             == 3 then 166/3600 else 332/3600)
        annotation (Placement(transformation(extent={{140,-100},{160,-80}})));
      Fluid.Sensors.VolumeFlowRate FT121(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=-90,
            origin={50,-140})));
      Fluid.Sensors.TemperatureTwoPort TT111(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=100)
        annotation (Placement(transformation(extent={{-60,-170},{-80,-150}})));
      Fluid.Sensors.TemperatureTwoPort TT511(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=100)
        annotation (Placement(transformation(extent={{80,250},{100,270}})));
      Fluid.Sensors.TemperatureTwoPort TT521(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
            transformation(
            extent={{-10,10},{10,-10}},
            rotation=-90,
            origin={10,120})));
      Modelica.Blocks.Interfaces.IntegerInput mode
        annotation (Placement(transformation(extent={{-220,70},{-180,110}}),
            iconTransformation(extent={{-20,-20},{20,20}},
            rotation=90,
            origin={-80,-120})));
      Modelica.Blocks.Sources.RealExpression XV521_switch(y=if mode == 1 then 1
             else 0)
        annotation (Placement(transformation(extent={{-240,240},{-220,260}})));
      Modelica.Blocks.Sources.RealExpression XV522_switch(y=if mode >= 2 then 1
             else 0)
        annotation (Placement(transformation(extent={{-240,210},{-220,230}})));
      Modelica.Blocks.Sources.RealExpression XV112A_switch(y=if mode >= 1 then 1
             else 0)
        annotation (Placement(transformation(extent={{-240,-40},{-220,-20}})));
      Modelica.Blocks.Math.RealToBoolean TFPA_on(threshold=0.5)
        annotation (Placement(transformation(extent={{-180,20},{-160,40}})));
      Modelica.Blocks.Sources.RealExpression cons_cold(y=T_set_cold)
        annotation (Placement(transformation(extent={{-240,40},{-220,60}})));
      Modelica.Blocks.Interfaces.RealInput DEG_TT121
        annotation (Placement(transformation(extent={{-220,-120},{-180,-80}}),
            iconTransformation(extent={{-20,-20},{20,20}},
            rotation=90,
            origin={80,-120})));
      Modelica.Blocks.Interfaces.RealInput PEM_TT200
        annotation (Placement(transformation(extent={{-220,-160},{-180,-120}}),
            iconTransformation(extent={{-20,-20},{20,20}},
            rotation=90,
            origin={0,-120})));
      Fluid.Sensors.TemperatureTwoPort TT121(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
            transformation(
            extent={{10,10},{-10,-10}},
            rotation=270,
            origin={50,-80})));
      Controls_a.TFP.PID_Valve_evap pID_Valve_evap annotation (Placement(
            transformation(extent={{-120,-240},{-100,-220}})));
      Controls_a.TFP.PID_Valve_cond pID_Valve_cond
        annotation (Placement(transformation(extent={{-200,160},{-180,180}})));
      Modelica.Blocks.Sources.RealExpression CV523_reg(y=211/3600)
        annotation (Placement(transformation(extent={{140,120},{160,140}})));
      Modelica.Blocks.Interfaces.RealOutput CV522_pid annotation (Placement(
            transformation(extent={{120,50},{140,70}}), iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={-70,130})));
      Modelica.Blocks.Interfaces.RealOutput CV122_pid annotation (Placement(
            transformation(extent={{120,-70},{140,-50}}), iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={70,130})));
      Modelica.Blocks.Interfaces.RealOutput FT521_DEC annotation (Placement(
            transformation(extent={{40,60},{60,80}}), iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={130,60})));
      Modelica.Blocks.Interfaces.RealOutput FT121_DEG annotation (Placement(
            transformation(extent={{140,-180},{160,-160}}), iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={130,-60})));
    equation
      connect(port_a1, jun.port_1) annotation (Line(points={{-100,80},{-140,80},
              {-140,280},{10,280},{10,260}},
                                       color={238,46,47}));
      connect(jun.port_2, CV521.port_a)
        annotation (Line(points={{10,240},{10,220}}, color={238,46,47}));
      connect(CV521.port_b, jun2.port_1)
        annotation (Line(points={{10,200},{10,160}}, color={238,46,47}));
      connect(jun2.port_3, CV522.port_b)
        annotation (Line(points={{1.77636e-15,150},{-40,150}},
                                                     color={238,46,47}));
      connect(jun1.port_3, XV521.port_b)
        annotation (Line(points={{-80,190},{-60,190}},  color={238,46,47}));
      connect(jun.port_3, jun1.port_1) annotation (Line(points={{0,250},{-90,
              250},{-90,200}},
                          color={238,46,47}));
      connect(CV523.port_b, TFPA.port_a1) annotation (Line(points={{10,40},{10,20},{
              -60,20},{-60,-4},{-40,-4}}, color={238,46,47}));
      connect(port_b2, jun1.port_2) annotation (Line(points={{-100,30},{-92,30},
              {-92,180},{-90,180}},
                     color={238,46,47}));
      connect(XV112A.port_a, TFPA.port_b2) annotation (Line(points={{-50,-80},{-50,-16},
              {-40,-16}}, color={0,127,255}));
      connect(port_a2, CV522.port_a) annotation (Line(points={{100,30},{-72,30},{-72,
              150},{-60,150}},      color={238,46,47}));
      connect(jun7.port_1, CV121.port_b)
        annotation (Line(points={{50,-180},{50,-200}}, color={0,127,255}));
      connect(port_a3, CV122.port_a) annotation (Line(points={{-100,-32},{-140,
              -32},{-140,-200},{-20,-200}}, color={0,127,255}));
      connect(CV122.port_b, jun7.port_3) annotation (Line(points={{0,-200},{10,
              -200},{10,-170},{40,-170}},    color={0,127,255}));
      connect(jun3.port_3, XV521.port_a)
        annotation (Line(points={{60,190},{-40,190}}, color={238,46,47}));
      connect(jun3.port_2, XV522.port_a)
        annotation (Line(points={{70,200},{70,220}}, color={238,46,47}));
      connect(CV121.port_a, jun5.port_2)
        annotation (Line(points={{50,-220},{50,-240}}, color={0,127,255}));
      connect(jun5.port_3, port_b3) annotation (Line(points={{60,-250},{120,
              -250},{120,-30},{100,-30}}, color={0,127,255}));
      connect(FT521.port_b, CV523.port_a)
        annotation (Line(points={{10,80},{10,60}}, color={238,46,47}));
      connect(FT521.V_flow, FT_PID_521.u_m) annotation (Line(points={{21,90},{50,90},
              {50,100},{210,100},{210,118}}, color={0,0,127}));
      connect(FT_PID_521.y, CV523.y) annotation (Line(points={{221,130},{240,130},{240,
              50},{22,50}}, color={0,0,127}));
      connect(CV123.port_a, FT121.port_a)
        annotation (Line(points={{50,-120},{50,-130}}, color={0,127,255}));
      connect(FT121.port_b, jun7.port_2)
        annotation (Line(points={{50,-150},{50,-160}}, color={0,127,255}));
      connect(FT121.V_flow, FT_PID_123.u_m) annotation (Line(points={{61,-140},
              {190,-140},{190,-102}},
                                 color={0,0,127}));
      connect(FT_PID_123.y, CV123.y) annotation (Line(points={{201,-90},{220,
              -90},{220,-68},{80,-68},{80,-110},{62,-110}},
                                                color={0,0,127}));
      connect(TT111.port_b, port_b4) annotation (Line(points={{-80,-160},{-100,
              -160},{-100,-80}}, color={0,127,255}));
      connect(XV522.port_b, TT511.port_a) annotation (Line(points={{70,240},{70,
              260},{80,260}}, color={238,46,47}));
      connect(TT511.port_b, port_b1) annotation (Line(points={{100,260},{120,
              260},{120,80},{100,80}}, color={238,46,47}));
      connect(jun2.port_2, TT521.port_a)
        annotation (Line(points={{10,140},{10,130}}, color={238,46,47}));
      connect(TT521.port_b, FT521.port_a)
        annotation (Line(points={{10,110},{10,100}}, color={238,46,47}));
      connect(XV521_switch.y, XV521.y) annotation (Line(points={{-219,250},{
              -160,250},{-160,240},{-50,240},{-50,202}},
                                               color={0,0,127}));
      connect(XV522_switch.y, XV522.y) annotation (Line(points={{-219,220},{
              -160,220},{-160,230},{58,230}},
                                    color={0,0,127}));
      connect(XV112A_switch.y, XV112A.y) annotation (Line(points={{-219,-30},{
              -152,-30},{-152,-50},{-30,-50},{-30,-90},{-38,-90}},
                                                         color={0,0,127}));
      connect(XV112A_switch.y, TFPA_on.u) annotation (Line(points={{-219,-30},{
              -192,-30},{-192,30},{-182,30}},
                                         color={0,0,127}));
      connect(TFPA_on.y, TFPA.on) annotation (Line(points={{-159,30},{-140,30},
              {-140,-7},{-42,-7}},
                             color={255,0,255}));
      connect(cons_cold.y, TFPA.TSet) annotation (Line(points={{-219,50},{-120,
              50},{-120,-13},{-42,-13}},
                                    color={0,0,127}));
      connect(CV123_reg.y, FT_PID_123.u_s)
        annotation (Line(points={{161,-90},{178,-90}}, color={0,0,127}));
      connect(jun5.port_1, port_a4) annotation (Line(points={{50,-260},{50,-280},
              {100,-280},{100,-80}}, color={0,127,255}));
      connect(TT121.port_a, CV123.port_b)
        annotation (Line(points={{50,-90},{50,-100}}, color={0,127,255}));
      connect(pID_Valve_evap.CV122, CV122.y) annotation (Line(points={{-99,-225},
              {-60,-225},{-60,-180},{-10,-180},{-10,-188}}, color={0,0,127}));
      connect(pID_Valve_evap.CV121, CV121.y) annotation (Line(points={{-99,-235},
              {20,-235},{20,-210},{38,-210}}, color={0,0,127}));
      connect(DEG_TT121, pID_Valve_evap.DEG_TT121) annotation (Line(points={{-200,
              -100},{-170,-100},{-170,-226},{-122,-226}},      color={0,0,127}));
      connect(PEM_TT200, pID_Valve_evap.PEM_TT200) annotation (Line(points={{-200,
              -140},{-160,-140},{-160,-222},{-122,-222}},      color={0,0,127}));
      connect(pID_Valve_evap.TFP_TT121, TT121.T) annotation (Line(points={{-122,
              -234},{-220,-234},{-220,-262},{34,-262},{34,-80},{39,-80}}, color=
             {0,0,127}));
      connect(TT511.T, pID_Valve_evap.TFP_TT511) annotation (Line(points={{90,271},
              {90,300},{-250,300},{-250,-252},{-208,-252},{-208,-238},{-122,
              -238}},      color={0,0,127}));
      connect(pID_Valve_cond.CV522, CV522.y) annotation (Line(points={{-179,175},
              {-50,175},{-50,162}}, color={0,0,127}));
      connect(pID_Valve_cond.CV521, CV521.y) annotation (Line(points={{-179,165},
              {-70,165},{-70,170},{40,170},{40,210},{22,210}}, color={0,0,127}));
      connect(TT511.T, pID_Valve_cond.TFP_TT511) annotation (Line(points={{90,271},
              {90,300},{-250,300},{-250,176},{-202,176}},      color={0,0,127}));
      connect(TT521.T, pID_Valve_cond.TFP_TT521) annotation (Line(points={{-1,
              120},{-220,120},{-220,162},{-202,162}}, color={0,0,127}));
      connect(CV523_reg.y, FT_PID_521.u_s)
        annotation (Line(points={{161,130},{198,130}}, color={0,0,127}));
      connect(pID_Valve_cond.CV522, CV522_pid) annotation (Line(points={{-179,
              175},{80,175},{80,60},{130,60}},
                                           color={0,0,127}));
      connect(pID_Valve_evap.CV122, CV122_pid) annotation (Line(points={{-99,
              -225},{-8,-225},{-8,-226},{90,-226},{90,-60},{130,-60}},
                                                                color={0,0,127}));
      connect(TT121.port_b, TFPA.port_a2) annotation (Line(points={{50,-70},{50,
              -16},{-20,-16}}, color={0,127,255}));
      connect(XV112A.port_b, TT111.port_a) annotation (Line(points={{-50,-100},
              {-50,-160},{-60,-160}}, color={0,127,255}));
      connect(TFPA.port_b1, jun3.port_1) annotation (Line(points={{-20,-4},{70,
              -4},{70,180}}, color={238,46,47}));
      connect(FT121.V_flow, FT121_DEG) annotation (Line(points={{61,-140},{80,
              -140},{80,-170},{150,-170}}, color={0,0,127}));
      connect(FT521.V_flow, FT521_DEC) annotation (Line(points={{21,90},{30,90},
              {30,70},{50,70}}, color={0,0,127}));
      annotation (Diagram(coordinateSystem(extent={{-100,-100},{100,100}})), Icon(
            coordinateSystem(extent={{-100,-100},{100,100}}), graphics={Rectangle(
              extent={{-60,80},{60,20}},
              lineColor={28,108,200},
              fillColor={238,46,47},
              fillPattern=FillPattern.Solid),                           Rectangle(
              extent={{-60,-20},{60,-80}},
              lineColor={28,108,200},
              fillColor={28,108,200},
              fillPattern=FillPattern.Solid)}));
    end TFP_solo;

    model TFP_duo
      extends Fluid.Interfaces.PartialEightPortInterface;

      parameter Modelica.SIunits.MassFlowRate m_flow_hot= 332*1000/3600;
      parameter Modelica.SIunits.MassFlowRate m_flow_cold= 211*1000/3600;
      parameter Real T_set_hot = 61;
      parameter Real T_set_hot_max = 63;
      parameter Real T_set_hot_min = 41;
      parameter Real T_set_cold_max = 14;
      parameter Real T_set_cold = 4;

      Fluid.FixedResistances.Junction jun(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal={m_flow_hot,-m_flow_hot,-m_flow_hot},
        dp_nominal={0,0,0})
        annotation (Placement(transformation(extent={{-10,-10},{10,10}},
            rotation=270,
            origin={10,250})));
      Fluid.Actuators.Valves.TwoWayLinear XV521(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal=m_flow_hot,
        CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
        dpValve_nominal=10)
        annotation (Placement(transformation(extent={{-40,180},{-60,200}})));
      Fluid.Actuators.Valves.TwoWayLinear XV522(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal=m_flow_hot,
        CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
        dpValve_nominal=10) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={70,230})));
      Fluid.Actuators.Valves.TwoWayLinear CV522(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal=m_flow_hot,
        CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
        dpValve_nominal=10,
        use_inputFilter=false)
        annotation (Placement(transformation(extent={{-60,140},{-40,160}})));
      Fluid.Actuators.Valves.TwoWayLinear CV521(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal=m_flow_hot,
        CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
        dpValve_nominal=10,
        use_inputFilter=false)
                            annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={10,210})));
      Fluid.Actuators.Valves.TwoWayLinear CV523(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal=m_flow_hot,
        CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
        dpValve_nominal=10,
        use_inputFilter=false)
                            annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={10,50})));
      Fluid.FixedResistances.Junction jun1(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal={m_flow_hot,-m_flow_hot,m_flow_hot},
        dp_nominal={0,0,0})
        annotation (Placement(transformation(extent={{-10,10},{10,-10}},
            rotation=270,
            origin={-90,190})));
      Fluid.FixedResistances.Junction jun2(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal={m_flow_hot,-m_flow_hot,m_flow_hot},
        dp_nominal={0,0,0})
        annotation (Placement(transformation(extent={{-10,-10},{10,10}},
            rotation=270,
            origin={10,150})));
      Fluid.FixedResistances.Junction jun3(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal={m_flow_hot,-m_flow_hot,-m_flow_hot},
        dp_nominal={0,0,0})
        annotation (Placement(transformation(extent={{-10,10},{10,-10}},
            rotation=90,
            origin={70,190})));
      Fluid.Chillers.ElectricReformulatedEIR TFPA(redeclare package Medium1 =
            Buildings.Media.Water, redeclare package Medium2 =
            Buildings.Media.Water,
        m1_flow_nominal=m_flow_hot,
        m2_flow_nominal=m_flow_cold/2,
        dp1_nominal=70000,
        dp2_nominal=70000,
        per=Buildings.Fluid.Chillers.Data.ElectricReformulatedEIR.ReformEIRChiller_Trane_RTHB_1051kW_5_05COP_Valve())
        annotation (Placement(transformation(extent={{-40,-20},{-20,0}})));
      Fluid.Chillers.ElectricReformulatedEIR TFPB(redeclare package Medium1 =
            Buildings.Media.Water, redeclare package Medium2 =
            Buildings.Media.Water,
        m1_flow_nominal=m_flow_hot,
        m2_flow_nominal=m_flow_cold/2,
        dp1_nominal=70000,
        dp2_nominal=70000,
        per=Buildings.Fluid.Chillers.Data.ElectricReformulatedEIR.ReformEIRChiller_Trane_RTHB_1051kW_5_05COP_Valve())
        annotation (Placement(transformation(extent={{20,-20},{40,0}})));
      Fluid.FixedResistances.Junction jun4(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal={100,-100,-100},
        dp_nominal={0,0,0})
        annotation (Placement(transformation(extent={{-10,10},{10,-10}},
            rotation=90,
            origin={50,-50})));
      Fluid.Actuators.Valves.TwoWayLinear XV112A(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal=100,
        CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
        dpValve_nominal=10) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={-50,-90})));
      Fluid.Actuators.Valves.TwoWayLinear CV121(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal=100,
        CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
        dpValve_nominal=10,
        use_inputFilter=false)
                            annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={50,-210})));
      Fluid.Actuators.Valves.TwoWayLinear CV123(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal=100,
        CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
        dpValve_nominal=10,
        use_inputFilter=false)
                            annotation (Placement(
            transformation(
            extent={{-10,10},{10,-10}},
            rotation=90,
            origin={50,-110})));
      Fluid.FixedResistances.Junction jun5(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal={100,-100,-100},
        dp_nominal={0,0,0})
        annotation (Placement(transformation(extent={{-10,-10},{10,10}},
            rotation=90,
            origin={50,-250})));
      Fluid.FixedResistances.Junction jun6(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal={100,-100,100},
        dp_nominal={0,0,0})
        annotation (Placement(transformation(extent={{-10,10},{10,-10}},
            rotation=270,
            origin={-50,-130})));
      Fluid.Actuators.Valves.TwoWayLinear CV122(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal=100,
        CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
        dpValve_nominal=10,
        use_inputFilter=false)
                            annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-10,-200})));
      Fluid.Actuators.Valves.TwoWayLinear XV112B(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal=100,
        CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
        dpValve_nominal=10) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={10,-90})));
      Fluid.FixedResistances.Junction jun7(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal={100,-100,100},
        dp_nominal={0,0,0})
        annotation (Placement(transformation(extent={{10,-10},{-10,10}},
            rotation=270,
            origin={50,-170})));
      Fluid.Sensors.VolumeFlowRate FT521(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=-90,
            origin={10,90})));
      Controls.Continuous.LimPID FT_PID_521(k=1, Ti=1)
        annotation (Placement(transformation(extent={{200,120},{220,140}})));
      Controls.Continuous.LimPID FT_PID_123(k=1, Ti=1)
        annotation (Placement(transformation(extent={{180,-100},{200,-80}})));
      Fluid.Sensors.VolumeFlowRate FT121(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=-90,
            origin={50,-140})));
      Fluid.Sensors.TemperatureTwoPort TT111(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=100)
        annotation (Placement(transformation(extent={{-60,-170},{-80,-150}})));
      Fluid.Sensors.TemperatureTwoPort TT511(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=100)
        annotation (Placement(transformation(extent={{80,250},{100,270}})));
      Fluid.Sensors.TemperatureTwoPort TT521(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
            transformation(
            extent={{-10,10},{10,-10}},
            rotation=-90,
            origin={10,120})));
      Modelica.Blocks.Interfaces.IntegerInput mode
        annotation (Placement(transformation(extent={{-220,70},{-180,110}}),
            iconTransformation(extent={{-20,-20},{20,20}},
            rotation=90,
            origin={-80,-120})));
      Modelica.Blocks.Sources.RealExpression XV521_switch(y=if mode == 1 then 1
             else 0)
        annotation (Placement(transformation(extent={{-240,240},{-220,260}})));
      Modelica.Blocks.Sources.RealExpression XV522_switch(y=if mode >= 2 then 1
             else 0)
        annotation (Placement(transformation(extent={{-240,210},{-220,230}})));
      Modelica.Blocks.Sources.RealExpression XV112A_switch(y=if mode >= 1 then 1
             else 0)
        annotation (Placement(transformation(extent={{-240,-40},{-220,-20}})));
      Modelica.Blocks.Sources.RealExpression XV112B_switch(y=if mode == 1 or mode ==
            3 then 1 else 0)
        annotation (Placement(transformation(extent={{-240,-80},{-220,-60}})));
      Modelica.Blocks.Math.RealToBoolean TFPA_on(threshold=0.5)
        annotation (Placement(transformation(extent={{-180,20},{-160,40}})));
      Modelica.Blocks.Math.RealToBoolean TFPB_on
        annotation (Placement(transformation(extent={{-180,-20},{-160,0}})));
      Modelica.Blocks.Sources.RealExpression cons_cold(y=T_set_cold)
        annotation (Placement(transformation(extent={{-240,40},{-220,60}})));
      Modelica.Blocks.Sources.RealExpression CV123_reg(y=if mode == 1 or mode
             == 3 then 166/3600 else 332/3600)
        annotation (Placement(transformation(extent={{140,-100},{160,-80}})));
      Modelica.Blocks.Interfaces.RealInput DEG_TT121
        annotation (Placement(transformation(extent={{-220,-120},{-180,-80}}),
            iconTransformation(extent={{-20,-20},{20,20}},
            rotation=90,
            origin={80,-120})));
      Modelica.Blocks.Interfaces.RealInput PEM_TT200
        annotation (Placement(transformation(extent={{-220,-160},{-180,-120}}),
            iconTransformation(extent={{-20,-20},{20,20}},
            rotation=90,
            origin={0,-120})));
      Fluid.Sensors.TemperatureTwoPort TT121(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
            transformation(
            extent={{10,10},{-10,-10}},
            rotation=270,
            origin={50,-80})));
      Controls_a.TFP.PID_Valve_evap pID_Valve_evap annotation (Placement(
            transformation(extent={{-120,-240},{-100,-220}})));
      Controls_a.TFP.PID_Valve_cond pID_Valve_cond
        annotation (Placement(transformation(extent={{-200,160},{-180,180}})));
      Modelica.Blocks.Sources.RealExpression CV523_reg(y=211/3600)
        annotation (Placement(transformation(extent={{140,120},{160,140}})));
      Modelica.Blocks.Interfaces.RealOutput CV522_pid
        annotation (Placement(transformation(extent={{120,50},{140,70}})));
      Modelica.Blocks.Interfaces.RealOutput CV122_pid
        annotation (Placement(transformation(extent={{120,-70},{140,-50}})));
    equation
      connect(port_a1, jun.port_1) annotation (Line(points={{-100,80},{-140,80},
              {-140,280},{10,280},{10,260}},
                                       color={238,46,47}));
      connect(jun.port_2, CV521.port_a)
        annotation (Line(points={{10,240},{10,220}}, color={238,46,47}));
      connect(CV521.port_b, jun2.port_1)
        annotation (Line(points={{10,200},{10,160}}, color={238,46,47}));
      connect(jun2.port_3, CV522.port_b)
        annotation (Line(points={{1.77636e-15,150},{-40,150}},
                                                     color={238,46,47}));
      connect(jun1.port_3, XV521.port_b)
        annotation (Line(points={{-80,190},{-60,190}},  color={238,46,47}));
      connect(jun.port_3, jun1.port_1) annotation (Line(points={{0,250},{-90,
              250},{-90,200}},
                          color={238,46,47}));
      connect(CV523.port_b, TFPA.port_a1) annotation (Line(points={{10,40},{10,20},{
              -60,20},{-60,-4},{-40,-4}}, color={238,46,47}));
      connect(TFPA.port_b1, TFPB.port_a1)
        annotation (Line(points={{-20,-4},{20,-4}}, color={238,46,47}));
      connect(port_b2, jun1.port_2) annotation (Line(points={{-100,30},{-92,30},
              {-92,180},{-90,180}},
                     color={238,46,47}));
      connect(jun4.port_2, TFPB.port_a2)
        annotation (Line(points={{50,-40},{50,-16},{40,-16}}, color={0,127,255}));
      connect(jun4.port_3, TFPA.port_a2) annotation (Line(points={{40,-50},{-10,-50},
              {-10,-16},{-20,-16}}, color={0,127,255}));
      connect(XV112A.port_a, TFPA.port_b2) annotation (Line(points={{-50,-80},{-50,-16},
              {-40,-16}}, color={0,127,255}));
      connect(XV112B.port_a, TFPB.port_b2)
        annotation (Line(points={{10,-80},{10,-16},{20,-16}}, color={0,127,255}));
      connect(XV112A.port_b, jun6.port_1)
        annotation (Line(points={{-50,-100},{-50,-120}}, color={0,127,255}));
      connect(jun6.port_3, XV112B.port_b) annotation (Line(points={{-40,-130},{
              10,-130},{10,-100}}, color={0,127,255}));
      connect(port_a2, CV522.port_a) annotation (Line(points={{100,30},{-72,30},{-72,
              150},{-60,150}},      color={238,46,47}));
      connect(jun7.port_1, CV121.port_b)
        annotation (Line(points={{50,-180},{50,-200}}, color={0,127,255}));
      connect(port_a3, CV122.port_a) annotation (Line(points={{-100,-32},{-140,
              -32},{-140,-200},{-20,-200}}, color={0,127,255}));
      connect(CV122.port_b, jun7.port_3) annotation (Line(points={{0,-200},{10,
              -200},{10,-170},{40,-170}},    color={0,127,255}));
      connect(TFPB.port_b1, jun3.port_1)
        annotation (Line(points={{40,-4},{70,-4},{70,180}}, color={238,46,47}));
      connect(jun3.port_3, XV521.port_a)
        annotation (Line(points={{60,190},{-40,190}}, color={238,46,47}));
      connect(jun3.port_2, XV522.port_a)
        annotation (Line(points={{70,200},{70,220}}, color={238,46,47}));
      connect(CV121.port_a, jun5.port_2)
        annotation (Line(points={{50,-220},{50,-240}}, color={0,127,255}));
      connect(jun5.port_3, port_b3) annotation (Line(points={{60,-250},{112,
              -250},{112,-30},{100,-30}}, color={0,127,255}));
      connect(FT521.port_b, CV523.port_a)
        annotation (Line(points={{10,80},{10,60}}, color={238,46,47}));
      connect(FT521.V_flow, FT_PID_521.u_m) annotation (Line(points={{21,90},{50,90},
              {50,100},{210,100},{210,118}}, color={0,0,127}));
      connect(FT_PID_521.y, CV523.y) annotation (Line(points={{221,130},{240,130},{240,
              50},{22,50}}, color={0,0,127}));
      connect(CV123.port_a, FT121.port_a)
        annotation (Line(points={{50,-120},{50,-130}}, color={0,127,255}));
      connect(FT121.port_b, jun7.port_2)
        annotation (Line(points={{50,-150},{50,-160}}, color={0,127,255}));
      connect(FT121.V_flow, FT_PID_123.u_m) annotation (Line(points={{61,-140},
              {190,-140},{190,-102}},
                                 color={0,0,127}));
      connect(FT_PID_123.y, CV123.y) annotation (Line(points={{201,-90},{220,
              -90},{220,-68},{80,-68},{80,-110},{62,-110}},
                                                color={0,0,127}));
      connect(jun6.port_2, TT111.port_a) annotation (Line(points={{-50,-140},{
              -50,-160},{-60,-160}}, color={0,127,255}));
      connect(TT111.port_b, port_b4) annotation (Line(points={{-80,-160},{-100,
              -160},{-100,-80}}, color={0,127,255}));
      connect(XV522.port_b, TT511.port_a) annotation (Line(points={{70,240},{70,
              260},{80,260}}, color={238,46,47}));
      connect(TT511.port_b, port_b1) annotation (Line(points={{100,260},{120,
              260},{120,80},{100,80}}, color={238,46,47}));
      connect(jun2.port_2, TT521.port_a)
        annotation (Line(points={{10,140},{10,130}}, color={238,46,47}));
      connect(TT521.port_b, FT521.port_a)
        annotation (Line(points={{10,110},{10,100}}, color={238,46,47}));
      connect(XV521_switch.y, XV521.y) annotation (Line(points={{-219,250},{
              -160,250},{-160,240},{-50,240},{-50,202}},
                                               color={0,0,127}));
      connect(XV522_switch.y, XV522.y) annotation (Line(points={{-219,220},{
              -160,220},{-160,230},{58,230}},
                                    color={0,0,127}));
      connect(XV112A_switch.y, XV112A.y) annotation (Line(points={{-219,-30},{
              -152,-30},{-152,-50},{-30,-50},{-30,-90},{-38,-90}},
                                                         color={0,0,127}));
      connect(XV112B_switch.y, XV112B.y) annotation (Line(points={{-219,-70},{
              30,-70},{30,-90},{22,-90}},
                                  color={0,0,127}));
      connect(XV112A_switch.y, TFPA_on.u) annotation (Line(points={{-219,-30},{
              -192,-30},{-192,30},{-182,30}},
                                         color={0,0,127}));
      connect(XV112B_switch.y, TFPB_on.u) annotation (Line(points={{-219,-70},{
              -200,-70},{-200,-10},{-182,-10}},
                                           color={0,0,127}));
      connect(TFPB_on.y, TFPB.on) annotation (Line(points={{-159,-10},{-64,-10},
              {-64,-24},{4,-24},{4,-7},{18,-7}},
                                            color={255,0,255}));
      connect(TFPA_on.y, TFPA.on) annotation (Line(points={{-159,30},{-140,30},
              {-140,-7},{-42,-7}},
                             color={255,0,255}));
      connect(cons_cold.y, TFPA.TSet) annotation (Line(points={{-219,50},{-120,
              50},{-120,-13},{-42,-13}},
                                    color={0,0,127}));
      connect(cons_cold.y, TFPB.TSet) annotation (Line(points={{-219,50},{-120,
              50},{-120,8},{8,8},{8,-13},{18,-13}},
                                               color={0,0,127}));
      connect(CV123_reg.y, FT_PID_123.u_s)
        annotation (Line(points={{161,-90},{178,-90}}, color={0,0,127}));
      connect(jun5.port_1, port_a4) annotation (Line(points={{50,-260},{50,-280},
              {100,-280},{100,-80}}, color={0,127,255}));
      connect(jun4.port_1, TT121.port_b)
        annotation (Line(points={{50,-60},{50,-70}}, color={0,127,255}));
      connect(TT121.port_a, CV123.port_b)
        annotation (Line(points={{50,-90},{50,-100}}, color={0,127,255}));
      connect(pID_Valve_evap.CV122, CV122.y) annotation (Line(points={{-99,-225},
              {-60,-225},{-60,-180},{-10,-180},{-10,-188}}, color={0,0,127}));
      connect(pID_Valve_evap.CV121, CV121.y) annotation (Line(points={{-99,-235},
              {20,-235},{20,-210},{38,-210}}, color={0,0,127}));
      connect(DEG_TT121, pID_Valve_evap.DEG_TT121) annotation (Line(points={{-200,
              -100},{-170,-100},{-170,-226},{-122,-226}},      color={0,0,127}));
      connect(PEM_TT200, pID_Valve_evap.PEM_TT200) annotation (Line(points={{-200,
              -140},{-160,-140},{-160,-222},{-122,-222}},      color={0,0,127}));
      connect(pID_Valve_evap.TFP_TT121, TT121.T) annotation (Line(points={{-122,
              -234},{-220,-234},{-220,-262},{34,-262},{34,-80},{39,-80}}, color=
             {0,0,127}));
      connect(TT511.T, pID_Valve_evap.TFP_TT511) annotation (Line(points={{90,271},
              {90,300},{-250,300},{-250,-252},{-208,-252},{-208,-238},{-122,
              -238}},      color={0,0,127}));
      connect(pID_Valve_cond.CV522, CV522.y) annotation (Line(points={{-179,175},
              {-50,175},{-50,162}}, color={0,0,127}));
      connect(pID_Valve_cond.CV521, CV521.y) annotation (Line(points={{-179,165},
              {-70,165},{-70,170},{40,170},{40,210},{22,210}}, color={0,0,127}));
      connect(TT511.T, pID_Valve_cond.TFP_TT511) annotation (Line(points={{90,271},
              {90,300},{-250,300},{-250,176},{-202,176}},      color={0,0,127}));
      connect(TT521.T, pID_Valve_cond.TFP_TT521) annotation (Line(points={{-1,
              120},{-220,120},{-220,162},{-202,162}}, color={0,0,127}));
      connect(CV523_reg.y, FT_PID_521.u_s)
        annotation (Line(points={{161,130},{198,130}}, color={0,0,127}));
      connect(pID_Valve_cond.CV522, CV522_pid) annotation (Line(points={{-179,
              175},{80,175},{80,60},{130,60}}, color={0,0,127}));
      connect(pID_Valve_evap.CV122, CV122_pid) annotation (Line(points={{-99,
              -225},{-8,-225},{-8,-226},{90,-226},{90,-60},{130,-60}}, color={0,
              0,127}));
      annotation (Diagram(coordinateSystem(extent={{-100,-100},{100,100}})), Icon(
            coordinateSystem(extent={{-100,-100},{100,100}}), graphics={Rectangle(
              extent={{-60,80},{60,20}},
              lineColor={28,108,200},
              fillColor={238,46,47},
              fillPattern=FillPattern.Solid),                           Rectangle(
              extent={{-60,-20},{60,-80}},
              lineColor={28,108,200},
              fillColor={28,108,200},
              fillPattern=FillPattern.Solid)}));
    end TFP_duo;

    model TFP_solo_simple
      extends Fluid.Interfaces.PartialEightPortInterface;

      parameter Modelica.SIunits.MassFlowRate m_flow_hot= 332*1000/3600;
      parameter Modelica.SIunits.MassFlowRate m_flow_cold= 211*1000/3600;
      parameter Real T_set_hot = 61;
      parameter Real T_set_hot_max = 63;
      parameter Real T_set_hot_min = 41;
      parameter Real T_set_cold_max = 14;
      parameter Real T_set_cold = 4;

      Fluid.FixedResistances.Junction jun(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal={m_flow_hot,-m_flow_hot,-m_flow_hot},
        dp_nominal={0,0,0})
        annotation (Placement(transformation(extent={{-10,-10},{10,10}},
            rotation=270,
            origin={10,210})));
      Fluid.Actuators.Valves.TwoWayLinear XV521(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal=m_flow_hot,
        CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
        dpValve_nominal=10)
        annotation (Placement(transformation(extent={{-40,180},{-60,200}})));
      Fluid.Actuators.Valves.TwoWayLinear XV522(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal=m_flow_hot,
        CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
        dpValve_nominal=10) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={70,230})));
      Fluid.Actuators.Valves.TwoWayLinear CV523(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal=m_flow_hot,
        CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
        dpValve_nominal=10,
        use_inputFilter=false)
                            annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={10,50})));
      Fluid.FixedResistances.Junction jun1(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal={m_flow_hot,-m_flow_hot,m_flow_hot},
        dp_nominal={0,0,0})
        annotation (Placement(transformation(extent={{-10,10},{10,-10}},
            rotation=270,
            origin={-90,190})));
      Fluid.FixedResistances.Junction jun3(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal={m_flow_hot,-m_flow_hot,-m_flow_hot},
        dp_nominal={0,0,0})
        annotation (Placement(transformation(extent={{-10,10},{10,-10}},
            rotation=90,
            origin={70,190})));
      Fluid.Chillers.ElectricReformulatedEIR TFPA(redeclare package Medium1 =
            Buildings.Media.Water, redeclare package Medium2 =
            Buildings.Media.Water,
        m1_flow_nominal=m_flow_hot,
        m2_flow_nominal=m_flow_cold/2,
        dp1_nominal=70000,
        dp2_nominal=70000,
        per=Buildings.Fluid.Chillers.Data.ElectricReformulatedEIR.ReformEIRChiller_Trane_RTHB_1051kW_5_05COP_Valve())
        annotation (Placement(transformation(extent={{-40,-20},{-20,0}})));
      Fluid.Actuators.Valves.TwoWayLinear XV112A(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal=100,
        CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
        dpValve_nominal=10) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={-50,-90})));
      Fluid.Actuators.Valves.TwoWayLinear CV123(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal=100,
        CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
        dpValve_nominal=10,
        use_inputFilter=false)
                            annotation (Placement(
            transformation(
            extent={{-10,10},{10,-10}},
            rotation=90,
            origin={50,-90})));
      Fluid.FixedResistances.Junction jun5(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal={100,-100,-100},
        dp_nominal={0,0,0})
        annotation (Placement(transformation(extent={{-10,-10},{10,10}},
            rotation=90,
            origin={50,-210})));
      Fluid.Sensors.VolumeFlowRate FT521(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=-90,
            origin={10,90})));
      Controls.Continuous.LimPID FT_PID_521(k=1, Ti=1)
        annotation (Placement(transformation(extent={{200,120},{220,140}})));
      Controls.Continuous.LimPID FT_PID_123(k=1, Ti=1)
        annotation (Placement(transformation(extent={{180,-100},{200,-80}})));
      Modelica.Blocks.Sources.RealExpression CV123_reg(y=if mode == 1 or mode
             == 3 then 166/3600 else 332/3600)
        annotation (Placement(transformation(extent={{140,-100},{160,-80}})));
      Fluid.Sensors.VolumeFlowRate FT121(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=-90,
            origin={50,-130})));
      Fluid.Sensors.TemperatureTwoPort TT111(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=100)
        annotation (Placement(transformation(extent={{-60,-140},{-80,-120}})));
      Fluid.Sensors.TemperatureTwoPort TT511(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=100)
        annotation (Placement(transformation(extent={{80,250},{100,270}})));
      Fluid.Sensors.TemperatureTwoPort TT521(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
            transformation(
            extent={{-10,10},{10,-10}},
            rotation=-90,
            origin={10,120})));
      Modelica.Blocks.Interfaces.IntegerInput mode
        annotation (Placement(transformation(extent={{-220,70},{-180,110}}),
            iconTransformation(extent={{-20,-20},{20,20}},
            rotation=90,
            origin={-80,-120})));
      Modelica.Blocks.Sources.RealExpression XV521_switch(y=if mode == 1 then 1
             else 0)
        annotation (Placement(transformation(extent={{-240,240},{-220,260}})));
      Modelica.Blocks.Sources.RealExpression XV522_switch(y=if mode >= 2 then 1
             else 0)
        annotation (Placement(transformation(extent={{-240,210},{-220,230}})));
      Modelica.Blocks.Sources.RealExpression XV112A_switch(y=if mode >= 1 then 1
             else 0)
        annotation (Placement(transformation(extent={{-240,-40},{-220,-20}})));
      Modelica.Blocks.Math.RealToBoolean TFPA_on(threshold=0.5)
        annotation (Placement(transformation(extent={{-180,20},{-160,40}})));
      Modelica.Blocks.Sources.RealExpression cons_cold(y=T_set_cold)
        annotation (Placement(transformation(extent={{-240,40},{-220,60}})));
      Modelica.Blocks.Interfaces.RealInput DEG_TT121
        annotation (Placement(transformation(extent={{-220,-120},{-180,-80}}),
            iconTransformation(extent={{-20,-20},{20,20}},
            rotation=90,
            origin={80,-120})));
      Modelica.Blocks.Interfaces.RealInput PEM_TT200
        annotation (Placement(transformation(extent={{-220,-160},{-180,-120}}),
            iconTransformation(extent={{-20,-20},{20,20}},
            rotation=90,
            origin={0,-120})));
      Fluid.Sensors.TemperatureTwoPort TT121(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
            transformation(
            extent={{10,10},{-10,-10}},
            rotation=270,
            origin={50,-48})));
      Controls_a.TFP.PID_Valve_evap pID_Valve_evap annotation (Placement(
            transformation(extent={{-120,-240},{-100,-220}})));
      Controls_a.TFP.PID_Valve_cond pID_Valve_cond
        annotation (Placement(transformation(extent={{-200,160},{-180,180}})));
      Modelica.Blocks.Sources.RealExpression CV523_reg(y=211/3600)
        annotation (Placement(transformation(extent={{140,120},{160,140}})));
      Modelica.Blocks.Interfaces.RealOutput CV522_pid annotation (Placement(
            transformation(extent={{120,50},{140,70}}), iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={-70,130})));
      Modelica.Blocks.Interfaces.RealOutput CV122_pid annotation (Placement(
            transformation(extent={{120,-70},{140,-50}}), iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={70,130})));
      Modelica.Blocks.Interfaces.RealOutput FT121_DEG annotation (Placement(
            transformation(extent={{140,-180},{160,-160}}), iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={130,-60})));
      Fluid.Actuators.Valves.ThreeWayLinear CV121_122(redeclare package Medium =
            Buildings.Media.Water, use_inputFilter=false) annotation (Placement(
            transformation(
            extent={{10,-10},{-10,10}},
            rotation=270,
            origin={50,-170})));
      Fluid.Actuators.Valves.ThreeWayLinear CV121_1(redeclare package Medium =
            Buildings.Media.Water, use_inputFilter=false) annotation (Placement(
            transformation(
            extent={{10,-10},{-10,10}},
            rotation=90,
            origin={10,150})));
    equation
      connect(port_a1, jun.port_1) annotation (Line(points={{-100,80},{-140,80},
              {-140,260},{10,260},{10,220}},
                                       color={238,46,47},
          thickness=0.5));
      connect(jun1.port_3, XV521.port_b)
        annotation (Line(points={{-80,190},{-60,190}},  color={238,46,47}));
      connect(jun.port_3, jun1.port_1) annotation (Line(points={{1.77636e-15,
              210},{-90,210},{-90,200}},
                          color={238,46,47},
          thickness=0.5));
      connect(CV523.port_b, TFPA.port_a1) annotation (Line(points={{10,40},{10,20},{
              -60,20},{-60,-4},{-40,-4}}, color={238,46,47},
          thickness=0.5));
      connect(port_b2, jun1.port_2) annotation (Line(points={{-100,30},{-92,30},
              {-92,180},{-90,180}},
                     color={238,46,47},
          thickness=0.5));
      connect(XV112A.port_a, TFPA.port_b2) annotation (Line(points={{-50,-80},{-50,-16},
              {-40,-16}}, color={0,127,255},
          thickness=0.5));
      connect(jun3.port_3, XV521.port_a)
        annotation (Line(points={{60,190},{-40,190}}, color={238,46,47},
          thickness=0.5));
      connect(jun3.port_2, XV522.port_a)
        annotation (Line(points={{70,200},{70,220}}, color={238,46,47}));
      connect(jun5.port_3, port_b3) annotation (Line(points={{60,-210},{120,
              -210},{120,-30},{100,-30}}, color={0,127,255},
          thickness=0.5));
      connect(FT521.port_b, CV523.port_a)
        annotation (Line(points={{10,80},{10,60}}, color={238,46,47},
          thickness=0.5));
      connect(FT521.V_flow, FT_PID_521.u_m) annotation (Line(points={{21,90},{50,90},
              {50,100},{210,100},{210,118}}, color={0,0,127}));
      connect(FT_PID_521.y, CV523.y) annotation (Line(points={{221,130},{240,130},{240,
              50},{22,50}}, color={0,0,127}));
      connect(CV123.port_a, FT121.port_a)
        annotation (Line(points={{50,-100},{50,-120}}, color={0,127,255},
          thickness=0.5));
      connect(FT121.V_flow, FT_PID_123.u_m) annotation (Line(points={{61,-130},
              {190,-130},{190,-102}},
                                 color={0,0,127}));
      connect(FT_PID_123.y, CV123.y) annotation (Line(points={{201,-90},{220,
              -90},{220,-68},{80,-68},{80,-90},{62,-90}},
                                                color={0,0,127}));
      connect(TT111.port_b, port_b4) annotation (Line(points={{-80,-130},{-100,
              -130},{-100,-80}}, color={0,127,255},
          thickness=0.5));
      connect(XV522.port_b, TT511.port_a) annotation (Line(points={{70,240},{70,
              260},{80,260}}, color={238,46,47},
          thickness=0.5));
      connect(TT511.port_b, port_b1) annotation (Line(points={{100,260},{120,
              260},{120,80},{100,80}}, color={238,46,47},
          thickness=0.5));
      connect(TT521.port_b, FT521.port_a)
        annotation (Line(points={{10,110},{10,100}}, color={238,46,47},
          thickness=0.5));
      connect(XV521_switch.y, XV521.y) annotation (Line(points={{-219,250},{
              -160,250},{-160,240},{-50,240},{-50,202}},
                                               color={0,0,127}));
      connect(XV522_switch.y, XV522.y) annotation (Line(points={{-219,220},{
              -160,220},{-160,230},{58,230}},
                                    color={0,0,127}));
      connect(XV112A_switch.y, XV112A.y) annotation (Line(points={{-219,-30},{
              -152,-30},{-152,-50},{-30,-50},{-30,-90},{-38,-90}},
                                                         color={0,0,127}));
      connect(XV112A_switch.y, TFPA_on.u) annotation (Line(points={{-219,-30},{
              -192,-30},{-192,30},{-182,30}},
                                         color={0,0,127}));
      connect(TFPA_on.y, TFPA.on) annotation (Line(points={{-159,30},{-140,30},
              {-140,-7},{-42,-7}},
                             color={255,0,255}));
      connect(cons_cold.y, TFPA.TSet) annotation (Line(points={{-219,50},{-120,
              50},{-120,-13},{-42,-13}},
                                    color={0,0,127}));
      connect(CV123_reg.y, FT_PID_123.u_s)
        annotation (Line(points={{161,-90},{178,-90}}, color={0,0,127}));
      connect(jun5.port_1, port_a4) annotation (Line(points={{50,-220},{50,-260},
              {100,-260},{100,-80}}, color={0,127,255},
          thickness=0.5));
      connect(TT121.port_a, CV123.port_b)
        annotation (Line(points={{50,-58},{50,-80}},  color={0,127,255},
          thickness=0.5));
      connect(DEG_TT121, pID_Valve_evap.DEG_TT121) annotation (Line(points={{-200,
              -100},{-170,-100},{-170,-226},{-122,-226}},      color={0,0,127}));
      connect(PEM_TT200, pID_Valve_evap.PEM_TT200) annotation (Line(points={{-200,
              -140},{-160,-140},{-160,-222},{-122,-222}},      color={0,0,127}));
      connect(pID_Valve_evap.TFP_TT121, TT121.T) annotation (Line(points={{-122,
              -234},{-220,-234},{-220,-262},{34,-262},{34,-48},{39,-48}}, color=
             {0,0,127}));
      connect(TT511.T, pID_Valve_evap.TFP_TT511) annotation (Line(points={{90,271},
              {90,300},{-250,300},{-250,-252},{-208,-252},{-208,-238},{-122,
              -238}},      color={0,0,127}));
      connect(TT511.T, pID_Valve_cond.TFP_TT511) annotation (Line(points={{90,271},
              {90,300},{-250,300},{-250,176},{-202,176}},      color={0,0,127}));
      connect(TT521.T, pID_Valve_cond.TFP_TT521) annotation (Line(points={{-1,
              120},{-220,120},{-220,162},{-202,162}}, color={0,0,127}));
      connect(CV523_reg.y, FT_PID_521.u_s)
        annotation (Line(points={{161,130},{198,130}}, color={0,0,127}));
      connect(pID_Valve_evap.CV122, CV122_pid) annotation (Line(points={{-99,
              -225},{-8,-225},{-8,-226},{90,-226},{90,-60},{130,-60}},
                                                                color={0,0,127}));
      connect(TT121.port_b, TFPA.port_a2) annotation (Line(points={{50,-38},{50,
              -16},{-20,-16}}, color={0,127,255},
          thickness=0.5));
      connect(XV112A.port_b, TT111.port_a) annotation (Line(points={{-50,-100},
              {-50,-130},{-60,-130}}, color={0,127,255},
          thickness=0.5));
      connect(TFPA.port_b1, jun3.port_1) annotation (Line(points={{-20,-4},{70,
              -4},{70,180}}, color={238,46,47},
          thickness=0.5));
      connect(FT121.V_flow, FT121_DEG) annotation (Line(points={{61,-130},{80,
              -130},{80,-170},{150,-170}}, color={0,0,127}));
      connect(CV121_122.port_1, jun5.port_2)
        annotation (Line(points={{50,-180},{50,-200}}, color={0,127,255},
          thickness=0.5));
      connect(FT121.port_b, CV121_122.port_2)
        annotation (Line(points={{50,-140},{50,-160}}, color={0,127,255},
          thickness=0.5));
      connect(CV121_122.port_3, port_a3) annotation (Line(points={{40,-170},{
              -120,-170},{-120,-32},{-100,-32}}, color={0,127,255},
          thickness=0.5));
      connect(pID_Valve_evap.CV121, CV121_122.y) annotation (Line(points={{-99,
              -235},{72,-235},{72,-170},{62,-170}}, color={0,0,127}));
      connect(TT521.port_a, CV121_1.port_2)
        annotation (Line(points={{10,130},{10,140}}, color={238,46,47},
          thickness=0.5));
      connect(jun.port_2, CV121_1.port_1)
        annotation (Line(points={{10,200},{10,160}}, color={238,46,47},
          thickness=0.5));
      connect(pID_Valve_cond.CV521, CV121_1.y) annotation (Line(points={{-179,
              165},{-40,165},{-40,150},{-2,150}}, color={0,0,127}));
      connect(CV121_1.port_3, port_a2) annotation (Line(points={{20,150},{60,
              150},{60,30},{100,30}}, color={238,46,47},
          thickness=0.5));
      annotation (Diagram(coordinateSystem(extent={{-100,-100},{100,100}})), Icon(
            coordinateSystem(extent={{-100,-100},{100,100}}), graphics={Rectangle(
              extent={{-60,80},{60,20}},
              lineColor={28,108,200},
              fillColor={238,46,47},
              fillPattern=FillPattern.Solid),                           Rectangle(
              extent={{-60,-20},{60,-80}},
              lineColor={28,108,200},
              fillColor={28,108,200},
              fillPattern=FillPattern.Solid)}),
        Documentation(info="<html>
<h4><span style=\"color: #000000\">HPSHC modes</span></h4>
<p>For the HPSHC, 4 possible modes :</p>
<p>0 - Off</p>
<p>1 - Cold mode</p>
<p>2 - HPSHC full</p>
<p>3 - HPSHC 1/2</p>
</html>"));
    end TFP_solo_simple;

    model TFP_duo_simple
      import Fluid;
      extends Fluid.Interfaces.PartialEightPortInterface;

      parameter Modelica.SIunits.MassFlowRate m_flow_hot= 211*1000/3600;
      parameter Modelica.SIunits.MassFlowRate m_flow_cold= 332*1000/3600;
      parameter Real T_set_hot = 61+273.15;
      parameter Real T_set_hot_max = 63+273.15;
      parameter Real T_set_hot_min = 41+273.15;
      parameter Real T_set_cold_max = 14+273.15;
      parameter Real T_set_cold = 4+273.15;

      Fluid.FixedResistances.Junction jun(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal={m_flow_hot,-m_flow_hot,-m_flow_hot},
        dp_nominal={0,0,0})
        annotation (Placement(transformation(extent={{-10,-10},{10,10}},
            rotation=270,
            origin={10,230})));
      Fluid.Actuators.Valves.TwoWayLinear CV523(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal=m_flow_hot,
        CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
        dpValve_nominal=5000,
        use_inputFilter=false)
                            annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={10,50})));
      Fluid.Chillers.ElectricReformulatedEIR TFPA(redeclare package Medium1 =
            Buildings.Media.Water, redeclare package Medium2 =
            Buildings.Media.Water,
        m1_flow_nominal=m_flow_hot,
        m2_flow_nominal=m_flow_cold/2,
        dp1_nominal=70000,
        dp2_nominal=70000,
        per=Fluid.Chillers.Data.ElectricReformulatedEIR.ReformEIRChiller_York_YT_2110kW_7_15COP_Vanes(
                mEva_flow_nominal=166/3.6,
                mCon_flow_nominal=211/3.6,
                TEvaLvg_nominal=273.15 + 5,
                TEvaLvgMin=273.15 + 4,
                TEvaLvgMax=273.15 + 11,
                TConLvg_nominal=273.15 + 61,
                TConLvgMin=273.15 + 46,
                TConLvgMax=273.15 + 63))
        annotation (Placement(transformation(extent={{-40,-20},{-20,0}})));
      Fluid.Chillers.ElectricReformulatedEIR TFPB(redeclare package Medium1 =
            Buildings.Media.Water, redeclare package Medium2 =
            Buildings.Media.Water,
        m1_flow_nominal=m_flow_hot,
        m2_flow_nominal=m_flow_cold/2,
        dp1_nominal=70000,
        dp2_nominal=70000,
        per=Fluid.Chillers.Data.ElectricReformulatedEIR.ReformEIRChiller_York_YT_2110kW_7_15COP_Vanes(
                mEva_flow_nominal=166/3.6,
                mCon_flow_nominal=211/3.6,
                TEvaLvg_nominal=273.15 + 5,
                TEvaLvgMin=273.15 + 4,
                TEvaLvgMax=273.15 + 11,
                TConLvgMin=273.15 + 46,
                TConLvgMax=273.15 + 63))
        annotation (Placement(transformation(extent={{20,-20},{40,0}})));
      Fluid.FixedResistances.Junction jun4(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal={m_flow_cold,-m_flow_cold/2,-m_flow_cold/2},
        dp_nominal={0,0,0})
        annotation (Placement(transformation(extent={{-10,10},{10,-10}},
            rotation=90,
            origin={50,-50})));
      Fluid.Actuators.Valves.TwoWayLinear XV112A(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal=m_flow_cold/2,
        CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
        dpValve_nominal=5000)
                            annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={-50,-90})));
      Fluid.Actuators.Valves.TwoWayLinear CV123(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal=m_flow_cold,
        dpValve_nominal=5000,
        use_inputFilter=false)
                            annotation (Placement(
            transformation(
            extent={{-10,10},{10,-10}},
            rotation=90,
            origin={50,-110})));
      Fluid.FixedResistances.Junction jun5(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal={m_flow_cold,-m_flow_cold,-m_flow_cold},
        dp_nominal={0,0,0})
        annotation (Placement(transformation(extent={{-10,-10},{10,10}},
            rotation=90,
            origin={50,-250})));
      Fluid.FixedResistances.Junction jun6(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal={m_flow_cold/2,-m_flow_cold,m_flow_cold/2},
        dp_nominal={0,0,0})
        annotation (Placement(transformation(extent={{-10,10},{10,-10}},
            rotation=270,
            origin={-50,-130})));
      Fluid.Actuators.Valves.TwoWayLinear XV112B(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal=m_flow_cold/2,
        CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
        dpValve_nominal=5000)
                            annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={10,-90})));
      Fluid.Sensors.VolumeFlowRate FT521(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=-90,
            origin={10,90})));
      Controls.Continuous.LimPID FT_PID_521(k=1, Ti=1)
        annotation (Placement(transformation(extent={{200,120},{220,140}})));
      Controls.Continuous.LimPID FT_PID_123(k=1, Ti=1)
        annotation (Placement(transformation(extent={{180,-100},{200,-80}})));
      Fluid.Sensors.VolumeFlowRate FT121(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=m_flow_cold)
                                                       annotation (Placement(
            transformation(
            extent={{-10,10},{10,-10}},
            rotation=90,
            origin={50,-150})));
      Fluid.Sensors.TemperatureTwoPort TT111(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=m_flow_cold)
        annotation (Placement(transformation(extent={{-60,-170},{-80,-150}})));
      Fluid.Sensors.TemperatureTwoPort TT511(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=100)
        annotation (Placement(transformation(extent={{80,250},{100,270}})));
      Fluid.Sensors.TemperatureTwoPort TT521(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
            transformation(
            extent={{-10,10},{10,-10}},
            rotation=-90,
            origin={10,120})));
      Modelica.Blocks.Interfaces.IntegerInput mode
        annotation (Placement(transformation(extent={{-220,70},{-180,110}}),
            iconTransformation(extent={{-20,-20},{20,20}},
            rotation=90,
            origin={-80,-120})));
      Modelica.Blocks.Sources.RealExpression XV522_switch(y=if mode >= 2 then 1
             else 0)
        annotation (Placement(transformation(extent={{-240,200},{-220,220}})));
      Modelica.Blocks.Sources.RealExpression XV112A_switch(y=if mode >= 1 then 1
             else 0)
        annotation (Placement(transformation(extent={{-240,-40},{-220,-20}})));
      Modelica.Blocks.Sources.RealExpression XV112B_switch(y=if mode == 1 or mode ==
            2 then 1 else 0)
        annotation (Placement(transformation(extent={{-240,-80},{-220,-60}})));
      Modelica.Blocks.Math.RealToBoolean TFPA_on(threshold=0.5)
        annotation (Placement(transformation(extent={{-180,20},{-160,40}})));
      Modelica.Blocks.Math.RealToBoolean TFPB_on
        annotation (Placement(transformation(extent={{-180,-20},{-160,0}})));
      Modelica.Blocks.Sources.RealExpression cons_cold(y=T_set_cold)
        annotation (Placement(transformation(extent={{-240,40},{-220,60}})));
      Modelica.Blocks.Sources.RealExpression CV123_reg(y=if mode == 1 or mode
             == 3 then 166/3600 else 332/3600)
        annotation (Placement(transformation(extent={{140,-100},{160,-80}})));
      Modelica.Blocks.Interfaces.RealInput DEG_TT121
        annotation (Placement(transformation(extent={{-220,-120},{-180,-80}}),
            iconTransformation(extent={{-20,-20},{20,20}},
            rotation=90,
            origin={80,-120})));
      Modelica.Blocks.Interfaces.RealInput PEM_TT200
        annotation (Placement(transformation(extent={{-220,-160},{-180,-120}}),
            iconTransformation(extent={{-20,-20},{20,20}},
            rotation=90,
            origin={0,-120})));
      Fluid.Sensors.TemperatureTwoPort TT121(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=322/3.6)
                                                       annotation (Placement(
            transformation(
            extent={{10,10},{-10,-10}},
            rotation=270,
            origin={50,-80})));
      Controls_a.TFP.PID_Valve_evap pID_Valve_evap annotation (Placement(
            transformation(extent={{-120,-240},{-100,-220}})));
      Controls_a.TFP.PID_Valve_cond pID_Valve_cond
        annotation (Placement(transformation(extent={{-200,160},{-180,180}})));
      Modelica.Blocks.Sources.RealExpression CV523_reg(y=211/3600)
        annotation (Placement(transformation(extent={{140,120},{160,140}})));
      Modelica.Blocks.Interfaces.RealOutput CV522_pid
        annotation (Placement(transformation(extent={{120,50},{140,70}})));
      Modelica.Blocks.Interfaces.RealOutput CV122_pid
        annotation (Placement(transformation(extent={{120,-70},{140,-50}})));
      Fluid.Actuators.Valves.ThreeWayLinear val(
        redeclare package Medium = Buildings.Media.Water,
        use_inputFilter=false,
        m_flow_nominal=m_flow_cold,
        dpValve_nominal=5000) annotation (Placement(transformation(
            extent={{10,-10},{-10,10}},
            rotation=270,
            origin={50,-200})));
      Fluid.Actuators.Valves.ThreeWayLinear CV521_522(
        redeclare package Medium = Buildings.Media.Water,
        use_inputFilter=false,
        m_flow_nominal=m_flow_hot,
        dpValve_nominal=5000) annotation (Placement(transformation(
            extent={{10,-10},{-10,10}},
            rotation=90,
            origin={10,150})));
      Modelica.Blocks.Sources.IntegerExpression integerExpression(y=mode)
        annotation (Placement(transformation(extent={{-240,160},{-220,180}})));
      Fluid.Actuators.Valves.ThreeWayLinear XV521_522(
        redeclare package Medium = Buildings.Media.Water,
        use_inputFilter=true,
        m_flow_nominal=m_flow_hot,
        dpValve_nominal=5000) annotation (Placement(transformation(
            extent={{10,-10},{-10,10}},
            rotation=270,
            origin={50,210})));
      Fluid.FixedResistances.Junction jun1(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal={m_flow_hot,-m_flow_hot,m_flow_hot},
        dp_nominal={0,0,0})
        annotation (Placement(transformation(extent={{-10,10},{10,-10}},
            rotation=270,
            origin={-70,210})));
    equation

      connect(port_a1, jun.port_1) annotation (Line(points={{-100,80},{-140,80},
              {-140,260},{10,260},{10,240}},
                                       color={238,46,47},
          thickness=0.5));
      connect(CV523.port_b, TFPA.port_a1) annotation (Line(points={{10,40},{10,20},{
              -60,20},{-60,-4},{-40,-4}}, color={238,46,47},
          thickness=0.5));
      connect(TFPA.port_b1, TFPB.port_a1)
        annotation (Line(points={{-20,-4},{20,-4}}, color={238,46,47},
          thickness=0.5));
      connect(jun4.port_2, TFPB.port_a2)
        annotation (Line(points={{50,-40},{50,-16},{40,-16}}, color={0,127,255},
          thickness=0.5));

      connect(jun4.port_3, TFPA.port_a2) annotation (Line(points={{40,-50},{-10,-50},
              {-10,-16},{-20,-16}}, color={0,127,255},
          thickness=0.5));
      connect(XV112A.port_a, TFPA.port_b2) annotation (Line(points={{-50,-80},{-50,-16},
              {-40,-16}}, color={0,127,255},
          thickness=0.5));
      connect(XV112B.port_a, TFPB.port_b2)
        annotation (Line(points={{10,-80},{10,-16},{20,-16}}, color={0,127,255},
          thickness=0.5));

      connect(XV112A.port_b, jun6.port_1)
        annotation (Line(points={{-50,-100},{-50,-120}}, color={0,127,255},
          thickness=0.5));
      connect(jun6.port_3, XV112B.port_b) annotation (Line(points={{-40,-130},{
              10,-130},{10,-100}}, color={0,127,255},
          thickness=0.5));
      connect(jun5.port_3, port_b3) annotation (Line(points={{60,-250},{112,
              -250},{112,-30},{100,-30}}, color={0,127,255},
          thickness=0.5));
      connect(FT521.port_b, CV523.port_a)
        annotation (Line(points={{10,80},{10,60}}, color={238,46,47},
          thickness=0.5));
      connect(FT521.V_flow, FT_PID_521.u_m) annotation (Line(points={{21,90},{50,90},
              {50,100},{210,100},{210,118}}, color={0,0,127}));
      connect(FT_PID_521.y, CV523.y) annotation (Line(points={{221,130},{240,130},{240,
              50},{22,50}}, color={0,0,127}));
      connect(FT121.V_flow, FT_PID_123.u_m) annotation (Line(points={{61,-150},{190,
              -150},{190,-102}}, color={0,0,127}));
      connect(FT_PID_123.y, CV123.y) annotation (Line(points={{201,-90},{220,
              -90},{220,-68},{80,-68},{80,-110},{62,-110}},
                                                color={0,0,127}));
      connect(jun6.port_2, TT111.port_a) annotation (Line(points={{-50,-140},{
              -50,-160},{-60,-160}}, color={0,127,255},
          thickness=0.5));
      connect(TT111.port_b, port_b4) annotation (Line(points={{-80,-160},{-100,
              -160},{-100,-80}}, color={0,127,255},
          thickness=0.5));
      connect(TT511.port_b, port_b1) annotation (Line(points={{100,260},{120,
              260},{120,80},{100,80}}, color={238,46,47},
          thickness=0.5));
      connect(TT521.port_b, FT521.port_a)
        annotation (Line(points={{10,110},{10,100}}, color={238,46,47},
          thickness=0.5));
      connect(XV112A_switch.y, XV112A.y) annotation (Line(points={{-219,-30},{
              -152,-30},{-152,-50},{-30,-50},{-30,-90},{-38,-90}},
                                                         color={0,0,127}));
      connect(XV112B_switch.y, XV112B.y) annotation (Line(points={{-219,-70},{
              30,-70},{30,-90},{22,-90}},
                                  color={0,0,127}));
      connect(XV112A_switch.y, TFPA_on.u) annotation (Line(points={{-219,-30},{
              -192,-30},{-192,30},{-182,30}},
                                         color={0,0,127}));
      connect(XV112B_switch.y, TFPB_on.u) annotation (Line(points={{-219,-70},{
              -200,-70},{-200,-10},{-182,-10}},
                                           color={0,0,127}));
      connect(TFPB_on.y, TFPB.on) annotation (Line(points={{-159,-10},{-64,-10},
              {-64,-24},{4,-24},{4,-7},{18,-7}},
                                            color={255,0,255}));
      connect(TFPA_on.y, TFPA.on) annotation (Line(points={{-159,30},{-140,30},
              {-140,-7},{-42,-7}},
                             color={255,0,255}));
      connect(cons_cold.y, TFPA.TSet) annotation (Line(points={{-219,50},{-120,
              50},{-120,-13},{-42,-13}},
                                    color={0,0,127}));
      connect(cons_cold.y, TFPB.TSet) annotation (Line(points={{-219,50},{-120,
              50},{-120,8},{8,8},{8,-13},{18,-13}},
                                               color={0,0,127}));
      connect(CV123_reg.y, FT_PID_123.u_s)
        annotation (Line(points={{161,-90},{178,-90}}, color={0,0,127}));
      connect(jun5.port_1, port_a4) annotation (Line(points={{50,-260},{50,-280},
              {100,-280},{100,-80}}, color={0,127,255},
          thickness=0.5));
      connect(jun4.port_1, TT121.port_b)
        annotation (Line(points={{50,-60},{50,-70}}, color={0,127,255},
          thickness=0.5));
      connect(TT121.port_a, CV123.port_b)
        annotation (Line(points={{50,-90},{50,-100}}, color={0,127,255},
          thickness=0.5));
      connect(DEG_TT121, pID_Valve_evap.DEG_TT121) annotation (Line(points={{-200,
              -100},{-170,-100},{-170,-226},{-122,-226}},      color={0,0,127}));
      connect(PEM_TT200, pID_Valve_evap.PEM_TT200) annotation (Line(points={{-200,
              -140},{-160,-140},{-160,-222},{-122,-222}},      color={0,0,127}));
      connect(pID_Valve_evap.TFP_TT121, TT121.T) annotation (Line(points={{-122,
              -234},{-220,-234},{-220,-262},{34,-262},{34,-80},{39,-80}}, color=
             {0,0,127}));
      connect(TT511.T, pID_Valve_evap.TFP_TT511) annotation (Line(points={{90,271},
              {90,280},{-250,280},{-250,-252},{-208,-252},{-208,-238},{-122,
              -238}},      color={0,0,127}));
      connect(TT511.T, pID_Valve_cond.TFP_TT511) annotation (Line(points={{90,271},
              {90,280},{-250,280},{-250,176},{-202,176}},      color={0,0,127}));
      connect(TT521.T, pID_Valve_cond.TFP_TT521) annotation (Line(points={{-1,
              120},{-220,120},{-220,162},{-202,162}}, color={0,0,127}));
      connect(CV523_reg.y, FT_PID_521.u_s)
        annotation (Line(points={{161,130},{198,130}}, color={0,0,127}));
      connect(pID_Valve_cond.CV522, CV522_pid) annotation (Line(points={{-179,
              175},{80,175},{80,60},{130,60}}, color={0,0,127}));
      connect(pID_Valve_evap.CV122, CV122_pid) annotation (Line(points={{-99,
              -225},{-8,-225},{-8,-226},{90,-226},{90,-60},{130,-60}}, color={0,
              0,127}));
      connect(val.port_1, jun5.port_2) annotation (Line(
          points={{50,-210},{50,-240}},
          color={0,127,255},
          thickness=0.5));
      connect(port_a3, val.port_3) annotation (Line(
          points={{-100,-32},{-120,-32},{-120,-200},{40,-200}},
          color={0,127,255},
          thickness=0.5));
      connect(pID_Valve_evap.CV121, val.y) annotation (Line(points={{-99,-235},
              {80,-235},{80,-200},{62,-200}}, color={0,0,127}));
      connect(pID_Valve_cond.CV521, CV521_522.y) annotation (Line(points={{-179,
              165},{-31.5,165},{-31.5,150},{-2,150}}, color={0,0,127}));
      connect(CV521_522.port_2, TT521.port_a) annotation (Line(
          points={{10,140},{10,130}},
          color={238,46,47},
          thickness=0.5));
      connect(CV521_522.port_1, jun.port_2) annotation (Line(
          points={{10,160},{10,220}},
          color={238,46,47},
          thickness=0.5));
      connect(CV521_522.port_3, port_a2) annotation (Line(
          points={{20,150},{60,150},{60,30},{100,30}},
          color={238,46,47},
          thickness=0.5));
      connect(integerExpression.y, pID_Valve_cond.TFP_mode) annotation (Line(points=
             {{-219,170},{-212,170},{-212,170},{-202,170}}, color={255,127,0}));
      connect(FT121.port_a, val.port_2) annotation (Line(
          points={{50,-160},{50,-190}},
          color={0,127,255},
          thickness=0.5));
      connect(FT121.port_b, CV123.port_a) annotation (Line(
          points={{50,-140},{50,-120}},
          color={0,127,255},
          thickness=0.5));
      connect(TFPB.port_b1, XV521_522.port_1) annotation (Line(
          points={{40,-4},{50,-4},{50,200}},
          color={238,46,47},
          thickness=0.5));
      connect(jun.port_3, jun1.port_1) annotation (Line(
          points={{1.77636e-15,230},{-70,230},{-70,220}},
          color={238,46,47},
          thickness=0.5));
      connect(jun1.port_2, port_b2) annotation (Line(
          points={{-70,200},{-70,30},{-100,30}},
          color={238,46,47},
          thickness=0.5));
      connect(XV521_522.port_2, TT511.port_a) annotation (Line(
          points={{50,220},{50,260},{80,260}},
          color={238,46,47},
          thickness=0.5));
      connect(XV521_522.port_3, jun1.port_3) annotation (Line(
          points={{40,210},{-60,210}},
          color={238,46,47},
          thickness=0.5));
      connect(XV522_switch.y, XV521_522.y) annotation (Line(points={{-219,210},
              {-192,210},{-192,190},{70,190},{70,210},{62,210}}, color={0,0,127}));
      annotation (Diagram(coordinateSystem(extent={{-100,-100},{100,100}})), Icon(
            coordinateSystem(extent={{-100,-100},{100,100}}), graphics={Rectangle(
              extent={{0,80},{60,20}},
              lineColor={238,46,47},
              fillColor={238,46,47},
              fillPattern=FillPattern.Solid),                           Rectangle(
              extent={{0,-20},{60,-80}},
              lineColor={28,108,200},
              fillColor={28,108,200},
              fillPattern=FillPattern.Solid),                           Rectangle(
              extent={{-60,80},{0,20}},
              lineColor={238,46,47},
              fillColor={244,125,35},
              fillPattern=FillPattern.Solid),                           Rectangle(
              extent={{-60,-20},{0,-80}},
              lineColor={28,108,200},
              fillColor={0,0,127},
              fillPattern=FillPattern.Solid)}),
        Documentation(info="<html>
<h4><span style=\"color: #000000\">HPSHC modes</span></h4>
<p>For the HPSHC, 4 possible modes :</p>
<p>0 - Off</p>
<p>1 - Cold mode</p>
<p>2 - HPSHC full</p>
<p>3 - HPSHC 1/2</p>
</html>"),
        experiment(StopTime=1, __Dymola_Algorithm="Dassl"));
    end TFP_duo_simple;

    model TFP_duo_carnot

      extends Fluid.Interfaces.PartialEightPortInterface;

      parameter Modelica.SIunits.MassFlowRate m_flow_hot= 211*1000/3600;
      parameter Modelica.SIunits.MassFlowRate m_flow_cold= 332*1000/3600;
      parameter Real T_set_hot = 61+273.15;
      parameter Real T_set_hot_max = 63+273.15;
      parameter Real T_set_hot_min = 41+273.15;
      parameter Real T_set_cold_max = 14+273.15;
      parameter Real T_set_cold = 4+273.15;

      Fluid.FixedResistances.Junction jun(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal={m_flow_hot,-m_flow_hot,-m_flow_hot},
        dp_nominal={0,0,0})
        annotation (Placement(transformation(extent={{-10,-10},{10,10}},
            rotation=270,
            origin={10,250})));
      Fluid.Actuators.Valves.TwoWayLinear CV523(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal=m_flow_hot*2,
        CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
        dpValve_nominal=5000,
        use_inputFilter=false)
                            annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={10,50})));
      Fluid.FixedResistances.Junction jun1(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal={m_flow_hot,-m_flow_hot,m_flow_hot},
        dp_nominal={0,0,0})
        annotation (Placement(transformation(extent={{-10,10},{10,-10}},
            rotation=270,
            origin={-90,200})));
      Fluid.FixedResistances.Junction jun4(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal={m_flow_cold,-m_flow_cold/2,-m_flow_cold/2},
        dp_nominal={0,0,0})
        annotation (Placement(transformation(extent={{-10,10},{10,-10}},
            rotation=90,
            origin={50,-50})));
      Fluid.Actuators.Valves.TwoWayLinear XV112A(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal=m_flow_cold/2,
        CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
        dpValve_nominal=5000)
                            annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={-50,-90})));
      Fluid.Actuators.Valves.TwoWayLinear CV123(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal=m_flow_cold*2,
        dpValve_nominal=5000,
        use_inputFilter=false)
                            annotation (Placement(
            transformation(
            extent={{-10,10},{10,-10}},
            rotation=90,
            origin={50,-110})));
      Fluid.FixedResistances.Junction jun5(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal={m_flow_cold,-m_flow_cold,-m_flow_cold},
        dp_nominal={0,0,0})
        annotation (Placement(transformation(extent={{-10,-10},{10,10}},
            rotation=90,
            origin={50,-250})));
      Fluid.FixedResistances.Junction jun6(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal={m_flow_cold/2,-m_flow_cold,m_flow_cold/2},
        dp_nominal={0,0,0})
        annotation (Placement(transformation(extent={{-10,10},{10,-10}},
            rotation=270,
            origin={-50,-130})));
      Fluid.Actuators.Valves.TwoWayLinear XV112B(
        redeclare package Medium = Buildings.Media.Water,
        m_flow_nominal=m_flow_cold/2,
        CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
        dpValve_nominal=5000)
                            annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={10,-90})));
      Fluid.Sensors.VolumeFlowRate FT521(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=-90,
            origin={10,90})));
      Controls.Continuous.LimPID FT_PID_521(k=1, Ti=1)
        annotation (Placement(transformation(extent={{200,120},{220,140}})));
      Controls.Continuous.LimPID FT_PID_123(k=1, Ti=1)
        annotation (Placement(transformation(extent={{180,-100},{200,-80}})));
      Fluid.Sensors.VolumeFlowRate FT121(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=m_flow_cold)
                                                       annotation (Placement(
            transformation(
            extent={{-10,10},{10,-10}},
            rotation=90,
            origin={50,-150})));
      Fluid.Sensors.TemperatureTwoPort TT111(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=m_flow_cold)
        annotation (Placement(transformation(extent={{-60,-170},{-80,-150}})));
      Fluid.Sensors.TemperatureTwoPort TT511(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=100)
        annotation (Placement(transformation(extent={{80,250},{100,270}})));
      Fluid.Sensors.TemperatureTwoPort TT521(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
            transformation(
            extent={{-10,10},{10,-10}},
            rotation=-90,
            origin={10,120})));
      Modelica.Blocks.Interfaces.IntegerInput mode
        annotation (Placement(transformation(extent={{-220,70},{-180,110}}),
            iconTransformation(extent={{-20,-20},{20,20}},
            rotation=90,
            origin={-80,-120})));
      Modelica.Blocks.Sources.RealExpression XV522_switch(y=if mode >= 2 then 1
             else 0)
        annotation (Placement(transformation(extent={{-240,220},{-220,240}})));
      Modelica.Blocks.Sources.RealExpression XV112A_switch(y=if mode >= 1 then 1
             else 0)
        annotation (Placement(transformation(extent={{-200,-40},{-180,-20}})));
      Modelica.Blocks.Sources.RealExpression XV112B_switch(y=if mode == 1 or mode ==
            2 then 1 else 0)
        annotation (Placement(transformation(extent={{-200,-80},{-180,-60}})));
      Modelica.Blocks.Sources.RealExpression cons_cold(y=T_set_cold)
        annotation (Placement(transformation(extent={{-200,20},{-180,40}})));
      Modelica.Blocks.Sources.RealExpression CV123_reg(y=if mode == 1 or mode
             == 3 then 166/3600 else 332/3600)
        annotation (Placement(transformation(extent={{140,-100},{160,-80}})));
      Modelica.Blocks.Interfaces.RealInput DEG_TT121
        annotation (Placement(transformation(extent={{-220,-120},{-180,-80}}),
            iconTransformation(extent={{-20,-20},{20,20}},
            rotation=90,
            origin={80,-120})));
      Modelica.Blocks.Interfaces.RealInput PEM_TT200
        annotation (Placement(transformation(extent={{-220,-160},{-180,-120}}),
            iconTransformation(extent={{-20,-20},{20,20}},
            rotation=90,
            origin={0,-120})));
      Fluid.Sensors.TemperatureTwoPort TT121(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=322/3.6)
                                                       annotation (Placement(
            transformation(
            extent={{10,10},{-10,-10}},
            rotation=270,
            origin={50,-80})));
      Controls_a.TFP.PID_Valve_evap pID_Valve_evap annotation (Placement(
            transformation(extent={{-120,-240},{-100,-220}})));
      Controls_a.TFP.PID_Valve_cond pID_Valve_cond
        annotation (Placement(transformation(extent={{-200,160},{-180,180}})));
      Modelica.Blocks.Sources.RealExpression CV523_reg(y=211/3600)
        annotation (Placement(transformation(extent={{140,120},{160,140}})));
      Modelica.Blocks.Interfaces.RealOutput CV522_pid
        annotation (Placement(transformation(extent={{120,50},{140,70}})));
      Modelica.Blocks.Interfaces.RealOutput CV122_pid
        annotation (Placement(transformation(extent={{120,-70},{140,-50}})));
      Fluid.Actuators.Valves.ThreeWayLinear val(
        redeclare package Medium = Buildings.Media.Water,
        use_inputFilter=false,
        m_flow_nominal=m_flow_cold,
        dpValve_nominal=5000) annotation (Placement(transformation(
            extent={{10,-10},{-10,10}},
            rotation=270,
            origin={50,-200})));
      Fluid.Actuators.Valves.ThreeWayLinear CV521_522(
        redeclare package Medium = Buildings.Media.Water,
        use_inputFilter=false,
        m_flow_nominal=m_flow_hot,
        dpValve_nominal=5000) annotation (Placement(transformation(
            extent={{10,-10},{-10,10}},
            rotation=90,
            origin={10,150})));
      Modelica.Blocks.Sources.IntegerExpression integerExpression(y=mode)
        annotation (Placement(transformation(extent={{-240,160},{-220,180}})));
      Fluid.Chillers.Carnot_TEva TFPA(
        redeclare package Medium1 = Buildings.Media.Water,
        redeclare package Medium2 = Buildings.Media.Water,
        m1_flow_nominal=m_flow_hot,
        m2_flow_nominal=m_flow_cold/2,
        QEva_flow_nominal=-166/3.6*4185*(7),
        dTEva_nominal=-7,
        dTCon_nominal=15,
        use_eta_Carnot_nominal=true,
        etaCarnot_nominal=0.95,
        COP_nominal=6.5,
        TCon_nominal=313.15,
        dp1_nominal=40000,
        dp2_nominal=40000,
        QEva_flow_min(displayUnit="kW") = -1800000)
        annotation (Placement(transformation(extent={{-40,-20},{-20,0}})));
      Fluid.Chillers.Carnot_TEva TFPB(
        redeclare package Medium1 = Buildings.Media.Water,
        redeclare package Medium2 = Buildings.Media.Water,
        m1_flow_nominal=m_flow_hot,
        m2_flow_nominal=m_flow_cold/2,
        QEva_flow_nominal=-166/3.6*4185*(7),
        dTEva_nominal=-7,
        dTCon_nominal=15,
        use_eta_Carnot_nominal=true,
        etaCarnot_nominal=0.95,
        COP_nominal=6.5,
        TCon_nominal=313.15,
        dp1_nominal=40000,
        dp2_nominal=40000,
        QEva_flow_min(displayUnit="kW") = -1800000)
        annotation (Placement(transformation(extent={{20,-20},{40,0}})));
      Buildings.Applications.DHC_Thassalia.Valves.ThreeWayLinear_modif XV521_522(
        redeclare package Medium = Buildings.Media.Water,
        use_inputFilter=false,
        m_flow_nominal=m_flow_hot,
        dpValve_nominal=5000) annotation (Placement(transformation(
            extent={{10,-10},{-10,10}},
            rotation=270,
            origin={70,200})));
    equation

      connect(port_a1, jun.port_1) annotation (Line(points={{-100,80},{-140,80},
              {-140,280},{10,280},{10,260}},
                                       color={238,46,47},
          thickness=0.5));
      connect(jun.port_3, jun1.port_1) annotation (Line(points={{0,250},{-90,250},{-90,
              210}},      color={238,46,47},
          thickness=0.5));
      connect(port_b2, jun1.port_2) annotation (Line(points={{-100,30},{-90,30},{-90,
              190}}, color={238,46,47},
          thickness=0.5));

      connect(XV112A.port_b, jun6.port_1)
        annotation (Line(points={{-50,-100},{-50,-120}}, color={0,127,255},
          thickness=0.5));
      connect(jun6.port_3, XV112B.port_b) annotation (Line(points={{-40,-130},{
              10,-130},{10,-100}}, color={0,127,255},
          thickness=0.5));
      connect(jun5.port_3, port_b3) annotation (Line(points={{60,-250},{112,
              -250},{112,-30},{100,-30}}, color={0,127,255},
          thickness=0.5));
      connect(FT521.port_b, CV523.port_a)
        annotation (Line(points={{10,80},{10,60}}, color={238,46,47},
          thickness=0.5));
      connect(FT521.V_flow, FT_PID_521.u_m) annotation (Line(points={{21,90},{50,90},
              {50,100},{210,100},{210,118}}, color={0,0,127}));
      connect(FT_PID_521.y, CV523.y) annotation (Line(points={{221,130},{240,130},{240,
              50},{22,50}}, color={0,0,127}));
      connect(FT121.V_flow, FT_PID_123.u_m) annotation (Line(points={{61,-150},{190,
              -150},{190,-102}}, color={0,0,127}));
      connect(FT_PID_123.y, CV123.y) annotation (Line(points={{201,-90},{220,
              -90},{220,-68},{80,-68},{80,-110},{62,-110}},
                                                color={0,0,127}));
      connect(jun6.port_2, TT111.port_a) annotation (Line(points={{-50,-140},{
              -50,-160},{-60,-160}}, color={0,127,255},
          thickness=0.5));
      connect(TT111.port_b, port_b4) annotation (Line(points={{-80,-160},{-100,
              -160},{-100,-80}}, color={0,127,255},
          thickness=0.5));
      connect(TT511.port_b, port_b1) annotation (Line(points={{100,260},{120,
              260},{120,80},{100,80}}, color={238,46,47},
          thickness=0.5));
      connect(TT521.port_b, FT521.port_a)
        annotation (Line(points={{10,110},{10,100}}, color={238,46,47},
          thickness=0.5));
      connect(XV112A_switch.y, XV112A.y) annotation (Line(points={{-179,-30},{-152,-30},
              {-152,-50},{-30,-50},{-30,-90},{-38,-90}}, color={0,0,127}));
      connect(XV112B_switch.y, XV112B.y) annotation (Line(points={{-179,-70},{30,-70},
              {30,-90},{22,-90}}, color={0,0,127}));
      connect(CV123_reg.y, FT_PID_123.u_s)
        annotation (Line(points={{161,-90},{178,-90}}, color={0,0,127}));
      connect(jun5.port_1, port_a4) annotation (Line(points={{50,-260},{50,-280},
              {100,-280},{100,-80}}, color={0,127,255},
          thickness=0.5));
      connect(jun4.port_1, TT121.port_b)
        annotation (Line(points={{50,-60},{50,-70}}, color={0,127,255},
          thickness=0.5));
      connect(TT121.port_a, CV123.port_b)
        annotation (Line(points={{50,-90},{50,-100}}, color={0,127,255},
          thickness=0.5));
      connect(DEG_TT121, pID_Valve_evap.DEG_TT121) annotation (Line(points={{-200,
              -100},{-170,-100},{-170,-226},{-122,-226}},      color={0,0,127}));
      connect(PEM_TT200, pID_Valve_evap.PEM_TT200) annotation (Line(points={{-200,
              -140},{-160,-140},{-160,-222},{-122,-222}},      color={0,0,127}));
      connect(pID_Valve_evap.TFP_TT121, TT121.T) annotation (Line(points={{-122,
              -234},{-220,-234},{-220,-262},{34,-262},{34,-80},{39,-80}}, color=
             {0,0,127}));
      connect(TT511.T, pID_Valve_evap.TFP_TT511) annotation (Line(points={{90,271},
              {90,300},{-250,300},{-250,-252},{-208,-252},{-208,-238},{-122,
              -238}},      color={0,0,127}));
      connect(TT511.T, pID_Valve_cond.TFP_TT511) annotation (Line(points={{90,271},
              {90,300},{-250,300},{-250,176},{-202,176}},      color={0,0,127}));
      connect(TT521.T, pID_Valve_cond.TFP_TT521) annotation (Line(points={{-1,
              120},{-220,120},{-220,162},{-202,162}}, color={0,0,127}));
      connect(CV523_reg.y, FT_PID_521.u_s)
        annotation (Line(points={{161,130},{198,130}}, color={0,0,127}));
      connect(pID_Valve_cond.CV522, CV522_pid) annotation (Line(points={{-179,
              175},{80,175},{80,60},{130,60}}, color={0,0,127}));
      connect(pID_Valve_evap.CV122, CV122_pid) annotation (Line(points={{-99,
              -225},{-8,-225},{-8,-226},{90,-226},{90,-60},{130,-60}}, color={0,
              0,127}));
      connect(val.port_1, jun5.port_2) annotation (Line(
          points={{50,-210},{50,-240}},
          color={0,127,255},
          thickness=0.5));
      connect(port_a3, val.port_3) annotation (Line(
          points={{-100,-32},{-120,-32},{-120,-200},{40,-200}},
          color={0,127,255},
          thickness=0.5));
      connect(pID_Valve_evap.CV121, val.y) annotation (Line(points={{-99,-235},
              {80,-235},{80,-200},{62,-200}}, color={0,0,127}));
      connect(pID_Valve_cond.CV521, CV521_522.y) annotation (Line(points={{-179,165},
              {-31.5,165},{-31.5,150},{-2,150}}, color={0,0,127}));
      connect(CV521_522.port_2, TT521.port_a) annotation (Line(
          points={{10,140},{10,130}},
          color={238,46,47},
          thickness=0.5));
      connect(CV521_522.port_1, jun.port_2) annotation (Line(
          points={{10,160},{10,240}},
          color={238,46,47},
          thickness=0.5));
      connect(CV521_522.port_3, port_a2) annotation (Line(
          points={{20,150},{60,150},{60,30},{100,30}},
          color={238,46,47},
          thickness=0.5));
      connect(integerExpression.y, pID_Valve_cond.TFP_mode) annotation (Line(points=
             {{-219,170},{-212,170},{-212,170},{-202,170}}, color={255,127,0}));
      connect(FT121.port_a, val.port_2) annotation (Line(
          points={{50,-160},{50,-190}},
          color={0,127,255},
          thickness=0.5));
      connect(FT121.port_b, CV123.port_a) annotation (Line(
          points={{50,-140},{50,-120}},
          color={0,127,255},
          thickness=0.5));
      connect(cons_cold.y, TFPA.TSet) annotation (Line(points={{-179,30},{-136,30},{
              -136,-1},{-42,-1}}, color={0,0,127}));
      connect(cons_cold.y, TFPB.TSet) annotation (Line(points={{-179,30},{-136,30},{
              -136,10},{0,10},{0,-1},{18,-1}}, color={0,0,127}));
      connect(CV523.port_b, TFPA.port_a1) annotation (Line(
          points={{10,40},{10,28},{-50,28},{-50,-4},{-40,-4}},
          color={238,46,47},
          thickness=0.5));
      connect(TFPA.port_b1, TFPB.port_a1) annotation (Line(
          points={{-20,-4},{0,-4},{0,-4},{20,-4}},
          color={238,46,47},
          thickness=0.5));
      connect(TFPB.port_a2, jun4.port_2) annotation (Line(
          points={{40,-16},{50,-16},{50,-40}},
          color={0,127,255},
          thickness=0.5));
      connect(jun4.port_3, TFPA.port_a2) annotation (Line(
          points={{40,-50},{0,-50},{0,-16},{-20,-16}},
          color={0,127,255},
          thickness=0.5));
      connect(TFPB.port_b2, XV112B.port_a) annotation (Line(
          points={{20,-16},{10,-16},{10,-80}},
          color={0,127,255},
          thickness=0.5));
      connect(TFPA.port_b2, XV112A.port_a) annotation (Line(
          points={{-40,-16},{-50,-16},{-50,-80}},
          color={0,127,255},
          thickness=0.5));
      connect(jun1.port_3, XV521_522.port_3) annotation (Line(
          points={{-80,200},{60,200}},
          color={238,46,47},
          thickness=0.5));
      connect(XV521_522.port_2, TT511.port_a) annotation (Line(
          points={{70,210},{70,260},{80,260}},
          color={238,46,47},
          thickness=0.5));
      connect(XV521_522.port_1, TFPB.port_b1) annotation (Line(
          points={{70,190},{70,-4},{40,-4}},
          color={238,46,47},
          thickness=0.5));
      connect(XV522_switch.y, XV521_522.y) annotation (Line(points={{-219,230},{100,
              230},{100,200},{82,200}}, color={0,0,127}));
      annotation (Diagram(coordinateSystem(extent={{-100,-100},{100,100}})), Icon(
            coordinateSystem(extent={{-100,-100},{100,100}}), graphics={Rectangle(
              extent={{0,80},{60,20}},
              lineColor={238,46,47},
              fillColor={238,46,47},
              fillPattern=FillPattern.Solid),                           Rectangle(
              extent={{0,-20},{60,-80}},
              lineColor={28,108,200},
              fillColor={28,108,200},
              fillPattern=FillPattern.Solid),                           Rectangle(
              extent={{-60,80},{0,20}},
              lineColor={238,46,47},
              fillColor={244,125,35},
              fillPattern=FillPattern.Solid),                           Rectangle(
              extent={{-60,-20},{0,-80}},
              lineColor={28,108,200},
              fillColor={0,0,127},
              fillPattern=FillPattern.Solid)}),
        Documentation(info="<html>
<h4><span style=\"color: #000000\">HPSHC modes</span></h4>
<p>For the HPSHC, 4 possible modes :</p>
<p>0 - Off</p>
<p>1 - Cold mode</p>
<p>2 - HPSHC full</p>
<p>3 - HPSHC 1/2</p>
</html>"),
        experiment(StopTime=1, __Dymola_Algorithm="Dassl"));
    end TFP_duo_carnot;

    package Tests
      extends Modelica.Icons.ExamplesPackage;

      model TFP_basic_duo_test

      parameter
          Buildings.Fluid.Chillers.Data.ElectricReformulatedEIR.ReformEIRChiller_Trane_RTHB_1051kW_5_05COP_Valve
          per;

        Fluid.Chillers.ElectricReformulatedEIR chi(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=211/3.6,
          m2_flow_nominal=166/3.6,
          dp1_nominal=18000,
          dp2_nominal=18000,
          per=per)
          annotation (Placement(transformation(extent={{-38,0},{-18,20}})));
        Fluid.Sources.MassFlowSource_T boundary(
          redeclare package Medium = Buildings.Media.Water,
          use_m_flow_in=true,
          m_flow=190/3.6,
          use_T_in=true,
          nPorts=1)
          annotation (Placement(transformation(extent={{160,-120},{140,-100}})));
        Fluid.Sources.Boundary_pT bou(redeclare package Medium =
              Buildings.Media.Water, nPorts=1)
          annotation (Placement(transformation(extent={{-124,-124},{-104,-104}})));
        Fluid.Sources.Boundary_pT bou1(redeclare package Medium =
              Buildings.Media.Water, nPorts=1)
          annotation (Placement(transformation(extent={{160,100},{140,120}})));
        Fluid.Sources.MassFlowSource_T boundary1(
          redeclare package Medium = Buildings.Media.Water,
          use_m_flow_in=true,
          m_flow=180/3.6,
          use_T_in=true,
          nPorts=1)
          annotation (Placement(transformation(extent={{-160,100},{-140,120}})));
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource(
              "modelica://Buildings/Data/tfp.txt"),
          columns={7,8,11,12,9,13,14})
          annotation (Placement(transformation(extent={{-200,40},{-180,60}})));
        Modelica.Blocks.Sources.RealExpression realExpression(y=4 + 273.15)
          annotation (Placement(transformation(extent={{-120,-10},{-100,10}})));
        Fluid.Sensors.TemperatureTwoPort Tcondent(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=180/3.6)
          annotation (Placement(transformation(extent={{-120,100},{-100,120}})));
        Fluid.Sensors.TemperatureTwoPort Tevapsort(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=190/3.6)
          annotation (Placement(transformation(extent={{-84,-124},{-64,-104}})));
        Fluid.Sensors.TemperatureTwoPort Tcondsort(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=180/3.6)
          annotation (Placement(transformation(extent={{120,100},{100,120}})));
        Fluid.Sensors.TemperatureTwoPort Tevapent(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=190/3.6)
          annotation (Placement(transformation(extent={{120,-120},{100,-100}})));
        Modelica.Thermal.HeatTransfer.Celsius.ToKelvin toKelvin
          annotation (Placement(transformation(extent={{-190,90},{-170,110}})));
        Modelica.Thermal.HeatTransfer.Celsius.ToKelvin toKelvin1
          annotation (Placement(transformation(extent={{190,-122},{170,-102}})));
        Modelica.Blocks.Interfaces.RealOutput P
          annotation (Placement(transformation(extent={{100,158},{120,178}})));
        Modelica.Blocks.Math.Gain gain(k=1/1000)
          annotation (Placement(transformation(extent={{60,140},{80,160}})));
        Modelica.Blocks.Sources.BooleanPulse booleanPulse(period=2244600)
          annotation (Placement(transformation(extent={{-120,20},{-100,40}})));
        Fluid.Chillers.ElectricReformulatedEIR chi1(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=211/3.6,
          m2_flow_nominal=166/3.6,
          dp1_nominal=18000,
          dp2_nominal=18000,
          per=per)
          annotation (Placement(transformation(extent={{20,0},{40,20}})));
        Fluid.FixedResistances.Junction jun(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={190/3.6*2,-190/3.6,-190/3.6},
          dp_nominal={0,0,0}) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={50,-90})));
        Fluid.FixedResistances.Junction jun1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={190/3.6,190/3.6,-190/3.6*2},
          dp_nominal={0,0,0}) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-50,-90})));
        Modelica.Blocks.Sources.BooleanPulse booleanPulse1(period=2244600,
            startTime=2244600/2)
          annotation (Placement(transformation(extent={{-40,60},{-20,80}})));
        Modelica.Blocks.Math.Gain gain1(k=1/1000)
          annotation (Placement(transformation(extent={{100,20},{120,40}})));
        Modelica.Blocks.Interfaces.RealOutput P1
          annotation (Placement(transformation(extent={{140,38},{160,58}})));
        Fluid.Sensors.TemperatureTwoPort Tcondint(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=180/3.6)
          annotation (Placement(transformation(extent={{8,6},{-12,26}})));
        Fluid.Sensors.TemperatureTwoPort Tevapint1(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=190/3.6)
          annotation (Placement(transformation(extent={{10,-10},{-10,10}},
              rotation=90,
              origin={8,-40})));
        Fluid.Sensors.TemperatureTwoPort Tevapint2(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=190/3.6)
          annotation (Placement(transformation(extent={{10,-10},{-10,10}},
              rotation=90,
              origin={-50,-40})));
        Fluid.Actuators.Valves.TwoWayLinear val(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=190/3.6,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          Kv=150,
          dpValve_nominal=1000) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-20,-76})));
        Modelica.Blocks.Sources.Ramp ramp(
          height=1,
          offset=0,
          startTime=2244600/2)
          annotation (Placement(transformation(extent={{140,-60},{120,-40}})));
      equation
        connect(combiTimeTable.y[1], boundary1.m_flow_in) annotation (Line(
              points={{-179,50},{-142,50},{-142,80},{-220,80},{-220,118},{-162,
                118}},                                          color={0,0,127}));
        connect(combiTimeTable.y[3], boundary.m_flow_in) annotation (Line(
              points={{-179,50},{-92,50},{-92,-140},{200,-140},{200,-102},{162,
                -102}},color={0,0,127}));
        connect(realExpression.y, chi.TSet) annotation (Line(points={{-99,0},{
                -62,0},{-62,7},{-40,7}}, color={0,0,127}));
        connect(Tevapent.port_a, boundary.ports[1])
          annotation (Line(points={{120,-110},{140,-110}},
                                                       color={0,127,255}));
        connect(bou.ports[1], Tevapsort.port_a)
          annotation (Line(points={{-104,-114},{-84,-114}},
                                                         color={0,127,255}));
        connect(Tcondent.port_a, boundary1.ports[1])
          annotation (Line(points={{-120,110},{-140,110}},
                                                       color={0,127,255}));
        connect(combiTimeTable.y[2], toKelvin.Celsius) annotation (Line(points={{-179,50},
                {-142,50},{-142,80},{-220,80},{-220,100},{-192,100}},
                                                           color={0,0,127}));
        connect(toKelvin.Kelvin, boundary1.T_in) annotation (Line(points={{-169,
                100},{-166,100},{-166,114},{-162,114}},
                                                    color={0,0,127}));
        connect(combiTimeTable.y[4], toKelvin1.Celsius) annotation (Line(points={{-179,50},
                {-142,50},{-142,-140},{200,-140},{200,-112},{192,-112}},
              color={0,0,127}));
        connect(toKelvin1.Kelvin, boundary.T_in) annotation (Line(points={{169,
                -112},{166,-112},{166,-106},{162,-106}},
                                                     color={0,0,127}));
        connect(chi.P, gain.u) annotation (Line(points={{-17,19},{-12,19},{-12,
                148},{24,148},{24,150},{58,150}},
              color={0,0,127}));
        connect(gain.y, P)
          annotation (Line(points={{81,150},{96,150},{96,168},{110,168}},
                                                      color={0,0,127}));
        connect(booleanPulse.y, chi.on) annotation (Line(points={{-99,30},{-62,
                30},{-62,13},{-40,13}}, color={255,0,255}));
        connect(Tcondsort.port_a, bou1.ports[1])
          annotation (Line(points={{120,110},{140,110}}, color={0,127,255}));
        connect(chi.port_a1, Tcondent.port_b) annotation (Line(points={{-38,16},
                {-50,16},{-50,110},{-100,110}}, color={0,127,255}));
        connect(chi1.port_b1, Tcondsort.port_b) annotation (Line(points={{40,16},
                {70,16},{70,110},{100,110}}, color={0,127,255}));
        connect(Tevapent.port_b, jun.port_1) annotation (Line(points={{100,-110},
                {80,-110},{80,-90},{60,-90}}, color={0,127,255}));
        connect(jun.port_3, chi1.port_a2) annotation (Line(points={{50,-80},{50,
                4},{40,4}}, color={0,127,255}));
        connect(jun.port_2, chi.port_a2) annotation (Line(points={{40,-90},{0,
                -90},{0,4},{-18,4}}, color={0,127,255}));
        connect(Tevapsort.port_b, jun1.port_2) annotation (Line(points={{-64,
                -114},{-64,-102},{-64,-90},{-60,-90}}, color={0,127,255}));
        connect(chi1.TSet, realExpression.y) annotation (Line(points={{18,7},{4,
                7},{4,-20},{-80,-20},{-80,0},{-99,0}}, color={0,0,127}));
        connect(booleanPulse1.y, chi1.on) annotation (Line(points={{-19,70},{0,
                70},{0,13},{18,13}}, color={255,0,255}));
        connect(gain1.y, P1) annotation (Line(points={{121,30},{136,30},{136,48},
                {150,48}}, color={0,0,127}));
        connect(chi1.P, gain1.u) annotation (Line(points={{41,19},{60,19},{60,
                30},{98,30}}, color={0,0,127}));
        connect(chi.port_b1, Tcondint.port_b)
          annotation (Line(points={{-18,16},{-12,16}}, color={0,127,255}));
        connect(Tcondint.port_a, chi1.port_a1)
          annotation (Line(points={{8,16},{20,16}}, color={0,127,255}));
        connect(Tevapint1.port_a, chi1.port_b2)
          annotation (Line(points={{8,-30},{8,4},{20,4}}, color={0,127,255}));
        connect(chi.port_b2, Tevapint2.port_a) annotation (Line(points={{-38,4},
                {-50,4},{-50,-30}}, color={0,127,255}));
        connect(Tevapint2.port_b, jun1.port_3)
          annotation (Line(points={{-50,-50},{-50,-80}}, color={0,127,255}));
        connect(jun1.port_1, val.port_b) annotation (Line(points={{-40,-90},{
                -20,-90},{-20,-86}}, color={0,127,255}));
        connect(val.port_a, Tevapint1.port_b) annotation (Line(points={{-20,-66},
                {-20,-60},{8,-60},{8,-50}}, color={0,127,255}));
        connect(ramp.y, val.y) annotation (Line(points={{119,-50},{56,-50},{56,
                -76},{-8,-76}}, color={0,0,127}));
        annotation (
          Icon(coordinateSystem(preserveAspectRatio=false)),
          Diagram(coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StartTime=500000,
            StopTime=2244600,
            Interval=600,
            __Dymola_Algorithm="Dassl"));
      end TFP_basic_duo_test;

      model TFP_HE

      parameter
          Buildings.Fluid.Chillers.Data.ElectricReformulatedEIR.ReformEIRChiller_Trane_RTHB_1051kW_5_05COP_Valve
          per;

        Fluid.Chillers.ElectricReformulatedEIR chi(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=211/3.6,
          m2_flow_nominal=166/3.6,
          dp1_nominal=18000,
          dp2_nominal=18000,
          per=per)
          annotation (Placement(transformation(extent={{-38,0},{-18,20}})));
        Fluid.Sources.MassFlowSource_T boundary(
          redeclare package Medium = Buildings.Media.Water,
          use_m_flow_in=true,
          m_flow=190/3.6,
          use_T_in=true,
          nPorts=1)
          annotation (Placement(transformation(extent={{216,-120},{196,-100}})));
        Fluid.Sources.Boundary_pT bou(redeclare package Medium =
              Buildings.Media.Water, nPorts=1)
          annotation (Placement(transformation(extent={{-124,-124},{-104,-104}})));
        Fluid.Sources.Boundary_pT bou1(redeclare package Medium =
              Buildings.Media.Water, nPorts=1)
          annotation (Placement(transformation(extent={{160,100},{140,120}})));
        Fluid.Sources.MassFlowSource_T boundary1(
          redeclare package Medium = Buildings.Media.Water,
          use_m_flow_in=true,
          m_flow=180/3.6,
          use_T_in=true,
          nPorts=1)
          annotation (Placement(transformation(extent={{-160,100},{-140,120}})));
        Modelica.Blocks.Sources.RealExpression realExpression(y=4 + 273.15)
          annotation (Placement(transformation(extent={{-120,-10},{-100,10}})));
        Fluid.Sensors.TemperatureTwoPort Tcondent(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=180/3.6)
          annotation (Placement(transformation(extent={{-120,100},{-100,120}})));
        Fluid.Sensors.TemperatureTwoPort Tevapsort(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=190/3.6)
          annotation (Placement(transformation(extent={{-84,-124},{-64,-104}})));
        Fluid.Sensors.TemperatureTwoPort Tcondsort(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=180/3.6)
          annotation (Placement(transformation(extent={{120,100},{100,120}})));
        Fluid.Sensors.TemperatureTwoPort Tretour(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=190/3.6) annotation (
            Placement(transformation(extent={{176,-120},{156,-100}})));
        Modelica.Blocks.Interfaces.RealOutput P
          annotation (Placement(transformation(extent={{100,140},{120,160}})));
        Modelica.Blocks.Math.Gain gain(k=1/1000)
          annotation (Placement(transformation(extent={{60,140},{80,160}})));
        Modelica.Blocks.Sources.BooleanExpression booleanExpression(y=true)
          annotation (Placement(transformation(extent={{-120,20},{-100,40}})));
        RJF.Cold_exchanger cold_exchanger(redeclare package Medium1 =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water, redeclare
            package Medium2 =
              Buildings.Media.Water) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={130,-50})));
        Fluid.Sources.MassFlowSource_T boundary2(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          use_m_flow_in=true,
          m_flow=190/3.6,
          use_T_in=true,
          nPorts=1)
          annotation (Placement(transformation(extent={{196,0},{176,20}})));
        Fluid.Sources.Boundary_pT bou2(redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water, nPorts=1)
          annotation (Placement(transformation(extent={{236,-82},{216,-62}})));
        Fluid.Sensors.TemperatureTwoPort Tevapent(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=190/3.6)
          annotation (Placement(transformation(extent={{20,-20},{0,0}})));
        Fluid.Actuators.Valves.TwoWayLinear CV122(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=190/3.6,
          dpValve_nominal=1000) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={100,-10})));
        Fluid.FixedResistances.Junction jun(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={190/3.6*2,-190/3.6,-190/3.6},
          dp_nominal={0,0,0}) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={124,-110})));
        Fluid.FixedResistances.Junction jun1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={190/3.6,190/3.6,-190/3.6*2},
          dp_nominal={0,0,0}) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={60,-10})));
        Fluid.Actuators.Valves.TwoWayLinear CV121(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=190/3.6,
          dpValve_nominal=1000) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={90,-110})));
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource(
              "modelica://Buildings/Data/tfp_he.txt"),
          columns={2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19})
          annotation (Placement(transformation(extent={{-240,100},{-220,120}})));
        Controls_a.TFP.PID_Valve_evap valve_evap
          annotation (Placement(transformation(extent={{0,-80},{20,-60}})));
      equation
        connect(realExpression.y, chi.TSet) annotation (Line(points={{-99,0},{
                -62,0},{-62,7},{-40,7}}, color={0,0,127}));
        connect(Tretour.port_a, boundary.ports[1])
          annotation (Line(points={{176,-110},{196,-110}}, color={0,127,255}));
        connect(bou.ports[1], Tevapsort.port_a)
          annotation (Line(points={{-104,-114},{-84,-114}},
                                                         color={0,127,255}));
        connect(Tcondent.port_a, boundary1.ports[1])
          annotation (Line(points={{-120,110},{-140,110}},
                                                       color={0,127,255}));
        connect(chi.P, gain.u) annotation (Line(points={{-17,19},{-12,19},{-12,150},{58,
                150}},
              color={0,0,127}));
        connect(gain.y, P)
          annotation (Line(points={{81,150},{110,150}},
                                                      color={0,0,127}));
        connect(Tcondsort.port_a, bou1.ports[1])
          annotation (Line(points={{120,110},{140,110}}, color={0,127,255}));
        connect(chi.port_a1, Tcondent.port_b) annotation (Line(points={{-38,16},
                {-50,16},{-50,110},{-100,110}}, color={0,127,255}));
        connect(chi.port_b1, Tcondsort.port_b) annotation (Line(points={{-18,16},{40,16},
                {40,110},{100,110}}, color={0,127,255}));
        connect(booleanExpression.y, chi.on) annotation (Line(points={{-99,30},{-70,30},
                {-70,13},{-40,13}}, color={255,0,255}));
        connect(Tevapsort.port_b, chi.port_b2) annotation (Line(points={{-64,-114},{-50,
                -114},{-50,4},{-38,4}}, color={0,127,255}));
        connect(boundary2.ports[1], cold_exchanger.port_a1) annotation (Line(points={{176,10},
                {136,10},{136,-40}},                         color={0,127,255}));
        connect(cold_exchanger.port_b1, bou2.ports[1]) annotation (Line(points={{136,-60},
                {136,-80},{176,-80},{176,-72},{216,-72}},color={0,127,255}));
        connect(chi.port_a2, Tevapent.port_b) annotation (Line(points={{-18,4},
                {-12,4},{-12,-10},{0,-10}}, color={0,127,255}));
        connect(cold_exchanger.port_b2, CV122.port_a) annotation (Line(points={
                {124,-40},{124,-10},{110,-10}}, color={0,127,255}));
        connect(jun.port_1, Tretour.port_b)
          annotation (Line(points={{134,-110},{156,-110}}, color={0,127,255}));
        connect(cold_exchanger.port_a2, jun.port_3)
          annotation (Line(points={{124,-60},{124,-100}}, color={0,127,255}));
        connect(jun1.port_1, CV122.port_b)
          annotation (Line(points={{70,-10},{90,-10}}, color={0,127,255}));
        connect(jun1.port_2, Tevapent.port_a)
          annotation (Line(points={{50,-10},{20,-10}}, color={0,127,255}));
        connect(jun.port_2, CV121.port_a)
          annotation (Line(points={{114,-110},{100,-110}}, color={0,127,255}));
        connect(CV121.port_b, jun1.port_3) annotation (Line(points={{80,-110},{
                60,-110},{60,-20}}, color={0,127,255}));
        connect(combiTimeTable.y[14], boundary1.m_flow_in) annotation (Line(
              points={{-219,110},{-180,110},{-180,118},{-162,118}}, color={0,0,
                127}));
        connect(combiTimeTable.y[5], boundary1.T_in) annotation (Line(points={{
                -219,110},{-180,110},{-180,114},{-162,114}}, color={0,0,127}));
        connect(combiTimeTable.y[16], boundary.m_flow_in) annotation (Line(
              points={{-219,110},{-200,110},{-200,-140},{240,-140},{240,-102},{
                218,-102}}, color={0,0,127}));
        connect(combiTimeTable.y[4], boundary.T_in) annotation (Line(points={{-219,
                110},{-200,110},{-200,-140},{240,-140},{240,-106},{218,-106}},
                        color={0,0,127}));
        connect(combiTimeTable.y[18], boundary2.m_flow_in) annotation (Line(
              points={{-219,110},{-200,110},{-200,-140},{280,-140},{280,18},{
                198,18}}, color={0,0,127}));
        connect(combiTimeTable.y[11], boundary2.T_in) annotation (Line(points={{-219,
                110},{-200,110},{-200,-140},{280,-140},{280,14},{198,14}},
              color={0,0,127}));
        connect(valve_evap.CV122, CV122.y) annotation (Line(points={{21,-65},{
                100,-65},{100,-22}}, color={0,0,127}));
        connect(valve_evap.CV121, CV121.y) annotation (Line(points={{21,-75},{
                90,-75},{90,-98}}, color={0,0,127}));
        connect(combiTimeTable.y[11], valve_evap.PEM_TT200) annotation (Line(
              points={{-219,110},{-200,110},{-200,-62},{-2,-62}}, color={0,0,
                127}));
        connect(combiTimeTable.y[4], valve_evap.DEG_TT121) annotation (Line(
              points={{-219,110},{-200,110},{-200,-66},{-2,-66},{-2,-66}},
              color={0,0,127}));
        connect(Tevapent.T, valve_evap.TFP_TT121) annotation (Line(points={{10,
                1},{10,10},{40,10},{40,-100},{-18,-100},{-18,-74},{-2,-74}},
              color={0,0,127}));
        connect(valve_evap.CV122, cold_exchanger.TFP_CV122) annotation (Line(
              points={{21,-65},{114,-65},{114,0},{134,0},{134,-38}}, color={0,0,
                127}));
        connect(combiTimeTable.y[11], cold_exchanger.PEM_TT200) annotation (
            Line(points={{-219,110},{-200,110},{-200,-28},{126,-28},{126,-38}},
              color={0,0,127}));
        connect(Tcondsort.T, valve_evap.TFP_TT511) annotation (Line(points={{
                110,121},{110,130},{-130,130},{-130,-78},{-2,-78}}, color={0,0,
                127}));
        annotation (
          Icon(coordinateSystem(preserveAspectRatio=false)),
          Diagram(coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=2244600,
            Interval=600,
            __Dymola_Algorithm="Dassl"));
      end TFP_HE;

      model TFP_cold_exchange

      parameter
          Buildings.Fluid.Chillers.Data.ElectricReformulatedEIR.ReformEIRChiller_Trane_RTHB_1051kW_5_05COP_Valve
          per;

        Fluid.Chillers.ElectricReformulatedEIR chi(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=211/3.6,
          m2_flow_nominal=166/3.6,
          dp1_nominal=18000,
          dp2_nominal=18000,
          per=per)
          annotation (Placement(transformation(extent={{-38,0},{-18,20}})));
        Fluid.Sources.MassFlowSource_T boundary(
          redeclare package Medium = Buildings.Media.Water,
          use_m_flow_in=true,
          m_flow=190/3.6,
          use_T_in=true,
          nPorts=1)
          annotation (Placement(transformation(extent={{216,-120},{196,-100}})));
        Fluid.Sources.Boundary_pT bou(redeclare package Medium =
              Buildings.Media.Water, nPorts=1)
          annotation (Placement(transformation(extent={{-124,-124},{-104,-104}})));
        Fluid.Sources.Boundary_pT bou1(redeclare package Medium =
              Buildings.Media.Water, nPorts=1)
          annotation (Placement(transformation(extent={{160,100},{140,120}})));
        Fluid.Sources.MassFlowSource_T boundary1(
          redeclare package Medium = Buildings.Media.Water,
          use_m_flow_in=true,
          m_flow=180/3.6,
          use_T_in=true,
          nPorts=1)
          annotation (Placement(transformation(extent={{-160,100},{-140,120}})));
        Modelica.Blocks.Sources.RealExpression realExpression(y=4 + 273.15)
          annotation (Placement(transformation(extent={{-120,-10},{-100,10}})));
        Fluid.Sensors.TemperatureTwoPort Tcondent(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=180/3.6)
          annotation (Placement(transformation(extent={{-120,100},{-100,120}})));
        Fluid.Sensors.TemperatureTwoPort Tevapsort(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=190/3.6)
          annotation (Placement(transformation(extent={{-84,-124},{-64,-104}})));
        Fluid.Sensors.TemperatureTwoPort Tcondsort(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=180/3.6)
          annotation (Placement(transformation(extent={{120,100},{100,120}})));
        Fluid.Sensors.TemperatureTwoPort Tretour(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=190/3.6) annotation (
            Placement(transformation(extent={{176,-120},{156,-100}})));
        Modelica.Blocks.Interfaces.RealOutput P
          annotation (Placement(transformation(extent={{100,140},{120,160}})));
        Modelica.Blocks.Math.Gain gain(k=1/1000)
          annotation (Placement(transformation(extent={{60,140},{80,160}})));
        Modelica.Blocks.Sources.BooleanExpression booleanExpression(y=true)
          annotation (Placement(transformation(extent={{-120,20},{-100,40}})));
        RJF.Cold_exchanger cold_exchanger(redeclare package Medium1 =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water, redeclare
            package Medium2 =
              Buildings.Media.Water) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={130,-50})));
        Fluid.Sources.MassFlowSource_T boundary2(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          use_m_flow_in=true,
          m_flow=190/3.6,
          use_T_in=true,
          nPorts=1)
          annotation (Placement(transformation(extent={{196,0},{176,20}})));
        Fluid.Sources.Boundary_pT bou2(redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water, nPorts=1)
          annotation (Placement(transformation(extent={{236,-82},{216,-62}})));
        Fluid.Sensors.TemperatureTwoPort Tevapent(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=190/3.6)
          annotation (Placement(transformation(extent={{20,-20},{0,0}})));
        Fluid.Actuators.Valves.TwoWayLinear CV122(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=190/3.6,
          dpValve_nominal=1000) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={100,-10})));
        Fluid.FixedResistances.Junction jun(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={190/3.6*2,-190/3.6,-190/3.6},
          dp_nominal={0,0,0}) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={124,-110})));
        Fluid.FixedResistances.Junction jun1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={190/3.6,190/3.6,-190/3.6*2},
          dp_nominal={0,0,0}) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={60,-10})));
        Fluid.Actuators.Valves.TwoWayLinear CV121(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=190/3.6,
          dpValve_nominal=1000) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={90,-110})));
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource(
              "modelica://Buildings/Data/tfp_he.txt"),
          columns={2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19})
          annotation (Placement(transformation(extent={{-240,100},{-220,120}})));
        Controls_a.TFP.PID_Valve_evap valve_evap
          annotation (Placement(transformation(extent={{0,-80},{20,-60}})));
      equation
        connect(realExpression.y, chi.TSet) annotation (Line(points={{-99,0},{
                -62,0},{-62,7},{-40,7}}, color={0,0,127}));
        connect(Tretour.port_a, boundary.ports[1])
          annotation (Line(points={{176,-110},{196,-110}}, color={0,127,255}));
        connect(bou.ports[1], Tevapsort.port_a)
          annotation (Line(points={{-104,-114},{-84,-114}},
                                                         color={0,127,255}));
        connect(Tcondent.port_a, boundary1.ports[1])
          annotation (Line(points={{-120,110},{-140,110}},
                                                       color={0,127,255}));
        connect(chi.P, gain.u) annotation (Line(points={{-17,19},{-12,19},{-12,150},{58,
                150}},
              color={0,0,127}));
        connect(gain.y, P)
          annotation (Line(points={{81,150},{110,150}},
                                                      color={0,0,127}));
        connect(Tcondsort.port_a, bou1.ports[1])
          annotation (Line(points={{120,110},{140,110}}, color={0,127,255}));
        connect(chi.port_a1, Tcondent.port_b) annotation (Line(points={{-38,16},
                {-50,16},{-50,110},{-100,110}}, color={0,127,255}));
        connect(chi.port_b1, Tcondsort.port_b) annotation (Line(points={{-18,16},{40,16},
                {40,110},{100,110}}, color={0,127,255}));
        connect(booleanExpression.y, chi.on) annotation (Line(points={{-99,30},{-70,30},
                {-70,13},{-40,13}}, color={255,0,255}));
        connect(Tevapsort.port_b, chi.port_b2) annotation (Line(points={{-64,-114},{-50,
                -114},{-50,4},{-38,4}}, color={0,127,255}));
        connect(boundary2.ports[1], cold_exchanger.port_a1) annotation (Line(points={{176,10},
                {136,10},{136,-40}},                         color={0,127,255}));
        connect(cold_exchanger.port_b1, bou2.ports[1]) annotation (Line(points={{136,-60},
                {136,-80},{176,-80},{176,-72},{216,-72}},color={0,127,255}));
        connect(chi.port_a2, Tevapent.port_b) annotation (Line(points={{-18,4},
                {-12,4},{-12,-10},{0,-10}}, color={0,127,255}));
        connect(cold_exchanger.port_b2, CV122.port_a) annotation (Line(points={
                {124,-40},{124,-10},{110,-10}}, color={0,127,255}));
        connect(jun.port_1, Tretour.port_b)
          annotation (Line(points={{134,-110},{156,-110}}, color={0,127,255}));
        connect(cold_exchanger.port_a2, jun.port_3)
          annotation (Line(points={{124,-60},{124,-100}}, color={0,127,255}));
        connect(jun1.port_1, CV122.port_b)
          annotation (Line(points={{70,-10},{90,-10}}, color={0,127,255}));
        connect(jun1.port_2, Tevapent.port_a)
          annotation (Line(points={{50,-10},{20,-10}}, color={0,127,255}));
        connect(jun.port_2, CV121.port_a)
          annotation (Line(points={{114,-110},{100,-110}}, color={0,127,255}));
        connect(CV121.port_b, jun1.port_3) annotation (Line(points={{80,-110},{
                60,-110},{60,-20}}, color={0,127,255}));
        connect(combiTimeTable.y[14], boundary1.m_flow_in) annotation (Line(
              points={{-219,110},{-180,110},{-180,118},{-162,118}}, color={0,0,
                127}));
        connect(combiTimeTable.y[5], boundary1.T_in) annotation (Line(points={{
                -219,110},{-180,110},{-180,114},{-162,114}}, color={0,0,127}));
        connect(combiTimeTable.y[16], boundary.m_flow_in) annotation (Line(
              points={{-219,110},{-200,110},{-200,-160},{240,-160},{240,-102},{
                218,-102}}, color={0,0,127}));
        connect(combiTimeTable.y[4], boundary.T_in) annotation (Line(points={{
                -219,110},{-200,110},{-200,-160},{240,-160},{240,-106},{218,
                -106}}, color={0,0,127}));
        connect(combiTimeTable.y[18], boundary2.m_flow_in) annotation (Line(
              points={{-219,110},{-200,110},{-200,-160},{280,-160},{280,18},{
                198,18}}, color={0,0,127}));
        connect(combiTimeTable.y[11], boundary2.T_in) annotation (Line(points={
                {-219,110},{-200,110},{-200,-160},{280,-160},{280,14},{198,14}},
              color={0,0,127}));
        connect(valve_evap.CV122, CV122.y) annotation (Line(points={{21,-65},{
                100,-65},{100,-22}}, color={0,0,127}));
        connect(valve_evap.CV121, CV121.y) annotation (Line(points={{21,-75},{
                90,-75},{90,-98}}, color={0,0,127}));
        connect(combiTimeTable.y[11], valve_evap.PEM_TT200) annotation (Line(
              points={{-219,110},{-200,110},{-200,-62},{-2,-62}}, color={0,0,
                127}));
        connect(combiTimeTable.y[4], valve_evap.DEG_TT121) annotation (Line(
              points={{-219,110},{-200,110},{-200,-66},{-2,-66},{-2,-66}},
              color={0,0,127}));
        connect(Tevapent.T, valve_evap.TFP_TT121) annotation (Line(points={{10,
                1},{10,10},{40,10},{40,-100},{-18,-100},{-18,-74},{-2,-74}},
              color={0,0,127}));
        connect(valve_evap.CV122, cold_exchanger.TFP_CV122) annotation (Line(
              points={{21,-65},{114,-65},{114,0},{134,0},{134,-38}}, color={0,0,
                127}));
        connect(combiTimeTable.y[11], cold_exchanger.PEM_TT200) annotation (
            Line(points={{-219,110},{-200,110},{-200,-28},{126,-28},{126,-38}},
              color={0,0,127}));
        connect(Tcondsort.T, valve_evap.TFP_TT511) annotation (Line(points={{
                110,121},{110,130},{-130,130},{-130,-78},{-2,-78}}, color={0,0,
                127}));
        annotation (
          Icon(coordinateSystem(preserveAspectRatio=false)),
          Diagram(coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=2244600,
            Interval=600,
            __Dymola_Algorithm="Dassl"));
      end TFP_cold_exchange;

      model TFP_complet
        RJC.Heat_exchanger heat_exchanger
          annotation (Placement(transformation(extent={{40,40},{60,60}})));
        TFP_duo tFP_duo
          annotation (Placement(transformation(extent={{-20,20},{0,40}})));
        RJF.Cold_exchanger cold_exchanger
          annotation (Placement(transformation(extent={{40,-20},{60,0}})));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end TFP_complet;

      model TFP_simple

      parameter
          Buildings.Fluid.Chillers.Data.ElectricReformulatedEIR.ReformEIRChiller_Trane_RTHB_1051kW_5_05COP_Valve
          per;
          Real temperatures[12](final unit="K", displayUnit = "degC");

        Fluid.Chillers.ElectricReformulatedEIR chi(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=211/3.6,
          m2_flow_nominal=166/3.6,
          dp1_nominal=18000,
          dp2_nominal=18000,
          per=per)
          annotation (Placement(transformation(extent={{-38,0},{-18,20}})));
        Fluid.Sources.MassFlowSource_T boundary(
          redeclare package Medium = Buildings.Media.Water,
          use_m_flow_in=true,
          m_flow=190/3.6,
          use_T_in=true,
          nPorts=1)
          annotation (Placement(transformation(extent={{216,-120},{196,-100}})));
        Fluid.Sources.Boundary_pT bou(redeclare package Medium =
              Buildings.Media.Water, nPorts=1)
          annotation (Placement(transformation(extent={{-124,-124},{-104,-104}})));
        Fluid.Sources.Boundary_pT bou1(redeclare package Medium =
              Buildings.Media.Water, nPorts=1)
          annotation (Placement(transformation(extent={{160,100},{140,120}})));
        Fluid.Sources.MassFlowSource_T boundary1(
          redeclare package Medium = Buildings.Media.Water,
          use_m_flow_in=true,
          m_flow=180/3.6,
          use_T_in=true,
          nPorts=1)
          annotation (Placement(transformation(extent={{-160,100},{-140,120}})));
        Modelica.Blocks.Sources.RealExpression realExpression(y=4 + 273.15)
          annotation (Placement(transformation(extent={{-120,-10},{-100,10}})));
        Fluid.Sensors.TemperatureTwoPort DEC_TT521(redeclare package Medium =
              Buildings.Media.Water,
          m_flow_nominal=216/3.6,
          T_start=323.15)                                    annotation (
            Placement(transformation(extent={{-120,100},{-100,120}})));
        Fluid.Sensors.TemperatureTwoPort Tevapsort(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=350/3.6)
          annotation (Placement(transformation(extent={{-84,-124},{-64,-104}})));
        Fluid.Sensors.TemperatureTwoPort TT511(redeclare package Medium =
              Buildings.Media.Water,
          m_flow_nominal=216/3.6,
          T_start=333.15)
          annotation (Placement(transformation(extent={{120,100},{100,120}})));
        Fluid.Sensors.TemperatureTwoPort Tretour(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=190/3.6) annotation (
            Placement(transformation(extent={{176,-120},{156,-100}})));
        Modelica.Blocks.Interfaces.RealOutput P
          annotation (Placement(transformation(extent={{90,140},{110,160}})));
        Modelica.Blocks.Math.Gain gain(k=1/1000)
          annotation (Placement(transformation(extent={{60,140},{80,160}})));
        Modelica.Blocks.Sources.BooleanExpression booleanExpression(y=true)
          annotation (Placement(transformation(extent={{-120,20},{-100,40}})));
        RJF.Cold_exchanger cold_exchanger(redeclare package Medium1 =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water, redeclare
            package Medium2 =
              Buildings.Media.Water) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={130,-50})));
        Fluid.Sources.MassFlowSource_T boundary2(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          use_m_flow_in=true,
          m_flow=190/3.6,
          use_T_in=true,
          nPorts=1)
          annotation (Placement(transformation(extent={{240,40},{220,60}})));
        Fluid.Sources.Boundary_pT bou2(redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          p=100000,                                                 nPorts=1)
          annotation (Placement(transformation(extent={{240,-80},{220,-60}})));
        Fluid.Sensors.TemperatureTwoPort Tevapent(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=350/3.6)
          annotation (Placement(transformation(extent={{20,-20},{0,0}})));
        Fluid.Actuators.Valves.TwoWayLinear CV122(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=350/3.6,
          CvData=Buildings.Fluid.Types.CvTypes.Cv,
          Cv=1700,
          dpValve_nominal=1000) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={100,-10})));
        Fluid.FixedResistances.Junction jun(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={350/3.6,-350/3.6,-350/3.6},
          dp_nominal={0,0,0}) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={124,-110})));
        Fluid.FixedResistances.Junction jun1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={350/3.6,-350/3.6,350/3.6},
          dp_nominal={0,0,0}) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={60,-10})));
        Fluid.Actuators.Valves.TwoWayLinear CV121(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=350/3.6,
          CvData=Buildings.Fluid.Types.CvTypes.Kv,
          Kv=1700,
          dpValve_nominal=1000) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={90,-110})));
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource(
              "modelica://Buildings/Data/tfp_he.txt"),
          columns={2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19})
          annotation (Placement(transformation(extent={{-240,100},{-220,120}})));
        Controls_a.TFP.PID_Valve_evap valve_evap
          annotation (Placement(transformation(extent={{0,-80},{20,-60}})));
        RJC.Heat_exchanger heat_exchanger(redeclare package Medium1 =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water, redeclare
            package Medium2 =
              Buildings.Media.Water)
          annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={30,70})));
        Fluid.FixedResistances.Junction jun2(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal={190/3.6,-190/3.6,-190/3.6},
          dp_nominal={0,0,0}) annotation (Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=90,
              origin={190,30})));
        Fluid.FixedResistances.Junction jun6(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={216/3.6,-216/3.6,-216/3.6},
          dp_nominal={0,0,0}) annotation (Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={-70,110})));
        Fluid.FixedResistances.Junction jun7(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={216/3.6,-216/3.6,216/3.6},
          dp_nominal={0,0,0}) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=90,
              origin={-70,50})));
        Fluid.Actuators.Valves.TwoWayLinear CV521(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=216/3.6,
          CvData=Buildings.Fluid.Types.CvTypes.Kv,
          Kv=1700,
          dpValve_nominal=1000) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={-70,80})));
        Controls_a.TFP.PID_Valve_cond pID_Valve_cond
          annotation (Placement(transformation(extent={{-46,160},{-26,180}})));
        Fluid.Actuators.Valves.TwoWayLinear CV522(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=216/3.6,
          CvData=Buildings.Fluid.Types.CvTypes.Kv,
          Kv=1700,
          dpValve_nominal=1000) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={-30,50})));
        Modelica.Blocks.Sources.IntegerExpression integerExpression(y=2)
          annotation (Placement(transformation(extent={{-200,160},{-180,180}})));
        Modelica.Blocks.Sources.RealExpression realExpression1
          annotation (Placement(transformation(extent={{-200,200},{-180,220}})));
        Fluid.Sensors.TemperatureTwoPort TT201(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=190/3.6)
          annotation (Placement(transformation(extent={{190,-80},{210,-60}})));
        Fluid.Sensors.TemperatureTwoPort TT521(redeclare package Medium =
              Buildings.Media.Water,
          m_flow_nominal=216/3.6,
          T_start=323.15)
          annotation (Placement(transformation(extent={{-60,20},{-40,40}})));
        Fluid.FixedResistances.Junction jun3(
          redeclare package Medium = Media.Sea_Water,
          m_flow_nominal={190/3.6,-190/3.6,-190/3.6},
          dp_nominal={0,0,0}) annotation (Placement(transformation(
              extent={{-10,10},{10,-10}},
              rotation=0,
              origin={160,-70})));
      equation
            for j in 1:12 loop
            temperatures[j]=combiTimeTable.y[j];
          end for;
        connect(realExpression.y, chi.TSet) annotation (Line(points={{-99,0},{
                -62,0},{-62,7},{-40,7}}, color={0,0,127}));
        connect(Tretour.port_a, boundary.ports[1])
          annotation (Line(points={{176,-110},{196,-110}}, color={0,127,255}));
        connect(bou.ports[1], Tevapsort.port_a)
          annotation (Line(points={{-104,-114},{-84,-114}},
                                                         color={0,127,255}));
        connect(DEC_TT521.port_a, boundary1.ports[1])
          annotation (Line(points={{-120,110},{-140,110}}, color={0,127,255}));
        connect(chi.P, gain.u) annotation (Line(points={{-17,19},{-12,19},{-12,150},{58,
                150}},
              color={0,0,127}));
        connect(gain.y, P)
          annotation (Line(points={{81,150},{100,150}},
                                                      color={0,0,127}));
        connect(TT511.port_a, bou1.ports[1])
          annotation (Line(points={{120,110},{140,110}}, color={0,127,255}));
        connect(booleanExpression.y, chi.on) annotation (Line(points={{-99,30},{-70,30},
                {-70,13},{-40,13}}, color={255,0,255}));
        connect(Tevapsort.port_b, chi.port_b2) annotation (Line(points={{-64,-114},{-50,
                -114},{-50,4},{-38,4}}, color={0,127,255}));
        connect(chi.port_a2, Tevapent.port_b) annotation (Line(points={{-18,4},
                {-12,4},{-12,-10},{0,-10}}, color={0,127,255}));
        connect(cold_exchanger.port_b2, CV122.port_a) annotation (Line(points={
                {124,-40},{124,-10},{110,-10}}, color={0,127,255}));
        connect(jun.port_1, Tretour.port_b)
          annotation (Line(points={{134,-110},{156,-110}}, color={0,127,255}));
        connect(cold_exchanger.port_a2, jun.port_3)
          annotation (Line(points={{124,-60},{124,-100}}, color={0,127,255}));
        connect(jun1.port_1, CV122.port_b)
          annotation (Line(points={{70,-10},{90,-10}}, color={0,127,255}));
        connect(jun1.port_2, Tevapent.port_a)
          annotation (Line(points={{50,-10},{20,-10}}, color={0,127,255}));
        connect(jun.port_2, CV121.port_a)
          annotation (Line(points={{114,-110},{100,-110}}, color={0,127,255}));
        connect(CV121.port_b, jun1.port_3) annotation (Line(points={{80,-110},{
                60,-110},{60,-20}}, color={0,127,255}));
        connect(combiTimeTable.y[14], boundary1.m_flow_in) annotation (Line(
              points={{-219,110},{-180,110},{-180,118},{-162,118}}, color={0,0,
                127}));
        connect(combiTimeTable.y[16], boundary.m_flow_in) annotation (Line(
              points={{-219,110},{-200,110},{-200,-160},{240,-160},{240,-102},{
                218,-102}}, color={0,0,127}));
        connect(combiTimeTable.y[4], boundary.T_in) annotation (Line(points={{
                -219,110},{-200,110},{-200,-160},{240,-160},{240,-106},{218,
                -106}}, color={0,0,127}));
        connect(combiTimeTable.y[18], boundary2.m_flow_in) annotation (Line(
              points={{-219,110},{-200,110},{-200,-160},{280,-160},{280,58},{242,58}},
                          color={0,0,127}));
        connect(combiTimeTable.y[11], boundary2.T_in) annotation (Line(points={{-219,110},
                {-200,110},{-200,-160},{280,-160},{280,54},{242,54}},
              color={0,0,127}));
        connect(valve_evap.CV122, CV122.y)
          annotation (Line(points={{21,-65},{100,-65},{100,-22}}, color={0,0,127}));
        connect(valve_evap.CV121, CV121.y)
          annotation (Line(points={{21,-75},{90,-75},{90,-98}}, color={0,0,127}));
        connect(combiTimeTable.y[11], valve_evap.PEM_TT200) annotation (Line(
              points={{-219,110},{-200,110},{-200,-62},{-2,-62}}, color={0,0,
                127}));
        connect(combiTimeTable.y[4], valve_evap.DEG_TT121) annotation (Line(
              points={{-219,110},{-200,110},{-200,-66},{-2,-66},{-2,-66}},
              color={0,0,127}));
        connect(Tevapent.T, valve_evap.TFP_TT121) annotation (Line(points={{10,
                1},{10,10},{40,10},{40,-100},{-18,-100},{-18,-74},{-2,-74}},
              color={0,0,127}));
        connect(valve_evap.CV122, cold_exchanger.TFP_CV122) annotation (Line(points={{
                21,-65},{114,-65},{114,0},{134,0},{134,-38}}, color={0,0,127}));
        connect(combiTimeTable.y[11], cold_exchanger.PEM_TT200) annotation (
            Line(points={{-219,110},{-200,110},{-200,-28},{126,-28},{126,-38}},
              color={0,0,127}));
        connect(TT511.T, valve_evap.TFP_TT511) annotation (Line(points={{110,121},
                {110,130},{-130,130},{-130,-78},{-2,-78}},      color={0,0,127}));
        connect(boundary2.ports[1], jun2.port_1)
          annotation (Line(points={{220,50},{190,50},{190,40}}, color={0,127,255}));
        connect(jun2.port_3, heat_exchanger.port_a1) annotation (Line(points={{180,30},
                {160,30},{160,80},{80,80},{80,100},{36,100},{36,80}}, color={0,127,255}));
        connect(DEC_TT521.port_b, jun6.port_1)
          annotation (Line(points={{-100,110},{-80,110}}, color={0,127,255}));
        connect(jun6.port_3, CV521.port_a)
          annotation (Line(points={{-70,100},{-70,90}}, color={0,127,255}));
        connect(CV521.port_b, jun7.port_1)
          annotation (Line(points={{-70,70},{-70,60}}, color={0,127,255}));
        connect(jun7.port_3, CV522.port_b)
          annotation (Line(points={{-60,50},{-40,50}}, color={0,127,255}));
        connect(CV522.port_a, heat_exchanger.port_a2)
          annotation (Line(points={{-20,50},{24,50},{24,60}}, color={0,127,255}));
        connect(heat_exchanger.port_b2, jun6.port_2)
          annotation (Line(points={{24,80},{24,110},{-60,110}}, color={0,127,255}));
        connect(TT511.T, pID_Valve_cond.TFP_TT511) annotation (Line(points={{
                110,121},{110,200},{-80,200},{-80,176},{-48,176}}, color={0,0,
                127}));
        connect(DEC_TT521.T, pID_Valve_cond.TFP_TT521) annotation (Line(points=
                {{-110,121},{-110,162},{-48,162}}, color={0,0,127}));
        connect(pID_Valve_cond.CV522, CV522.y) annotation (Line(points={{-25,175},{0,175},
                {0,70},{-30,70},{-30,62}}, color={0,0,127}));
        connect(pID_Valve_cond.CV521, CV521.y) annotation (Line(points={{-25,165},{-20,
                165},{-20,80},{-58,80}}, color={0,0,127}));
        connect(integerExpression.y, heat_exchanger.mode) annotation (Line(points={{-179,
                170},{-92,170},{-92,136},{10,136},{10,76},{18,76}}, color={255,127,0}));
        connect(realExpression1.y, heat_exchanger.TFP_debit_cons) annotation (Line(
              points={{-179,210},{-88,210},{-88,142},{6,142},{6,64},{18,64}}, color={0,
                0,127}));
        connect(pID_Valve_cond.CV522, heat_exchanger.TFP_CV522)
          annotation (Line(points={{-25,175},{34,175},{34,82}}, color={0,0,127}));
        connect(combiTimeTable.y[11], heat_exchanger.PEM_TT200) annotation (Line(
              points={{-219,110},{-180,110},{-180,134},{26,134},{26,82}}, color={0,0,127}));
        connect(chi.port_b1, TT511.port_b) annotation (Line(points={{-18,16},{
                86,16},{86,110},{100,110}}, color={0,127,255}));
        connect(jun2.port_2, cold_exchanger.port_a1) annotation (Line(points={{190,20},
                {190,0},{136,0},{136,-40}}, color={0,127,255}));
        connect(combiTimeTable.y[2], boundary1.T_in) annotation (Line(points={{
                -219,110},{-180,110},{-180,114},{-162,114}}, color={0,0,127}));
        connect(chi.port_a1, TT521.port_b) annotation (Line(points={{-38,16},{
                -40,16},{-40,30}}, color={0,127,255}));
        connect(jun7.port_2, TT521.port_a) annotation (Line(points={{-70,40},{
                -70,34},{-60,34},{-60,30}}, color={0,127,255}));
        connect(cold_exchanger.port_b1, jun3.port_1) annotation (Line(points={{
                136,-60},{136,-70},{150,-70}}, color={0,127,255}));
        connect(jun3.port_2, TT201.port_a)
          annotation (Line(points={{170,-70},{190,-70}}, color={0,127,255}));
        connect(bou2.ports[1], TT201.port_b)
          annotation (Line(points={{220,-70},{210,-70}}, color={0,127,255}));
        connect(heat_exchanger.port_b1, jun3.port_3) annotation (Line(points={{
                36,60},{36,40},{150,40},{150,-20},{160,-20},{160,-60}}, color={
                0,127,255}));
        annotation (
          Icon(coordinateSystem(preserveAspectRatio=false)),
          Diagram(coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=2244600,
            Interval=600,
            __Dymola_Algorithm="Dassl"));
      end TFP_simple;

      model TFP_simple_pump

      parameter
          Buildings.Fluid.Chillers.Data.ElectricReformulatedEIR.ReformEIRChiller_Trane_RTHB_1051kW_5_05COP_Valve
          per;
          Real temperatures[12](final unit="K", displayUnit = "degC");

        Fluid.Chillers.ElectricReformulatedEIR chi(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=211/3.6,
          m2_flow_nominal=166/3.6,
          dp1_nominal=18000,
          dp2_nominal=18000,
          per=per)
          annotation (Placement(transformation(extent={{-38,0},{-18,20}})));
        Fluid.Sources.MassFlowSource_T boundary(
          redeclare package Medium = Buildings.Media.Water,
          use_m_flow_in=true,
          m_flow=190/3.6,
          use_T_in=true,
          nPorts=1)
          annotation (Placement(transformation(extent={{216,-120},{196,-100}})));
        Fluid.Sources.Boundary_pT bou(redeclare package Medium =
              Buildings.Media.Water, nPorts=1)
          annotation (Placement(transformation(extent={{-124,-124},{-104,-104}})));
        Fluid.Sources.Boundary_pT bou1(redeclare package Medium =
              Buildings.Media.Water, nPorts=1)
          annotation (Placement(transformation(extent={{160,100},{140,120}})));
        Fluid.Sources.MassFlowSource_T boundary1(
          redeclare package Medium = Buildings.Media.Water,
          use_m_flow_in=true,
          m_flow=180/3.6,
          use_T_in=true,
          nPorts=1)
          annotation (Placement(transformation(extent={{-160,100},{-140,120}})));
        Modelica.Blocks.Sources.RealExpression realExpression(y=4 + 273.15)
          annotation (Placement(transformation(extent={{-120,-10},{-100,10}})));
        Fluid.Sensors.TemperatureTwoPort DEC_TT521(redeclare package Medium =
              Buildings.Media.Water,
          m_flow_nominal=216/3.6,
          T_start=323.15)                                    annotation (
            Placement(transformation(extent={{-120,100},{-100,120}})));
        Fluid.Sensors.TemperatureTwoPort Tevapsort(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=350/3.6)
          annotation (Placement(transformation(extent={{-84,-124},{-64,-104}})));
        Fluid.Sensors.TemperatureTwoPort TT511(redeclare package Medium =
              Buildings.Media.Water,
          m_flow_nominal=216/3.6,
          T_start=333.15)
          annotation (Placement(transformation(extent={{120,100},{100,120}})));
        Fluid.Sensors.TemperatureTwoPort Tretour(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=190/3.6) annotation (
            Placement(transformation(extent={{176,-120},{156,-100}})));
        Modelica.Blocks.Interfaces.RealOutput P
          annotation (Placement(transformation(extent={{90,140},{110,160}})));
        Modelica.Blocks.Math.Gain gain(k=1/1000)
          annotation (Placement(transformation(extent={{60,140},{80,160}})));
        Modelica.Blocks.Sources.BooleanExpression booleanExpression(y=true)
          annotation (Placement(transformation(extent={{-120,20},{-100,40}})));
        RJF.Cold_exchanger cold_exchanger(redeclare package Medium1 =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water, redeclare
            package Medium2 =
              Buildings.Media.Water) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={130,-50})));
        Fluid.Sources.Boundary_pT bou2(redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          p=100000,
          use_T_in=true,                                            nPorts=2)
          annotation (Placement(transformation(extent={{360,-20},{340,0}})));
        Fluid.Sensors.TemperatureTwoPort Tevapent(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=350/3.6)
          annotation (Placement(transformation(extent={{20,-20},{0,0}})));
        Fluid.Actuators.Valves.TwoWayLinear CV122(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=350/3.6,
          CvData=Buildings.Fluid.Types.CvTypes.Cv,
          Cv=1700,
          dpValve_nominal=1000) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={100,-10})));
        Fluid.FixedResistances.Junction jun(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={350/3.6,-350/3.6,-350/3.6},
          dp_nominal={0,0,0}) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={124,-110})));
        Fluid.FixedResistances.Junction jun1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={350/3.6,-350/3.6,350/3.6},
          dp_nominal={0,0,0}) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={60,-10})));
        Fluid.Actuators.Valves.TwoWayLinear CV121(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=350/3.6,
          CvData=Buildings.Fluid.Types.CvTypes.Kv,
          Kv=1700,
          dpValve_nominal=1000) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={90,-110})));
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource(
              "modelica://Buildings/Data/tfp_he.txt"),
          columns={2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19})
          annotation (Placement(transformation(extent={{-240,100},{-220,120}})));
        Controls_a.TFP.PID_Valve_evap valve_evap
          annotation (Placement(transformation(extent={{0,-80},{20,-60}})));
        RJC.Heat_exchanger heat_exchanger(redeclare package Medium1 =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water, redeclare
            package Medium2 =
              Buildings.Media.Water)
          annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={30,70})));
        Fluid.FixedResistances.Junction jun2(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal={190/3.6,-190/3.6,-190/3.6},
          dp_nominal={0,0,0}) annotation (Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=90,
              origin={190,30})));
        Fluid.FixedResistances.Junction jun6(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={216/3.6,-216/3.6,-216/3.6},
          dp_nominal={0,0,0}) annotation (Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={-70,110})));
        Fluid.FixedResistances.Junction jun7(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={216/3.6,-216/3.6,216/3.6},
          dp_nominal={0,0,0}) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=90,
              origin={-70,50})));
        Fluid.Actuators.Valves.TwoWayLinear CV521(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=216/3.6,
          CvData=Buildings.Fluid.Types.CvTypes.Kv,
          Kv=1700,
          dpValve_nominal=1000) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={-70,80})));
        Controls_a.TFP.PID_Valve_cond pID_Valve_cond
          annotation (Placement(transformation(extent={{-46,160},{-26,180}})));
        Fluid.Actuators.Valves.TwoWayLinear CV522(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=216/3.6,
          CvData=Buildings.Fluid.Types.CvTypes.Kv,
          Kv=1700,
          dpValve_nominal=1000) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={-30,50})));
        Modelica.Blocks.Sources.IntegerExpression integerExpression(y=2)
          annotation (Placement(transformation(extent={{-200,160},{-180,180}})));
        Modelica.Blocks.Sources.RealExpression realExpression1
          annotation (Placement(transformation(extent={{-200,200},{-180,220}})));
        Fluid.Sensors.TemperatureTwoPort TT201(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=190/3.6)
          annotation (Placement(transformation(extent={{190,-80},{210,-60}})));
        Fluid.Sensors.TemperatureTwoPort TT521(redeclare package Medium =
              Buildings.Media.Water,
          m_flow_nominal=216/3.6,
          T_start=323.15)
          annotation (Placement(transformation(extent={{-60,20},{-40,40}})));
        Fluid.FixedResistances.Junction jun3(
          redeclare package Medium = Media.Sea_Water,
          m_flow_nominal={190/3.6,-190/3.6,-190/3.6},
          dp_nominal={0,0,0}) annotation (Placement(transformation(
              extent={{-10,10},{10,-10}},
              rotation=0,
              origin={160,-70})));
        Fluid.Sensors.TemperatureTwoPort TT200(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=190/3.6)
          annotation (Placement(transformation(extent={{230,40},{210,60}})));
        Fluid.Movers.FlowControlled_dp fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=720/3.6,
          redeclare Fluid.Movers.Data.Pumps.Wilo.Stratos25slash1to4 per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          addPowerToMedium=false,
          constantHead(displayUnit="bar") = 240000)
          annotation (Placement(transformation(extent={{320,40},{300,60}})));
        PEM.Filters.filtrer_dp_linear filtrer_dp_linear(redeclare package
            Medium = Buildings.Media.Water, m_flow_nominal=2400/3.6)
          annotation (Placement(transformation(extent={{280,40},{260,60}})));
      equation
            for j in 1:12 loop
            temperatures[j]=combiTimeTable.y[j];
          end for;
        connect(realExpression.y, chi.TSet) annotation (Line(points={{-99,0},{
                -62,0},{-62,7},{-40,7}}, color={0,0,127}));
        connect(Tretour.port_a, boundary.ports[1])
          annotation (Line(points={{176,-110},{196,-110}}, color={0,127,255}));
        connect(bou.ports[1], Tevapsort.port_a)
          annotation (Line(points={{-104,-114},{-84,-114}},
                                                         color={0,127,255}));
        connect(DEC_TT521.port_a, boundary1.ports[1])
          annotation (Line(points={{-120,110},{-140,110}}, color={0,127,255}));
        connect(chi.P, gain.u) annotation (Line(points={{-17,19},{-12,19},{-12,150},{58,
                150}},
              color={0,0,127}));
        connect(gain.y, P)
          annotation (Line(points={{81,150},{100,150}},
                                                      color={0,0,127}));
        connect(TT511.port_a, bou1.ports[1])
          annotation (Line(points={{120,110},{140,110}}, color={0,127,255}));
        connect(booleanExpression.y, chi.on) annotation (Line(points={{-99,30},
                {-80,30},{-80,13},{-40,13}},
                                    color={255,0,255}));
        connect(Tevapsort.port_b, chi.port_b2) annotation (Line(points={{-64,-114},{-50,
                -114},{-50,4},{-38,4}}, color={0,127,255}));
        connect(chi.port_a2, Tevapent.port_b) annotation (Line(points={{-18,4},
                {-12,4},{-12,-10},{0,-10}}, color={0,127,255}));
        connect(cold_exchanger.port_b2, CV122.port_a) annotation (Line(points={
                {124,-40},{124,-10},{110,-10}}, color={0,127,255}));
        connect(jun.port_1, Tretour.port_b)
          annotation (Line(points={{134,-110},{156,-110}}, color={0,127,255}));
        connect(cold_exchanger.port_a2, jun.port_3)
          annotation (Line(points={{124,-60},{124,-100}}, color={0,127,255}));
        connect(jun1.port_1, CV122.port_b)
          annotation (Line(points={{70,-10},{90,-10}}, color={0,127,255}));
        connect(jun1.port_2, Tevapent.port_a)
          annotation (Line(points={{50,-10},{20,-10}}, color={0,127,255}));
        connect(jun.port_2, CV121.port_a)
          annotation (Line(points={{114,-110},{100,-110}}, color={0,127,255}));
        connect(CV121.port_b, jun1.port_3) annotation (Line(points={{80,-110},{
                60,-110},{60,-20}}, color={0,127,255}));
        connect(combiTimeTable.y[14], boundary1.m_flow_in) annotation (Line(
              points={{-219,110},{-180,110},{-180,118},{-162,118}}, color={0,0,
                127}));
        connect(combiTimeTable.y[16], boundary.m_flow_in) annotation (Line(
              points={{-219,110},{-200,110},{-200,-160},{240,-160},{240,-102},{
                218,-102}}, color={0,0,127}));
        connect(combiTimeTable.y[4], boundary.T_in) annotation (Line(points={{
                -219,110},{-200,110},{-200,-160},{240,-160},{240,-106},{218,
                -106}}, color={0,0,127}));
        connect(valve_evap.CV122, CV122.y)
          annotation (Line(points={{21,-65},{100,-65},{100,-22}}, color={0,0,127}));
        connect(valve_evap.CV121, CV121.y)
          annotation (Line(points={{21,-75},{90,-75},{90,-98}}, color={0,0,127}));
        connect(combiTimeTable.y[11], valve_evap.PEM_TT200) annotation (Line(
              points={{-219,110},{-200,110},{-200,-62},{-2,-62}}, color={0,0,
                127}));
        connect(combiTimeTable.y[4], valve_evap.DEG_TT121) annotation (Line(
              points={{-219,110},{-200,110},{-200,-66},{-2,-66},{-2,-66}},
              color={0,0,127}));
        connect(Tevapent.T, valve_evap.TFP_TT121) annotation (Line(points={{10,1},{
                10,10},{40,10},{40,-100},{-20,-100},{-20,-74},{-2,-74}},
              color={0,0,127}));
        connect(valve_evap.CV122, cold_exchanger.TFP_CV122) annotation (Line(points={{
                21,-65},{114,-65},{114,0},{134,0},{134,-38}}, color={0,0,127}));
        connect(combiTimeTable.y[11], cold_exchanger.PEM_TT200) annotation (
            Line(points={{-219,110},{-200,110},{-200,-28},{126,-28},{126,-38}},
              color={0,0,127}));
        connect(TT511.T, valve_evap.TFP_TT511) annotation (Line(points={{110,121},
                {110,130},{-130,130},{-130,-78},{-2,-78}},      color={0,0,127}));
        connect(jun2.port_3, heat_exchanger.port_a1) annotation (Line(points={{180,30},
                {160,30},{160,80},{80,80},{80,100},{36,100},{36,80}}, color={0,127,255}));
        connect(DEC_TT521.port_b, jun6.port_1)
          annotation (Line(points={{-100,110},{-80,110}}, color={0,127,255}));
        connect(jun6.port_3, CV521.port_a)
          annotation (Line(points={{-70,100},{-70,90}}, color={0,127,255}));
        connect(CV521.port_b, jun7.port_1)
          annotation (Line(points={{-70,70},{-70,60}}, color={0,127,255}));
        connect(jun7.port_3, CV522.port_b)
          annotation (Line(points={{-60,50},{-40,50}}, color={0,127,255}));
        connect(CV522.port_a, heat_exchanger.port_a2)
          annotation (Line(points={{-20,50},{24,50},{24,60}}, color={0,127,255}));
        connect(heat_exchanger.port_b2, jun6.port_2)
          annotation (Line(points={{24,80},{24,110},{-60,110}}, color={0,127,255}));
        connect(TT511.T, pID_Valve_cond.TFP_TT511) annotation (Line(points={{
                110,121},{110,200},{-80,200},{-80,176},{-48,176}}, color={0,0,
                127}));
        connect(DEC_TT521.T, pID_Valve_cond.TFP_TT521) annotation (Line(points=
                {{-110,121},{-110,162},{-48,162}}, color={0,0,127}));
        connect(pID_Valve_cond.CV522, CV522.y) annotation (Line(points={{-25,175},{0,175},
                {0,70},{-30,70},{-30,62}}, color={0,0,127}));
        connect(pID_Valve_cond.CV521, CV521.y) annotation (Line(points={{-25,165},{-20,
                165},{-20,80},{-58,80}}, color={0,0,127}));
        connect(integerExpression.y, heat_exchanger.mode) annotation (Line(points={{-179,
                170},{-92,170},{-92,136},{10,136},{10,76},{18,76}}, color={255,127,0}));
        connect(realExpression1.y, heat_exchanger.TFP_debit_cons) annotation (Line(
              points={{-179,210},{-88,210},{-88,142},{6,142},{6,64},{18,64}}, color={0,
                0,127}));
        connect(pID_Valve_cond.CV522, heat_exchanger.TFP_CV522)
          annotation (Line(points={{-25,175},{34,175},{34,82}}, color={0,0,127}));
        connect(combiTimeTable.y[11], heat_exchanger.PEM_TT200) annotation (Line(
              points={{-219,110},{-180,110},{-180,134},{26,134},{26,82}}, color={0,0,127}));
        connect(chi.port_b1, TT511.port_b) annotation (Line(points={{-18,16},{
                86,16},{86,110},{100,110}}, color={0,127,255}));
        connect(jun2.port_2, cold_exchanger.port_a1) annotation (Line(points={{190,20},
                {190,0},{136,0},{136,-40}}, color={0,127,255}));
        connect(combiTimeTable.y[2], boundary1.T_in) annotation (Line(points={{
                -219,110},{-180,110},{-180,114},{-162,114}}, color={0,0,127}));
        connect(chi.port_a1, TT521.port_b) annotation (Line(points={{-38,16},{
                -40,16},{-40,30}}, color={0,127,255}));
        connect(jun7.port_2, TT521.port_a) annotation (Line(points={{-70,40},{
                -70,30},{-60,30}},          color={0,127,255}));
        connect(cold_exchanger.port_b1, jun3.port_1) annotation (Line(points={{
                136,-60},{136,-70},{150,-70}}, color={0,127,255}));
        connect(jun3.port_2, TT201.port_a)
          annotation (Line(points={{170,-70},{190,-70}}, color={0,127,255}));
        connect(bou2.ports[1], TT201.port_b)
          annotation (Line(points={{340,-8},{256,-8},{256,-70},{210,-70}},
                                                         color={0,127,255}));
        connect(heat_exchanger.port_b1, jun3.port_3) annotation (Line(points={{
                36,60},{36,40},{150,40},{150,-20},{160,-20},{160,-60}}, color={
                0,127,255}));
        connect(jun2.port_1, TT200.port_b) annotation (Line(points={{190,40},{
                190,50},{210,50}}, color={0,127,255}));
        connect(combiTimeTable.y[11], bou2.T_in) annotation (Line(points={{-219,
                110},{-172,110},{-172,-160},{380,-160},{380,-6},{362,-6}},
              color={0,0,127}));
        connect(fan.port_a, bou2.ports[2]) annotation (Line(points={{320,50},{
                330,50},{330,-12},{340,-12}}, color={0,127,255}));
        connect(fan.port_b, filtrer_dp_linear.port_a)
          annotation (Line(points={{300,50},{280,50}}, color={0,127,255}));
        connect(TT200.port_a, filtrer_dp_linear.port_b)
          annotation (Line(points={{230,50},{260,50}}, color={0,127,255}));
        annotation (
          Icon(coordinateSystem(preserveAspectRatio=false)),
          Diagram(coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=2244600,
            Interval=600,
            __Dymola_Algorithm="Dassl"));
      end TFP_simple_pump;

      model tfp_solo_simple


        parameter Modelica.SIunits.MassFlowRate m_flow_hot= 332*1000/3600;
        parameter Modelica.SIunits.MassFlowRate m_flow_cold= 211*1000/3600;
        parameter Real T_set_hot = 61;
        parameter Real T_set_hot_max = 63;
        parameter Real T_set_hot_min = 41;
        parameter Real T_set_cold_max = 14;
        parameter Real T_set_cold = 4;
        Integer mode=1;

        Fluid.FixedResistances.Junction jun(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={m_flow_hot,-m_flow_hot,-m_flow_hot},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=270,
              origin={10,210})));
        Fluid.Actuators.Valves.TwoWayLinear XV521(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_hot,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          dpValve_nominal=10)
          annotation (Placement(transformation(extent={{-40,180},{-60,200}})));
        Fluid.Actuators.Valves.TwoWayLinear XV522(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_hot,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          dpValve_nominal=10) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={70,230})));
        Fluid.Actuators.Valves.TwoWayLinear CV523(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_hot,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          dpValve_nominal=10,
          use_inputFilter=false)
                              annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={10,50})));
        Fluid.FixedResistances.Junction jun1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={m_flow_hot,-m_flow_hot,m_flow_hot},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,10},{10,-10}},
              rotation=270,
              origin={-90,190})));
        Fluid.FixedResistances.Junction jun3(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={m_flow_hot,-m_flow_hot,-m_flow_hot},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,10},{10,-10}},
              rotation=90,
              origin={70,190})));
        Fluid.Chillers.ElectricReformulatedEIR TFPA(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water,
          m1_flow_nominal=250/3.6,
          m2_flow_nominal=300/3.6,
          dp1_nominal=70000,
          dp2_nominal=70000,
          per=Buildings.Fluid.Chillers.Data.ElectricReformulatedEIR.ReformEIRChiller_Trane_RTHB_1051kW_5_05COP_Valve())
          annotation (Placement(transformation(extent={{-40,-20},{-20,0}})));
        Fluid.Actuators.Valves.TwoWayLinear XV112A(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=100,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          dpValve_nominal=10) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-50,-90})));
        Fluid.Actuators.Valves.TwoWayLinear CV123(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=100,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          dpValve_nominal=10,
          use_inputFilter=false)
                              annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=90,
              origin={50,-90})));
        Fluid.FixedResistances.Junction jun5(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={100,-100,-100},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=90,
              origin={50,-210})));
        Fluid.Sensors.VolumeFlowRate FT521(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={10,90})));
        Controls.Continuous.LimPID FT_PID_521(k=1, Ti=1)
          annotation (Placement(transformation(extent={{200,120},{220,140}})));
        Controls.Continuous.LimPID FT_PID_123(k=1, Ti=1)
          annotation (Placement(transformation(extent={{180,-100},{200,-80}})));
        Modelica.Blocks.Sources.RealExpression CV123_reg(y=if mode == 1 or mode
               == 3 then 166/3600 else 332/3600)
          annotation (Placement(transformation(extent={{140,-100},{160,-80}})));
        Fluid.Sensors.VolumeFlowRate FT121(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={50,-130})));
        Fluid.Sensors.TemperatureTwoPort TT111(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100)
          annotation (Placement(transformation(extent={{-60,-140},{-80,-120}})));
        Fluid.Sensors.TemperatureTwoPort TT511(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100)
          annotation (Placement(transformation(extent={{80,250},{100,270}})));
        Fluid.Sensors.TemperatureTwoPort TT521(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=-90,
              origin={10,120})));
        Modelica.Blocks.Sources.RealExpression XV521_switch(y=if mode == 1 then 1
               else 0)
          annotation (Placement(transformation(extent={{-240,240},{-220,260}})));
        Modelica.Blocks.Sources.RealExpression XV522_switch(y=if mode >= 2 then 1
               else 0)
          annotation (Placement(transformation(extent={{-240,210},{-220,230}})));
        Modelica.Blocks.Sources.RealExpression XV112A_switch(y=if mode >= 1 then 1
               else 0)
          annotation (Placement(transformation(extent={{-240,-40},{-220,-20}})));
        Modelica.Blocks.Math.RealToBoolean TFPA_on(threshold=0.5)
          annotation (Placement(transformation(extent={{-180,20},{-160,40}})));
        Modelica.Blocks.Sources.RealExpression cons_cold(y=T_set_cold)
          annotation (Placement(transformation(extent={{-240,40},{-220,60}})));
        Fluid.Sensors.TemperatureTwoPort TT121(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=270,
              origin={50,-48})));
        Controls_a.TFP.PID_Valve_evap pID_Valve_evap annotation (Placement(
              transformation(extent={{-120,-240},{-100,-220}})));
        Controls_a.TFP.PID_Valve_cond pID_Valve_cond
          annotation (Placement(transformation(extent={{-200,160},{-180,180}})));
        Modelica.Blocks.Sources.RealExpression CV523_reg(y=211/3600)
          annotation (Placement(transformation(extent={{120,100},{140,120}})));
        Fluid.Actuators.Valves.ThreeWayLinear CV121_122(redeclare package
            Medium =
              Buildings.Media.Water, use_inputFilter=false,
          m_flow_nominal=100,
          dpValve_nominal=5000)                             annotation (Placement(
              transformation(
              extent={{10,-10},{-10,10}},
              rotation=270,
              origin={50,-170})));
        Fluid.Actuators.Valves.ThreeWayLinear CV121_1(redeclare package Medium =
              Buildings.Media.Water, use_inputFilter=false,
          m_flow_nominal=300,
          dpValve_nominal=5000)                             annotation (Placement(
              transformation(
              extent={{10,-10},{-10,10}},
              rotation=90,
              origin={10,150})));
        Fluid.Sources.Boundary_pT bou(
          redeclare package Medium = Buildings.Media.Water,
          T=285.15,
          nPorts=2) annotation (Placement(transformation(extent={{-120,-320},{
                  -100,-300}})));
        RJC.Heat_exchanger heat_exchanger(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water)
          annotation (Placement(transformation(extent={{148,176},{168,196}})));
        Fluid.Sources.Boundary_pT bou1(redeclare package Medium =
              Buildings.Media.Water, nPorts=2)
          annotation (Placement(transformation(extent={{-80,260},{-60,280}})));
        Fluid.Movers.FlowControlled_dp fan2(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=1600,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          dp_nominal(displayUnit="bar") = 200000,
          constantHead(displayUnit="bar") = 200000)
          annotation (Placement(transformation(extent={{220,240},{200,260}})));
        Fluid.Sources.Boundary_pT bou2(
          redeclare package Medium = Buildings.Media.Water,
          T=293.15,
          nPorts=3)
          annotation (Placement(transformation(extent={{280,240},{260,260}})));
        RJF.Cold_exchanger cold_exchanger(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water) annotation (Placement(transformation(
                extent={{120,-200},{140,-180}})));
        Fluid.Movers.FlowControlled_m_flow fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=350/3.6,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_PEG per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          dp_nominal(displayUnit="bar") = 500000,
          constantMassFlowRate=350/3.6) annotation (Placement(transformation(
                extent={{-40,-320},{-20,-300}})));
        Fluid.Movers.FlowControlled_m_flow fan1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=166/3.6,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_PEC per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          dp_nominal=500000,
          constantMassFlowRate=0)
          annotation (Placement(transformation(extent={{-20,260},{0,280}})));
        Modelica.Blocks.Sources.RealExpression CV123_reg1(y=20 + 273.15)
          annotation (Placement(transformation(extent={{74,-262},{94,-242}})));
        Modelica.Blocks.Sources.RealExpression CV123_reg2(y=20 + 273.15)
          annotation (Placement(transformation(extent={{118,142},{138,162}})));
        Modelica.Blocks.Sources.IntegerExpression integerExpression(y=2)
          annotation (Placement(transformation(extent={{-320,80},{-300,100}})));
        Modelica.Blocks.Sources.RealExpression CV123_reg3(y=50 + 273.15)
          annotation (Placement(transformation(extent={{-198,-224},{-178,-204}})));
        Modelica.Blocks.Sources.RealExpression CV523_reg1(y=211/3.6)
          annotation (Placement(transformation(extent={{120,120},{140,140}})));
      equation
        connect(jun1.port_3, XV521.port_b)
          annotation (Line(points={{-80,190},{-60,190}},  color={238,46,47}));
        connect(jun.port_3, jun1.port_1) annotation (Line(points={{1.77636e-15,
                210},{-90,210},{-90,200}},
                            color={238,46,47},
            thickness=0.5));
        connect(CV523.port_b, TFPA.port_a1) annotation (Line(points={{10,40},{10,20},{
                -60,20},{-60,-4},{-40,-4}}, color={238,46,47},
            thickness=0.5));
        connect(XV112A.port_a, TFPA.port_b2) annotation (Line(points={{-50,-80},{-50,-16},
                {-40,-16}}, color={0,127,255},
            thickness=0.5));
        connect(jun3.port_3, XV521.port_a)
          annotation (Line(points={{60,190},{-40,190}}, color={238,46,47},
            thickness=0.5));
        connect(jun3.port_2, XV522.port_a)
          annotation (Line(points={{70,200},{70,220}}, color={238,46,47}));
        connect(FT521.port_b, CV523.port_a)
          annotation (Line(points={{10,80},{10,60}}, color={238,46,47},
            thickness=0.5));
        connect(FT521.V_flow, FT_PID_521.u_m) annotation (Line(points={{21,90},{50,90},
                {50,100},{210,100},{210,118}}, color={0,0,127}));
        connect(FT_PID_521.y, CV523.y) annotation (Line(points={{221,130},{240,130},{240,
                50},{22,50}}, color={0,0,127}));
        connect(CV123.port_a, FT121.port_a)
          annotation (Line(points={{50,-100},{50,-120}}, color={0,127,255},
            thickness=0.5));
        connect(FT121.V_flow, FT_PID_123.u_m) annotation (Line(points={{61,-130},
                {190,-130},{190,-102}},
                                   color={0,0,127}));
        connect(FT_PID_123.y, CV123.y) annotation (Line(points={{201,-90},{220,
                -90},{220,-68},{80,-68},{80,-90},{62,-90}},
                                                  color={0,0,127}));
        connect(XV522.port_b, TT511.port_a) annotation (Line(points={{70,240},{70,
                260},{80,260}}, color={238,46,47},
            thickness=0.5));
        connect(TT521.port_b, FT521.port_a)
          annotation (Line(points={{10,110},{10,100}}, color={238,46,47},
            thickness=0.5));
        connect(XV521_switch.y, XV521.y) annotation (Line(points={{-219,250},{
                -160,250},{-160,240},{-50,240},{-50,202}},
                                                 color={0,0,127}));
        connect(XV522_switch.y, XV522.y) annotation (Line(points={{-219,220},{
                -160,220},{-160,230},{58,230}},
                                      color={0,0,127}));
        connect(XV112A_switch.y, XV112A.y) annotation (Line(points={{-219,-30},{
                -152,-30},{-152,-50},{-30,-50},{-30,-90},{-38,-90}},
                                                           color={0,0,127}));
        connect(XV112A_switch.y, TFPA_on.u) annotation (Line(points={{-219,-30},{
                -192,-30},{-192,30},{-182,30}},
                                           color={0,0,127}));
        connect(TFPA_on.y, TFPA.on) annotation (Line(points={{-159,30},{-140,30},
                {-140,-7},{-42,-7}},
                               color={255,0,255}));
        connect(cons_cold.y, TFPA.TSet) annotation (Line(points={{-219,50},{-120,
                50},{-120,-13},{-42,-13}},
                                      color={0,0,127}));
        connect(CV123_reg.y, FT_PID_123.u_s)
          annotation (Line(points={{161,-90},{178,-90}}, color={0,0,127}));
        connect(TT121.port_a, CV123.port_b)
          annotation (Line(points={{50,-58},{50,-80}},  color={0,127,255},
            thickness=0.5));
        connect(pID_Valve_evap.TFP_TT121, TT121.T) annotation (Line(points={{-122,
                -234},{-220,-234},{-220,-262},{34,-262},{34,-48},{39,-48}}, color=
               {0,0,127}));
        connect(TT511.T, pID_Valve_evap.TFP_TT511) annotation (Line(points={{90,271},
                {90,300},{-250,300},{-250,-252},{-208,-252},{-208,-238},{-122,
                -238}},      color={0,0,127}));
        connect(TT511.T, pID_Valve_cond.TFP_TT511) annotation (Line(points={{90,271},
                {90,300},{-250,300},{-250,176},{-202,176}},      color={0,0,127}));
        connect(TT521.T, pID_Valve_cond.TFP_TT521) annotation (Line(points={{-1,
                120},{-220,120},{-220,162},{-202,162}}, color={0,0,127}));
        connect(CV523_reg.y, FT_PID_521.u_s)
          annotation (Line(points={{141,110},{170,110},{170,130},{198,130}},
                                                         color={0,0,127}));
        connect(TT121.port_b, TFPA.port_a2) annotation (Line(points={{50,-38},{50,
                -16},{-20,-16}}, color={0,127,255},
            thickness=0.5));
        connect(XV112A.port_b, TT111.port_a) annotation (Line(points={{-50,-100},
                {-50,-130},{-60,-130}}, color={0,127,255},
            thickness=0.5));
        connect(TFPA.port_b1, jun3.port_1) annotation (Line(points={{-20,-4},{70,
                -4},{70,180}}, color={238,46,47},
            thickness=0.5));
        connect(CV121_122.port_1, jun5.port_2)
          annotation (Line(points={{50,-180},{50,-200}}, color={0,127,255}));
        connect(FT121.port_b, CV121_122.port_2)
          annotation (Line(points={{50,-140},{50,-160}}, color={0,127,255},
            thickness=0.5));
        connect(pID_Valve_evap.CV121, CV121_122.y) annotation (Line(points={{-99,
                -235},{72,-235},{72,-170},{62,-170}}, color={0,0,127}));
        connect(TT521.port_a, CV121_1.port_2)
          annotation (Line(points={{10,130},{10,140}}, color={238,46,47},
            thickness=0.5));
        connect(jun.port_2, CV121_1.port_1)
          annotation (Line(points={{10,200},{10,160}}, color={238,46,47},
            thickness=0.5));
        connect(pID_Valve_cond.CV521, CV121_1.y) annotation (Line(points={{-179,
                165},{-40,165},{-40,150},{-2,150}}, color={0,0,127}));
        connect(TT511.port_b, bou1.ports[1]) annotation (Line(points={{100,260},
                {126,260},{126,320},{-54,320},{-54,272},{-60,272}}, color={0,
                127,255}));
        connect(jun1.port_2, heat_exchanger.port_a2) annotation (Line(points={{
                -90,180},{-90,170},{184,170},{184,180},{168,180}}, color={0,127,
                255}));
        connect(heat_exchanger.port_b2, CV121_1.port_3) annotation (Line(points=
               {{148,180},{86,180},{86,150},{20,150}}, color={0,127,255}));
        connect(heat_exchanger.port_b1, bou2.ports[1]) annotation (Line(points={{168,192},
                {240,192},{240,252.667},{260,252.667}},            color={0,127,
                255}));
        connect(jun5.port_3, cold_exchanger.port_a2) annotation (Line(points={{
                60,-210},{152,-210},{152,-196},{140,-196}}, color={0,127,255}));
        connect(CV121_122.port_3, cold_exchanger.port_b2) annotation (Line(
              points={{40,-170},{10,-170},{10,-188},{94,-188},{94,-196},{120,
                -196}}, color={0,127,255}));
        connect(bou2.ports[2], fan2.port_a) annotation (Line(points={{260,250},
                {242,250},{242,250},{220,250}}, color={0,127,255}));
        connect(fan2.port_b, heat_exchanger.port_a1) annotation (Line(points={{
                200,250},{126,250},{126,192},{148,192}}, color={0,127,255}));
        connect(fan2.port_b, cold_exchanger.port_a1) annotation (Line(points={{
                200,250},{190,250},{190,206},{290,206},{290,-160},{104,-160},{
                104,-184},{120,-184}}, color={0,127,255}));
        connect(cold_exchanger.port_b1, bou2.ports[3]) annotation (Line(points={{140,
                -184},{170,-184},{170,-182},{260,-182},{260,247.333}},
              color={0,127,255}));
        connect(TT111.port_b, bou.ports[1]) annotation (Line(points={{-80,-130},
                {-80,-308},{-100,-308}}, color={0,127,255}));
        connect(bou1.ports[2], fan1.port_a) annotation (Line(points={{-60,268},
                {-40,268},{-40,270},{-20,270}}, color={0,127,255}));
        connect(fan1.port_b, jun.port_1) annotation (Line(points={{0,270},{10,
                270},{10,220}}, color={0,127,255}));
        connect(bou.ports[2], fan.port_a) annotation (Line(points={{-100,-312},
                {-70,-312},{-70,-310},{-40,-310}}, color={0,127,255}));
        connect(fan.port_b, jun5.port_1) annotation (Line(points={{-20,-310},{
                50,-310},{50,-220}}, color={0,127,255}));
        connect(pID_Valve_evap.CV122, cold_exchanger.TFP_CV122) annotation (
            Line(points={{-99,-225},{-68,-225},{-68,-226},{-36,-226},{-36,-186},
                {118,-186}}, color={0,0,127}));
        connect(CV123_reg1.y, cold_exchanger.PEM_TT200) annotation (Line(points={{95,-252},
                {114,-252},{114,-194},{118,-194}},            color={0,0,127}));
        connect(CV123_reg1.y, heat_exchanger.PEM_TT200) annotation (Line(points={{95,-252},
                {96,-252},{96,-164},{146,-164},{146,182}}, color={0,0,127}));
        connect(pID_Valve_cond.CV522, heat_exchanger.TFP_CV522) annotation (Line(
              points={{-179,175},{-40,175},{-40,176},{98,176},{98,190},{146,190}},
                                                                     color={0,0,127}));
        connect(CV123_reg1.y, pID_Valve_evap.PEM_TT200) annotation (Line(points={{95,-252},
                {108,-252},{108,-340},{-160,-340},{-160,-222},{-122,-222}}, color={0,0,
                127}));
        connect(CV123_reg3.y, pID_Valve_evap.DEG_TT121) annotation (Line(points={{-177,
                -214},{-152,-214},{-152,-226},{-122,-226}}, color={0,0,127}));
        connect(integerExpression.y, heat_exchanger.mode) annotation (Line(points={{-299,
                90},{-74,90},{-74,174},{152,174}}, color={255,127,0}));
        connect(CV523_reg1.y, heat_exchanger.TFP_debit_cons) annotation (Line(
              points={{141,130},{164,130},{164,174}}, color={0,0,127}));
        annotation (Diagram(coordinateSystem(extent={{-100,-100},{100,100}})), Icon(
              coordinateSystem(extent={{-100,-100},{100,100}}), graphics={Rectangle(
                extent={{-60,80},{60,20}},
                lineColor={28,108,200},
                fillColor={238,46,47},
                fillPattern=FillPattern.Solid),                           Rectangle(
                extent={{-60,-20},{60,-80}},
                lineColor={28,108,200},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid)}));
      end tfp_solo_simple;

      model TFP_duo_simple
        parameter Modelica.SIunits.MassFlowRate m_flow_hot= 332*1000/3600;
        parameter Modelica.SIunits.MassFlowRate m_flow_cold= 211*1000/3600;
        parameter Real T_set_hot = 61;
        parameter Real T_set_hot_max = 63;
        parameter Real T_set_hot_min = 41;
        parameter Real T_set_cold_max = 14;
        parameter Real T_set_cold = 4;
        Integer mode = 2;

        Fluid.FixedResistances.Junction jun(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={m_flow_hot,-m_flow_hot,-m_flow_hot},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=270,
              origin={10,250})));
        Fluid.Actuators.Valves.TwoWayLinear XV521(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_hot,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          dpValve_nominal=5000)
          annotation (Placement(transformation(extent={{-40,180},{-60,200}})));
        Fluid.Actuators.Valves.TwoWayLinear XV522(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_hot,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          dpValve_nominal=5000)
                              annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={70,230})));
        Fluid.Actuators.Valves.TwoWayLinear CV523(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_hot,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          dpValve_nominal=5000,
          use_inputFilter=false)
                              annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={10,50})));
        Fluid.FixedResistances.Junction jun1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={m_flow_hot,-m_flow_hot,m_flow_hot},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,10},{10,-10}},
              rotation=270,
              origin={-90,190})));
        Fluid.FixedResistances.Junction jun3(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={m_flow_hot,-m_flow_hot,-m_flow_hot},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,10},{10,-10}},
              rotation=90,
              origin={70,190})));
        Fluid.Chillers.ElectricReformulatedEIR TFPA(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water,
          m1_flow_nominal=m_flow_hot,
          m2_flow_nominal=m_flow_cold/2,
          dp1_nominal=70000,
          dp2_nominal=70000,
          per=Buildings.Fluid.Chillers.Data.ElectricReformulatedEIR.ReformEIRChiller_Trane_RTHB_1051kW_5_05COP_Valve())
          annotation (Placement(transformation(extent={{-40,-20},{-20,0}})));
        Fluid.Chillers.ElectricReformulatedEIR TFPB(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water,
          m1_flow_nominal=m_flow_hot,
          m2_flow_nominal=m_flow_cold/2,
          dp1_nominal=70000,
          dp2_nominal=70000,
          per=Buildings.Fluid.Chillers.Data.ElectricReformulatedEIR.ReformEIRChiller_Trane_RTHB_1051kW_5_05COP_Valve())
          annotation (Placement(transformation(extent={{20,-20},{40,0}})));
        Fluid.FixedResistances.Junction jun4(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={m_flow_cold,-m_flow_cold/2,-m_flow_cold/2},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,10},{10,-10}},
              rotation=90,
              origin={50,-50})));
        Fluid.Actuators.Valves.TwoWayLinear XV112A(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_cold/2,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          dpValve_nominal=5000)
                              annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-50,-90})));
        Fluid.Actuators.Valves.TwoWayLinear CV123(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_cold,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          dpValve_nominal=5000,
          use_inputFilter=false)
                              annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=90,
              origin={50,-110})));
        Fluid.FixedResistances.Junction jun5(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={m_flow_cold,-m_flow_cold,-m_flow_cold},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=90,
              origin={50,-250})));
        Fluid.FixedResistances.Junction jun6(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={m_flow_cold/2,-m_flow_cold,m_flow_cold/2},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,10},{10,-10}},
              rotation=270,
              origin={-50,-130})));
        Fluid.Actuators.Valves.TwoWayLinear XV112B(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_cold/2,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          dpValve_nominal=5000)
                              annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={10,-90})));
        Fluid.Sensors.VolumeFlowRate FT521(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={10,90})));
        Controls.Continuous.LimPID FT_PID_521(k=0.1, Ti=10)
          annotation (Placement(transformation(extent={{200,120},{220,140}})));
        Controls.Continuous.LimPID FT_PID_123(k=1, Ti=1)
          annotation (Placement(transformation(extent={{180,-100},{200,-80}})));
        Fluid.Sensors.VolumeFlowRate FT121(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=m_flow_cold)
                                                         annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={50,-140})));
        Fluid.Sensors.TemperatureTwoPort TT111(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=m_flow_cold)
          annotation (Placement(transformation(extent={{-60,-170},{-80,-150}})));
        Fluid.Sensors.TemperatureTwoPort TT511(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100)
          annotation (Placement(transformation(extent={{80,250},{100,270}})));
        Fluid.Sensors.TemperatureTwoPort TT521(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=-90,
              origin={10,120})));
        Modelica.Blocks.Sources.RealExpression XV521_switch(y=if mode == 1 then 1
               else 0)
          annotation (Placement(transformation(extent={{-240,240},{-220,260}})));
        Modelica.Blocks.Sources.RealExpression XV522_switch(y=if mode >= 2 then 1
               else 0)
          annotation (Placement(transformation(extent={{-240,210},{-220,230}})));
        Modelica.Blocks.Sources.RealExpression XV112A_switch(y=if mode >= 1 then 1
               else 0)
          annotation (Placement(transformation(extent={{-240,-40},{-220,-20}})));
        Modelica.Blocks.Sources.RealExpression XV112B_switch(y=if mode == 1 or
              mode == 2 then 1 else 0)
          annotation (Placement(transformation(extent={{-240,-80},{-220,-60}})));
        Modelica.Blocks.Math.RealToBoolean TFPA_on(threshold=0.5)
          annotation (Placement(transformation(extent={{-180,20},{-160,40}})));
        Modelica.Blocks.Math.RealToBoolean TFPB_on
          annotation (Placement(transformation(extent={{-180,-20},{-160,0}})));
        Modelica.Blocks.Sources.RealExpression cons_cold(y=T_set_cold)
          annotation (Placement(transformation(extent={{-240,40},{-220,60}})));
        Modelica.Blocks.Sources.RealExpression CV123_reg(y=if mode == 1 or mode
               == 3 then 166/3600 else 332/3600)
          annotation (Placement(transformation(extent={{140,-100},{160,-80}})));
        Fluid.Sensors.TemperatureTwoPort TT121(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=322/3.6)
                                                         annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=270,
              origin={50,-80})));
        Controls_a.TFP.PID_Valve_evap pID_Valve_evap annotation (Placement(
              transformation(extent={{-120,-240},{-100,-220}})));
        Controls_a.TFP.PID_Valve_cond pID_Valve_cond
          annotation (Placement(transformation(extent={{-200,160},{-180,180}})));
        Modelica.Blocks.Sources.RealExpression CV523_reg(y=211/3600)
          annotation (Placement(transformation(extent={{140,120},{160,140}})));
        Fluid.Actuators.Valves.ThreeWayLinear val(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_cold,
          dpValve_nominal=5000) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=270,
              origin={50,-200})));
        Fluid.Actuators.Valves.ThreeWayLinear val1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_hot,
          dpValve_nominal=5000) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=90,
              origin={10,150})));
        RJF.Cold_exchanger cold_exchanger(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water) annotation (Placement(transformation(
                extent={{140,-180},{160,-160}})));
        Fluid.Movers.FlowControlled_m_flow fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=350/3.6,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_PEG per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          dp_nominal(displayUnit="bar") = 500000,
          constantMassFlowRate=350/3.6) annotation (Placement(transformation(
                extent={{-20,-300},{0,-280}})));
        Fluid.Sources.Boundary_pT bou(
          redeclare package Medium = Buildings.Media.Water,
          T=285.15,
          nPorts=2) annotation (Placement(transformation(extent={{-100,-300},{-80,-280}})));
        Fluid.Sources.Boundary_pT bou2(
          redeclare package Medium = Buildings.Media.Water,
          T=293.15,
          nPorts=3)
          annotation (Placement(transformation(extent={{260,260},{240,280}})));
        Fluid.Movers.FlowControlled_dp fan2(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=1600,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          dp_nominal(displayUnit="bar") = 200000,
          constantHead(displayUnit="bar") = 200000)
          annotation (Placement(transformation(extent={{200,260},{180,280}})));
        RJC.Heat_exchanger heat_exchanger(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water)
          annotation (Placement(transformation(extent={{128,196},{148,216}})));
        Fluid.Sources.Boundary_pT bou1(redeclare package Medium =
              Buildings.Media.Water, nPorts=2)
          annotation (Placement(transformation(extent={{-120,320},{-100,340}})));
        Fluid.Movers.FlowControlled_m_flow fan1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=211/3.6,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_PEC per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          dp_nominal=500000,
          constantMassFlowRate=211/3.6)
          annotation (Placement(transformation(extent={{-60,320},{-40,340}})));
        Modelica.Blocks.Sources.RealExpression CV123_reg1(y=20 + 273.15)
          annotation (Placement(transformation(extent={{-230,-206},{-210,-186}})));
        Modelica.Blocks.Sources.IntegerExpression integerExpression(y=mode)
          annotation (Placement(transformation(extent={{80,120},{100,140}})));
        Modelica.Blocks.Sources.RealExpression CV123_reg2(y=50 + 273.15)
          annotation (Placement(transformation(extent={{-226,-164},{-206,-144}})));
      equation
        connect(jun1.port_3, XV521.port_b)
          annotation (Line(points={{-80,190},{-60,190}},  color={238,46,47},
            thickness=0.5));
        connect(jun.port_3, jun1.port_1) annotation (Line(points={{0,250},{-90,
                250},{-90,200}},
                            color={238,46,47},
            thickness=0.5));
        connect(CV523.port_b, TFPA.port_a1) annotation (Line(points={{10,40},{10,20},{
                -60,20},{-60,-4},{-40,-4}}, color={238,46,47},
            thickness=0.5));
        connect(TFPA.port_b1, TFPB.port_a1)
          annotation (Line(points={{-20,-4},{20,-4}}, color={238,46,47},
            thickness=0.5));
        connect(jun4.port_2, TFPB.port_a2)
          annotation (Line(points={{50,-40},{50,-16},{40,-16}}, color={0,127,255},
            thickness=0.5));

        connect(jun4.port_3, TFPA.port_a2) annotation (Line(points={{40,-50},{-10,-50},
                {-10,-16},{-20,-16}}, color={0,127,255},
            thickness=0.5));
        connect(XV112A.port_a, TFPA.port_b2) annotation (Line(points={{-50,-80},{-50,-16},
                {-40,-16}}, color={0,127,255},
            thickness=0.5));
        connect(XV112B.port_a, TFPB.port_b2)
          annotation (Line(points={{10,-80},{10,-16},{20,-16}}, color={0,127,255},
            thickness=0.5));

        connect(XV112A.port_b, jun6.port_1)
          annotation (Line(points={{-50,-100},{-50,-120}}, color={0,127,255},
            thickness=0.5));
        connect(jun6.port_3, XV112B.port_b) annotation (Line(points={{-40,-130},{
                10,-130},{10,-100}}, color={0,127,255},
            thickness=0.5));
        connect(TFPB.port_b1, jun3.port_1)
          annotation (Line(points={{40,-4},{70,-4},{70,180}}, color={238,46,47},
            thickness=0.5));
        connect(jun3.port_3, XV521.port_a)
          annotation (Line(points={{60,190},{-40,190}}, color={238,46,47},
            thickness=0.5));
        connect(jun3.port_2, XV522.port_a)
          annotation (Line(points={{70,200},{70,220}}, color={238,46,47},
            thickness=0.5));
        connect(FT521.port_b, CV523.port_a)
          annotation (Line(points={{10,80},{10,60}}, color={238,46,47},
            thickness=0.5));
        connect(FT521.V_flow, FT_PID_521.u_m) annotation (Line(points={{21,90},{50,90},
                {50,100},{210,100},{210,118}}, color={0,0,127}));
        connect(FT_PID_521.y, CV523.y) annotation (Line(points={{221,130},{240,130},{240,
                50},{22,50}}, color={0,0,127}));
        connect(CV123.port_a, FT121.port_a)
          annotation (Line(points={{50,-120},{50,-130}}, color={0,127,255},
            thickness=0.5));
        connect(FT121.V_flow, FT_PID_123.u_m) annotation (Line(points={{61,-140},
                {190,-140},{190,-102}},
                                   color={0,0,127}));
        connect(FT_PID_123.y, CV123.y) annotation (Line(points={{201,-90},{220,
                -90},{220,-68},{80,-68},{80,-110},{62,-110}},
                                                  color={0,0,127}));
        connect(jun6.port_2, TT111.port_a) annotation (Line(points={{-50,-140},{
                -50,-160},{-60,-160}}, color={0,127,255},
            thickness=0.5));
        connect(XV522.port_b, TT511.port_a) annotation (Line(points={{70,240},{70,
                260},{80,260}}, color={238,46,47},
            thickness=0.5));
        connect(TT521.port_b, FT521.port_a)
          annotation (Line(points={{10,110},{10,100}}, color={238,46,47},
            thickness=0.5));
        connect(XV521_switch.y, XV521.y) annotation (Line(points={{-219,250},{
                -160,250},{-160,240},{-50,240},{-50,202}},
                                                 color={0,0,127}));
        connect(XV522_switch.y, XV522.y) annotation (Line(points={{-219,220},{
                -160,220},{-160,230},{58,230}},
                                      color={0,0,127}));
        connect(XV112A_switch.y, XV112A.y) annotation (Line(points={{-219,-30},{
                -152,-30},{-152,-50},{-30,-50},{-30,-90},{-38,-90}},
                                                           color={0,0,127}));
        connect(XV112B_switch.y, XV112B.y) annotation (Line(points={{-219,-70},{
                30,-70},{30,-90},{22,-90}},
                                    color={0,0,127}));
        connect(XV112A_switch.y, TFPA_on.u) annotation (Line(points={{-219,-30},{
                -192,-30},{-192,30},{-182,30}},
                                           color={0,0,127}));
        connect(XV112B_switch.y, TFPB_on.u) annotation (Line(points={{-219,-70},{
                -200,-70},{-200,-10},{-182,-10}},
                                             color={0,0,127}));
        connect(TFPB_on.y, TFPB.on) annotation (Line(points={{-159,-10},{-64,-10},
                {-64,-24},{4,-24},{4,-7},{18,-7}},
                                              color={255,0,255}));
        connect(TFPA_on.y, TFPA.on) annotation (Line(points={{-159,30},{-140,30},
                {-140,-7},{-42,-7}},
                               color={255,0,255}));
        connect(cons_cold.y, TFPA.TSet) annotation (Line(points={{-219,50},{-120,
                50},{-120,-13},{-42,-13}},
                                      color={0,0,127}));
        connect(cons_cold.y, TFPB.TSet) annotation (Line(points={{-219,50},{-120,
                50},{-120,8},{8,8},{8,-13},{18,-13}},
                                                 color={0,0,127}));
        connect(CV123_reg.y, FT_PID_123.u_s)
          annotation (Line(points={{161,-90},{178,-90}}, color={0,0,127}));
        connect(jun4.port_1, TT121.port_b)
          annotation (Line(points={{50,-60},{50,-70}}, color={0,127,255},
            thickness=0.5));
        connect(TT121.port_a, CV123.port_b)
          annotation (Line(points={{50,-90},{50,-100}}, color={0,127,255},
            thickness=0.5));
        connect(pID_Valve_evap.TFP_TT121, TT121.T) annotation (Line(points={{-122,
                -234},{-220,-234},{-220,-262},{34,-262},{34,-80},{39,-80}}, color=
               {0,0,127}));
        connect(TT511.T, pID_Valve_evap.TFP_TT511) annotation (Line(points={{90,271},
                {90,300},{-250,300},{-250,-252},{-208,-252},{-208,-238},{-122,
                -238}},      color={0,0,127}));
        connect(TT511.T, pID_Valve_cond.TFP_TT511) annotation (Line(points={{90,271},
                {90,300},{-250,300},{-250,176},{-202,176}},      color={0,0,127}));
        connect(TT521.T, pID_Valve_cond.TFP_TT521) annotation (Line(points={{-1,
                120},{-220,120},{-220,162},{-202,162}}, color={0,0,127}));
        connect(CV523_reg.y, FT_PID_521.u_s)
          annotation (Line(points={{161,130},{198,130}}, color={0,0,127}));
        connect(val.port_1, jun5.port_2) annotation (Line(
            points={{50,-210},{50,-240}},
            color={0,127,255},
            thickness=0.5));
        connect(pID_Valve_evap.CV121, val.y) annotation (Line(points={{-99,-235},
                {80,-235},{80,-200},{62,-200}}, color={0,0,127}));
        connect(FT121.port_b, val.port_2) annotation (Line(
            points={{50,-150},{50,-190},{50,-190}},
            color={0,127,255},
            thickness=0.5));
        connect(pID_Valve_cond.CV521, val1.y) annotation (Line(points={{-179,165},{-31.5,
                165},{-31.5,150},{-2,150}}, color={0,0,127}));
        connect(val1.port_2, TT521.port_a) annotation (Line(
            points={{10,140},{10,130}},
            color={238,46,47},
            thickness=0.5));
        connect(val1.port_1, jun.port_2) annotation (Line(
            points={{10,160},{10,240}},
            color={238,46,47},
            thickness=0.5));
        connect(bou.ports[1], fan.port_a) annotation (Line(points={{-80,-288},{-50,-288},
                {-50,-290},{-20,-290}}, color={0,127,255}));
        connect(fan.port_b, jun5.port_1) annotation (Line(points={{0,-290},{50,-290},{
                50,-260}}, color={0,127,255}));
        connect(jun5.port_3, cold_exchanger.port_a2) annotation (Line(points={{60,-250},
                {180,-250},{180,-176},{160,-176}}, color={0,127,255}));
        connect(cold_exchanger.port_b2, val.port_3) annotation (Line(points={{140,-176},
                {20,-176},{20,-200},{40,-200}}, color={0,127,255}));
        connect(TT111.port_b, bou.ports[2]) annotation (Line(points={{-80,-160},{-90,-160},
                {-90,-200},{-60,-200},{-60,-292},{-80,-292}}, color={0,127,255}));
        connect(bou1.ports[1], fan1.port_a) annotation (Line(points={{-100,332},{-80,332},
                {-80,330},{-60,330}}, color={0,127,255}));
        connect(fan1.port_b, jun.port_1)
          annotation (Line(points={{-40,330},{10,330},{10,260}}, color={0,127,255}));
        connect(TT511.port_b, bou1.ports[2]) annotation (Line(points={{100,260},{120,260},
                {120,352},{-92,352},{-92,328},{-100,328}}, color={0,127,255}));
        connect(bou2.ports[1], fan2.port_a) annotation (Line(points={{240,
                272.667},{220,272.667},{220,270},{200,270}},
                                               color={0,127,255}));
        connect(fan2.port_b, heat_exchanger.port_a1) annotation (Line(points={{180,270},
                {140,270},{140,240},{114,240},{114,212},{128,212}}, color={0,127,255}));
        connect(heat_exchanger.port_b1, bou2.ports[2]) annotation (Line(points={{148,212},
                {154,212},{154,214},{240,214},{240,270}}, color={0,127,255}));
        connect(fan2.port_b, cold_exchanger.port_a1) annotation (Line(points={{180,270},
                {170,270},{170,-150},{122,-150},{122,-164},{140,-164}}, color={0,127,255}));
        connect(cold_exchanger.port_b1, bou2.ports[3]) annotation (Line(points={{160,
                -164},{232,-164},{232,266},{240,266},{240,267.333}},
                                                               color={0,127,255}));
        connect(jun1.port_2, heat_exchanger.port_a2) annotation (Line(points={{-90,180},
                {-90,170},{160,170},{160,200},{148,200}}, color={238,46,47},
            thickness=0.5));
        connect(heat_exchanger.port_b2, val1.port_3) annotation (Line(points={{128,200},
                {100,200},{100,150},{20,150}}, color={238,46,47},
            thickness=0.5));
        connect(pID_Valve_evap.CV122, cold_exchanger.TFP_CV122) annotation (Line(
              points={{-99,-225},{126,-225},{126,-166},{138,-166}}, color={0,0,127}));
        connect(CV123_reg1.y, pID_Valve_evap.PEM_TT200) annotation (Line(points={{-209,
                -196},{-164,-196},{-164,-222},{-122,-222}}, color={0,0,127}));
        connect(CV123_reg1.y, cold_exchanger.PEM_TT200) annotation (Line(points={{-209,
                -196},{-202,-196},{-202,-194},{-196,-194},{-196,-320},{138,-320},{138,
                -174}}, color={0,0,127}));
        connect(pID_Valve_cond.CV522, heat_exchanger.TFP_CV522) annotation (Line(
              points={{-179,175},{-32,175},{-32,174},{104,174},{104,210},{126,210}},
              color={0,0,127}));
        connect(CV123_reg1.y, heat_exchanger.PEM_TT200) annotation (Line(points={{-209,
                -196},{-196,-196},{-196,-320},{120,-320},{120,202},{126,202}}, color={
                0,0,127}));
        connect(integerExpression.y, heat_exchanger.mode) annotation (Line(points={{101,
                130},{132,130},{132,194}}, color={255,127,0}));
        connect(CV123_reg2.y, pID_Valve_evap.DEG_TT121) annotation (Line(points={{-205,
                -154},{-174,-154},{-174,-226},{-122,-226}}, color={0,0,127}));
        connect(integerExpression.y, pID_Valve_cond.TFP_mode) annotation (Line(points=
               {{101,130},{108,130},{108,110},{-230,110},{-230,170},{-202,170}},
              color={255,127,0}));
        annotation (Diagram(coordinateSystem(extent={{-100,-100},{100,100}})), Icon(
              coordinateSystem(extent={{-100,-100},{100,100}}), graphics={Rectangle(
                extent={{-60,80},{60,20}},
                lineColor={28,108,200},
                fillColor={238,46,47},
                fillPattern=FillPattern.Solid),                           Rectangle(
                extent={{-60,-20},{60,-80}},
                lineColor={28,108,200},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid)}),
          experiment(
            StopTime=1000000,
            Interval=600,
            __Dymola_Algorithm="Dassl"));
      end TFP_duo_simple;

      model TFP_duo_simple_modes
        parameter Modelica.SIunits.MassFlowRate m_flow_hot= 332*1000/3600;
        parameter Modelica.SIunits.MassFlowRate m_flow_cold= 211*1000/3600;
        parameter Real T_set_hot = 61;
        parameter Real T_set_hot_max = 63;
        parameter Real T_set_hot_min = 41;
        parameter Real T_set_cold_max = 14;
        parameter Real T_set_cold = 4;
        Integer mode;

        Fluid.FixedResistances.Junction jun(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={m_flow_hot,-m_flow_hot,-m_flow_hot},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=270,
              origin={10,250})));
        Fluid.Actuators.Valves.TwoWayLinear XV521(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_hot,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          dpValve_nominal=5000)
          annotation (Placement(transformation(extent={{-40,180},{-60,200}})));
        Fluid.Actuators.Valves.TwoWayLinear XV522(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_hot,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          dpValve_nominal=5000)
                              annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={70,230})));
        Fluid.Actuators.Valves.TwoWayLinear CV523(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_hot,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          dpValve_nominal=5000,
          use_inputFilter=false)
                              annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={10,50})));
        Fluid.FixedResistances.Junction jun1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={m_flow_hot,-m_flow_hot,m_flow_hot},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,10},{10,-10}},
              rotation=270,
              origin={-90,190})));
        Fluid.FixedResistances.Junction jun3(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={m_flow_hot,-m_flow_hot,-m_flow_hot},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,10},{10,-10}},
              rotation=90,
              origin={70,190})));
        Fluid.Chillers.ElectricReformulatedEIR TFPA(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water,
          m1_flow_nominal=m_flow_hot,
          m2_flow_nominal=m_flow_cold/2,
          dp1_nominal=70000,
          dp2_nominal=70000,
          per=Buildings.Fluid.Chillers.Data.ElectricReformulatedEIR.ReformEIRChiller_Trane_RTHB_1051kW_5_05COP_Valve())
          annotation (Placement(transformation(extent={{-40,-20},{-20,0}})));
        Fluid.Chillers.ElectricReformulatedEIR TFPB(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water,
          m1_flow_nominal=m_flow_hot,
          m2_flow_nominal=m_flow_cold/2,
          dp1_nominal=70000,
          dp2_nominal=70000,
          per=Buildings.Fluid.Chillers.Data.ElectricReformulatedEIR.ReformEIRChiller_Trane_RTHB_1051kW_5_05COP_Valve())
          annotation (Placement(transformation(extent={{20,-20},{40,0}})));
        Fluid.FixedResistances.Junction jun4(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={m_flow_cold,-m_flow_cold/2,-m_flow_cold/2},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,10},{10,-10}},
              rotation=90,
              origin={50,-50})));
        Fluid.Actuators.Valves.TwoWayLinear XV112A(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_cold/2,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          dpValve_nominal=5000)
                              annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-50,-90})));
        Fluid.Actuators.Valves.TwoWayLinear CV123(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_cold,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          dpValve_nominal=5000,
          use_inputFilter=false)
                              annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=90,
              origin={50,-110})));
        Fluid.FixedResistances.Junction jun5(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={m_flow_cold,-m_flow_cold,-m_flow_cold},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=90,
              origin={50,-250})));
        Fluid.FixedResistances.Junction jun6(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={m_flow_cold/2,-m_flow_cold,m_flow_cold/2},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,10},{10,-10}},
              rotation=270,
              origin={-50,-130})));
        Fluid.Actuators.Valves.TwoWayLinear XV112B(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_cold/2,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          dpValve_nominal=5000)
                              annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={10,-90})));
        Fluid.Sensors.VolumeFlowRate FT521(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={10,90})));
        Controls.Continuous.LimPID FT_PID_521(k=0.1, Ti=10)
          annotation (Placement(transformation(extent={{200,120},{220,140}})));
        Controls.Continuous.LimPID FT_PID_123(k=1, Ti=1)
          annotation (Placement(transformation(extent={{180,-100},{200,-80}})));
        Fluid.Sensors.VolumeFlowRate FT121(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=m_flow_cold)
                                                         annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={50,-140})));
        Fluid.Sensors.TemperatureTwoPort TT111(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=m_flow_cold)
          annotation (Placement(transformation(extent={{-60,-170},{-80,-150}})));
        Fluid.Sensors.TemperatureTwoPort TT511(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100)
          annotation (Placement(transformation(extent={{80,250},{100,270}})));
        Fluid.Sensors.TemperatureTwoPort TT521(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=-90,
              origin={10,120})));
        Modelica.Blocks.Sources.RealExpression XV521_switch(y=if mode == 1 then 1
               else 0)
          annotation (Placement(transformation(extent={{-240,240},{-220,260}})));
        Modelica.Blocks.Sources.RealExpression XV522_switch(y=if mode >= 2 then 1
               else 0)
          annotation (Placement(transformation(extent={{-240,210},{-220,230}})));
        Modelica.Blocks.Sources.RealExpression XV112A_switch(y=if mode >= 1 then 1
               else 0)
          annotation (Placement(transformation(extent={{-240,-40},{-220,-20}})));
        Modelica.Blocks.Sources.RealExpression XV112B_switch(y=if mode == 1 or mode ==
              3 then 1 else 0)
          annotation (Placement(transformation(extent={{-240,-80},{-220,-60}})));
        Modelica.Blocks.Math.RealToBoolean TFPA_on(threshold=0.5)
          annotation (Placement(transformation(extent={{-180,20},{-160,40}})));
        Modelica.Blocks.Math.RealToBoolean TFPB_on
          annotation (Placement(transformation(extent={{-180,-20},{-160,0}})));
        Modelica.Blocks.Sources.RealExpression cons_cold(y=T_set_cold)
          annotation (Placement(transformation(extent={{-240,40},{-220,60}})));
        Modelica.Blocks.Sources.RealExpression CV123_reg(y=if mode == 1 or mode
               == 3 then 166/3600 else 332/3600)
          annotation (Placement(transformation(extent={{140,-100},{160,-80}})));
        Fluid.Sensors.TemperatureTwoPort TT121(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=322/3.6)
                                                         annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=270,
              origin={50,-80})));
        Controls_a.TFP.PID_Valve_evap pID_Valve_evap annotation (Placement(
              transformation(extent={{-120,-240},{-100,-220}})));
        Controls_a.TFP.PID_Valve_cond pID_Valve_cond
          annotation (Placement(transformation(extent={{-200,160},{-180,180}})));
        Modelica.Blocks.Sources.RealExpression CV523_reg(y=211/3600)
          annotation (Placement(transformation(extent={{140,120},{160,140}})));
        Fluid.Actuators.Valves.ThreeWayLinear val(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_cold,
          dpValve_nominal=5000) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=270,
              origin={50,-200})));
        Fluid.Actuators.Valves.ThreeWayLinear val1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_hot,
          dpValve_nominal=5000) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=90,
              origin={10,150})));
        RJF.Cold_exchanger cold_exchanger(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water) annotation (Placement(transformation(
                extent={{140,-180},{160,-160}})));
        Fluid.Movers.FlowControlled_m_flow fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=350/3.6,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_PEG per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          dp_nominal(displayUnit="bar") = 500000,
          constantMassFlowRate=350/3.6) annotation (Placement(transformation(
                extent={{-20,-300},{0,-280}})));
        Fluid.Sources.Boundary_pT bou(
          redeclare package Medium = Buildings.Media.Water,
          T=285.15,
          nPorts=2) annotation (Placement(transformation(extent={{-100,-300},{-80,-280}})));
        Fluid.Sources.Boundary_pT bou2(
          redeclare package Medium = Buildings.Media.Water,
          T=293.15,
          nPorts=3)
          annotation (Placement(transformation(extent={{260,260},{240,280}})));
        Fluid.Movers.FlowControlled_dp fan2(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=1600,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          dp_nominal(displayUnit="bar") = 200000,
          constantHead(displayUnit="bar") = 200000)
          annotation (Placement(transformation(extent={{200,260},{180,280}})));
        RJC.Heat_exchanger heat_exchanger(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water)
          annotation (Placement(transformation(extent={{128,196},{148,216}})));
        Fluid.Sources.Boundary_pT bou1(redeclare package Medium =
              Buildings.Media.Water, nPorts=2)
          annotation (Placement(transformation(extent={{-120,320},{-100,340}})));
        Fluid.Movers.FlowControlled_m_flow fan1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=166/3.6,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_PEC per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          dp_nominal=500000,
          constantMassFlowRate=0)
          annotation (Placement(transformation(extent={{-60,320},{-40,340}})));
        Modelica.Blocks.Sources.RealExpression CV123_reg1(y=20 + 273.15)
          annotation (Placement(transformation(extent={{-230,-206},{-210,-186}})));
        Modelica.Blocks.Sources.IntegerExpression integerExpression(y=mode)
          annotation (Placement(transformation(extent={{80,120},{100,140}})));
        Modelica.Blocks.Sources.RealExpression CV123_reg2(y=50 + 273.15)
          annotation (Placement(transformation(extent={{-226,-164},{-206,-144}})));
        Modelica.StateGraph.InitialStep initialStep
          annotation (Placement(transformation(extent={{-180,-400},{-160,-380}})));
        Modelica.StateGraph.Transition transition1(enableTimer=false,waitTime=2000)
          annotation (Placement(transformation(extent={{-140,-400},{-120,-380}})));
        Modelica.StateGraph.StepWithSignal stepWithSignal
          annotation (Placement(transformation(extent={{-100,-400},{-80,-380}})));
        Modelica.StateGraph.Transition transition2(enableTimer=true, waitTime=2000)
          annotation (Placement(transformation(extent={{-60,-400},{-40,-380}})));
        Modelica.StateGraph.StepWithSignal stepWithSignal1
          annotation (Placement(transformation(extent={{-20,-400},{0,-380}})));
        Modelica.StateGraph.Transition transition3(enableTimer=true, waitTime=2000)
          annotation (Placement(transformation(extent={{20,-400},{40,-380}})));
        Modelica.StateGraph.StepWithSignal stepWithSignal2
          annotation (Placement(transformation(extent={{60,-400},{80,-380}})));
        Modelica.StateGraph.Transition transition4(enableTimer=true, waitTime=2000)
          annotation (Placement(transformation(extent={{100,-400},{120,-380}})));
        inner Modelica.StateGraph.StateGraphRoot stateGraphRoot
          annotation (Placement(transformation(extent={{-200,-440},{-180,-420}})));
        Modelica.Blocks.Math.BooleanToInteger booleanToInteger
          annotation (Placement(transformation(extent={{-80,-440},{-60,-420}})));
        Modelica.Blocks.Math.BooleanToInteger booleanToInteger1(integerTrue=2)
          annotation (Placement(transformation(extent={{0,-440},{20,-420}})));
        Modelica.Blocks.Math.BooleanToInteger booleanToInteger2(integerTrue=3)
          annotation (Placement(transformation(extent={{80,-440},{100,-420}})));
        Modelica.Blocks.MathInteger.Sum sum1(nu=3)
          annotation (Placement(transformation(extent={{120,-480},{140,-460}})));
      equation
        mode = sum1.y;
        connect(jun1.port_3, XV521.port_b)
          annotation (Line(points={{-80,190},{-60,190}},  color={238,46,47},
            thickness=0.5));
        connect(jun.port_3, jun1.port_1) annotation (Line(points={{0,250},{-90,
                250},{-90,200}},
                            color={238,46,47},
            thickness=0.5));
        connect(CV523.port_b, TFPA.port_a1) annotation (Line(points={{10,40},{10,20},{
                -60,20},{-60,-4},{-40,-4}}, color={238,46,47},
            thickness=0.5));
        connect(TFPA.port_b1, TFPB.port_a1)
          annotation (Line(points={{-20,-4},{20,-4}}, color={238,46,47},
            thickness=0.5));
        connect(jun4.port_2, TFPB.port_a2)
          annotation (Line(points={{50,-40},{50,-16},{40,-16}}, color={0,127,255},
            thickness=0.5));

        connect(jun4.port_3, TFPA.port_a2) annotation (Line(points={{40,-50},{-10,-50},
                {-10,-16},{-20,-16}}, color={0,127,255},
            thickness=0.5));
        connect(XV112A.port_a, TFPA.port_b2) annotation (Line(points={{-50,-80},{-50,-16},
                {-40,-16}}, color={0,127,255},
            thickness=0.5));
        connect(XV112B.port_a, TFPB.port_b2)
          annotation (Line(points={{10,-80},{10,-16},{20,-16}}, color={0,127,255},
            thickness=0.5));

        connect(XV112A.port_b, jun6.port_1)
          annotation (Line(points={{-50,-100},{-50,-120}}, color={0,127,255},
            thickness=0.5));
        connect(jun6.port_3, XV112B.port_b) annotation (Line(points={{-40,-130},{
                10,-130},{10,-100}}, color={0,127,255},
            thickness=0.5));
        connect(TFPB.port_b1, jun3.port_1)
          annotation (Line(points={{40,-4},{70,-4},{70,180}}, color={238,46,47},
            thickness=0.5));
        connect(jun3.port_3, XV521.port_a)
          annotation (Line(points={{60,190},{-40,190}}, color={238,46,47},
            thickness=0.5));
        connect(jun3.port_2, XV522.port_a)
          annotation (Line(points={{70,200},{70,220}}, color={238,46,47},
            thickness=0.5));
        connect(FT521.port_b, CV523.port_a)
          annotation (Line(points={{10,80},{10,60}}, color={238,46,47},
            thickness=0.5));
        connect(FT521.V_flow, FT_PID_521.u_m) annotation (Line(points={{21,90},{50,90},
                {50,100},{210,100},{210,118}}, color={0,0,127}));
        connect(FT_PID_521.y, CV523.y) annotation (Line(points={{221,130},{240,130},{240,
                50},{22,50}}, color={0,0,127}));
        connect(CV123.port_a, FT121.port_a)
          annotation (Line(points={{50,-120},{50,-130}}, color={0,127,255},
            thickness=0.5));
        connect(FT121.V_flow, FT_PID_123.u_m) annotation (Line(points={{61,-140},
                {190,-140},{190,-102}},
                                   color={0,0,127}));
        connect(FT_PID_123.y, CV123.y) annotation (Line(points={{201,-90},{220,
                -90},{220,-68},{80,-68},{80,-110},{62,-110}},
                                                  color={0,0,127}));
        connect(jun6.port_2, TT111.port_a) annotation (Line(points={{-50,-140},{
                -50,-160},{-60,-160}}, color={0,127,255},
            thickness=0.5));
        connect(XV522.port_b, TT511.port_a) annotation (Line(points={{70,240},{70,
                260},{80,260}}, color={238,46,47},
            thickness=0.5));
        connect(TT521.port_b, FT521.port_a)
          annotation (Line(points={{10,110},{10,100}}, color={238,46,47},
            thickness=0.5));
        connect(XV521_switch.y, XV521.y) annotation (Line(points={{-219,250},{
                -160,250},{-160,240},{-50,240},{-50,202}},
                                                 color={0,0,127}));
        connect(XV522_switch.y, XV522.y) annotation (Line(points={{-219,220},{
                -160,220},{-160,230},{58,230}},
                                      color={0,0,127}));
        connect(XV112A_switch.y, XV112A.y) annotation (Line(points={{-219,-30},{
                -152,-30},{-152,-50},{-30,-50},{-30,-90},{-38,-90}},
                                                           color={0,0,127}));
        connect(XV112B_switch.y, XV112B.y) annotation (Line(points={{-219,-70},{
                30,-70},{30,-90},{22,-90}},
                                    color={0,0,127}));
        connect(XV112A_switch.y, TFPA_on.u) annotation (Line(points={{-219,-30},{
                -192,-30},{-192,30},{-182,30}},
                                           color={0,0,127}));
        connect(XV112B_switch.y, TFPB_on.u) annotation (Line(points={{-219,-70},{
                -200,-70},{-200,-10},{-182,-10}},
                                             color={0,0,127}));
        connect(TFPB_on.y, TFPB.on) annotation (Line(points={{-159,-10},{-64,-10},
                {-64,-24},{4,-24},{4,-7},{18,-7}},
                                              color={255,0,255}));
        connect(TFPA_on.y, TFPA.on) annotation (Line(points={{-159,30},{-140,30},
                {-140,-7},{-42,-7}},
                               color={255,0,255}));
        connect(cons_cold.y, TFPA.TSet) annotation (Line(points={{-219,50},{-120,
                50},{-120,-13},{-42,-13}},
                                      color={0,0,127}));
        connect(cons_cold.y, TFPB.TSet) annotation (Line(points={{-219,50},{-120,
                50},{-120,8},{8,8},{8,-13},{18,-13}},
                                                 color={0,0,127}));
        connect(CV123_reg.y, FT_PID_123.u_s)
          annotation (Line(points={{161,-90},{178,-90}}, color={0,0,127}));
        connect(jun4.port_1, TT121.port_b)
          annotation (Line(points={{50,-60},{50,-70}}, color={0,127,255},
            thickness=0.5));
        connect(TT121.port_a, CV123.port_b)
          annotation (Line(points={{50,-90},{50,-100}}, color={0,127,255},
            thickness=0.5));
        connect(pID_Valve_evap.TFP_TT121, TT121.T) annotation (Line(points={{-122,
                -234},{-220,-234},{-220,-262},{34,-262},{34,-80},{39,-80}}, color=
               {0,0,127}));
        connect(TT511.T, pID_Valve_evap.TFP_TT511) annotation (Line(points={{90,271},
                {90,300},{-250,300},{-250,-252},{-208,-252},{-208,-238},{-122,
                -238}},      color={0,0,127}));
        connect(TT511.T, pID_Valve_cond.TFP_TT511) annotation (Line(points={{90,271},
                {90,300},{-250,300},{-250,176},{-202,176}},      color={0,0,127}));
        connect(TT521.T, pID_Valve_cond.TFP_TT521) annotation (Line(points={{-1,
                120},{-220,120},{-220,162},{-202,162}}, color={0,0,127}));
        connect(CV523_reg.y, FT_PID_521.u_s)
          annotation (Line(points={{161,130},{198,130}}, color={0,0,127}));
        connect(val.port_1, jun5.port_2) annotation (Line(
            points={{50,-210},{50,-240}},
            color={0,127,255},
            thickness=0.5));
        connect(pID_Valve_evap.CV121, val.y) annotation (Line(points={{-99,-235},
                {80,-235},{80,-200},{62,-200}}, color={0,0,127}));
        connect(FT121.port_b, val.port_2) annotation (Line(
            points={{50,-150},{50,-190},{50,-190}},
            color={0,127,255},
            thickness=0.5));
        connect(pID_Valve_cond.CV521, val1.y) annotation (Line(points={{-179,165},{-31.5,
                165},{-31.5,150},{-2,150}}, color={0,0,127}));
        connect(val1.port_2, TT521.port_a) annotation (Line(
            points={{10,140},{10,130}},
            color={238,46,47},
            thickness=0.5));
        connect(val1.port_1, jun.port_2) annotation (Line(
            points={{10,160},{10,240}},
            color={238,46,47},
            thickness=0.5));
        connect(bou.ports[1], fan.port_a) annotation (Line(points={{-80,-288},{-50,-288},
                {-50,-290},{-20,-290}}, color={0,127,255}));
        connect(fan.port_b, jun5.port_1) annotation (Line(points={{0,-290},{50,-290},{
                50,-260}}, color={0,127,255}));
        connect(jun5.port_3, cold_exchanger.port_a2) annotation (Line(points={{60,-250},
                {180,-250},{180,-176},{160,-176}}, color={0,127,255}));
        connect(cold_exchanger.port_b2, val.port_3) annotation (Line(points={{140,-176},
                {20,-176},{20,-200},{40,-200}}, color={0,127,255}));
        connect(TT111.port_b, bou.ports[2]) annotation (Line(points={{-80,-160},{-90,-160},
                {-90,-200},{-60,-200},{-60,-292},{-80,-292}}, color={0,127,255}));
        connect(bou1.ports[1], fan1.port_a) annotation (Line(points={{-100,332},{-80,332},
                {-80,330},{-60,330}}, color={0,127,255}));
        connect(fan1.port_b, jun.port_1)
          annotation (Line(points={{-40,330},{10,330},{10,260}}, color={0,127,255}));
        connect(TT511.port_b, bou1.ports[2]) annotation (Line(points={{100,260},{120,260},
                {120,352},{-92,352},{-92,328},{-100,328}}, color={0,127,255}));
        connect(bou2.ports[1], fan2.port_a) annotation (Line(points={{240,
                272.667},{220,272.667},{220,270},{200,270}},
                                               color={0,127,255}));
        connect(fan2.port_b, heat_exchanger.port_a1) annotation (Line(points={{180,270},
                {140,270},{140,240},{114,240},{114,212},{128,212}}, color={0,127,255}));
        connect(heat_exchanger.port_b1, bou2.ports[2]) annotation (Line(points={{148,212},
                {154,212},{154,214},{240,214},{240,270}}, color={0,127,255}));
        connect(fan2.port_b, cold_exchanger.port_a1) annotation (Line(points={{180,270},
                {170,270},{170,-150},{122,-150},{122,-164},{140,-164}}, color={0,127,255}));
        connect(cold_exchanger.port_b1, bou2.ports[3]) annotation (Line(points={{160,
                -164},{232,-164},{232,266},{240,266},{240,267.333}},
                                                               color={0,127,255}));
        connect(jun1.port_2, heat_exchanger.port_a2) annotation (Line(points={{-90,180},
                {-90,170},{160,170},{160,200},{148,200}}, color={238,46,47},
            thickness=0.5));
        connect(heat_exchanger.port_b2, val1.port_3) annotation (Line(points={{128,200},
                {100,200},{100,150},{20,150}}, color={238,46,47},
            thickness=0.5));
        connect(pID_Valve_evap.CV122, cold_exchanger.TFP_CV122) annotation (Line(
              points={{-99,-225},{126,-225},{126,-166},{138,-166}}, color={0,0,127}));
        connect(CV123_reg1.y, pID_Valve_evap.PEM_TT200) annotation (Line(points={{-209,
                -196},{-164,-196},{-164,-222},{-122,-222}}, color={0,0,127}));
        connect(CV123_reg1.y, cold_exchanger.PEM_TT200) annotation (Line(points={{-209,
                -196},{-202,-196},{-202,-194},{-196,-194},{-196,-320},{138,-320},{138,
                -174}}, color={0,0,127}));
        connect(pID_Valve_cond.CV522, heat_exchanger.TFP_CV522) annotation (Line(
              points={{-179,175},{-32,175},{-32,174},{104,174},{104,210},{126,210}},
              color={0,0,127}));
        connect(CV123_reg1.y, heat_exchanger.PEM_TT200) annotation (Line(points={{-209,
                -196},{-196,-196},{-196,-320},{120,-320},{120,202},{126,202}}, color={
                0,0,127}));
        connect(integerExpression.y, heat_exchanger.mode) annotation (Line(points={{101,
                130},{132,130},{132,194}}, color={255,127,0}));
        connect(CV123_reg2.y, pID_Valve_evap.DEG_TT121) annotation (Line(points={{-205,
                -154},{-174,-154},{-174,-226},{-122,-226}}, color={0,0,127}));
        connect(integerExpression.y, pID_Valve_cond.TFP_mode) annotation (Line(points=
               {{101,130},{108,130},{108,110},{-230,110},{-230,170},{-202,170}},
              color={255,127,0}));
        connect(initialStep.outPort[1], transition1.inPort)
          annotation (Line(points={{-159.5,-390},{-134,-390}}, color={0,0,0}));
        connect(transition1.outPort, stepWithSignal.inPort[1])
          annotation (Line(points={{-128.5,-390},{-101,-390}}, color={0,0,0}));
        connect(transition2.outPort, stepWithSignal1.inPort[1])
          annotation (Line(points={{-48.5,-390},{-21,-390}}, color={0,0,0}));
        connect(transition3.outPort, stepWithSignal2.inPort[1])
          annotation (Line(points={{31.5,-390},{59,-390}}, color={0,0,0}));
        connect(stepWithSignal.outPort[1], transition2.inPort)
          annotation (Line(points={{-79.5,-390},{-54,-390}}, color={0,0,0}));
        connect(stepWithSignal1.outPort[1], transition3.inPort)
          annotation (Line(points={{0.5,-390},{26,-390}}, color={0,0,0}));
        connect(stepWithSignal2.outPort[1], transition4.inPort)
          annotation (Line(points={{80.5,-390},{106,-390}}, color={0,0,0}));
        connect(transition4.outPort, initialStep.inPort[1]) annotation (Line(points={{
                111.5,-390},{132,-390},{132,-360},{-194,-360},{-194,-390},{-181,-390}},
              color={0,0,0}));
        connect(booleanToInteger.u, stepWithSignal.active) annotation (Line(points={{-82,
                -430},{-90,-430},{-90,-401}}, color={255,0,255}));
        connect(stepWithSignal1.active, booleanToInteger1.u) annotation (Line(points={
                {-10,-401},{-10,-430},{-2,-430}}, color={255,0,255}));
        connect(stepWithSignal2.active, booleanToInteger2.u) annotation (Line(points={
                {70,-401},{70,-430},{78,-430}}, color={255,0,255}));
        connect(booleanToInteger.y, sum1.u[1]) annotation (Line(points={{-59,
                -430},{-40,-430},{-40,-465.333},{120,-465.333}},
                                                      color={255,127,0}));
        connect(booleanToInteger1.y, sum1.u[2]) annotation (Line(points={{21,-430},{60,
                -430},{60,-470},{120,-470}}, color={255,127,0}));
        connect(booleanToInteger2.y, sum1.u[3]) annotation (Line(points={{101,
                -430},{110,-430},{110,-474.667},{120,-474.667}},
                                                      color={255,127,0}));
        annotation (Diagram(coordinateSystem(extent={{-100,-100},{100,100}})), Icon(
              coordinateSystem(extent={{-100,-100},{100,100}}), graphics={Rectangle(
                extent={{-60,80},{60,20}},
                lineColor={28,108,200},
                fillColor={238,46,47},
                fillPattern=FillPattern.Solid),                           Rectangle(
                extent={{-60,-20},{60,-80}},
                lineColor={28,108,200},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid)}),
          experiment(
            StopTime=1000000,
            Interval=600,
            __Dymola_Algorithm="Dassl"));
      end TFP_duo_simple_modes;

      model sst_caly_tfp
        import Fluid;
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource("modelica://Buildings/Data/sst/froid_caly_ref_1h.txt"),
          columns={2,3,4,5,6,7,8,9,10,11,12,13},
          smoothness=Modelica.Blocks.Types.Smoothness.LinearSegments)
          annotation (Placement(transformation(extent={{-180,60},{-160,80}})));

        Fluid.Sources.MassFlowSource_T boundary(
          redeclare package Medium = Buildings.Media.Water,
          use_m_flow_in=true,
          use_T_in=true,
          nPorts=1)
          annotation (Placement(transformation(extent={{100,20},{80,40}})));
        Fluid.Sources.Boundary_pT bou(redeclare package Medium =
              Buildings.Media.Water, nPorts=1)
          annotation (Placement(transformation(extent={{-100,20},{-80,40}})));
        Fluid.Sensors.TemperatureTwoPort T_in_sec(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=180,
              origin={50,30})));
        Fluid.Sensors.TemperatureTwoPort T_out_sec(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=180,
              origin={-30,30})));
        Fluid.HeatExchangers.PlateHeatExchangerEffectivenessNTU hex(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=400000/(4185*15),
          m2_flow_nominal=400000/(4185*15),
          dp1_nominal(displayUnit="kPa") = 70000,
          dp2_nominal(displayUnit="kPa") = 70000,
          configuration=Buildings.Fluid.Types.HeatExchangerConfiguration.CounterFlow,
          use_Q_flow_nominal=false,
          Q_flow_nominal(displayUnit="kW") = 400000,
          T_a1_nominal=288.15,
          T_a2_nominal=278.15,
          eps_nominal=0.72)
          annotation (Placement(transformation(extent={{20,0},{0,20}})));

        Fluid.Sensors.TemperatureTwoPort T_in_prim(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={-30,-50})));
        Fluid.Sensors.TemperatureTwoPort T_out_prim(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={50,-30})));
        Fluid.Sources.Boundary_pT bou1(redeclare package Medium =
              Buildings.Media.Water,
          use_T_in=true,
          nPorts=2)
          annotation (Placement(transformation(extent={{260,-40},{240,-20}})));
        Modelica.Blocks.Math.Gain gain(k=1/3.6)
          annotation (Placement(transformation(extent={{-140,60},{-120,80}})));
        Modelica.Blocks.Interfaces.RealOutput temperature[8](final unit="K",
            displayUnit="degC")
          annotation (Placement(transformation(extent={{-180,20},{-160,40}})));
        Fluid.Actuators.Valves.TwoWayLinear val(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=20,
          dpValve_nominal(displayUnit="Pa") = 5000,
          use_inputFilter=false)
          annotation (Placement(transformation(extent={{-80,-60},{-60,-40}})));
        Controls.Continuous.LimPID PID_T(
          controllerType=Modelica.Blocks.Types.SimpleController.P,
          k=0.1,
          Ti=300,
          initType=Modelica.Blocks.Types.InitPID.NoInit,
          reverseActing=false) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-90,-10})));
        Fluid.Movers.FlowControlled_m_flow fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=500/3.6,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_PEG per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          addPowerToMedium=false,
          dp_nominal(displayUnit="bar") = 1300000,
          constantMassFlowRate=500/3.6) annotation (Placement(transformation(
                extent={{178,-120},{158,-100}})));
        Fluid.Sensors.RelativePressure senRelPre(redeclare package Medium =
              Buildings.Media.Water) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={70,-70})));
        Fluid.FixedResistances.Junction jun(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={500/3.6,-20,-500/3.6 + 20},
          dp_nominal={0,0,-20000})   annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={120,-110})));
        Fluid.FixedResistances.Junction jun1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={20,500/3.6 - 20,-500/3.6},
          dp_nominal={0,0,0}) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={120,-30})));
        Fluid.Sources.Boundary_pT bou2(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=true,
          T=293.15,
          nPorts=3)
          annotation (Placement(transformation(extent={{406,-130},{386,-110}})));
        Fluid.Sensors.TemperatureTwoPort T_out_prim1(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={170,-28})));
        Fluid.Movers.FlowControlled_dp fan1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=850/3.6,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          dp_nominal(displayUnit="bar") = 300000,
          constantHead(displayUnit="bar") = 300000)
          annotation (Placement(transformation(extent={{350,-120},{330,-100}})));
        Buildings.Applications.DHC_Thassalia.TFP.TFP_duo_simple tFP_duo_simple(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          redeclare package Medium3 = Buildings.Media.Water,
          redeclare package Medium4 = Buildings.Media.Water,
          m1_flow_nominal=332/3.6,
          m2_flow_nominal=332/3.6,
          m3_flow_nominal=332/3.6,
          m4_flow_nominal=332/3.6) annotation (Placement(transformation(extent=
                  {{220,-160},{240,-140}})));
        RJC.Heat_exchanger heat_exchanger(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water) annotation (Placement(transformation(
                extent={{304,-162},{324,-142}})));
        RJF.Cold_exchanger cold_exchanger(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water) annotation (Placement(transformation(
                extent={{302,-230},{322,-210}})));
        Fluid.Sensors.TemperatureTwoPort PEM_TT200(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=180,
              origin={310,-110})));
        Modelica.Blocks.Sources.IntegerExpression integerExpression(y=1)
          annotation (Placement(transformation(extent={{180,-220},{200,-200}})));
        Modelica.Blocks.Sources.RealExpression realExpression(y=50 + 273.15)
          annotation (Placement(transformation(extent={{180,-250},{200,-230}})));
        Fluid.Movers.FlowControlled_m_flow fan2(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=500/3.6,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_PEG per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          addPowerToMedium=false,
          dp_nominal(displayUnit="bar") = 1300000,
          constantMassFlowRate=0)       annotation (Placement(transformation(
                extent={{10,-10},{-10,10}},
              rotation=90,
              origin={208,-110})));
        Fluid.Sources.Boundary_pT bou3(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=false,
          T=313.15,
          nPorts=2)
          annotation (Placement(transformation(extent={{254,-90},{234,-70}})));
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable1(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource(
              "modelica://Buildings/Data/pem.txt"),
          columns={2,3,4},
          smoothness=Modelica.Blocks.Types.Smoothness.LinearSegments)
          annotation (Placement(transformation(extent={{360,-60},{380,-40}})));
      equation
        for k in [1:8] loop
          temperature[k] = combiTimeTable.y[k];
        end for;
        connect(boundary.ports[1],T_in_sec. port_a)
          annotation (Line(points={{80,30},{60,30}}, color={0,127,255}));
        connect(T_in_sec.port_b,hex. port_a1) annotation (Line(points={{40,30},
                {30,30},{30,16},{20,16}},
                                  color={0,127,255}));
        connect(bou.ports[1],T_out_sec. port_b)
          annotation (Line(points={{-80,30},{-40,30}}, color={0,127,255}));
        connect(T_out_sec.port_a,hex. port_b1) annotation (Line(points={{-20,30},
                {-10,30},{-10,16},{0,16}},
                                      color={0,127,255}));
        connect(T_in_prim.port_b, hex.port_a2) annotation (Line(points={{-20,-50},
                {-12,-50},{-12,4},{0,4}},
                                       color={0,127,255}));
        connect(hex.port_b2, T_out_prim.port_a) annotation (Line(points={{20,4},{
                30,4},{30,-30},{40,-30}},
                                    color={0,127,255}));
        connect(gain.y, boundary.m_flow_in) annotation (Line(points={{-119,70},
                {110,70},{110,38},{102,38}},
                                    color={0,0,127}));
        connect(combiTimeTable.y[10], gain.u)
          annotation (Line(points={{-159,70},{-142,70}}, color={0,0,127}));
        connect(combiTimeTable.y[4], boundary.T_in) annotation (Line(points={{
                -159,70},{-150,70},{-150,100},{120,100},{120,34},{102,34}},
              color={0,0,127}));
        connect(val.port_b, T_in_prim.port_a) annotation (Line(points={{-60,-50},
                {-52,-50},{-52,-50},{-40,-50}}, color={0,127,255}));
        connect(combiTimeTable.y[3], PID_T.u_s) annotation (Line(points={{-159,
                70},{-150,70},{-150,-10},{-102,-10}}, color={0,0,127}));
        connect(T_out_sec.T, PID_T.u_m) annotation (Line(points={{-30,41},{-30,
                52},{-110,52},{-110,-30},{-90,-30},{-90,-22}}, color={0,0,127}));
        connect(PID_T.y, val.y) annotation (Line(points={{-79,-10},{-70,-10},{
                -70,-38}}, color={0,0,127}));
        connect(jun.port_1, fan.port_b)
          annotation (Line(points={{130,-110},{158,-110}}, color={0,127,255}));
        connect(T_out_prim.port_b, jun1.port_1)
          annotation (Line(points={{60,-30},{110,-30}}, color={0,127,255}));
        connect(senRelPre.port_b, T_out_prim.port_b) annotation (Line(points={{
                70,-60},{70,-30},{60,-30}}, color={0,127,255}));
        connect(jun.port_2, val.port_a) annotation (Line(points={{110,-110},{
                -100,-110},{-100,-50},{-80,-50}}, color={0,127,255}));
        connect(senRelPre.port_a, jun.port_2) annotation (Line(points={{70,-80},
                {70,-110},{110,-110}}, color={0,127,255}));
        connect(jun.port_3, jun1.port_3)
          annotation (Line(points={{120,-100},{120,-40}}, color={0,127,255}));
        connect(jun1.port_2, T_out_prim1.port_a) annotation (Line(points={{130,
                -30},{150,-30},{150,-28},{160,-28}}, color={0,127,255}));
        connect(T_out_prim1.T, bou1.T_in) annotation (Line(points={{170,-17},{
                170,-6},{280,-6},{280,-26},{262,-26}}, color={0,0,127}));
        connect(bou2.ports[1], fan1.port_a) annotation (Line(points={{386,
                -117.333},{372,-117.333},{372,-110},{350,-110}},
                                            color={0,127,255}));
        connect(heat_exchanger.port_b1, bou2.ports[2]) annotation (Line(points=
                {{324,-146},{354,-146},{354,-120},{386,-120}}, color={0,127,255}));
        connect(fan1.port_b, PEM_TT200.port_a)
          annotation (Line(points={{330,-110},{320,-110}}, color={0,127,255}));
        connect(PEM_TT200.port_b, heat_exchanger.port_a1) annotation (Line(
              points={{300,-110},{280,-110},{280,-146},{304,-146}}, color={0,
                127,255}));
        connect(PEM_TT200.port_b, cold_exchanger.port_a1) annotation (Line(
              points={{300,-110},{282,-110},{282,-214},{302,-214}}, color={0,
                127,255}));
        connect(cold_exchanger.port_b1, bou2.ports[3]) annotation (Line(points={{322,
                -214},{352,-214},{352,-122.667},{386,-122.667}},       color={0,
                127,255}));
        connect(tFP_duo_simple.port_b2, heat_exchanger.port_a2) annotation (
            Line(points={{220,-147},{218,-147},{218,-148},{204,-148},{204,-182},
                {342,-182},{342,-158},{324,-158}}, color={0,127,255}));
        connect(heat_exchanger.port_b2, tFP_duo_simple.port_a2) annotation (
            Line(points={{304,-158},{274,-158},{274,-147},{240,-147}}, color={0,
                127,255}));
        connect(tFP_duo_simple.port_b4, fan.port_a) annotation (Line(points={{
                220,-158.5},{190,-158.5},{190,-110},{178,-110}}, color={0,127,
                255}));
        connect(cold_exchanger.port_b2, tFP_duo_simple.port_a3) annotation (
            Line(points={{302,-226},{214,-226},{214,-153.2},{220,-153.2}},
              color={0,127,255}));
        connect(tFP_duo_simple.port_b3, cold_exchanger.port_a2) annotation (
            Line(points={{240,-153.1},{248,-153.1},{248,-152},{264,-152},{264,
                -250},{342,-250},{342,-226},{322,-226}}, color={0,127,255}));
        connect(tFP_duo_simple.CV522_pid, heat_exchanger.TFP_CV522) annotation (
           Line(points={{243,-144},{286,-144},{286,-148},{302,-148}}, color={0,
                0,127}));
        connect(PEM_TT200.T, heat_exchanger.PEM_TT200) annotation (Line(points=
                {{310,-99},{310,-84},{292,-84},{292,-156},{302,-156}}, color={0,
                0,127}));
        connect(PEM_TT200.T, cold_exchanger.PEM_TT200) annotation (Line(points=
                {{310,-99},{310,-88},{288,-88},{288,-224},{300,-224}}, color={0,
                0,127}));
        connect(tFP_duo_simple.CV122_pid, cold_exchanger.TFP_CV122) annotation (
           Line(points={{243,-156},{272,-156},{272,-216},{300,-216}}, color={0,
                0,127}));
        connect(PEM_TT200.T, tFP_duo_simple.PEM_TT200) annotation (Line(points=
                {{310,-99},{310,-84},{268,-84},{268,-174},{230,-174},{230,-162}},
              color={0,0,127}));
        connect(realExpression.y, tFP_duo_simple.DEG_TT121) annotation (Line(
              points={{201,-240},{218,-240},{218,-242},{238,-242},{238,-162}},
              color={0,0,127}));
        connect(integerExpression.y, tFP_duo_simple.mode) annotation (Line(
              points={{201,-210},{212,-210},{212,-162},{222,-162}}, color={255,
                127,0}));
        connect(integerExpression.y, heat_exchanger.mode) annotation (Line(
              points={{201,-210},{254,-210},{254,-164},{308,-164}}, color={255,
                127,0}));
        connect(tFP_duo_simple.port_a1, fan2.port_b) annotation (Line(points={{
                220,-142},{208,-142},{208,-120}}, color={0,127,255}));
        connect(fan2.port_a, bou3.ports[1]) annotation (Line(points={{208,-100},
                {208,-78},{234,-78}}, color={0,127,255}));
        connect(tFP_duo_simple.port_b1, bou3.ports[2]) annotation (Line(points=
                {{240,-142},{238,-142},{238,-94},{228,-94},{228,-82},{234,-82}},
              color={0,127,255}));
        connect(combiTimeTable1.y[1], bou2.T_in) annotation (Line(points={{381,
                -50},{394,-50},{394,-48},{420,-48},{420,-116},{408,-116}},
              color={0,0,127}));
        connect(T_out_prim1.port_b, bou1.ports[1]) annotation (Line(points={{
                180,-28},{210,-28},{210,-28},{240,-28}}, color={0,127,255}));
        connect(tFP_duo_simple.port_a4, bou1.ports[2]) annotation (Line(points=
                {{240,-158},{246,-158},{246,-192},{186,-192},{186,-38},{240,-38},
                {240,-32}}, color={0,127,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{
                  -220,-200},{220,200}})),                             Diagram(
              coordinateSystem(preserveAspectRatio=false, extent={{-220,-200},{
                  220,200}})),
          experiment(
            StopTime=13132800,
            Interval=3600,
            __Dymola_Algorithm="Dassl"));
      end sst_caly_tfp;

      model tfp_hope
        import Fluid;
        Modelica.Blocks.Sources.BooleanExpression booleanExpression(y=true)
          annotation (Placement(transformation(extent={{-126,50},{-106,70}})));
        Modelica.Blocks.Sources.RealExpression realExpression2(y=4 + 273.15)
          annotation (Placement(transformation(extent={{-130,24},{-110,44}})));
        Fluid.Sensors.TemperatureTwoPort TT1(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=322/3.6)
                                                         annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=90,
              origin={-82,-8})));
        Fluid.Sensors.TemperatureTwoPort TT121(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=322/3.6)
                                                         annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=270,
              origin={-20,-6})));
        Buildings.Fluid.Movers.FlowControlled_m_flow fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=500/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_PEG per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          addPowerToMedium=false,
          dp_nominal(displayUnit="bar") = 1000000,
          constantMassFlowRate=166/3.6)
          annotation (Placement(transformation(extent={{-100,-60},{-80,-40}})));
        Fluid.Sources.Boundary_pT bou(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=false,
          T=283.15,
          nPorts=2)
          annotation (Placement(transformation(extent={{-170,-74},{-150,-54}})));
        Buildings.Fluid.Movers.FlowControlled_m_flow fan1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=500/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_PEG per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          addPowerToMedium=false,
          dp_nominal(displayUnit="bar") = 1000000,
          constantMassFlowRate=211/3.6)
          annotation (Placement(transformation(extent={{-100,100},{-80,120}})));
        Fluid.Sources.Boundary_pT bou1(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=false,
          T=313.15,
          nPorts=2)
          annotation (Placement(transformation(extent={{-140,82},{-120,102}})));
        Fluid.Sensors.TemperatureTwoPort TT2(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=322/3.6)
                                                         annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=270,
              origin={-36,70})));
        Fluid.Sensors.TemperatureTwoPort TT3(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=322/3.6)
                                                         annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=90,
              origin={-74,72})));
        Buildings.Fluid.Chillers.Carnot_TEva chi(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=211/3.6,
          m2_flow_nominal=166/3.6,
          QEva_flow_nominal=-166/3.6*4185*(15),
          dTEva_nominal=-15,
          dTCon_nominal=15,
          use_eta_Carnot_nominal=true,
          etaCarnot_nominal=0.95,
          COP_nominal=6.5,
          TCon_nominal=313.15,
          dp1_nominal=40000,
          dp2_nominal=40000,
          QEva_flow_min(displayUnit="kW") = -4000000)
          annotation (Placement(transformation(extent={{-64,20},{-44,40}})));
      equation
        connect(bou.ports[1], fan.port_a) annotation (Line(points={{-150,-62},{
                -138,-62},{-138,-50},{-100,-50}}, color={0,127,255}));
        connect(fan.port_b, TT121.port_a) annotation (Line(points={{-80,-50},{
                -60,-50},{-60,-16},{-20,-16}}, color={0,127,255}));
        connect(TT1.port_b, bou.ports[2]) annotation (Line(points={{-82,-18},{
                -116,-18},{-116,-66},{-150,-66}}, color={0,127,255}));
        connect(bou1.ports[1], fan1.port_a) annotation (Line(points={{-120,94},
                {-110,94},{-110,110},{-100,110}}, color={0,127,255}));
        connect(TT2.port_b, bou1.ports[2]) annotation (Line(points={{-36,80},{
                -36,90},{-120,90}}, color={0,127,255}));
        connect(fan1.port_b, TT3.port_a) annotation (Line(points={{-80,110},{
                -74,110},{-74,82}}, color={0,127,255}));
        connect(realExpression2.y, chi.TSet) annotation (Line(points={{-109,34},
                {-86,34},{-86,39},{-66,39}}, color={0,0,127}));
        connect(TT3.port_b, chi.port_a1) annotation (Line(points={{-74,62},{-76,
                62},{-76,36},{-64,36}}, color={0,127,255}));
        connect(chi.port_b1, TT2.port_a) annotation (Line(points={{-44,36},{-36,
                36},{-36,60}}, color={0,127,255}));
        connect(TT1.port_a, chi.port_b2) annotation (Line(points={{-82,2},{-82,
                24},{-64,24}}, color={0,127,255}));
        connect(TT121.port_b, chi.port_a2) annotation (Line(points={{-20,4},{
                -20,24},{-44,24}}, color={0,127,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end tfp_hope;

      model tfp_nexi
        RJC.Heat_exchanger heat_exchanger(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water)
          annotation (Placement(transformation(extent={{40,40},{60,60}})));
        RJF.Cold_exchanger cold_exchanger(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water)
          annotation (Placement(transformation(extent={{40,-40},{60,-20}})));
        Fluid.Sources.Boundary_pT bou2(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=true,
          T=278.15,
          nPorts=3)
          annotation (Placement(transformation(extent={{-60,100},{-40,120}})));
        Buildings.Fluid.Movers.FlowControlled_dp fan2(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=800/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          dp_nominal(displayUnit="bar") = 200000,
          constantHead(displayUnit="bar") = 200000)
          annotation (Placement(transformation(extent={{0,100},{20,120}})));
        Buildings.Fluid.Sources.Boundary_pT bou(redeclare package Medium =
              Buildings.Media.Water, nPorts=1) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-90,-70})));
        Buildings.Fluid.Sources.MassFlowSource_T boundary(
          redeclare package Medium = Buildings.Media.Water,
          m_flow=320/3.6,
          use_T_in=false,
          T=281.15,
          nPorts=1)
          annotation (Placement(transformation(extent={{60,-80},{40,-60}})));
        Buildings.Fluid.Sources.Boundary_pT bou1(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=true,
          nPorts=1) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={-10,50})));
        Buildings.Fluid.Sensors.TemperatureTwoPort
                                         Tcondsort(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=190/3.6)
          annotation (Placement(transformation(extent={{-140,40},{-120,60}})));
        Modelica.Blocks.Sources.IntegerExpression integerExpression(y=2)
          annotation (Placement(transformation(extent={{-100,-40},{-80,-20}})));
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource(
              "modelica://Buildings/Data/pem.txt"),
          columns={2})
          annotation (Placement(transformation(extent={{-140,120},{-120,140}})));
        Buildings.Fluid.Sensors.TemperatureTwoPort
                                         Tevapsort1(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=190/3.6)
          annotation (Placement(transformation(extent={{-74,-80},{-54,-60}})));
        Buildings.Applications.DHC_Thassalia.TFP.TFP_duo_carnot tFP_duo_carnot(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          redeclare package Medium3 = Buildings.Media.Water,
          redeclare package Medium4 = Buildings.Media.Water,
          m1_flow_nominal=211/3.6,
          m2_flow_nominal=211/3.6,
          m3_flow_nominal=332/3.6,
          m4_flow_nominal=332/3.6)
          annotation (Placement(transformation(extent={{-40,0},{-20,20}})));
        Fluid.Sources.MassFlowSource_T           boundary1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow=210/3.6,
          use_T_in=true,
          T=281.15,
          nPorts=1)
          annotation (Placement(transformation(extent={{-100,10},{-80,30}})));
      equation
        connect(fan2.port_b, heat_exchanger.port_a1) annotation (Line(points={{
                20,110},{40,110},{40,56}}, color={0,127,255}));
        connect(fan2.port_b, cold_exchanger.port_a1) annotation (Line(points={{
                20,110},{30,110},{30,-24},{40,-24}}, color={0,127,255}));
        connect(cold_exchanger.port_b1, bou2.ports[1]) annotation (Line(points={{60,-24},
                {100,-24},{100,132},{-40,132},{-40,112.667}},           color={
                0,127,255}));
        connect(heat_exchanger.port_b1, bou2.ports[2]) annotation (Line(points=
                {{60,56},{78,56},{78,126},{-36,126},{-36,110},{-40,110}}, color=
               {0,127,255}));
        connect(bou2.ports[3], fan2.port_a) annotation (Line(points={{-40,
                107.333},{-22,107.333},{-22,110},{0,110}}, color={0,127,255}));
        connect(Tcondsort.port_a, bou1.ports[1]) annotation (Line(points={{-140,50},
                {-152,50},{-152,72},{-20,72},{-20,50}},     color={0,127,255}));
        connect(Tcondsort.T, bou1.T_in) annotation (Line(points={{-130,61},{
                -130,78},{12,78},{12,54},{2,54}}, color={0,0,127}));
        connect(integerExpression.y, heat_exchanger.mode) annotation (Line(
              points={{-79,-30},{28,-30},{28,18},{44,18},{44,38}}, color={255,
                127,0}));
        connect(combiTimeTable.y[1], bou2.T_in) annotation (Line(points={{-119,
                130},{-72,130},{-72,114},{-62,114}}, color={0,0,127}));
        connect(combiTimeTable.y[1], heat_exchanger.PEM_TT200) annotation (Line(
              points={{-119,130},{-72,130},{-72,66},{28,66},{28,46},{38,46}},
              color={0,0,127}));
        connect(Tevapsort1.port_a, bou.ports[1])
          annotation (Line(points={{-74,-70},{-80,-70}}, color={0,127,255}));
        connect(combiTimeTable.y[1], cold_exchanger.PEM_TT200) annotation (Line(
              points={{-119,130},{-72,130},{-72,-34},{38,-34}}, color={0,0,127}));
        connect(integerExpression.y, tFP_duo_carnot.mode) annotation (Line(
              points={{-79,-30},{-38,-30},{-38,-2}}, color={255,127,0}));
        connect(tFP_duo_carnot.CV522_pid, heat_exchanger.TFP_CV522) annotation (
           Line(points={{-17,16},{16,16},{16,54},{38,54}}, color={0,0,127}));
        connect(tFP_duo_carnot.CV122_pid, cold_exchanger.TFP_CV122) annotation (
           Line(points={{-17,4},{10,4},{10,-26},{38,-26}}, color={0,0,127}));
        connect(cold_exchanger.port_a2, tFP_duo_carnot.port_b3) annotation (
            Line(points={{60,-36},{68,-36},{68,-44},{-10,-44},{-10,6.9},{-20,
                6.9}}, color={0,127,255}));
        connect(cold_exchanger.port_b2, tFP_duo_carnot.port_a3) annotation (
            Line(points={{40,-36},{-48,-36},{-48,6.8},{-40,6.8}}, color={0,127,
                255}));
        connect(boundary.ports[1], tFP_duo_carnot.port_a4) annotation (Line(
              points={{40,-70},{-20,-70},{-20,2}}, color={0,127,255}));
        connect(tFP_duo_carnot.port_b4, Tevapsort1.port_b) annotation (Line(
              points={{-40,1.5},{-40,-70},{-54,-70}}, color={0,127,255}));
        connect(tFP_duo_carnot.port_a2, heat_exchanger.port_b2) annotation (
            Line(points={{-20,13},{-14,13},{-14,12},{26,12},{26,44},{40,44}},
              color={0,127,255}));
        connect(heat_exchanger.port_a2, tFP_duo_carnot.port_b2) annotation (
            Line(points={{60,44},{68,44},{68,30},{-48,30},{-48,13},{-40,13}},
              color={0,127,255}));
        connect(combiTimeTable.y[1], tFP_duo_carnot.PEM_TT200) annotation (Line(
              points={{-119,130},{-72,130},{-72,-10},{-30,-10},{-30,-2}}, color=
               {0,0,127}));
        connect(Tevapsort1.T, tFP_duo_carnot.DEG_TT121) annotation (Line(points=
               {{-64,-59},{-64,-48},{-22,-48},{-22,-2}}, color={0,0,127}));
        connect(boundary1.ports[1], tFP_duo_carnot.port_a1) annotation (Line(
              points={{-80,20},{-60,20},{-60,18},{-40,18}}, color={0,127,255}));
        connect(tFP_duo_carnot.port_b1, Tcondsort.port_b) annotation (Line(
              points={{-20,18},{-20,42},{-100,42},{-100,50},{-120,50}}, color={
                0,127,255}));
        connect(Tcondsort.T, boundary1.T_in) annotation (Line(points={{-130,61},
                {-130,64},{-108,64},{-108,24},{-102,24}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=50000,
            Interval=500,
            __Dymola_Algorithm="Dassl"));
      end tfp_nexi;

      model tfp_nexi_hot
        Buildings.Applications.DHC_Thassalia.TFP.TFP_duo_simple tFP_duo_simple(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          redeclare package Medium3 = Buildings.Media.Water,
          redeclare package Medium4 = Buildings.Media.Water,
          m1_flow_nominal=211/3.6,
          m2_flow_nominal=211/3.6,
          m3_flow_nominal=322/3.6,
          m4_flow_nominal=322/3.6)
          annotation (Placement(transformation(extent={{-16,0},{4,20}})));
        RJC.Heat_exchanger heat_exchanger(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water)
          annotation (Placement(transformation(extent={{40,40},{60,60}})));
        RJF.Cold_exchanger cold_exchanger(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water)
          annotation (Placement(transformation(extent={{40,-40},{60,-20}})));
        Fluid.Sources.Boundary_pT bou2(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=true,
          T=278.15,
          nPorts=3)
          annotation (Placement(transformation(extent={{-60,100},{-40,120}})));
        Buildings.Fluid.Movers.FlowControlled_dp fan2(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=800/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          dp_nominal(displayUnit="bar") = 200000,
          constantHead(displayUnit="bar") = 200000)
          annotation (Placement(transformation(extent={{0,100},{20,120}})));
        Buildings.Fluid.Sources.Boundary_pT bou(redeclare package Medium =
              Buildings.Media.Water, nPorts=1) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-90,-70})));
        Buildings.Fluid.Sources.MassFlowSource_T boundary(
          redeclare package Medium = Buildings.Media.Water,
          m_flow=166/3.6,
          use_T_in=false,
          T=281.15,
          nPorts=1)
          annotation (Placement(transformation(extent={{60,-80},{40,-60}})));
        Buildings.Fluid.Sources.Boundary_pT bou1(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=true,
          nPorts=2) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={-10,50})));
        Buildings.Fluid.Movers.FlowControlled_m_flow fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=211/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_PEC per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          constantMassFlowRate=211/3.6)
          annotation (Placement(transformation(extent={{-90,40},{-110,60}})));
        Buildings.Fluid.Sensors.TemperatureTwoPort
                                         Tcondsort(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=190/3.6)
          annotation (Placement(transformation(extent={{-140,40},{-120,60}})));
        Modelica.Blocks.Sources.IntegerExpression integerExpression(y=2)
          annotation (Placement(transformation(extent={{-100,-40},{-80,-20}})));
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource(
              "modelica://Buildings/Data/pem.txt"),
          columns={2})
          annotation (Placement(transformation(extent={{-140,120},{-120,140}})));
        Buildings.Fluid.Sensors.TemperatureTwoPort
                                         Tevapsort1(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=190/3.6)
          annotation (Placement(transformation(extent={{-74,-80},{-54,-60}})));
      equation
        connect(tFP_duo_simple.port_b2, heat_exchanger.port_a2) annotation (
            Line(points={{-16,13},{-28,13},{-28,14},{-40,14},{-40,30},{70,30},{
                70,44},{60,44}}, color={0,127,255}));
        connect(heat_exchanger.port_b2, tFP_duo_simple.port_a2)
          annotation (Line(points={{40,44},{40,13},{4,13}}, color={0,0,127}));
        connect(cold_exchanger.port_b2, tFP_duo_simple.port_a3) annotation (
            Line(points={{40,-36},{-36,-36},{-36,6.8},{-16,6.8}}, color={0,127,
                255}));
        connect(cold_exchanger.port_a2, tFP_duo_simple.port_b3) annotation (
            Line(points={{60,-36},{74,-36},{74,6.9},{4,6.9}}, color={0,127,255}));
        connect(fan2.port_b, heat_exchanger.port_a1) annotation (Line(points={{
                20,110},{40,110},{40,56}}, color={0,127,255}));
        connect(fan2.port_b, cold_exchanger.port_a1) annotation (Line(points={{
                20,110},{30,110},{30,-24},{40,-24}}, color={0,127,255}));
        connect(cold_exchanger.port_b1, bou2.ports[1]) annotation (Line(points={{60,-24},
                {100,-24},{100,132},{-40,132},{-40,112.667}},           color={
                0,127,255}));
        connect(heat_exchanger.port_b1, bou2.ports[2]) annotation (Line(points=
                {{60,56},{78,56},{78,126},{-36,126},{-36,110},{-40,110}}, color=
               {0,127,255}));
        connect(bou2.ports[3], fan2.port_a) annotation (Line(points={{-40,
                107.333},{-22,107.333},{-22,110},{0,110}}, color={0,127,255}));
        connect(tFP_duo_simple.CV122_pid, cold_exchanger.TFP_CV122) annotation (
           Line(points={{7,4},{22,4},{22,-26},{38,-26}}, color={0,0,127}));
        connect(tFP_duo_simple.CV522_pid, heat_exchanger.TFP_CV522) annotation (
           Line(points={{7,16},{22,16},{22,54},{38,54}}, color={0,0,127}));
        connect(tFP_duo_simple.port_a4, boundary.ports[1]) annotation (Line(
              points={{4,2},{20,2},{20,-70},{40,-70}}, color={0,127,255}));
        connect(Tcondsort.port_b, fan.port_b)
          annotation (Line(points={{-120,50},{-110,50}}, color={0,127,255}));
        connect(Tcondsort.port_a, bou1.ports[1]) annotation (Line(points={{-140,
                50},{-152,50},{-152,72},{-20,72},{-20,52}}, color={0,127,255}));
        connect(Tcondsort.T, bou1.T_in) annotation (Line(points={{-130,61},{
                -130,78},{12,78},{12,54},{2,54}}, color={0,0,127}));
        connect(integerExpression.y, tFP_duo_simple.mode) annotation (Line(
              points={{-79,-30},{-14,-30},{-14,-2}}, color={255,127,0}));
        connect(integerExpression.y, heat_exchanger.mode) annotation (Line(
              points={{-79,-30},{28,-30},{28,18},{44,18},{44,38}}, color={255,
                127,0}));
        connect(combiTimeTable.y[1], bou2.T_in) annotation (Line(points={{-119,
                130},{-72,130},{-72,114},{-62,114}}, color={0,0,127}));
        connect(combiTimeTable.y[1], tFP_duo_simple.PEM_TT200) annotation (Line(
              points={{-119,130},{-72,130},{-72,-12},{-6,-12},{-6,-2}}, color={
                0,0,127}));
        connect(combiTimeTable.y[1], heat_exchanger.PEM_TT200) annotation (Line(
              points={{-119,130},{-72,130},{-72,66},{28,66},{28,46},{38,46}},
              color={0,0,127}));
        connect(fan.port_a, tFP_duo_simple.port_b1) annotation (Line(points={{
                -90,50},{-28,50},{-28,24},{4,24},{4,18}}, color={0,127,255}));
        connect(bou1.ports[2], tFP_duo_simple.port_a1) annotation (Line(points=
                {{-20,48},{-34,48},{-34,18},{-16,18}}, color={0,127,255}));
        connect(tFP_duo_simple.port_b4, Tevapsort1.port_b) annotation (Line(
              points={{-16,1.5},{-20,1.5},{-20,2},{-52,2},{-52,-70},{-54,-70}},
              color={0,127,255}));
        connect(Tevapsort1.port_a, bou.ports[1])
          annotation (Line(points={{-74,-70},{-80,-70}}, color={0,127,255}));
        connect(Tcondsort.T, tFP_duo_simple.DEG_TT121) annotation (Line(points=
                {{-130,61},{-130,78},{-30,78},{-30,-20},{2,-20},{2,-2}}, color=
                {0,0,127}));
        connect(combiTimeTable.y[1], cold_exchanger.PEM_TT200) annotation (Line(
              points={{-119,130},{-72,130},{-72,-34},{38,-34}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=50000,
            Interval=500,
            __Dymola_Algorithm="Dassl"));
      end tfp_nexi_hot;

      model tfp_nexi_cold
        Buildings.Applications.DHC_Thassalia.TFP.TFP_duo_simple tFP_duo_simple(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          redeclare package Medium3 = Buildings.Media.Water,
          redeclare package Medium4 = Buildings.Media.Water,
          m1_flow_nominal=211/3.6,
          m2_flow_nominal=211/3.6,
          m3_flow_nominal=322/3.6,
          m4_flow_nominal=322/3.6)
          annotation (Placement(transformation(extent={{-16,0},{4,20}})));
        RJC.Heat_exchanger heat_exchanger(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water)
          annotation (Placement(transformation(extent={{40,40},{60,60}})));
        RJF.Cold_exchanger cold_exchanger(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water)
          annotation (Placement(transformation(extent={{40,-40},{60,-20}})));
        Fluid.Sources.Boundary_pT bou2(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=true,
          T=278.15,
          nPorts=3)
          annotation (Placement(transformation(extent={{-60,100},{-40,120}})));
        Buildings.Fluid.Movers.FlowControlled_dp fan2(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=800/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          dp_nominal(displayUnit="bar") = 200000,
          constantHead(displayUnit="bar") = 200000)
          annotation (Placement(transformation(extent={{0,100},{20,120}})));
        Buildings.Fluid.Sources.Boundary_pT bou(redeclare package Medium =
              Buildings.Media.Water, nPorts=1) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-90,-70})));
        Buildings.Fluid.Sources.MassFlowSource_T boundary(
          redeclare package Medium = Buildings.Media.Water,
          m_flow=205/3.6,
          use_T_in=false,
          T=318.15,
          nPorts=1)
          annotation (Placement(transformation(extent={{-120,10},{-100,30}})));
        Buildings.Fluid.Sources.Boundary_pT bou1(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=true,
          nPorts=1) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={-10,50})));
        Buildings.Fluid.Sensors.TemperatureTwoPort
                                         Tcondsort(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=190/3.6)
          annotation (Placement(transformation(extent={{-140,40},{-120,60}})));
        Modelica.Blocks.Sources.IntegerExpression integerExpression(y=2)
          annotation (Placement(transformation(extent={{-100,-40},{-80,-20}})));
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource(
              "modelica://Buildings/Data/pem.txt"),
          columns={2})
          annotation (Placement(transformation(extent={{-140,120},{-120,140}})));
        Buildings.Fluid.Sensors.TemperatureTwoPort
                                         Tevapsort1(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=190/3.6)
          annotation (Placement(transformation(extent={{-74,-80},{-54,-60}})));
        Fluid.Sources.MassFlowSource_T           boundary1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow=300/3.6,
          use_T_in=false,
          T=285.15,
          nPorts=1)
          annotation (Placement(transformation(extent={{60,-80},{40,-60}})));
      equation
        connect(tFP_duo_simple.port_b2, heat_exchanger.port_a2) annotation (
            Line(points={{-16,13},{-28,13},{-28,14},{-40,14},{-40,30},{70,30},{
                70,44},{60,44}}, color={0,127,255}));
        connect(heat_exchanger.port_b2, tFP_duo_simple.port_a2)
          annotation (Line(points={{40,44},{40,13},{4,13}}, color={0,0,127}));
        connect(cold_exchanger.port_b2, tFP_duo_simple.port_a3) annotation (
            Line(points={{40,-36},{-36,-36},{-36,6.8},{-16,6.8}}, color={0,127,
                255}));
        connect(cold_exchanger.port_a2, tFP_duo_simple.port_b3) annotation (
            Line(points={{60,-36},{74,-36},{74,6.9},{4,6.9}}, color={0,127,255}));
        connect(fan2.port_b, heat_exchanger.port_a1) annotation (Line(points={{
                20,110},{40,110},{40,56}}, color={0,127,255}));
        connect(fan2.port_b, cold_exchanger.port_a1) annotation (Line(points={{
                20,110},{30,110},{30,-24},{40,-24}}, color={0,127,255}));
        connect(cold_exchanger.port_b1, bou2.ports[1]) annotation (Line(points={{60,-24},
                {100,-24},{100,132},{-40,132},{-40,112.667}},           color={
                0,127,255}));
        connect(heat_exchanger.port_b1, bou2.ports[2]) annotation (Line(points=
                {{60,56},{78,56},{78,126},{-36,126},{-36,110},{-40,110}}, color=
               {0,127,255}));
        connect(bou2.ports[3], fan2.port_a) annotation (Line(points={{-40,
                107.333},{-22,107.333},{-22,110},{0,110}}, color={0,127,255}));
        connect(tFP_duo_simple.CV122_pid, cold_exchanger.TFP_CV122) annotation (
           Line(points={{7,4},{22,4},{22,-26},{38,-26}}, color={0,0,127}));
        connect(tFP_duo_simple.CV522_pid, heat_exchanger.TFP_CV522) annotation (
           Line(points={{7,16},{22,16},{22,54},{38,54}}, color={0,0,127}));
        connect(Tcondsort.port_a, bou1.ports[1]) annotation (Line(points={{-140,50},
                {-152,50},{-152,72},{-20,72},{-20,50}},     color={0,127,255}));
        connect(Tcondsort.T, bou1.T_in) annotation (Line(points={{-130,61},{
                -130,78},{12,78},{12,54},{2,54}}, color={0,0,127}));
        connect(integerExpression.y, tFP_duo_simple.mode) annotation (Line(
              points={{-79,-30},{-14,-30},{-14,-2}}, color={255,127,0}));
        connect(integerExpression.y, heat_exchanger.mode) annotation (Line(
              points={{-79,-30},{28,-30},{28,18},{44,18},{44,38}}, color={255,
                127,0}));
        connect(combiTimeTable.y[1], bou2.T_in) annotation (Line(points={{-119,
                130},{-72,130},{-72,114},{-62,114}}, color={0,0,127}));
        connect(combiTimeTable.y[1], tFP_duo_simple.PEM_TT200) annotation (Line(
              points={{-119,130},{-72,130},{-72,-12},{-6,-12},{-6,-2}}, color={
                0,0,127}));
        connect(combiTimeTable.y[1], heat_exchanger.PEM_TT200) annotation (Line(
              points={{-119,130},{-72,130},{-72,66},{28,66},{28,46},{38,46}},
              color={0,0,127}));
        connect(tFP_duo_simple.port_b4, Tevapsort1.port_b) annotation (Line(
              points={{-16,1.5},{-20,1.5},{-20,2},{-52,2},{-52,-70},{-54,-70}},
              color={0,127,255}));
        connect(Tevapsort1.port_a, bou.ports[1])
          annotation (Line(points={{-74,-70},{-78,-70},{-78,-70},{-80,-70}},
                                                         color={0,127,255}));
        connect(combiTimeTable.y[1], cold_exchanger.PEM_TT200) annotation (Line(
              points={{-119,130},{-72,130},{-72,-34},{38,-34}}, color={0,0,127}));
        connect(boundary.ports[1], tFP_duo_simple.port_a1) annotation (Line(
              points={{-100,20},{-60,20},{-60,18},{-16,18}}, color={0,127,255}));
        connect(tFP_duo_simple.port_b1, Tcondsort.port_b) annotation (Line(
              points={{4,18},{10,18},{10,34},{-88,34},{-88,50},{-120,50}},
              color={0,127,255}));
        connect(boundary1.ports[1], tFP_duo_simple.port_a4) annotation (Line(
              points={{40,-70},{8,-70},{8,2},{4,2}}, color={0,127,255}));
        connect(Tevapsort1.T, tFP_duo_simple.DEG_TT121) annotation (Line(points=
               {{-64,-59},{-64,-46},{2,-46},{2,-2}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=50000,
            Interval=500,
            __Dymola_Algorithm="Dassl"));
      end tfp_nexi_cold;

      model tfp_hope_bis
        import Fluid;
        Modelica.Blocks.Sources.BooleanExpression booleanExpression(y=true)
          annotation (Placement(transformation(extent={{-126,50},{-106,70}})));
        Modelica.Blocks.Sources.RealExpression realExpression2(y=4 + 273.15)
          annotation (Placement(transformation(extent={{-130,24},{-110,44}})));
        Fluid.Sensors.TemperatureTwoPort TT1(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=322/3.6)
                                                         annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=90,
              origin={-82,-8})));
        Fluid.Sensors.TemperatureTwoPort TT121(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=322/3.6)
                                                         annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=270,
              origin={-20,-6})));
        Buildings.Fluid.Movers.FlowControlled_m_flow fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=500/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_PEG per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          addPowerToMedium=false,
          dp_nominal(displayUnit="bar") = 1000000,
          constantMassFlowRate=166/3.6)
          annotation (Placement(transformation(extent={{-100,-60},{-80,-40}})));
        Fluid.Sources.Boundary_pT bou(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=false,
          T=283.15,
          nPorts=2)
          annotation (Placement(transformation(extent={{-170,-74},{-150,-54}})));
        Buildings.Fluid.Movers.FlowControlled_m_flow fan1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=500/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_PEG per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          addPowerToMedium=false,
          dp_nominal(displayUnit="bar") = 1000000,
          constantMassFlowRate=211/3.6)
          annotation (Placement(transformation(extent={{-100,100},{-80,120}})));
        Fluid.Sources.Boundary_pT bou1(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=false,
          T=318.15,
          nPorts=2)
          annotation (Placement(transformation(extent={{-140,82},{-120,102}})));
        Fluid.Sensors.TemperatureTwoPort TT2(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=322/3.6)
                                                         annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=270,
              origin={-36,70})));
        Fluid.Sensors.TemperatureTwoPort TT3(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=322/3.6)
                                                         annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=90,
              origin={-74,72})));
        Buildings.Fluid.Chillers.ElectricReformulatedEIR
                                               TFPA(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=211/3.6,
          m2_flow_nominal=166/3.6,
          dp1_nominal=70000,
          dp2_nominal=70000,
          per=Fluid.Chillers.Data.ElectricReformulatedEIR.ReformEIRChiller_Carrier_19EX_5208kW_6_88COP_Vanes(
                    mEva_flow_nominal=166/3.6,
                    mCon_flow_nominal=211/3.6,
                    TConLvgMin=273.15 + 40,
                    TConLvgMax=273.15 + 60))
          annotation (Placement(transformation(extent={{-68,24},{-48,44}})));
      equation
        connect(bou.ports[1], fan.port_a) annotation (Line(points={{-150,-62},{
                -138,-62},{-138,-50},{-100,-50}}, color={0,127,255}));
        connect(fan.port_b, TT121.port_a) annotation (Line(points={{-80,-50},{
                -60,-50},{-60,-16},{-20,-16}}, color={0,127,255}));
        connect(TT1.port_b, bou.ports[2]) annotation (Line(points={{-82,-18},{
                -116,-18},{-116,-66},{-150,-66}}, color={0,127,255}));
        connect(bou1.ports[1], fan1.port_a) annotation (Line(points={{-120,94},
                {-110,94},{-110,110},{-100,110}}, color={0,127,255}));
        connect(TT2.port_b, bou1.ports[2]) annotation (Line(points={{-36,80},{
                -36,90},{-120,90}}, color={0,127,255}));
        connect(fan1.port_b, TT3.port_a) annotation (Line(points={{-80,110},{
                -74,110},{-74,82}}, color={0,127,255}));
        connect(TT1.port_a, TFPA.port_b2) annotation (Line(points={{-82,2},{-76,
                2},{-76,28},{-68,28}}, color={0,127,255}));
        connect(TFPA.port_a2, TT121.port_b) annotation (Line(points={{-48,28},{
                -34,28},{-34,4},{-20,4}}, color={0,127,255}));
        connect(TFPA.port_b1, TT2.port_a) annotation (Line(points={{-48,40},{
                -42,40},{-42,60},{-36,60}}, color={0,127,255}));
        connect(TFPA.on, booleanExpression.y) annotation (Line(points={{-70,37},
                {-88,37},{-88,60},{-105,60}}, color={255,0,255}));
        connect(TFPA.port_a1, TT3.port_b) annotation (Line(points={{-68,40},{
                -68,51},{-74,51},{-74,62}}, color={0,127,255}));
        connect(realExpression2.y, TFPA.TSet) annotation (Line(points={{-109,34},
                {-92,34},{-92,31},{-70,31}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end tfp_hope_bis;

      model endless_crying
        import Fluid;
        Fluid.Chillers.Carnot_TEva TFPA(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=211/3.6,
          m2_flow_nominal=166/3.6,
          QEva_flow_nominal=-166/3.6*4185*(7),
          dTEva_nominal=-7,
          dTCon_nominal=15,
          use_eta_Carnot_nominal=true,
          etaCarnot_nominal=0.95,
          COP_nominal=6.5,
          TCon_nominal=313.15,
          dp1_nominal=40000,
          dp2_nominal=40000,
          QEva_flow_min(displayUnit="kW") = -1800000)
          annotation (Placement(transformation(extent={{-20,20},{0,40}})));
        Modelica.Blocks.Sources.RealExpression cons_cold(y=4 + 273.15)
          annotation (Placement(transformation(extent={{-100,20},{-80,40}})));
        Buildings.Fluid.Sources.Boundary_pT bou(redeclare package Medium =
              Buildings.Media.Water, nPorts=1)
          annotation (Placement(transformation(extent={{-100,-60},{-80,-40}})));
        Buildings.Fluid.Sources.MassFlowSource_T boundary(
          redeclare package Medium = Buildings.Media.Water,
          m_flow=166/3.6,
          T=285.15,
          nPorts=1)
          annotation (Placement(transformation(extent={{100,-60},{80,-40}})));
        Buildings.Fluid.Sources.MassFlowSource_T boundary1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow=211/3.6,
          T=333.15,
          nPorts=1)
          annotation (Placement(transformation(extent={{-100,60},{-80,80}})));
        Buildings.Fluid.Sources.Boundary_pT bou1(redeclare package Medium =
              Buildings.Media.Water, nPorts=1)
          annotation (Placement(transformation(extent={{100,60},{80,80}})));
        Buildings.Fluid.Sensors.TemperatureTwoPort senTem(redeclare package
            Medium = Buildings.Media.Water, m_flow_nominal=100)
          annotation (Placement(transformation(extent={{-72,60},{-52,80}})));
        Buildings.Fluid.Sensors.TemperatureTwoPort senTem1(redeclare package
            Medium = Buildings.Media.Water, m_flow_nominal=100)
          annotation (Placement(transformation(extent={{48,60},{68,80}})));
        Buildings.Fluid.Sensors.TemperatureTwoPort senTem2(redeclare package
            Medium = Buildings.Media.Water, m_flow_nominal=100)
          annotation (Placement(transformation(extent={{60,-60},{40,-40}})));
        Buildings.Fluid.Sensors.TemperatureTwoPort senTem3(redeclare package
            Medium = Buildings.Media.Water, m_flow_nominal=100)
          annotation (Placement(transformation(extent={{-40,-60},{-60,-40}})));
      equation
        connect(cons_cold.y, TFPA.TSet) annotation (Line(points={{-79,30},{-40,
                30},{-40,39},{-22,39}}, color={0,0,127}));
        connect(boundary1.ports[1], senTem.port_a)
          annotation (Line(points={{-80,70},{-72,70}}, color={0,127,255}));
        connect(senTem.port_b, TFPA.port_a1) annotation (Line(points={{-52,70},
                {-46,70},{-46,36},{-20,36}}, color={0,127,255}));
        connect(TFPA.port_b1, senTem1.port_a) annotation (Line(points={{0,36},{
                40,36},{40,70},{48,70}}, color={0,127,255}));
        connect(senTem1.port_b, bou1.ports[1])
          annotation (Line(points={{68,70},{80,70}}, color={0,127,255}));
        connect(boundary.ports[1], senTem2.port_a)
          annotation (Line(points={{80,-50},{60,-50}}, color={0,127,255}));
        connect(senTem2.port_b, TFPA.port_a2) annotation (Line(points={{40,-50},
                {20,-50},{20,24},{0,24}}, color={0,127,255}));
        connect(TFPA.port_b2, senTem3.port_a) annotation (Line(points={{-20,24},
                {-32,24},{-32,-50},{-40,-50}}, color={0,127,255}));
        connect(senTem3.port_b, bou.ports[1])
          annotation (Line(points={{-60,-50},{-80,-50}}, color={0,127,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end endless_crying;

      model TFP_duo_carnot


        parameter Modelica.SIunits.MassFlowRate m_flow_hot= 211*1000/3600;
        parameter Modelica.SIunits.MassFlowRate m_flow_cold= 332*1000/3600;
        parameter Real T_set_hot = 61+273.15;
        parameter Real T_set_hot_max = 63+273.15;
        parameter Real T_set_hot_min = 41+273.15;
        parameter Real T_set_cold_max = 14+273.15;
        parameter Real T_set_cold = 4+273.15;
        Integer mode = 2;

        Fluid.FixedResistances.Junction jun(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={m_flow_hot,-m_flow_hot,-m_flow_hot},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=270,
              origin={10,250})));
        Fluid.Actuators.Valves.TwoWayLinear XV521(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_hot,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          dpValve_nominal=5000)
          annotation (Placement(transformation(extent={{-40,180},{-60,200}})));
        Fluid.Actuators.Valves.TwoWayLinear XV522(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_hot,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          dpValve_nominal=5000)
                              annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={70,230})));
        Fluid.Actuators.Valves.TwoWayLinear CV523(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_hot,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          dpValve_nominal=5000,
          use_inputFilter=false)
                              annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={10,50})));
        Fluid.FixedResistances.Junction jun1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={m_flow_hot,-m_flow_hot,m_flow_hot},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,10},{10,-10}},
              rotation=270,
              origin={-90,190})));
        Fluid.FixedResistances.Junction jun3(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={m_flow_hot,-m_flow_hot,-m_flow_hot},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,10},{10,-10}},
              rotation=90,
              origin={70,190})));
        Fluid.FixedResistances.Junction jun4(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={m_flow_cold,-m_flow_cold/2,-m_flow_cold/2},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,10},{10,-10}},
              rotation=90,
              origin={50,-50})));
        Fluid.Actuators.Valves.TwoWayLinear XV112A(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_cold/2,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          dpValve_nominal=5000)
                              annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-50,-90})));
        Fluid.Actuators.Valves.TwoWayLinear CV123(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_cold,
          dpValve_nominal=5000,
          use_inputFilter=false)
                              annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=90,
              origin={50,-110})));
        Fluid.FixedResistances.Junction jun5(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={m_flow_cold,-m_flow_cold,-m_flow_cold},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=90,
              origin={50,-250})));
        Fluid.FixedResistances.Junction jun6(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={m_flow_cold/2,-m_flow_cold,m_flow_cold/2},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,10},{10,-10}},
              rotation=270,
              origin={-50,-130})));
        Fluid.Actuators.Valves.TwoWayLinear XV112B(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_cold/2,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          dpValve_nominal=5000)
                              annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={10,-90})));
        Fluid.Sensors.VolumeFlowRate FT521(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={10,90})));
        Controls.Continuous.LimPID FT_PID_521(k=1, Ti=1)
          annotation (Placement(transformation(extent={{200,120},{220,140}})));
        Controls.Continuous.LimPID FT_PID_123(k=1, Ti=1)
          annotation (Placement(transformation(extent={{180,-100},{200,-80}})));
        Fluid.Sensors.VolumeFlowRate FT121(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=m_flow_cold)
                                                         annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=90,
              origin={50,-150})));
        Fluid.Sensors.TemperatureTwoPort TT111(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=m_flow_cold)
          annotation (Placement(transformation(extent={{-60,-170},{-80,-150}})));
        Fluid.Sensors.TemperatureTwoPort TT511(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100)
          annotation (Placement(transformation(extent={{80,250},{100,270}})));
        Fluid.Sensors.TemperatureTwoPort TT521(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=-90,
              origin={10,120})));
        Modelica.Blocks.Sources.RealExpression XV521_switch(y=if mode == 1 then 1
               else 0)
          annotation (Placement(transformation(extent={{-240,240},{-220,260}})));
        Modelica.Blocks.Sources.RealExpression XV522_switch(y=if mode >= 2 then 1
               else 0)
          annotation (Placement(transformation(extent={{-240,210},{-220,230}})));
        Modelica.Blocks.Sources.RealExpression XV112A_switch(y=if mode >= 1 then 1
               else 0)
          annotation (Placement(transformation(extent={{-200,-40},{-180,-20}})));
        Modelica.Blocks.Sources.RealExpression XV112B_switch(y=if mode == 1 or mode ==
              2 then 1 else 0)
          annotation (Placement(transformation(extent={{-200,-80},{-180,-60}})));
        Modelica.Blocks.Sources.RealExpression cons_cold(y=T_set_cold)
          annotation (Placement(transformation(extent={{-200,20},{-180,40}})));
        Modelica.Blocks.Sources.RealExpression CV123_reg(y=if mode == 1 or mode
               == 3 then 166/3600 else 332/3600)
          annotation (Placement(transformation(extent={{140,-100},{160,-80}})));
        Fluid.Sensors.TemperatureTwoPort TT121(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=322/3.6)
                                                         annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=270,
              origin={50,-80})));
        Controls_a.TFP.PID_Valve_evap pID_Valve_evap annotation (Placement(
              transformation(extent={{-120,-240},{-100,-220}})));
        Controls_a.TFP.PID_Valve_cond pID_Valve_cond
          annotation (Placement(transformation(extent={{-200,160},{-180,180}})));
        Modelica.Blocks.Sources.RealExpression CV523_reg(y=211/3600)
          annotation (Placement(transformation(extent={{140,120},{160,140}})));
        Fluid.Actuators.Valves.ThreeWayLinear val(
          redeclare package Medium = Buildings.Media.Water,
          use_inputFilter=false,
          m_flow_nominal=m_flow_cold,
          dpValve_nominal=5000) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=270,
              origin={50,-200})));
        Fluid.Actuators.Valves.ThreeWayLinear val1(
          redeclare package Medium = Buildings.Media.Water,
          use_inputFilter=false,
          m_flow_nominal=m_flow_hot,
          dpValve_nominal=5000) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=90,
              origin={10,150})));
        Modelica.Blocks.Sources.IntegerExpression integerExpression(y=mode)
          annotation (Placement(transformation(extent={{-240,160},{-220,180}})));
        Fluid.Chillers.Carnot_TEva TFPA(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=211/3.6,
          m2_flow_nominal=166/3.6,
          QEva_flow_nominal=-166/3.6*4185*(7),
          dTEva_nominal=-7,
          dTCon_nominal=15,
          use_eta_Carnot_nominal=true,
          etaCarnot_nominal=0.95,
          COP_nominal=6.5,
          TCon_nominal=313.15,
          dp1_nominal=40000,
          dp2_nominal=40000,
          QEva_flow_min(displayUnit="kW") = -1800000)
          annotation (Placement(transformation(extent={{-40,-20},{-20,0}})));
        Fluid.Chillers.Carnot_TEva TFPA1(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=211/3.6,
          m2_flow_nominal=166/3.6,
          QEva_flow_nominal=-166/3.6*4185*(7),
          dTEva_nominal=-7,
          dTCon_nominal=15,
          use_eta_Carnot_nominal=true,
          etaCarnot_nominal=0.95,
          COP_nominal=6.5,
          TCon_nominal=313.15,
          dp1_nominal=40000,
          dp2_nominal=40000,
          QEva_flow_min(displayUnit="kW") = -1800000)
          annotation (Placement(transformation(extent={{20,-20},{40,0}})));
        Fluid.Sources.Boundary_pT bou(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=false,
          T=283.15,
          nPorts=2)
          annotation (Placement(transformation(extent={{-200,-320},{-180,-300}})));
        Buildings.Fluid.Movers.FlowControlled_m_flow fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=500/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_PEG per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          addPowerToMedium=false,
          dp_nominal(displayUnit="bar") = 1000000,
          constantMassFlowRate=330/3.6)
          annotation (Placement(transformation(extent={{-40,-300},{-20,-280}})));
        Buildings.Fluid.Sources.Boundary_pT
                                  bou2(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=false,
          T=284.15,
          nPorts=3)
          annotation (Placement(transformation(extent={{360,8},{340,28}})));
        Buildings.Fluid.Movers.FlowControlled_dp fan2(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=800/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          dp_nominal(displayUnit="bar") = 200000,
          constantHead(displayUnit="bar") = 200000)
          annotation (Placement(transformation(extent={{280,0},{260,20}})));
        RJC.Heat_exchanger heat_exchanger(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water)
          annotation (Placement(transformation(extent={{284,78},{304,98}})));
        RJF.Cold_exchanger cold_exchanger(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water)
          annotation (Placement(transformation(extent={{220,-220},{240,-200}})));
        Modelica.Blocks.Sources.IntegerExpression integerExpression1(y=mode)
          annotation (Placement(transformation(extent={{260,40},{280,60}})));
        Fluid.Sensors.TemperatureTwoPort TT1(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=322/3.6)
                                                         annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=180,
              origin={318,20})));
        Fluid.Sources.Boundary_pT bou1(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=false,
          T=283.15,
          nPorts=2)
          annotation (Placement(transformation(extent={{-182,342},{-162,362}})));
        Fluid.Movers.FlowControlled_m_flow           fan1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=500/3.6,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_PEG per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          addPowerToMedium=false,
          dp_nominal(displayUnit="bar") = 1000000,
          constantMassFlowRate=210/3.6)
          annotation (Placement(transformation(extent={{-100,340},{-80,360}})));
      equation

        connect(jun1.port_3, XV521.port_b)
          annotation (Line(points={{-80,190},{-60,190}},  color={238,46,47},
            thickness=0.5));
        connect(jun.port_3, jun1.port_1) annotation (Line(points={{0,250},{-90,
                250},{-90,200}},
                            color={238,46,47},
            thickness=0.5));

        connect(XV112A.port_b, jun6.port_1)
          annotation (Line(points={{-50,-100},{-50,-120}}, color={0,127,255},
            thickness=0.5));
        connect(jun6.port_3, XV112B.port_b) annotation (Line(points={{-40,-130},{
                10,-130},{10,-100}}, color={0,127,255},
            thickness=0.5));
        connect(jun3.port_3, XV521.port_a)
          annotation (Line(points={{60,190},{-40,190}}, color={238,46,47},
            thickness=0.5));
        connect(jun3.port_2, XV522.port_a)
          annotation (Line(points={{70,200},{70,220}}, color={238,46,47},
            thickness=0.5));
        connect(FT521.port_b, CV523.port_a)
          annotation (Line(points={{10,80},{10,60}}, color={238,46,47},
            thickness=0.5));
        connect(FT521.V_flow, FT_PID_521.u_m) annotation (Line(points={{21,90},{50,90},
                {50,100},{210,100},{210,118}}, color={0,0,127}));
        connect(FT_PID_521.y, CV523.y) annotation (Line(points={{221,130},{240,130},{240,
                50},{22,50}}, color={0,0,127}));
        connect(FT121.V_flow, FT_PID_123.u_m) annotation (Line(points={{61,-150},{190,
                -150},{190,-102}}, color={0,0,127}));
        connect(FT_PID_123.y, CV123.y) annotation (Line(points={{201,-90},{220,
                -90},{220,-68},{80,-68},{80,-110},{62,-110}},
                                                  color={0,0,127}));
        connect(jun6.port_2, TT111.port_a) annotation (Line(points={{-50,-140},{
                -50,-160},{-60,-160}}, color={0,127,255},
            thickness=0.5));
        connect(XV522.port_b, TT511.port_a) annotation (Line(points={{70,240},{70,
                260},{80,260}}, color={238,46,47},
            thickness=0.5));
        connect(TT521.port_b, FT521.port_a)
          annotation (Line(points={{10,110},{10,100}}, color={238,46,47},
            thickness=0.5));
        connect(XV521_switch.y, XV521.y) annotation (Line(points={{-219,250},{
                -160,250},{-160,240},{-50,240},{-50,202}},
                                                 color={0,0,127}));
        connect(XV522_switch.y, XV522.y) annotation (Line(points={{-219,220},{
                -160,220},{-160,230},{58,230}},
                                      color={0,0,127}));
        connect(XV112A_switch.y, XV112A.y) annotation (Line(points={{-179,-30},{-152,-30},
                {-152,-50},{-30,-50},{-30,-90},{-38,-90}}, color={0,0,127}));
        connect(XV112B_switch.y, XV112B.y) annotation (Line(points={{-179,-70},{30,-70},
                {30,-90},{22,-90}}, color={0,0,127}));
        connect(CV123_reg.y, FT_PID_123.u_s)
          annotation (Line(points={{161,-90},{178,-90}}, color={0,0,127}));
        connect(jun4.port_1, TT121.port_b)
          annotation (Line(points={{50,-60},{50,-70}}, color={0,127,255},
            thickness=0.5));
        connect(TT121.port_a, CV123.port_b)
          annotation (Line(points={{50,-90},{50,-100}}, color={0,127,255},
            thickness=0.5));
        connect(pID_Valve_evap.TFP_TT121, TT121.T) annotation (Line(points={{-122,
                -234},{-220,-234},{-220,-262},{34,-262},{34,-80},{39,-80}}, color=
               {0,0,127}));
        connect(TT511.T, pID_Valve_evap.TFP_TT511) annotation (Line(points={{90,271},
                {90,300},{-250,300},{-250,-252},{-208,-252},{-208,-238},{-122,
                -238}},      color={0,0,127}));
        connect(TT511.T, pID_Valve_cond.TFP_TT511) annotation (Line(points={{90,271},
                {90,300},{-250,300},{-250,176},{-202,176}},      color={0,0,127}));
        connect(TT521.T, pID_Valve_cond.TFP_TT521) annotation (Line(points={{-1,
                120},{-220,120},{-220,162},{-202,162}}, color={0,0,127}));
        connect(CV523_reg.y, FT_PID_521.u_s)
          annotation (Line(points={{161,130},{198,130}}, color={0,0,127}));
        connect(val.port_1, jun5.port_2) annotation (Line(
            points={{50,-210},{50,-240}},
            color={0,127,255},
            thickness=0.5));
        connect(pID_Valve_evap.CV121, val.y) annotation (Line(points={{-99,-235},
                {80,-235},{80,-200},{62,-200}}, color={0,0,127}));
        connect(pID_Valve_cond.CV521, val1.y) annotation (Line(points={{-179,165},{-31.5,
                165},{-31.5,150},{-2,150}}, color={0,0,127}));
        connect(val1.port_2, TT521.port_a) annotation (Line(
            points={{10,140},{10,130}},
            color={238,46,47},
            thickness=0.5));
        connect(val1.port_1, jun.port_2) annotation (Line(
            points={{10,160},{10,240}},
            color={238,46,47},
            thickness=0.5));
        connect(integerExpression.y, pID_Valve_cond.TFP_mode) annotation (Line(points=
               {{-219,170},{-212,170},{-212,170},{-202,170}}, color={255,127,0}));
        connect(FT121.port_a, val.port_2) annotation (Line(
            points={{50,-160},{50,-190}},
            color={0,127,255},
            thickness=0.5));
        connect(FT121.port_b, CV123.port_a) annotation (Line(
            points={{50,-140},{50,-120}},
            color={0,127,255},
            thickness=0.5));
        connect(cons_cold.y, TFPA.TSet) annotation (Line(points={{-179,30},{-136,30},{
                -136,-1},{-42,-1}}, color={0,0,127}));
        connect(cons_cold.y, TFPA1.TSet) annotation (Line(points={{-179,30},{-136,30},
                {-136,10},{0,10},{0,-1},{18,-1}}, color={0,0,127}));
        connect(CV523.port_b, TFPA.port_a1) annotation (Line(
            points={{10,40},{10,28},{-50,28},{-50,-4},{-40,-4}},
            color={238,46,47},
            thickness=0.5));
        connect(TFPA.port_b1, TFPA1.port_a1) annotation (Line(
            points={{-20,-4},{0,-4},{0,-4},{20,-4}},
            color={238,46,47},
            thickness=0.5));
        connect(TFPA1.port_b1, jun3.port_1) annotation (Line(
            points={{40,-4},{70,-4},{70,180}},
            color={238,46,47},
            thickness=0.5));
        connect(TFPA1.port_a2, jun4.port_2) annotation (Line(
            points={{40,-16},{50,-16},{50,-40}},
            color={0,127,255},
            thickness=0.5));
        connect(jun4.port_3, TFPA.port_a2) annotation (Line(
            points={{40,-50},{0,-50},{0,-16},{-20,-16}},
            color={0,127,255},
            thickness=0.5));
        connect(TFPA1.port_b2, XV112B.port_a) annotation (Line(
            points={{20,-16},{10,-16},{10,-80}},
            color={0,127,255},
            thickness=0.5));
        connect(TFPA.port_b2, XV112A.port_a) annotation (Line(
            points={{-40,-16},{-50,-16},{-50,-80}},
            color={0,127,255},
            thickness=0.5));
        connect(bou.ports[1], fan.port_a) annotation (Line(points={{-180,-308},{-112,-308},
                {-112,-290},{-40,-290}}, color={0,127,255}));
        connect(fan.port_b, jun5.port_1) annotation (Line(points={{-20,-290},{50,-290},
                {50,-260}}, color={0,127,255}));
        connect(jun5.port_3, cold_exchanger.port_a2) annotation (Line(points={{60,-250},
                {92,-250},{92,-246},{252,-246},{252,-216},{240,-216}}, color={0,127,255}));
        connect(TT111.port_b, bou.ports[2]) annotation (Line(points={{-80,-160},
                {-88,-160},{-88,-312},{-180,-312}},
                              color={0,127,255}));
        connect(cold_exchanger.port_b2, val.port_3) annotation (Line(points={{220,-216},
                {12,-216},{12,-200},{40,-200}}, color={0,127,255}));
        connect(fan2.port_b, heat_exchanger.port_a1) annotation (Line(points={{260,10},
                {248,10},{248,60},{266,60},{266,94},{284,94}}, color={0,127,255}));
        connect(heat_exchanger.port_b1, bou2.ports[1])
          annotation (Line(points={{304,94},{340,94},{340,20.6667}},
                                                                color={0,127,255}));
        connect(fan2.port_b, cold_exchanger.port_a1) annotation (Line(points={{260,10},
                {240,10},{240,-180},{200,-180},{200,-204},{220,-204}}, color={0,127,255}));
        connect(cold_exchanger.port_b1, bou2.ports[2]) annotation (Line(points={{240,
                -204},{244,-204},{244,-202},{340,-202},{340,18}},color={0,127,255}));
        connect(heat_exchanger.port_b2, val1.port_3) annotation (Line(points={{284,82},
                {120,82},{120,150},{20,150}}, color={0,127,255}));
        connect(jun1.port_2, heat_exchanger.port_a2) annotation (Line(points={{-90,180},
                {-92,180},{-92,36},{312,36},{312,82},{304,82}}, color={0,127,255}));
        connect(integerExpression1.y, heat_exchanger.mode)
          annotation (Line(points={{281,50},{288,50},{288,76}}, color={255,127,0}));
        connect(pID_Valve_evap.CV122, cold_exchanger.TFP_CV122) annotation (
            Line(points={{-99,-225},{28,-225},{28,-226},{154,-226},{154,-206},{
                218,-206}}, color={0,0,127}));
        connect(bou2.ports[3], TT1.port_a) annotation (Line(points={{340,
                15.3333},{334,15.3333},{334,20},{328,20}}, color={0,127,255}));
        connect(TT1.port_b, fan2.port_a) annotation (Line(points={{308,20},{302,
                20.6667},{302,10},{280,10}}, color={0,127,255}));
        connect(TT1.T, heat_exchanger.PEM_TT200) annotation (Line(points={{318,
                31},{318,68},{272,68},{272,84},{282,84}}, color={0,0,127}));
        connect(TT1.T, cold_exchanger.PEM_TT200) annotation (Line(points={{318,
                31},{318,36},{332,36},{332,-230},{210,-230},{210,-214},{218,
                -214}}, color={0,0,127}));
        connect(TT111.T, pID_Valve_evap.DEG_TT121) annotation (Line(points={{
                -70,-149},{-70,-140},{-140,-140},{-140,-226},{-122,-226}},
              color={0,0,127}));
        connect(TT1.T, pID_Valve_evap.PEM_TT200) annotation (Line(points={{318,
                31},{318,36},{332,36},{332,-184},{-130,-184},{-130,-222},{-122,
                -222}}, color={0,0,127}));
        connect(bou1.ports[1], fan1.port_a) annotation (Line(points={{-162,354},
                {-132,354},{-132,350},{-100,350}}, color={0,127,255}));
        connect(fan1.port_b, jun.port_1) annotation (Line(points={{-80,350},{10,
                350},{10,260}}, color={0,0,127}));
        connect(TT511.port_b, bou1.ports[2]) annotation (Line(points={{100,260},
                {114,260},{114,258},{128,258},{128,380},{-162,380},{-162,350}},
              color={0,127,255}));
        connect(pID_Valve_cond.CV522, heat_exchanger.TFP_CV522) annotation (
            Line(points={{-179,175},{128,175},{128,92},{282,92}}, color={0,0,
                127}));
        annotation (Diagram(coordinateSystem(extent={{-100,-100},{100,100}})), Icon(
              coordinateSystem(extent={{-100,-100},{100,100}}), graphics={Rectangle(
                extent={{0,80},{60,20}},
                lineColor={238,46,47},
                fillColor={238,46,47},
                fillPattern=FillPattern.Solid),                           Rectangle(
                extent={{0,-20},{60,-80}},
                lineColor={28,108,200},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid),                           Rectangle(
                extent={{-60,80},{0,20}},
                lineColor={238,46,47},
                fillColor={244,125,35},
                fillPattern=FillPattern.Solid),                           Rectangle(
                extent={{-60,-20},{0,-80}},
                lineColor={28,108,200},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid)}),
          Documentation(info="<html>
<h4><span style=\"color: #000000\">HPSHC modes</span></h4>
<p>For the HPSHC, 4 possible modes :</p>
<p>0 - Off</p>
<p>1 - Cold mode</p>
<p>2 - HPSHC full</p>
<p>3 - HPSHC 1/2</p>
</html>"),experiment(StopTime=1, __Dymola_Algorithm="Dassl"));
      end TFP_duo_carnot;

      model aaa
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource(
              "modelica://Buildings/Data/pem.txt"),
          columns={2})
          annotation (Placement(transformation(extent={{-80,38},{-60,58}})));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end aaa;

      model endless_crying_b
        import Fluid;
        Modelica.Blocks.Sources.RealExpression cons_cold(y=4 + 273.15)
          annotation (Placement(transformation(extent={{-100,0},{-80,20}})));
        Buildings.Fluid.Sources.Boundary_pT bou(redeclare package Medium =
              Buildings.Media.Water, nPorts=1)
          annotation (Placement(transformation(extent={{-100,-60},{-80,-40}})));
        Buildings.Fluid.Sources.MassFlowSource_T boundary(
          redeclare package Medium = Buildings.Media.Water,
          m_flow=166/3.6,
          T=285.15,
          nPorts=1)
          annotation (Placement(transformation(extent={{100,-60},{80,-40}})));
        Buildings.Fluid.Sources.MassFlowSource_T boundary1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow=211/3.6,
          T=318.15,
          nPorts=1)
          annotation (Placement(transformation(extent={{-100,60},{-80,80}})));
        Buildings.Fluid.Sources.Boundary_pT bou1(redeclare package Medium =
              Buildings.Media.Water, nPorts=1)
          annotation (Placement(transformation(extent={{100,60},{80,80}})));
        Buildings.Fluid.Sensors.TemperatureTwoPort senTem(redeclare package
            Medium = Buildings.Media.Water, m_flow_nominal=100)
          annotation (Placement(transformation(extent={{-72,60},{-52,80}})));
        Buildings.Fluid.Sensors.TemperatureTwoPort senTem1(redeclare package
            Medium = Buildings.Media.Water, m_flow_nominal=100)
          annotation (Placement(transformation(extent={{48,60},{68,80}})));
        Buildings.Fluid.Sensors.TemperatureTwoPort senTem2(redeclare package
            Medium = Buildings.Media.Water, m_flow_nominal=100)
          annotation (Placement(transformation(extent={{60,-60},{40,-40}})));
        Buildings.Fluid.Sensors.TemperatureTwoPort senTem3(redeclare package
            Medium = Buildings.Media.Water, m_flow_nominal=100)
          annotation (Placement(transformation(extent={{-40,-60},{-60,-40}})));
        Buildings.Fluid.Chillers.ElectricReformulatedEIR
          electricReformulatedEIR(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=211/3.6,
          m2_flow_nominal=166/3.6,
          dp1_nominal=50000,
          dp2_nominal=50000,
          per=Buildings.Fluid.Chillers.Data.ElectricReformulatedEIR.ReformEIRChiller_York_YT_2110kW_7_15COP_Vanes(
                    TConLvg_nominal=273.15 + 61,
                    TConLvgMin=273.15 + 30,
                    TConLvgMax=273.15 + 70))
          annotation (Placement(transformation(extent={{-18,0},{2,20}})));
        Modelica.Blocks.Sources.BooleanExpression booleanExpression(y=true)
          annotation (Placement(transformation(extent={{-100,30},{-80,50}})));
      equation
        connect(boundary1.ports[1], senTem.port_a)
          annotation (Line(points={{-80,70},{-72,70}}, color={0,127,255}));
        connect(senTem1.port_b, bou1.ports[1])
          annotation (Line(points={{68,70},{80,70}}, color={0,127,255}));
        connect(boundary.ports[1], senTem2.port_a)
          annotation (Line(points={{80,-50},{60,-50}}, color={0,127,255}));
        connect(senTem3.port_b, bou.ports[1])
          annotation (Line(points={{-60,-50},{-80,-50}}, color={0,127,255}));
        connect(cons_cold.y, electricReformulatedEIR.TSet) annotation (Line(
              points={{-79,10},{-50,10},{-50,7},{-20,7}}, color={0,0,127}));
        connect(senTem.port_b, electricReformulatedEIR.port_a1) annotation (
            Line(points={{-52,70},{-34,70},{-34,16},{-18,16}}, color={0,127,255}));
        connect(electricReformulatedEIR.port_b1, senTem1.port_a) annotation (
            Line(points={{2,16},{26,16},{26,70},{48,70}}, color={0,127,255}));
        connect(electricReformulatedEIR.port_a2, senTem2.port_b) annotation (
            Line(points={{2,4},{22,4},{22,-50},{40,-50}}, color={0,127,255}));
        connect(electricReformulatedEIR.port_b2, senTem3.port_a) annotation (
            Line(points={{-18,4},{-30,4},{-30,-50},{-40,-50}}, color={0,127,255}));
        connect(booleanExpression.y, electricReformulatedEIR.on) annotation (
            Line(points={{-79,40},{-50,40},{-50,13},{-20,13}}, color={255,0,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end endless_crying_b;
    end Tests;

    package calibration
      model TFP_basic

      parameter
          Buildings.Fluid.Chillers.Data.ElectricReformulatedEIR.ReformEIRChiller_Trane_RTHB_1051kW_5_05COP_Valve
          per;

        Fluid.Chillers.ElectricReformulatedEIR chi(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=211/3.6,
          m2_flow_nominal=166/3.6,
          dp1_nominal=18000,
          dp2_nominal=18000,
          per=per)
          annotation (Placement(transformation(extent={{-20,0},{0,20}})));
        Fluid.Sources.MassFlowSource_T boundary(
          redeclare package Medium = Buildings.Media.Water,
          use_m_flow_in=true,
          m_flow=190/3.6,
          use_T_in=true,
          nPorts=1)
          annotation (Placement(transformation(extent={{100,-80},{80,-60}})));
        Fluid.Sources.Boundary_pT bou(redeclare package Medium =
              Buildings.Media.Water, nPorts=1)
          annotation (Placement(transformation(extent={{-100,-80},{-80,-60}})));
        Fluid.Sources.Boundary_pT bou1(redeclare package Medium =
              Buildings.Media.Water, nPorts=1)
          annotation (Placement(transformation(extent={{100,60},{80,80}})));
        Fluid.Sources.MassFlowSource_T boundary1(
          redeclare package Medium = Buildings.Media.Water,
          use_m_flow_in=true,
          m_flow=180/3.6,
          use_T_in=true,
          nPorts=1)
          annotation (Placement(transformation(extent={{-100,60},{-80,80}})));
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource(
              "modelica://Buildings/Data/tfp.txt"),
          columns={7,8,11,12,9,13,14})
          annotation (Placement(transformation(extent={{-200,40},{-180,60}})));
        Modelica.Blocks.Sources.RealExpression realExpression(y=4 + 273.15)
          annotation (Placement(transformation(extent={{-120,-10},{-100,10}})));
        Fluid.Sensors.TemperatureTwoPort Tcondent(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=180/3.6)
          annotation (Placement(transformation(extent={{-60,60},{-40,80}})));
        Fluid.Sensors.TemperatureTwoPort Tevapsort(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=190/3.6)
          annotation (Placement(transformation(extent={{-60,-80},{-40,-60}})));
        Fluid.Sensors.TemperatureTwoPort Tcondsort(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=180/3.6)
          annotation (Placement(transformation(extent={{60,60},{40,80}})));
        Fluid.Sensors.TemperatureTwoPort Tevapent(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=190/3.6)
          annotation (Placement(transformation(extent={{60,-80},{40,-60}})));
        Modelica.Thermal.HeatTransfer.Celsius.ToKelvin toKelvin
          annotation (Placement(transformation(extent={{-130,50},{-110,70}})));
        Modelica.Thermal.HeatTransfer.Celsius.ToKelvin toKelvin1
          annotation (Placement(transformation(extent={{130,-82},{110,-62}})));
        Modelica.Blocks.Interfaces.RealOutput P
          annotation (Placement(transformation(extent={{100,0},{120,20}})));
        Modelica.Blocks.Math.Gain gain(k=1/1000)
          annotation (Placement(transformation(extent={{60,0},{80,20}})));
        Modelica.Blocks.Sources.BooleanPulse booleanPulse(period=2244600)
          annotation (Placement(transformation(extent={{-120,20},{-100,40}})));
      equation
        connect(combiTimeTable.y[1], boundary1.m_flow_in) annotation (Line(
              points={{-179,50},{-142,50},{-142,78},{-102,78}}, color={0,0,127}));
        connect(combiTimeTable.y[3], boundary.m_flow_in) annotation (Line(
              points={{-179,50},{-160,50},{-160,-100},{140,-100},{140,-62},{102,
                -62}}, color={0,0,127}));
        connect(realExpression.y, chi.TSet) annotation (Line(points={{-99,0},{
                -62,0},{-62,7},{-22,7}}, color={0,0,127}));
        connect(Tevapent.port_a, boundary.ports[1])
          annotation (Line(points={{60,-70},{80,-70}}, color={0,127,255}));
        connect(Tevapent.port_b, chi.port_a2) annotation (Line(points={{40,-70},
                {20,-70},{20,4},{0,4}}, color={0,127,255}));
        connect(bou.ports[1], Tevapsort.port_a)
          annotation (Line(points={{-80,-70},{-60,-70}}, color={0,127,255}));
        connect(Tevapsort.port_b, chi.port_b2) annotation (Line(points={{-40,
                -70},{-30,-70},{-30,4},{-20,4}}, color={0,127,255}));
        connect(Tcondsort.port_b, chi.port_b1) annotation (Line(points={{40,70},
                {22,70},{22,16},{0,16}}, color={0,127,255}));
        connect(Tcondsort.port_a, bou1.ports[1])
          annotation (Line(points={{60,70},{80,70}}, color={0,127,255}));
        connect(Tcondent.port_b, chi.port_a1) annotation (Line(points={{-40,70},
                {-30,70},{-30,16},{-20,16}}, color={0,127,255}));
        connect(Tcondent.port_a, boundary1.ports[1])
          annotation (Line(points={{-60,70},{-80,70}}, color={0,127,255}));
        connect(combiTimeTable.y[2], toKelvin.Celsius) annotation (Line(points=
                {{-179,50},{-142,50},{-142,60},{-132,60}}, color={0,0,127}));
        connect(toKelvin.Kelvin, boundary1.T_in) annotation (Line(points={{-109,
                60},{-106,60},{-106,74},{-102,74}}, color={0,0,127}));
        connect(combiTimeTable.y[4], toKelvin1.Celsius) annotation (Line(points=
               {{-179,50},{-160,50},{-160,-100},{140,-100},{140,-72},{132,-72}},
              color={0,0,127}));
        connect(toKelvin1.Kelvin, boundary.T_in) annotation (Line(points={{109,
                -72},{106,-72},{106,-66},{102,-66}}, color={0,0,127}));
        connect(chi.P, gain.u) annotation (Line(points={{1,19},{40,19},{40,10},{58,10}},
              color={0,0,127}));
        connect(gain.y, P)
          annotation (Line(points={{81,10},{110,10}}, color={0,0,127}));
        connect(booleanPulse.y, chi.on) annotation (Line(points={{-99,30},{-62,
                30},{-62,13},{-22,13}}, color={255,0,255}));
        annotation (
          Icon(coordinateSystem(preserveAspectRatio=false)),
          Diagram(coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=2244600,
            Interval=600,
            __Dymola_Algorithm="Dassl"));
      end TFP_basic;

      model TFP_basic_cal

        Fluid.Chillers.ElectricReformulatedEIR chi(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=211/3.6,
          m2_flow_nominal=166/3.6,
          dp1_nominal=18000,
          dp2_nominal=18000,
          per=Buildings.Fluid.Chillers.Data.ElectricReformulatedEIR.ReformEIRChiller_Trane_RTHB_1051kW_5_05COP_Valve())
          annotation (Placement(transformation(extent={{-20,0},{0,20}})));
        Fluid.Sources.MassFlowSource_T boundary(
          redeclare package Medium = Buildings.Media.Water,
          use_m_flow_in=true,
          m_flow=190/3.6,
          use_T_in=true,
          nPorts=1)
          annotation (Placement(transformation(extent={{100,-80},{80,-60}})));
        Fluid.Sources.Boundary_pT bou(redeclare package Medium =
              Buildings.Media.Water, nPorts=1)
          annotation (Placement(transformation(extent={{-100,-80},{-80,-60}})));
        Fluid.Sources.Boundary_pT bou1(redeclare package Medium =
              Buildings.Media.Water, nPorts=1)
          annotation (Placement(transformation(extent={{100,60},{80,80}})));
        Fluid.Sources.MassFlowSource_T boundary1(
          redeclare package Medium = Buildings.Media.Water,
          use_m_flow_in=true,
          m_flow=180/3.6,
          use_T_in=true,
          nPorts=1)
          annotation (Placement(transformation(extent={{-100,60},{-80,80}})));
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource(
              "modelica://Buildings/Data/tfp.txt"),
          columns={7,8,11,12,9,13,14})
          annotation (Placement(transformation(extent={{-200,40},{-180,60}})));
        Modelica.Blocks.Sources.RealExpression realExpression(y=4 + 273.15)
          annotation (Placement(transformation(extent={{-120,-10},{-100,10}})));
        Modelica.Blocks.Sources.BooleanExpression booleanExpression(y=true)
          annotation (Placement(transformation(extent={{-120,10},{-100,30}})));
        Fluid.Sensors.TemperatureTwoPort Tcondent(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=180/3.6)
          annotation (Placement(transformation(extent={{-60,60},{-40,80}})));
        Fluid.Sensors.TemperatureTwoPort Tevapsort(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=190/3.6)
          annotation (Placement(transformation(extent={{-60,-80},{-40,-60}})));
        Fluid.Sensors.TemperatureTwoPort Tcondsort(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=180/3.6)
          annotation (Placement(transformation(extent={{60,60},{40,80}})));
        Fluid.Sensors.TemperatureTwoPort Tevapent(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=190/3.6)
          annotation (Placement(transformation(extent={{60,-80},{40,-60}})));
        Modelica.Thermal.HeatTransfer.Celsius.ToKelvin toKelvin
          annotation (Placement(transformation(extent={{-130,50},{-110,70}})));
        Modelica.Thermal.HeatTransfer.Celsius.ToKelvin toKelvin1
          annotation (Placement(transformation(extent={{130,-82},{110,-62}})));
      equation
        connect(combiTimeTable.y[1], boundary1.m_flow_in) annotation (Line(
              points={{-179,50},{-142,50},{-142,78},{-102,78}}, color={0,0,127}));
        connect(combiTimeTable.y[3], boundary.m_flow_in) annotation (Line(
              points={{-179,50},{-160,50},{-160,-100},{140,-100},{140,-62},{102,
                -62}}, color={0,0,127}));
        connect(booleanExpression.y, chi.on) annotation (Line(points={{-99,20},
                {-60,20},{-60,13},{-22,13}}, color={255,0,255}));
        connect(realExpression.y, chi.TSet) annotation (Line(points={{-99,0},{
                -62,0},{-62,7},{-22,7}}, color={0,0,127}));
        connect(Tevapent.port_a, boundary.ports[1])
          annotation (Line(points={{60,-70},{80,-70}}, color={0,127,255}));
        connect(Tevapent.port_b, chi.port_a2) annotation (Line(points={{40,-70},
                {20,-70},{20,4},{0,4}}, color={0,127,255}));
        connect(bou.ports[1], Tevapsort.port_a)
          annotation (Line(points={{-80,-70},{-60,-70}}, color={0,127,255}));
        connect(Tevapsort.port_b, chi.port_b2) annotation (Line(points={{-40,
                -70},{-30,-70},{-30,4},{-20,4}}, color={0,127,255}));
        connect(Tcondsort.port_b, chi.port_b1) annotation (Line(points={{40,70},{20,70},
                {20,16},{0,16}},         color={0,127,255}));
        connect(Tcondsort.port_a, bou1.ports[1])
          annotation (Line(points={{60,70},{80,70}}, color={0,127,255}));
        connect(Tcondent.port_b, chi.port_a1) annotation (Line(points={{-40,70},
                {-30,70},{-30,16},{-20,16}}, color={0,127,255}));
        connect(Tcondent.port_a, boundary1.ports[1])
          annotation (Line(points={{-60,70},{-80,70}}, color={0,127,255}));
        connect(combiTimeTable.y[2], toKelvin.Celsius) annotation (Line(points=
                {{-179,50},{-142,50},{-142,60},{-132,60}}, color={0,0,127}));
        connect(toKelvin.Kelvin, boundary1.T_in) annotation (Line(points={{-109,
                60},{-106,60},{-106,74},{-102,74}}, color={0,0,127}));
        connect(combiTimeTable.y[4], toKelvin1.Celsius) annotation (Line(points=
               {{-179,50},{-160,50},{-160,-100},{140,-100},{140,-72},{132,-72}},
              color={0,0,127}));
        connect(toKelvin1.Kelvin, boundary.T_in) annotation (Line(points={{109,
                -72},{106,-72},{106,-66},{102,-66}}, color={0,0,127}));
        annotation (
          Icon(coordinateSystem(preserveAspectRatio=false)),
          Diagram(coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=2244600,
            Interval=600,
            __Dymola_Algorithm="Dassl"));
      end TFP_basic_cal;

      model TFP_basic_bis

      parameter
          Buildings.Fluid.Chillers.Data.ElectricReformulatedEIR.ReformEIRChiller_Trane_RTHB_1051kW_5_05COP_Valve
          per;

        Fluid.Chillers.ElectricReformulatedEIR chi(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=211/3.6,
          m2_flow_nominal=166/3.6,
          dp1_nominal=18000,
          dp2_nominal=18000,
          per=per)
          annotation (Placement(transformation(extent={{-20,0},{0,20}})));
        Fluid.Sources.MassFlowSource_T boundary(
          redeclare package Medium = Buildings.Media.Water,
          use_m_flow_in=true,
          m_flow=190/3.6,
          use_T_in=true,
          nPorts=1)
          annotation (Placement(transformation(extent={{100,-80},{80,-60}})));
        Fluid.Sources.Boundary_pT bou(redeclare package Medium =
              Buildings.Media.Water, nPorts=1)
          annotation (Placement(transformation(extent={{-100,-80},{-80,-60}})));
        Fluid.Sources.Boundary_pT bou1(redeclare package Medium =
              Buildings.Media.Water, nPorts=1)
          annotation (Placement(transformation(extent={{100,60},{80,80}})));
        Fluid.Sources.MassFlowSource_T boundary1(
          redeclare package Medium = Buildings.Media.Water,
          use_m_flow_in=true,
          m_flow=180/3.6,
          use_T_in=true,
          nPorts=1)
          annotation (Placement(transformation(extent={{-100,60},{-80,80}})));
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource(
              "modelica://Buildings/Data/tfp_he.txt"),
          columns={15,6,17,8})
          annotation (Placement(transformation(extent={{-200,40},{-180,60}})));
        Modelica.Blocks.Sources.RealExpression realExpression(y=4 + 273.15)
          annotation (Placement(transformation(extent={{-120,-10},{-100,10}})));
        Fluid.Sensors.TemperatureTwoPort Tcondent(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=180/3.6,
          T_start=328.15)
          annotation (Placement(transformation(extent={{-60,60},{-40,80}})));
        Fluid.Sensors.TemperatureTwoPort Tevapsort(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=190/3.6)
          annotation (Placement(transformation(extent={{-60,-80},{-40,-60}})));
        Fluid.Sensors.TemperatureTwoPort Tcondsort(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=180/3.6,
          T_start=333.15)
          annotation (Placement(transformation(extent={{60,60},{40,80}})));
        Fluid.Sensors.TemperatureTwoPort Tevapent(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=190/3.6)
          annotation (Placement(transformation(extent={{60,-80},{40,-60}})));
        Modelica.Blocks.Interfaces.RealOutput P
          annotation (Placement(transformation(extent={{100,0},{120,20}})));
        Modelica.Blocks.Math.Gain gain(k=1/1000)
          annotation (Placement(transformation(extent={{60,0},{80,20}})));
        Modelica.Blocks.Sources.BooleanExpression booleanExpression(y=true)
          annotation (Placement(transformation(extent={{-120,20},{-100,40}})));
      equation
        connect(combiTimeTable.y[1], boundary1.m_flow_in) annotation (Line(
              points={{-179,50},{-142,50},{-142,78},{-102,78}}, color={0,0,127}));
        connect(combiTimeTable.y[3], boundary.m_flow_in) annotation (Line(
              points={{-179,50},{-160,50},{-160,-100},{140,-100},{140,-62},{102,
                -62}}, color={0,0,127}));
        connect(realExpression.y, chi.TSet) annotation (Line(points={{-99,0},{
                -62,0},{-62,7},{-22,7}}, color={0,0,127}));
        connect(Tevapent.port_a, boundary.ports[1])
          annotation (Line(points={{60,-70},{80,-70}}, color={0,127,255}));
        connect(Tevapent.port_b, chi.port_a2) annotation (Line(points={{40,-70},
                {20,-70},{20,4},{0,4}}, color={0,127,255}));
        connect(bou.ports[1], Tevapsort.port_a)
          annotation (Line(points={{-80,-70},{-60,-70}}, color={0,127,255}));
        connect(Tevapsort.port_b, chi.port_b2) annotation (Line(points={{-40,
                -70},{-30,-70},{-30,4},{-20,4}}, color={0,127,255}));
        connect(Tcondsort.port_b, chi.port_b1) annotation (Line(points={{40,70},
                {22,70},{22,16},{0,16}}, color={0,127,255}));
        connect(Tcondsort.port_a, bou1.ports[1])
          annotation (Line(points={{60,70},{80,70}}, color={0,127,255}));
        connect(Tcondent.port_b, chi.port_a1) annotation (Line(points={{-40,70},
                {-30,70},{-30,16},{-20,16}}, color={0,127,255}));
        connect(Tcondent.port_a, boundary1.ports[1])
          annotation (Line(points={{-60,70},{-80,70}}, color={0,127,255}));
        connect(chi.P, gain.u) annotation (Line(points={{1,19},{40,19},{40,10},{58,10}},
              color={0,0,127}));
        connect(gain.y, P)
          annotation (Line(points={{81,10},{110,10}}, color={0,0,127}));
        connect(booleanExpression.y, chi.on) annotation (Line(points={{-99,30},
                {-62,30},{-62,13},{-22,13}}, color={255,0,255}));
        connect(combiTimeTable.y[2], boundary1.T_in) annotation (Line(points={{
                -179,50},{-142,50},{-142,74},{-102,74}}, color={0,0,127}));
        connect(combiTimeTable.y[4], boundary.T_in) annotation (Line(points={{
                -179,50},{-160,50},{-160,-100},{140,-100},{140,-66},{102,-66}},
              color={0,0,127}));
        annotation (
          Icon(coordinateSystem(preserveAspectRatio=false)),
          Diagram(coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=2244600,
            Interval=600,
            __Dymola_Algorithm="Dassl"));
      end TFP_basic_bis;
    end calibration;

    package carnot

      model carnot_wip
        Integer mode = 2;
        parameter Modelica.SIunits.MassFlowRate m_flow_hot= 211*1000/3600;
        parameter Modelica.SIunits.MassFlowRate m_flow_cold= 332*1000/3600;
        parameter Real T_set_hot = 61+273.15;
        parameter Real T_set_hot_max = 63+273.15;
        parameter Real T_set_hot_min = 41+273.15;
        parameter Real T_set_cold_max = 14+273.15;
        parameter Real T_set_cold = 4+273.15;

        Fluid.FixedResistances.Junction jun(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={m_flow_hot,-m_flow_hot,-m_flow_hot},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=270,
              origin={10,250})));
        Fluid.Actuators.Valves.TwoWayLinear CV523(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_hot,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          dpValve_nominal=5000,
          use_inputFilter=false)
                              annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={10,50})));
        Fluid.FixedResistances.Junction jun1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={m_flow_hot,-m_flow_hot,m_flow_hot},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,10},{10,-10}},
              rotation=270,
              origin={-90,190})));
        Fluid.Actuators.Valves.TwoWayLinear CV123(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_cold,
          dpValve_nominal=5000,
          use_inputFilter=false)
                              annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=90,
              origin={50,-110})));
        Fluid.FixedResistances.Junction jun5(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={m_flow_cold,-m_flow_cold,-m_flow_cold},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=90,
              origin={50,-250})));
        Fluid.Actuators.Valves.TwoWayLinear XV112A(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_cold/2,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          dpValve_nominal=5000)
                              annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-30,-90})));
        Fluid.Sensors.VolumeFlowRate FT521(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={10,90})));
        Controls.Continuous.LimPID FT_PID_521(k=1, Ti=1)
          annotation (Placement(transformation(extent={{140,120},{160,140}})));
        Controls.Continuous.LimPID FT_PID_123(k=1, Ti=1)
          annotation (Placement(transformation(extent={{140,-100},{160,-80}})));
        Fluid.Sensors.VolumeFlowRate FT121(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=m_flow_cold)
                                                         annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=90,
              origin={50,-150})));
        Fluid.Sensors.TemperatureTwoPort TT511(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100)
          annotation (Placement(transformation(extent={{80,250},{100,270}})));
        Fluid.Sensors.TemperatureTwoPort TT521(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=-90,
              origin={10,120})));
        Modelica.Blocks.Sources.RealExpression XV521_switch(y=if mode == 1 then 1
               else 0)
          annotation (Placement(transformation(extent={{-240,240},{-220,260}})));
        Modelica.Blocks.Sources.RealExpression XV522_switch(y=if mode >= 2 then 1
               else 0)
          annotation (Placement(transformation(extent={{-240,210},{-220,230}})));
        Modelica.Blocks.Sources.RealExpression XV112A_switch(y=if mode >= 1 then 1
               else 0)
          annotation (Placement(transformation(extent={{-120,-80},{-100,-60}})));
        Modelica.Blocks.Sources.RealExpression cons_cold(y=4 + 273.15)
          annotation (Placement(transformation(extent={{-200,20},{-180,40}})));
        Modelica.Blocks.Sources.RealExpression CV123_reg(y=if mode == 1 or mode
               == 3 then 166/3600 else 332/3600)
          annotation (Placement(transformation(extent={{100,-100},{120,-80}})));
        Fluid.Sensors.TemperatureTwoPort TT121(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=322/3.6)
                                                         annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=270,
              origin={50,-80})));
        Controls_a.TFP.PID_Valve_evap pID_Valve_evap annotation (Placement(
              transformation(extent={{-120,-240},{-100,-220}})));
        Controls_a.TFP.PID_Valve_cond pID_Valve_cond
          annotation (Placement(transformation(extent={{-200,160},{-180,180}})));
        Modelica.Blocks.Sources.RealExpression CV523_reg(y=211/3600)
          annotation (Placement(transformation(extent={{100,120},{120,140}})));
        Fluid.Actuators.Valves.ThreeWayLinear val(
          redeclare package Medium = Buildings.Media.Water,
          use_inputFilter=false,
          m_flow_nominal=m_flow_cold,
          dpValve_nominal=5000) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=270,
              origin={50,-200})));
        Fluid.Actuators.Valves.ThreeWayLinear val1(
          redeclare package Medium = Buildings.Media.Water,
          use_inputFilter=false,
          m_flow_nominal=m_flow_hot,
          dpValve_nominal=5000) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=90,
              origin={10,150})));
        Modelica.Blocks.Sources.IntegerExpression integerExpression(y=mode)
          annotation (Placement(transformation(extent={{-240,160},{-220,180}})));
        Fluid.Chillers.Carnot_TEva TFPA(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=m_flow_hot,
          m2_flow_nominal=m_flow_cold/2,
          QEva_flow_nominal=-166/3.6*4185*(7),
          dTEva_nominal=-7,
          dTCon_nominal=15,
          use_eta_Carnot_nominal=true,
          etaCarnot_nominal=0.95,
          COP_nominal=6.5,
          TCon_nominal=313.15,
          dp1_nominal=40000,
          dp2_nominal=40000,
          QEva_flow_min(displayUnit="kW") = -1800000)
          annotation (Placement(transformation(extent={{20,-20},{40,0}})));
        RJC.Heat_exchanger heat_exchanger(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water)
          annotation (Placement(transformation(extent={{200,180},{220,200}})));
        RJF.Cold_exchanger cold_exchanger(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water)
          annotation (Placement(transformation(extent={{200,-20},{220,0}})));
        Fluid.Sources.Boundary_pT bou1(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=false,
          T=285.15,
          nPorts=3)
          annotation (Placement(transformation(extent={{320,240},{300,260}})));
        Fluid.Sensors.TemperatureTwoPort TT1(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100)
          annotation (Placement(transformation(extent={{240,240},{220,260}})));
        Buildings.Fluid.Movers.FlowControlled_dp fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=500/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          constantHead(displayUnit="bar") = 300000)
          annotation (Placement(transformation(extent={{280,240},{260,260}})));
        Modelica.Blocks.Sources.RealExpression cons_cold1(y=15 + 273.15)
          annotation (Placement(transformation(extent={{-200,-204},{-180,-184}})));
        Fluid.Sources.Boundary_pT bou2(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=false,
          T=323.15,
          nPorts=2)
          annotation (Placement(transformation(extent={{-100,320},{-80,340}})));
        Buildings.Fluid.Movers.FlowControlled_m_flow fan1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=211/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_PEC per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          addPowerToMedium=true,
          dp_nominal(displayUnit="bar") = 1000000,
          constantMassFlowRate=200/3.6)
          annotation (Placement(transformation(extent={{-40,320},{-20,340}})));
        Fluid.Sources.Boundary_pT bou3(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=false,
          T=285.15,
          nPorts=2)
          annotation (Placement(transformation(extent={{160,-300},{140,-280}})));
        Buildings.Fluid.Movers.FlowControlled_m_flow fan2(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=315/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_PEG per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          addPowerToMedium=true,
          dp_nominal(displayUnit="bar") = 1000000,
          constantMassFlowRate=200/3.6)
          annotation (Placement(transformation(extent={{100,-300},{80,-280}})));
        Modelica.Blocks.Sources.IntegerExpression integerExpression1(y=mode)
          annotation (Placement(transformation(extent={{158,148},{178,168}})));
        Fluid.Actuators.Valves.ThreeWayLinear val2(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=220/3.6,
          dpValve_nominal=5000) annotation (Placement(transformation(
              extent={{-10,10},{10,-10}},
              rotation=90,
              origin={70,190})));
      equation

        connect(jun.port_3, jun1.port_1) annotation (Line(points={{0,250},{-90,
                250},{-90,200}},
                            color={238,46,47},
            thickness=0.5));

        connect(FT521.port_b, CV523.port_a)
          annotation (Line(points={{10,80},{10,60}}, color={238,46,47},
            thickness=0.5));
        connect(FT521.V_flow, FT_PID_521.u_m) annotation (Line(points={{21,90},{50,90},
                {50,100},{150,100},{150,118}}, color={0,0,127}));
        connect(FT_PID_521.y, CV523.y) annotation (Line(points={{161,130},{180,130},{180,
                50},{22,50}}, color={0,0,127}));
        connect(FT121.V_flow, FT_PID_123.u_m) annotation (Line(points={{61,-150},{150,
                -150},{150,-102}}, color={0,0,127}));
        connect(FT_PID_123.y, CV123.y) annotation (Line(points={{161,-90},{180,-90},{180,
                -68},{80,-68},{80,-110},{62,-110}},
                                                  color={0,0,127}));
        connect(TT521.port_b, FT521.port_a)
          annotation (Line(points={{10,110},{10,100}}, color={238,46,47},
            thickness=0.5));
        connect(CV123_reg.y, FT_PID_123.u_s)
          annotation (Line(points={{121,-90},{138,-90}}, color={0,0,127}));
        connect(TT121.port_a, CV123.port_b)
          annotation (Line(points={{50,-90},{50,-100}}, color={0,127,255},
            thickness=0.5));
        connect(pID_Valve_evap.TFP_TT121, TT121.T) annotation (Line(points={{-122,-234},
                {-220,-234},{-220,-260},{10,-260},{10,-80},{39,-80}},       color=
               {0,0,127}));
        connect(TT511.T, pID_Valve_evap.TFP_TT511) annotation (Line(points={{90,271},
                {90,300},{-250,300},{-250,-252},{-208,-252},{-208,-238},{-122,
                -238}},      color={0,0,127}));
        connect(TT511.T, pID_Valve_cond.TFP_TT511) annotation (Line(points={{90,271},
                {90,300},{-250,300},{-250,176},{-202,176}},      color={0,0,127}));
        connect(TT521.T, pID_Valve_cond.TFP_TT521) annotation (Line(points={{-1,
                120},{-220,120},{-220,162},{-202,162}}, color={0,0,127}));
        connect(CV523_reg.y, FT_PID_521.u_s)
          annotation (Line(points={{121,130},{138,130}}, color={0,0,127}));
        connect(val.port_1, jun5.port_2) annotation (Line(
            points={{50,-210},{50,-240}},
            color={0,127,255},
            thickness=0.5));
        connect(pID_Valve_evap.CV121, val.y) annotation (Line(points={{-99,-235},
                {80,-235},{80,-200},{62,-200}}, color={0,0,127}));
        connect(pID_Valve_cond.CV521, val1.y) annotation (Line(points={{-179,165},{-31.5,
                165},{-31.5,150},{-2,150}}, color={0,0,127}));
        connect(val1.port_2, TT521.port_a) annotation (Line(
            points={{10,140},{10,130}},
            color={238,46,47},
            thickness=0.5));
        connect(val1.port_1, jun.port_2) annotation (Line(
            points={{10,160},{10,240}},
            color={238,46,47},
            thickness=0.5));
        connect(integerExpression.y, pID_Valve_cond.TFP_mode) annotation (Line(points=
               {{-219,170},{-212,170},{-212,170},{-202,170}}, color={255,127,0}));
        connect(FT121.port_a, val.port_2) annotation (Line(
            points={{50,-160},{50,-190}},
            color={0,127,255},
            thickness=0.5));
        connect(FT121.port_b, CV123.port_a) annotation (Line(
            points={{50,-140},{50,-120}},
            color={0,127,255},
            thickness=0.5));
        connect(cons_cold.y, TFPA.TSet) annotation (Line(points={{-179,30},{-136,30},{
                -136,10},{0,10},{0,-1},{18,-1}}, color={0,0,127}));
        connect(TFPA.port_b2, XV112A.port_a) annotation (Line(
            points={{20,-16},{-30,-16},{-30,-80}},
            color={0,127,255},
            thickness=0.5));
        connect(CV523.port_b, TFPA.port_a1)
          annotation (Line(points={{10,40},{10,-4},{20,-4}}, color={238,46,47},
            thickness=0.5));

        connect(jun1.port_2, heat_exchanger.port_a2) annotation (Line(points={{-90,180},
                {-90,170},{230,170},{230,184},{220,184}}, color={0,127,255}));
        connect(heat_exchanger.port_b2, val1.port_3) annotation (Line(points={{200,184},
                {90,184},{90,150},{20,150}}, color={0,127,255}));
        connect(XV112A_switch.y, XV112A.y) annotation (Line(points={{-99,-70},{-6,-70},
                {-6,-90},{-18,-90}}, color={0,0,127}));
        connect(jun5.port_3, cold_exchanger.port_a2) annotation (Line(points={{60,-250},
                {220,-250},{220,-16}}, color={0,127,255}));
        connect(cold_exchanger.port_b2, val.port_3) annotation (Line(points={{200,-16},
                {200,-180},{30,-180},{30,-200},{40,-200}}, color={0,127,255}));
        connect(TT1.port_b, heat_exchanger.port_a1) annotation (Line(points={{220,250},
                {200,250},{200,196}}, color={0,127,255}));
        connect(TT1.port_b, cold_exchanger.port_a1) annotation (Line(points={{220,250},
                {190,250},{190,-4},{200,-4}}, color={0,127,255}));
        connect(heat_exchanger.port_b1, bou1.ports[1]) annotation (Line(points={{220,196},
                {300,196},{300,252.667}}, color={0,127,255}));
        connect(cold_exchanger.port_b1, bou1.ports[2])
          annotation (Line(points={{220,-4},{300,-4},{300,250}}, color={0,127,255}));
        connect(TT1.T, heat_exchanger.PEM_TT200) annotation (Line(points={{230,261},{230,
                270},{180,270},{180,186},{198,186}}, color={0,0,127}));
        connect(TT1.T, cold_exchanger.PEM_TT200) annotation (Line(points={{230,261},{230,
                270},{184,270},{184,-14},{198,-14}}, color={0,0,127}));
        connect(pID_Valve_evap.CV122, cold_exchanger.TFP_CV122) annotation (Line(
              points={{-99,-225},{192,-225},{192,-6},{198,-6}}, color={0,0,127}));
        connect(pID_Valve_cond.CV522, heat_exchanger.TFP_CV522) annotation (Line(
              points={{-179,175},{-180,175},{-180,176},{158,176},{158,194},{198,194}},
              color={0,0,127}));
        connect(TT1.T, pID_Valve_evap.PEM_TT200) annotation (Line(points={{230,261},{230,
                284},{346,284},{346,-270},{-140,-270},{-140,-222},{-122,-222}}, color=
               {0,0,127}));
        connect(fan.port_a, bou1.ports[3]) annotation (Line(points={{280,250},{
                290,250},{290,247.333},{300,247.333}},
                                              color={0,127,255}));
        connect(fan.port_b, TT1.port_a)
          annotation (Line(points={{260,250},{240,250}}, color={0,127,255}));
        connect(cons_cold1.y, pID_Valve_evap.DEG_TT121) annotation (Line(points={{-179,
                -194},{-152,-194},{-152,-226},{-122,-226}}, color={0,0,127}));
        connect(bou2.ports[1], fan1.port_a) annotation (Line(points={{-80,332},{-60,332},
                {-60,330},{-40,330}}, color={238,46,47},
            thickness=0.5));
        connect(fan1.port_b, jun.port_1)
          annotation (Line(points={{-20,330},{10,330},{10,260}}, color={238,46,
                47},
            thickness=0.5));
        connect(TT511.port_b, bou2.ports[2]) annotation (Line(points={{100,260},{122,260},
                {122,352},{-80,352},{-80,328}}, color={238,46,47},
            thickness=0.5));
        connect(bou3.ports[1], fan2.port_a) annotation (Line(points={{140,-288},{120,-288},
                {120,-290},{100,-290}}, color={0,127,255},
            thickness=0.5));
        connect(fan2.port_b, jun5.port_1) annotation (Line(points={{80,-290},{50,-290},
                {50,-260}}, color={0,127,255},
            thickness=0.5));
        connect(XV112A.port_b, bou3.ports[2]) annotation (Line(points={{-30,-100},{-30,
                -324},{140,-324},{140,-292}}, color={0,127,255},
            thickness=0.5));
        connect(integerExpression1.y, heat_exchanger.mode) annotation (Line(
              points={{179,158},{192,158},{192,160},{204,160},{204,178}}, color=
               {255,127,0}));
        connect(TFPA.port_a2, TT121.port_b) annotation (Line(
            points={{40,-16},{50,-16},{50,-70}},
            color={0,127,255},
            thickness=0.5));
        connect(TT511.port_a, val2.port_2) annotation (Line(points={{80,260},{
                70,260},{70,200}}, color={0,127,255}));
        connect(val2.port_3, jun1.port_3)
          annotation (Line(points={{60,190},{-80,190}}, color={0,127,255}));
        connect(TFPA.port_b1, val2.port_1) annotation (Line(points={{40,-4},{70,
                -4},{70,180}}, color={0,127,255}));
        connect(XV522_switch.y, val2.y) annotation (Line(points={{-219,220},{92,
                220},{92,190},{82,190}}, color={0,0,127}));
        annotation (Diagram(coordinateSystem(extent={{-100,-100},{100,100}})), Icon(
              coordinateSystem(extent={{-100,-100},{100,100}}), graphics={Rectangle(
                extent={{0,80},{60,20}},
                lineColor={238,46,47},
                fillColor={238,46,47},
                fillPattern=FillPattern.Solid),                           Rectangle(
                extent={{0,-20},{60,-80}},
                lineColor={28,108,200},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid),                           Rectangle(
                extent={{-60,80},{0,20}},
                lineColor={238,46,47},
                fillColor={244,125,35},
                fillPattern=FillPattern.Solid),                           Rectangle(
                extent={{-60,-20},{0,-80}},
                lineColor={28,108,200},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid)}),
          Documentation(info="<html>
<h4><span style=\"color: #000000\">HPSHC modes</span></h4>
<p>For the HPSHC, 4 possible modes :</p>
<p>0 - Off</p>
<p>1 - Cold mode</p>
<p>2 - HPSHC full</p>
<p>3 - HPSHC 1/2</p>
</html>"),experiment(StopTime=1, __Dymola_Algorithm="Dassl"));
      end carnot_wip;

      model carnot_wip_0
        Integer mode = 2;
        parameter Modelica.SIunits.MassFlowRate m_flow_hot= 211*1000/3600;
        parameter Modelica.SIunits.MassFlowRate m_flow_cold= 332*1000/3600;
        parameter Real T_set_hot = 61+273.15;
        parameter Real T_set_hot_max = 63+273.15;
        parameter Real T_set_hot_min = 41+273.15;
        parameter Real T_set_cold_max = 14+273.15;
        parameter Real T_set_cold = 4+273.15;

        Fluid.Actuators.Valves.TwoWayLinear XV522(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_hot,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          dpValve_nominal=5000)
                              annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={70,230})));
        Fluid.Actuators.Valves.TwoWayLinear CV523(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_hot,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          dpValve_nominal=5000,
          use_inputFilter=false)
                              annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={10,50})));
        Fluid.Actuators.Valves.TwoWayLinear CV123(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_cold,
          dpValve_nominal=5000,
          use_inputFilter=false)
                              annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=90,
              origin={50,-110})));
        Fluid.Actuators.Valves.TwoWayLinear XV112A(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_cold/2,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          dpValve_nominal=5000)
                              annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-30,-90})));
        Fluid.Sensors.VolumeFlowRate FT521(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={10,90})));
        Controls.Continuous.LimPID FT_PID_521(k=1, Ti=1)
          annotation (Placement(transformation(extent={{140,120},{160,140}})));
        Controls.Continuous.LimPID FT_PID_123(k=1, Ti=1)
          annotation (Placement(transformation(extent={{140,-100},{160,-80}})));
        Fluid.Sensors.VolumeFlowRate FT121(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=m_flow_cold)
                                                         annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=90,
              origin={50,-150})));
        Fluid.Sensors.TemperatureTwoPort TT511(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100)
          annotation (Placement(transformation(extent={{80,250},{100,270}})));
        Fluid.Sensors.TemperatureTwoPort TT521(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=-90,
              origin={10,120})));
        Modelica.Blocks.Sources.RealExpression XV112A_switch(y=if mode >= 1 then 1
               else 0)
          annotation (Placement(transformation(extent={{-120,-80},{-100,-60}})));
        Modelica.Blocks.Sources.RealExpression CV123_reg(y=if mode == 1 or mode
               == 3 then 166/3600 else 332/3600)
          annotation (Placement(transformation(extent={{100,-100},{120,-80}})));
        Fluid.Sensors.TemperatureTwoPort TT121(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=322/3.6)
                                                         annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=270,
              origin={50,-80})));
        Modelica.Blocks.Sources.RealExpression CV523_reg(y=211/3600)
          annotation (Placement(transformation(extent={{100,120},{120,140}})));
        Fluid.Chillers.Carnot_TEva TFPA(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=m_flow_hot,
          m2_flow_nominal=m_flow_cold/2,
          QEva_flow_nominal=-166/3.6*4185*(7),
          dTEva_nominal=-7,
          dTCon_nominal=15,
          use_eta_Carnot_nominal=true,
          etaCarnot_nominal=0.95,
          COP_nominal=6.5,
          TCon_nominal=313.15,
          dp1_nominal=40000,
          dp2_nominal=40000,
          QEva_flow_min(displayUnit="kW") = -1800000)
          annotation (Placement(transformation(extent={{20,-20},{40,0}})));
        Fluid.Sources.Boundary_pT bou2(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=false,
          T=323.15,
          nPorts=2)
          annotation (Placement(transformation(extent={{-100,320},{-80,340}})));
        Buildings.Fluid.Movers.FlowControlled_m_flow fan1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=211/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_PEC per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          addPowerToMedium=true,
          dp_nominal(displayUnit="bar") = 1000000,
          constantMassFlowRate=200/3.6)
          annotation (Placement(transformation(extent={{-40,320},{-20,340}})));
        Fluid.Sources.Boundary_pT bou3(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=false,
          T=285.15,
          nPorts=2)
          annotation (Placement(transformation(extent={{160,-300},{140,-280}})));
        Buildings.Fluid.Movers.FlowControlled_m_flow fan2(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=315/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_PEG per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          addPowerToMedium=true,
          dp_nominal(displayUnit="bar") = 1000000,
          constantMassFlowRate=200/3.6)
          annotation (Placement(transformation(extent={{100,-300},{80,-280}})));
        Modelica.Blocks.Sources.RealExpression XV112A_switch1(y=1)
          annotation (Placement(transformation(extent={{-40,220},{-20,240}})));
        Modelica.Blocks.Sources.RealExpression XV112A_switch2(y=4 + 273.15)
          annotation (Placement(transformation(extent={{-100,0},{-80,20}})));
      equation

        connect(FT521.port_b, CV523.port_a)
          annotation (Line(points={{10,80},{10,60}}, color={238,46,47},
            thickness=0.5));
        connect(FT521.V_flow, FT_PID_521.u_m) annotation (Line(points={{21,90},{50,90},
                {50,100},{150,100},{150,118}}, color={0,0,127}));
        connect(FT_PID_521.y, CV523.y) annotation (Line(points={{161,130},{180,130},{180,
                50},{22,50}}, color={0,0,127}));
        connect(FT121.V_flow, FT_PID_123.u_m) annotation (Line(points={{61,-150},{150,
                -150},{150,-102}}, color={0,0,127}));
        connect(FT_PID_123.y, CV123.y) annotation (Line(points={{161,-90},{180,-90},{180,
                -68},{80,-68},{80,-110},{62,-110}},
                                                  color={0,0,127}));
        connect(XV522.port_b, TT511.port_a) annotation (Line(points={{70,240},{70,
                260},{80,260}}, color={238,46,47},
            thickness=0.5));
        connect(TT521.port_b, FT521.port_a)
          annotation (Line(points={{10,110},{10,100}}, color={238,46,47},
            thickness=0.5));
        connect(CV123_reg.y, FT_PID_123.u_s)
          annotation (Line(points={{121,-90},{138,-90}}, color={0,0,127}));
        connect(TT121.port_a, CV123.port_b)
          annotation (Line(points={{50,-90},{50,-100}}, color={0,127,255},
            thickness=0.5));
        connect(CV523_reg.y, FT_PID_521.u_s)
          annotation (Line(points={{121,130},{138,130}}, color={0,0,127}));
        connect(FT121.port_b, CV123.port_a) annotation (Line(
            points={{50,-140},{50,-120}},
            color={0,127,255},
            thickness=0.5));
        connect(TFPA.port_b2, XV112A.port_a) annotation (Line(
            points={{20,-16},{-30,-16},{-30,-80}},
            color={0,127,255},
            thickness=0.5));
        connect(CV523.port_b, TFPA.port_a1)
          annotation (Line(points={{10,40},{10,-4},{20,-4}}, color={0,127,255}));
        connect(XV112A_switch.y, XV112A.y) annotation (Line(points={{-99,-70},{-6,-70},
                {-6,-90},{-18,-90}}, color={0,0,127}));
        connect(bou2.ports[1], fan1.port_a) annotation (Line(points={{-80,332},{-60,332},
                {-60,330},{-40,330}}, color={0,127,255}));
        connect(TT511.port_b, bou2.ports[2]) annotation (Line(points={{100,260},{122,260},
                {122,352},{-80,352},{-80,328}}, color={0,127,255}));
        connect(bou3.ports[1], fan2.port_a) annotation (Line(points={{140,-288},{120,-288},
                {120,-290},{100,-290}}, color={0,127,255}));
        connect(XV112A.port_b, bou3.ports[2]) annotation (Line(points={{-30,-100},{-30,
                -324},{140,-324},{140,-292}}, color={0,127,255}));
        connect(FT121.port_a, fan2.port_b) annotation (Line(points={{50,-160},{
                50,-290},{80,-290}}, color={0,127,255}));
        connect(XV522.port_a, TFPA.port_b1) annotation (Line(points={{70,220},{
                70,-4},{40,-4}}, color={0,127,255}));
        connect(XV112A_switch1.y, XV522.y)
          annotation (Line(points={{-19,230},{58,230}}, color={0,0,127}));
        connect(XV112A_switch2.y, TFPA.TSet) annotation (Line(points={{-79,10},
                {-28,10},{-28,-1},{18,-1}}, color={0,0,127}));
        connect(TFPA.port_a2, TT121.port_b) annotation (Line(points={{40,-16},{
                50,-16},{50,-70}}, color={0,127,255}));
        connect(fan1.port_b, TT521.port_a) annotation (Line(points={{-20,330},{
                10,330},{10,130}}, color={0,127,255}));
        annotation (Diagram(coordinateSystem(extent={{-100,-100},{100,100}})), Icon(
              coordinateSystem(extent={{-100,-100},{100,100}}), graphics={Rectangle(
                extent={{0,80},{60,20}},
                lineColor={238,46,47},
                fillColor={238,46,47},
                fillPattern=FillPattern.Solid),                           Rectangle(
                extent={{0,-20},{60,-80}},
                lineColor={28,108,200},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid),                           Rectangle(
                extent={{-60,80},{0,20}},
                lineColor={238,46,47},
                fillColor={244,125,35},
                fillPattern=FillPattern.Solid),                           Rectangle(
                extent={{-60,-20},{0,-80}},
                lineColor={28,108,200},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid)}),
          Documentation(info="<html>
<h4><span style=\"color: #000000\">HPSHC modes</span></h4>
<p>For the HPSHC, 4 possible modes :</p>
<p>0 - Off</p>
<p>1 - Cold mode</p>
<p>2 - HPSHC full</p>
<p>3 - HPSHC 1/2</p>
</html>"),experiment(StopTime=1, __Dymola_Algorithm="Dassl"));
      end carnot_wip_0;

      model carnot_wip_1
        Integer mode = 2;
        parameter Modelica.SIunits.MassFlowRate m_flow_hot= 211*1000/3600;
        parameter Modelica.SIunits.MassFlowRate m_flow_cold= 332*1000/3600;
        parameter Real T_set_hot = 61+273.15;
        parameter Real T_set_hot_max = 63+273.15;
        parameter Real T_set_hot_min = 41+273.15;
        parameter Real T_set_cold_max = 14+273.15;
        parameter Real T_set_cold = 4+273.15;

        Fluid.FixedResistances.Junction jun(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={m_flow_hot,-m_flow_hot,-m_flow_hot},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=270,
              origin={10,250})));
        Fluid.Actuators.Valves.TwoWayLinear XV521(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_hot,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          dpValve_nominal=5000)
          annotation (Placement(transformation(extent={{-40,180},{-60,200}})));
        Fluid.Actuators.Valves.TwoWayLinear XV522(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_hot,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          dpValve_nominal=5000)
                              annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={70,230})));
        Fluid.Actuators.Valves.TwoWayLinear CV523(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_hot,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          dpValve_nominal=5000,
          use_inputFilter=false)
                              annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={10,50})));
        Fluid.FixedResistances.Junction jun1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={m_flow_hot,-m_flow_hot,m_flow_hot},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,10},{10,-10}},
              rotation=270,
              origin={-90,190})));
        Fluid.FixedResistances.Junction jun3(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={m_flow_hot,-m_flow_hot,-m_flow_hot},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,10},{10,-10}},
              rotation=90,
              origin={70,190})));
        Fluid.Actuators.Valves.TwoWayLinear CV123(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_cold,
          dpValve_nominal=5000,
          use_inputFilter=false)
                              annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=90,
              origin={50,-110})));
        Fluid.FixedResistances.Junction jun5(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={m_flow_cold,-m_flow_cold,-m_flow_cold},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=90,
              origin={50,-250})));
        Fluid.Actuators.Valves.TwoWayLinear XV112A(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_cold/2,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          dpValve_nominal=5000)
                              annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-30,-90})));
        Fluid.Sensors.VolumeFlowRate FT521(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={10,90})));
        Controls.Continuous.LimPID FT_PID_521(k=1, Ti=1)
          annotation (Placement(transformation(extent={{140,120},{160,140}})));
        Controls.Continuous.LimPID FT_PID_123(k=1, Ti=1)
          annotation (Placement(transformation(extent={{140,-100},{160,-80}})));
        Fluid.Sensors.VolumeFlowRate FT121(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=m_flow_cold)
                                                         annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=90,
              origin={50,-150})));
        Fluid.Sensors.TemperatureTwoPort TT511(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100)
          annotation (Placement(transformation(extent={{80,250},{100,270}})));
        Fluid.Sensors.TemperatureTwoPort TT521(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=-90,
              origin={10,120})));
        Modelica.Blocks.Sources.RealExpression XV521_switch(y=if mode == 1 then 1
               else 0)
          annotation (Placement(transformation(extent={{-240,240},{-220,260}})));
        Modelica.Blocks.Sources.RealExpression XV522_switch(y=if mode >= 2 then 1
               else 0)
          annotation (Placement(transformation(extent={{-240,210},{-220,230}})));
        Modelica.Blocks.Sources.RealExpression XV112A_switch(y=if mode >= 1 then 1
               else 0)
          annotation (Placement(transformation(extent={{-120,-80},{-100,-60}})));
        Modelica.Blocks.Sources.RealExpression cons_cold(y=4 + 273.15)
          annotation (Placement(transformation(extent={{-200,20},{-180,40}})));
        Modelica.Blocks.Sources.RealExpression CV123_reg(y=if mode == 1 or mode
               == 3 then 166/3600 else 332/3600)
          annotation (Placement(transformation(extent={{100,-100},{120,-80}})));
        Fluid.Sensors.TemperatureTwoPort TT121(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=322/3.6)
                                                         annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=270,
              origin={50,-80})));
        Controls_a.TFP.PID_Valve_evap pID_Valve_evap annotation (Placement(
              transformation(extent={{-120,-240},{-100,-220}})));
        Controls_a.TFP.PID_Valve_cond pID_Valve_cond
          annotation (Placement(transformation(extent={{-200,160},{-180,180}})));
        Modelica.Blocks.Sources.RealExpression CV523_reg(y=211/3600)
          annotation (Placement(transformation(extent={{100,120},{120,140}})));
        Fluid.Actuators.Valves.ThreeWayLinear val(
          redeclare package Medium = Buildings.Media.Water,
          use_inputFilter=false,
          m_flow_nominal=m_flow_cold,
          dpValve_nominal=5000) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=270,
              origin={50,-200})));
        Fluid.Actuators.Valves.ThreeWayLinear val1(
          redeclare package Medium = Buildings.Media.Water,
          use_inputFilter=false,
          m_flow_nominal=m_flow_hot,
          dpValve_nominal=5000) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=90,
              origin={10,150})));
        Modelica.Blocks.Sources.IntegerExpression integerExpression(y=mode)
          annotation (Placement(transformation(extent={{-240,160},{-220,180}})));
        Fluid.Chillers.Carnot_TEva TFPA(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=m_flow_hot,
          m2_flow_nominal=m_flow_cold/2,
          QEva_flow_nominal=-166/3.6*4185*(7),
          dTEva_nominal=-7,
          dTCon_nominal=15,
          use_eta_Carnot_nominal=true,
          etaCarnot_nominal=0.95,
          COP_nominal=6.5,
          TCon_nominal=313.15,
          dp1_nominal=40000,
          dp2_nominal=40000,
          QEva_flow_min(displayUnit="kW") = -1800000)
          annotation (Placement(transformation(extent={{20,-20},{40,0}})));
        Modelica.Blocks.Sources.RealExpression cons_cold1(y=15 + 273.15)
          annotation (Placement(transformation(extent={{-200,-204},{-180,-184}})));
        Fluid.Sources.Boundary_pT bou2(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=false,
          T=323.15,
          nPorts=2)
          annotation (Placement(transformation(extent={{-100,320},{-80,340}})));
        Buildings.Fluid.Movers.FlowControlled_m_flow fan1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=211/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_PEC per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          addPowerToMedium=true,
          dp_nominal(displayUnit="bar") = 1000000,
          constantMassFlowRate=200/3.6)
          annotation (Placement(transformation(extent={{-40,320},{-20,340}})));
        Fluid.Sources.Boundary_pT bou3(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=false,
          T=285.15,
          nPorts=2)
          annotation (Placement(transformation(extent={{160,-300},{140,-280}})));
        Buildings.Fluid.Movers.FlowControlled_m_flow fan2(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=315/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_PEG per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          addPowerToMedium=true,
          dp_nominal(displayUnit="bar") = 1000000,
          constantMassFlowRate=200/3.6)
          annotation (Placement(transformation(extent={{100,-300},{80,-280}})));
        Modelica.Blocks.Sources.RealExpression cons_cold2(y=12 + 273.15)
          annotation (Placement(transformation(extent={{-200,-160},{-180,-140}})));
      equation

        connect(jun1.port_3, XV521.port_b)
          annotation (Line(points={{-80,190},{-60,190}},  color={238,46,47},
            thickness=0.5));
        connect(jun.port_3, jun1.port_1) annotation (Line(points={{0,250},{-90,
                250},{-90,200}},
                            color={238,46,47},
            thickness=0.5));

        connect(jun3.port_3, XV521.port_a)
          annotation (Line(points={{60,190},{-40,190}}, color={238,46,47},
            thickness=0.5));
        connect(jun3.port_2, XV522.port_a)
          annotation (Line(points={{70,200},{70,220}}, color={238,46,47},
            thickness=0.5));
        connect(FT521.port_b, CV523.port_a)
          annotation (Line(points={{10,80},{10,60}}, color={238,46,47},
            thickness=0.5));
        connect(FT521.V_flow, FT_PID_521.u_m) annotation (Line(points={{21,90},{50,90},
                {50,100},{150,100},{150,118}}, color={0,0,127}));
        connect(FT_PID_521.y, CV523.y) annotation (Line(points={{161,130},{180,130},{180,
                50},{22,50}}, color={0,0,127}));
        connect(FT121.V_flow, FT_PID_123.u_m) annotation (Line(points={{61,-150},{150,
                -150},{150,-102}}, color={0,0,127}));
        connect(FT_PID_123.y, CV123.y) annotation (Line(points={{161,-90},{180,-90},{180,
                -68},{80,-68},{80,-110},{62,-110}},
                                                  color={0,0,127}));
        connect(XV522.port_b, TT511.port_a) annotation (Line(points={{70,240},{70,
                260},{80,260}}, color={238,46,47},
            thickness=0.5));
        connect(TT521.port_b, FT521.port_a)
          annotation (Line(points={{10,110},{10,100}}, color={238,46,47},
            thickness=0.5));
        connect(XV521_switch.y, XV521.y) annotation (Line(points={{-219,250},{
                -160,250},{-160,240},{-50,240},{-50,202}},
                                                 color={0,0,127}));
        connect(XV522_switch.y, XV522.y) annotation (Line(points={{-219,220},{
                -160,220},{-160,230},{58,230}},
                                      color={0,0,127}));
        connect(CV123_reg.y, FT_PID_123.u_s)
          annotation (Line(points={{121,-90},{138,-90}}, color={0,0,127}));
        connect(TT121.port_a, CV123.port_b)
          annotation (Line(points={{50,-90},{50,-100}}, color={0,127,255},
            thickness=0.5));
        connect(pID_Valve_evap.TFP_TT121, TT121.T) annotation (Line(points={{-122,-234},
                {-220,-234},{-220,-260},{10,-260},{10,-80},{39,-80}},       color=
               {0,0,127}));
        connect(TT511.T, pID_Valve_evap.TFP_TT511) annotation (Line(points={{90,271},
                {90,300},{-250,300},{-250,-252},{-208,-252},{-208,-238},{-122,
                -238}},      color={0,0,127}));
        connect(TT511.T, pID_Valve_cond.TFP_TT511) annotation (Line(points={{90,271},
                {90,300},{-250,300},{-250,176},{-202,176}},      color={0,0,127}));
        connect(TT521.T, pID_Valve_cond.TFP_TT521) annotation (Line(points={{-1,
                120},{-220,120},{-220,162},{-202,162}}, color={0,0,127}));
        connect(CV523_reg.y, FT_PID_521.u_s)
          annotation (Line(points={{121,130},{138,130}}, color={0,0,127}));
        connect(val.port_1, jun5.port_2) annotation (Line(
            points={{50,-210},{50,-240}},
            color={0,127,255},
            thickness=0.5));
        connect(pID_Valve_evap.CV121, val.y) annotation (Line(points={{-99,-235},
                {80,-235},{80,-200},{62,-200}}, color={0,0,127}));
        connect(pID_Valve_cond.CV521, val1.y) annotation (Line(points={{-179,165},{-31.5,
                165},{-31.5,150},{-2,150}}, color={0,0,127}));
        connect(val1.port_2, TT521.port_a) annotation (Line(
            points={{10,140},{10,130}},
            color={238,46,47},
            thickness=0.5));
        connect(val1.port_1, jun.port_2) annotation (Line(
            points={{10,160},{10,240}},
            color={238,46,47},
            thickness=0.5));
        connect(integerExpression.y, pID_Valve_cond.TFP_mode) annotation (Line(points=
               {{-219,170},{-212,170},{-212,170},{-202,170}}, color={255,127,0}));
        connect(FT121.port_a, val.port_2) annotation (Line(
            points={{50,-160},{50,-190}},
            color={0,127,255},
            thickness=0.5));
        connect(FT121.port_b, CV123.port_a) annotation (Line(
            points={{50,-140},{50,-120}},
            color={0,127,255},
            thickness=0.5));
        connect(cons_cold.y, TFPA.TSet) annotation (Line(points={{-179,30},{-136,30},{
                -136,10},{0,10},{0,-1},{18,-1}}, color={0,0,127}));
        connect(TFPA.port_b1, jun3.port_1) annotation (Line(
            points={{40,-4},{70,-4},{70,180}},
            color={238,46,47},
            thickness=0.5));
        connect(TFPA.port_b2, XV112A.port_a) annotation (Line(
            points={{20,-16},{-30,-16},{-30,-80}},
            color={0,127,255},
            thickness=0.5));
        connect(CV523.port_b, TFPA.port_a1)
          annotation (Line(points={{10,40},{10,-4},{20,-4}}, color={238,46,47},
            thickness=0.5));

        connect(XV112A_switch.y, XV112A.y) annotation (Line(points={{-99,-70},{-6,-70},
                {-6,-90},{-18,-90}}, color={0,0,127}));
        connect(cons_cold1.y, pID_Valve_evap.DEG_TT121) annotation (Line(points={{-179,
                -194},{-152,-194},{-152,-226},{-122,-226}}, color={0,0,127}));
        connect(bou2.ports[1], fan1.port_a) annotation (Line(points={{-80,332},{-60,332},
                {-60,330},{-40,330}}, color={0,127,255}));
        connect(fan1.port_b, jun.port_1)
          annotation (Line(points={{-20,330},{10,330},{10,260}}, color={0,127,255}));
        connect(TT511.port_b, bou2.ports[2]) annotation (Line(points={{100,260},{122,260},
                {122,352},{-80,352},{-80,328}}, color={0,127,255}));
        connect(bou3.ports[1], fan2.port_a) annotation (Line(points={{140,-288},{120,-288},
                {120,-290},{100,-290}}, color={0,127,255}));
        connect(fan2.port_b, jun5.port_1) annotation (Line(points={{80,-290},{50,-290},
                {50,-260}}, color={0,127,255}));
        connect(XV112A.port_b, bou3.ports[2]) annotation (Line(points={{-30,-100},{-30,
                -324},{140,-324},{140,-292}}, color={0,127,255}));
        connect(TFPA.port_a2, TT121.port_b) annotation (Line(
            points={{40,-16},{50,-16},{50,-70}},
            color={0,127,255},
            thickness=0.5));
        connect(jun5.port_3, val.port_3) annotation (Line(points={{60,-250},{72,
                -250},{72,-220},{24,-220},{24,-200},{40,-200}}, color={0,127,
                255}));
        connect(jun1.port_2, val1.port_3) annotation (Line(points={{-90,180},{
                -92,180},{-92,170},{38,170},{38,150},{20,150}}, color={0,127,
                255}));
        connect(cons_cold2.y, pID_Valve_evap.PEM_TT200) annotation (Line(points=
               {{-179,-150},{-179,-185},{-122,-185},{-122,-222}}, color={0,0,
                127}));
        annotation (Diagram(coordinateSystem(extent={{-100,-100},{100,100}})), Icon(
              coordinateSystem(extent={{-100,-100},{100,100}}), graphics={Rectangle(
                extent={{0,80},{60,20}},
                lineColor={238,46,47},
                fillColor={238,46,47},
                fillPattern=FillPattern.Solid),                           Rectangle(
                extent={{0,-20},{60,-80}},
                lineColor={28,108,200},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid),                           Rectangle(
                extent={{-60,80},{0,20}},
                lineColor={238,46,47},
                fillColor={244,125,35},
                fillPattern=FillPattern.Solid),                           Rectangle(
                extent={{-60,-20},{0,-80}},
                lineColor={28,108,200},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid)}),
          Documentation(info="<html>
<h4><span style=\"color: #000000\">HPSHC modes</span></h4>
<p>For the HPSHC, 4 possible modes :</p>
<p>0 - Off</p>
<p>1 - Cold mode</p>
<p>2 - HPSHC full</p>
<p>3 - HPSHC 1/2</p>
</html>"),experiment(StopTime=1, __Dymola_Algorithm="Dassl"));
      end carnot_wip_1;

      model carnot_wip_1_a
        Integer mode = 2;
        parameter Modelica.SIunits.MassFlowRate m_flow_hot= 211*1000/3600;
        parameter Modelica.SIunits.MassFlowRate m_flow_cold= 332*1000/3600;
        parameter Real T_set_hot = 61+273.15;
        parameter Real T_set_hot_max = 63+273.15;
        parameter Real T_set_hot_min = 41+273.15;
        parameter Real T_set_cold_max = 14+273.15;
        parameter Real T_set_cold = 4+273.15;

        Fluid.Actuators.Valves.TwoWayLinear XV522(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_hot,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          dpValve_nominal=5000)
                              annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={70,230})));
        Fluid.Actuators.Valves.TwoWayLinear CV523(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_hot,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          dpValve_nominal=5000,
          use_inputFilter=false)
                              annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={10,50})));
        Fluid.FixedResistances.Junction jun3(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={m_flow_hot,-m_flow_hot,-m_flow_hot},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,10},{10,-10}},
              rotation=90,
              origin={70,190})));
        Fluid.Actuators.Valves.TwoWayLinear CV123(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_cold,
          dpValve_nominal=5000,
          use_inputFilter=false)
                              annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=90,
              origin={50,-110})));
        Fluid.FixedResistances.Junction jun5(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={m_flow_cold,-m_flow_cold,-m_flow_cold},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=90,
              origin={50,-250})));
        Fluid.Actuators.Valves.TwoWayLinear XV112A(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_cold/2,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          dpValve_nominal=5000)
                              annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-30,-90})));
        Fluid.Sensors.VolumeFlowRate FT521(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={10,90})));
        Controls.Continuous.LimPID FT_PID_521(k=1, Ti=1)
          annotation (Placement(transformation(extent={{140,120},{160,140}})));
        Controls.Continuous.LimPID FT_PID_123(k=1, Ti=1)
          annotation (Placement(transformation(extent={{140,-100},{160,-80}})));
        Fluid.Sensors.VolumeFlowRate FT121(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=m_flow_cold)
                                                         annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=90,
              origin={50,-150})));
        Fluid.Sensors.TemperatureTwoPort TT511(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100)
          annotation (Placement(transformation(extent={{80,250},{100,270}})));
        Fluid.Sensors.TemperatureTwoPort TT521(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=-90,
              origin={10,120})));
        Modelica.Blocks.Sources.RealExpression XV522_switch(y=if mode >= 2 then 1
               else 0)
          annotation (Placement(transformation(extent={{-240,210},{-220,230}})));
        Modelica.Blocks.Sources.RealExpression XV112A_switch(y=if mode >= 1 then 1
               else 0)
          annotation (Placement(transformation(extent={{-120,-80},{-100,-60}})));
        Modelica.Blocks.Sources.RealExpression cons_cold(y=4 + 273.15)
          annotation (Placement(transformation(extent={{-200,20},{-180,40}})));
        Modelica.Blocks.Sources.RealExpression CV123_reg(y=if mode == 1 or mode
               == 3 then 166/3600 else 332/3600)
          annotation (Placement(transformation(extent={{100,-100},{120,-80}})));
        Fluid.Sensors.TemperatureTwoPort TT121(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=322/3.6)
                                                         annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=270,
              origin={50,-80})));
        Controls_a.TFP.PID_Valve_evap pID_Valve_evap annotation (Placement(
              transformation(extent={{-120,-240},{-100,-220}})));
        Modelica.Blocks.Sources.RealExpression CV523_reg(y=211/3600)
          annotation (Placement(transformation(extent={{100,120},{120,140}})));
        Fluid.Actuators.Valves.ThreeWayLinear val(
          redeclare package Medium = Buildings.Media.Water,
          use_inputFilter=false,
          m_flow_nominal=m_flow_cold,
          dpValve_nominal=5000) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=270,
              origin={50,-200})));
        Modelica.Blocks.Sources.IntegerExpression integerExpression(y=mode)
          annotation (Placement(transformation(extent={{-240,160},{-220,180}})));
        Fluid.Chillers.Carnot_TEva TFPA(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=m_flow_hot,
          m2_flow_nominal=m_flow_cold/2,
          QEva_flow_nominal=-166/3.6*4185*(7),
          dTEva_nominal=-7,
          dTCon_nominal=15,
          use_eta_Carnot_nominal=true,
          etaCarnot_nominal=0.95,
          COP_nominal=6.5,
          TCon_nominal=313.15,
          dp1_nominal=40000,
          dp2_nominal=40000,
          QEva_flow_min(displayUnit="kW") = -1800000)
          annotation (Placement(transformation(extent={{20,-20},{40,0}})));
        Modelica.Blocks.Sources.RealExpression cons_cold1(y=15 + 273.15)
          annotation (Placement(transformation(extent={{-200,-204},{-180,-184}})));
        Fluid.Sources.Boundary_pT bou2(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=false,
          T=323.15,
          nPorts=2)
          annotation (Placement(transformation(extent={{-100,320},{-80,340}})));
        Buildings.Fluid.Movers.FlowControlled_m_flow fan1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=211/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_PEC per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          addPowerToMedium=true,
          dp_nominal(displayUnit="bar") = 1000000,
          constantMassFlowRate=200/3.6)
          annotation (Placement(transformation(extent={{-40,320},{-20,340}})));
        Fluid.Sources.Boundary_pT bou3(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=false,
          T=285.15,
          nPorts=2)
          annotation (Placement(transformation(extent={{160,-300},{140,-280}})));
        Buildings.Fluid.Movers.FlowControlled_m_flow fan2(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=315/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_PEG per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          addPowerToMedium=true,
          dp_nominal(displayUnit="bar") = 1000000,
          constantMassFlowRate=200/3.6)
          annotation (Placement(transformation(extent={{100,-300},{80,-280}})));
        Modelica.Blocks.Sources.RealExpression cons_cold2(y=12 + 273.15)
          annotation (Placement(transformation(extent={{-200,-160},{-180,-140}})));
      equation

        connect(jun3.port_2, XV522.port_a)
          annotation (Line(points={{70,200},{70,220}}, color={238,46,47},
            thickness=0.5));
        connect(FT521.port_b, CV523.port_a)
          annotation (Line(points={{10,80},{10,60}}, color={238,46,47},
            thickness=0.5));
        connect(FT521.V_flow, FT_PID_521.u_m) annotation (Line(points={{21,90},{50,90},
                {50,100},{150,100},{150,118}}, color={0,0,127}));
        connect(FT_PID_521.y, CV523.y) annotation (Line(points={{161,130},{180,130},{180,
                50},{22,50}}, color={0,0,127}));
        connect(FT121.V_flow, FT_PID_123.u_m) annotation (Line(points={{61,-150},{150,
                -150},{150,-102}}, color={0,0,127}));
        connect(FT_PID_123.y, CV123.y) annotation (Line(points={{161,-90},{180,-90},{180,
                -68},{80,-68},{80,-110},{62,-110}},
                                                  color={0,0,127}));
        connect(XV522.port_b, TT511.port_a) annotation (Line(points={{70,240},{70,
                260},{80,260}}, color={238,46,47},
            thickness=0.5));
        connect(TT521.port_b, FT521.port_a)
          annotation (Line(points={{10,110},{10,100}}, color={238,46,47},
            thickness=0.5));
        connect(XV522_switch.y, XV522.y) annotation (Line(points={{-219,220},{
                -160,220},{-160,230},{58,230}},
                                      color={0,0,127}));
        connect(CV123_reg.y, FT_PID_123.u_s)
          annotation (Line(points={{121,-90},{138,-90}}, color={0,0,127}));
        connect(TT121.port_a, CV123.port_b)
          annotation (Line(points={{50,-90},{50,-100}}, color={0,127,255},
            thickness=0.5));
        connect(pID_Valve_evap.TFP_TT121, TT121.T) annotation (Line(points={{-122,-234},
                {-220,-234},{-220,-260},{10,-260},{10,-80},{39,-80}},       color=
               {0,0,127}));
        connect(TT511.T, pID_Valve_evap.TFP_TT511) annotation (Line(points={{90,271},
                {90,300},{-250,300},{-250,-252},{-208,-252},{-208,-238},{-122,
                -238}},      color={0,0,127}));
        connect(CV523_reg.y, FT_PID_521.u_s)
          annotation (Line(points={{121,130},{138,130}}, color={0,0,127}));
        connect(val.port_1, jun5.port_2) annotation (Line(
            points={{50,-210},{50,-240}},
            color={0,127,255},
            thickness=0.5));
        connect(pID_Valve_evap.CV121, val.y) annotation (Line(points={{-99,-235},
                {80,-235},{80,-200},{62,-200}}, color={0,0,127}));
        connect(FT121.port_a, val.port_2) annotation (Line(
            points={{50,-160},{50,-190}},
            color={0,127,255},
            thickness=0.5));
        connect(FT121.port_b, CV123.port_a) annotation (Line(
            points={{50,-140},{50,-120}},
            color={0,127,255},
            thickness=0.5));
        connect(cons_cold.y, TFPA.TSet) annotation (Line(points={{-179,30},{-136,30},{
                -136,10},{0,10},{0,-1},{18,-1}}, color={0,0,127}));
        connect(TFPA.port_b1, jun3.port_1) annotation (Line(
            points={{40,-4},{70,-4},{70,180}},
            color={238,46,47},
            thickness=0.5));
        connect(TFPA.port_b2, XV112A.port_a) annotation (Line(
            points={{20,-16},{-30,-16},{-30,-80}},
            color={0,127,255},
            thickness=0.5));
        connect(CV523.port_b, TFPA.port_a1)
          annotation (Line(points={{10,40},{10,-4},{20,-4}}, color={238,46,47},
            thickness=0.5));

        connect(XV112A_switch.y, XV112A.y) annotation (Line(points={{-99,-70},{-6,-70},
                {-6,-90},{-18,-90}}, color={0,0,127}));
        connect(cons_cold1.y, pID_Valve_evap.DEG_TT121) annotation (Line(points={{-179,
                -194},{-152,-194},{-152,-226},{-122,-226}}, color={0,0,127}));
        connect(bou2.ports[1], fan1.port_a) annotation (Line(points={{-80,332},{-60,332},
                {-60,330},{-40,330}}, color={0,127,255}));
        connect(TT511.port_b, bou2.ports[2]) annotation (Line(points={{100,260},{122,260},
                {122,352},{-80,352},{-80,328}}, color={0,127,255}));
        connect(bou3.ports[1], fan2.port_a) annotation (Line(points={{140,-288},{120,-288},
                {120,-290},{100,-290}}, color={0,127,255}));
        connect(fan2.port_b, jun5.port_1) annotation (Line(points={{80,-290},{50,-290},
                {50,-260}}, color={0,127,255}));
        connect(XV112A.port_b, bou3.ports[2]) annotation (Line(points={{-30,-100},{-30,
                -324},{140,-324},{140,-292}}, color={0,127,255}));
        connect(TFPA.port_a2, TT121.port_b) annotation (Line(
            points={{40,-16},{50,-16},{50,-70}},
            color={0,127,255},
            thickness=0.5));
        connect(jun5.port_3, val.port_3) annotation (Line(points={{60,-250},{72,
                -250},{72,-220},{24,-220},{24,-200},{40,-200}}, color={0,127,
                255}));
        connect(cons_cold2.y, pID_Valve_evap.PEM_TT200) annotation (Line(points=
               {{-179,-150},{-179,-185},{-122,-185},{-122,-222}}, color={0,0,
                127}));
        connect(fan1.port_b, TT521.port_a) annotation (Line(points={{-20,330},{
                -10,330},{-10,328},{10,328},{10,130}}, color={0,127,255}));
        annotation (Diagram(coordinateSystem(extent={{-100,-100},{100,100}})), Icon(
              coordinateSystem(extent={{-100,-100},{100,100}}), graphics={Rectangle(
                extent={{0,80},{60,20}},
                lineColor={238,46,47},
                fillColor={238,46,47},
                fillPattern=FillPattern.Solid),                           Rectangle(
                extent={{0,-20},{60,-80}},
                lineColor={28,108,200},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid),                           Rectangle(
                extent={{-60,80},{0,20}},
                lineColor={238,46,47},
                fillColor={244,125,35},
                fillPattern=FillPattern.Solid),                           Rectangle(
                extent={{-60,-20},{0,-80}},
                lineColor={28,108,200},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid)}),
          Documentation(info="<html>
<h4><span style=\"color: #000000\">HPSHC modes</span></h4>
<p>For the HPSHC, 4 possible modes :</p>
<p>0 - Off</p>
<p>1 - Cold mode</p>
<p>2 - HPSHC full</p>
<p>3 - HPSHC 1/2</p>
</html>"),experiment(StopTime=1, __Dymola_Algorithm="Dassl"));
      end carnot_wip_1_a;

      model carnot_wip_1_b
        Integer mode = 2;
        parameter Modelica.SIunits.MassFlowRate m_flow_hot= 211*1000/3600;
        parameter Modelica.SIunits.MassFlowRate m_flow_cold= 332*1000/3600;
        parameter Real T_set_hot = 61+273.15;
        parameter Real T_set_hot_max = 63+273.15;
        parameter Real T_set_hot_min = 41+273.15;
        parameter Real T_set_cold_max = 14+273.15;
        parameter Real T_set_cold = 4+273.15;

        Fluid.FixedResistances.Junction jun(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={m_flow_hot,-m_flow_hot,-m_flow_hot},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=270,
              origin={10,250})));
        Fluid.Actuators.Valves.TwoWayLinear XV522(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_hot,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          dpValve_nominal=5000)
                              annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={70,230})));
        Fluid.Actuators.Valves.TwoWayLinear CV523(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_hot,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          dpValve_nominal=5000,
          use_inputFilter=false)
                              annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={10,50})));
        Fluid.Actuators.Valves.TwoWayLinear CV123(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_cold,
          dpValve_nominal=5000,
          use_inputFilter=false)
                              annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=90,
              origin={50,-110})));
        Fluid.FixedResistances.Junction jun5(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={m_flow_cold,-m_flow_cold,-m_flow_cold},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=90,
              origin={50,-250})));
        Fluid.Actuators.Valves.TwoWayLinear XV112A(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_cold/2,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          dpValve_nominal=5000)
                              annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-30,-90})));
        Fluid.Sensors.VolumeFlowRate FT521(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={10,90})));
        Controls.Continuous.LimPID FT_PID_521(k=1, Ti=1)
          annotation (Placement(transformation(extent={{140,120},{160,140}})));
        Controls.Continuous.LimPID FT_PID_123(k=1, Ti=1)
          annotation (Placement(transformation(extent={{140,-100},{160,-80}})));
        Fluid.Sensors.VolumeFlowRate FT121(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=m_flow_cold)
                                                         annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=90,
              origin={50,-150})));
        Fluid.Sensors.TemperatureTwoPort TT511(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100)
          annotation (Placement(transformation(extent={{80,250},{100,270}})));
        Fluid.Sensors.TemperatureTwoPort TT521(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=-90,
              origin={10,120})));
        Modelica.Blocks.Sources.RealExpression XV521_switch(y=if mode == 1 then 1
               else 0)
          annotation (Placement(transformation(extent={{-240,240},{-220,260}})));
        Modelica.Blocks.Sources.RealExpression XV522_switch(y=if mode >= 2 then 1
               else 0)
          annotation (Placement(transformation(extent={{-240,210},{-220,230}})));
        Modelica.Blocks.Sources.RealExpression XV112A_switch(y=if mode >= 1 then 1
               else 0)
          annotation (Placement(transformation(extent={{-120,-80},{-100,-60}})));
        Modelica.Blocks.Sources.RealExpression cons_cold(y=4 + 273.15)
          annotation (Placement(transformation(extent={{-200,20},{-180,40}})));
        Modelica.Blocks.Sources.RealExpression CV123_reg(y=if mode == 1 or mode
               == 3 then 166/3600 else 332/3600)
          annotation (Placement(transformation(extent={{100,-100},{120,-80}})));
        Fluid.Sensors.TemperatureTwoPort TT121(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=322/3.6)
                                                         annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=270,
              origin={50,-80})));
        Controls_a.TFP.PID_Valve_evap pID_Valve_evap annotation (Placement(
              transformation(extent={{-120,-240},{-100,-220}})));
        Controls_a.TFP.PID_Valve_cond pID_Valve_cond
          annotation (Placement(transformation(extent={{-200,160},{-180,180}})));
        Modelica.Blocks.Sources.RealExpression CV523_reg(y=211/3600)
          annotation (Placement(transformation(extent={{100,120},{120,140}})));
        Fluid.Actuators.Valves.ThreeWayLinear val(
          redeclare package Medium = Buildings.Media.Water,
          use_inputFilter=false,
          m_flow_nominal=m_flow_cold,
          dpValve_nominal=5000) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=270,
              origin={50,-200})));
        Fluid.Actuators.Valves.ThreeWayLinear val1(
          redeclare package Medium = Buildings.Media.Water,
          use_inputFilter=false,
          m_flow_nominal=m_flow_hot,
          dpValve_nominal=5000) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=90,
              origin={10,150})));
        Modelica.Blocks.Sources.IntegerExpression integerExpression(y=mode)
          annotation (Placement(transformation(extent={{-240,160},{-220,180}})));
        Fluid.Chillers.Carnot_TEva TFPA(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=m_flow_hot,
          m2_flow_nominal=m_flow_cold/2,
          QEva_flow_nominal=-166/3.6*4185*(7),
          dTEva_nominal=-7,
          dTCon_nominal=15,
          use_eta_Carnot_nominal=true,
          etaCarnot_nominal=0.95,
          COP_nominal=6.5,
          TCon_nominal=313.15,
          dp1_nominal=40000,
          dp2_nominal=40000,
          QEva_flow_min(displayUnit="kW") = -1800000)
          annotation (Placement(transformation(extent={{20,-20},{40,0}})));
        Modelica.Blocks.Sources.RealExpression cons_cold1(y=15 + 273.15)
          annotation (Placement(transformation(extent={{-200,-204},{-180,-184}})));
        Fluid.Sources.Boundary_pT bou2(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=false,
          T=323.15,
          nPorts=2)
          annotation (Placement(transformation(extent={{-100,320},{-80,340}})));
        Buildings.Fluid.Movers.FlowControlled_m_flow fan1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=211/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_PEC per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          addPowerToMedium=true,
          dp_nominal(displayUnit="bar") = 1000000,
          constantMassFlowRate=200/3.6)
          annotation (Placement(transformation(extent={{-40,320},{-20,340}})));
        Fluid.Sources.Boundary_pT bou3(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=false,
          T=285.15,
          nPorts=2)
          annotation (Placement(transformation(extent={{160,-300},{140,-280}})));
        Buildings.Fluid.Movers.FlowControlled_m_flow fan2(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=315/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_PEG per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          addPowerToMedium=true,
          dp_nominal(displayUnit="bar") = 1000000,
          constantMassFlowRate=200/3.6)
          annotation (Placement(transformation(extent={{100,-300},{80,-280}})));
        Modelica.Blocks.Sources.RealExpression cons_cold2(y=12 + 273.15)
          annotation (Placement(transformation(extent={{-200,-160},{-180,-140}})));
      equation

        connect(FT521.port_b, CV523.port_a)
          annotation (Line(points={{10,80},{10,60}}, color={238,46,47},
            thickness=0.5));
        connect(FT521.V_flow, FT_PID_521.u_m) annotation (Line(points={{21,90},{50,90},
                {50,100},{150,100},{150,118}}, color={0,0,127}));
        connect(FT_PID_521.y, CV523.y) annotation (Line(points={{161,130},{180,130},{180,
                50},{22,50}}, color={0,0,127}));
        connect(FT121.V_flow, FT_PID_123.u_m) annotation (Line(points={{61,-150},{150,
                -150},{150,-102}}, color={0,0,127}));
        connect(FT_PID_123.y, CV123.y) annotation (Line(points={{161,-90},{180,-90},{180,
                -68},{80,-68},{80,-110},{62,-110}},
                                                  color={0,0,127}));
        connect(XV522.port_b, TT511.port_a) annotation (Line(points={{70,240},{70,
                260},{80,260}}, color={238,46,47},
            thickness=0.5));
        connect(TT521.port_b, FT521.port_a)
          annotation (Line(points={{10,110},{10,100}}, color={238,46,47},
            thickness=0.5));
        connect(XV522_switch.y, XV522.y) annotation (Line(points={{-219,220},{
                -160,220},{-160,230},{58,230}},
                                      color={0,0,127}));
        connect(CV123_reg.y, FT_PID_123.u_s)
          annotation (Line(points={{121,-90},{138,-90}}, color={0,0,127}));
        connect(TT121.port_a, CV123.port_b)
          annotation (Line(points={{50,-90},{50,-100}}, color={0,127,255},
            thickness=0.5));
        connect(pID_Valve_evap.TFP_TT121, TT121.T) annotation (Line(points={{-122,-234},
                {-220,-234},{-220,-260},{10,-260},{10,-80},{39,-80}},       color=
               {0,0,127}));
        connect(TT511.T, pID_Valve_evap.TFP_TT511) annotation (Line(points={{90,271},
                {90,300},{-250,300},{-250,-252},{-208,-252},{-208,-238},{-122,
                -238}},      color={0,0,127}));
        connect(TT511.T, pID_Valve_cond.TFP_TT511) annotation (Line(points={{90,271},
                {90,300},{-250,300},{-250,176},{-202,176}},      color={0,0,127}));
        connect(TT521.T, pID_Valve_cond.TFP_TT521) annotation (Line(points={{-1,
                120},{-220,120},{-220,162},{-202,162}}, color={0,0,127}));
        connect(CV523_reg.y, FT_PID_521.u_s)
          annotation (Line(points={{121,130},{138,130}}, color={0,0,127}));
        connect(val.port_1, jun5.port_2) annotation (Line(
            points={{50,-210},{50,-240}},
            color={0,127,255},
            thickness=0.5));
        connect(pID_Valve_evap.CV121, val.y) annotation (Line(points={{-99,-235},
                {80,-235},{80,-200},{62,-200}}, color={0,0,127}));
        connect(pID_Valve_cond.CV521, val1.y) annotation (Line(points={{-179,165},{-31.5,
                165},{-31.5,150},{-2,150}}, color={0,0,127}));
        connect(val1.port_2, TT521.port_a) annotation (Line(
            points={{10,140},{10,130}},
            color={238,46,47},
            thickness=0.5));
        connect(val1.port_1, jun.port_2) annotation (Line(
            points={{10,160},{10,240}},
            color={238,46,47},
            thickness=0.5));
        connect(integerExpression.y, pID_Valve_cond.TFP_mode) annotation (Line(points=
               {{-219,170},{-212,170},{-212,170},{-202,170}}, color={255,127,0}));
        connect(FT121.port_a, val.port_2) annotation (Line(
            points={{50,-160},{50,-190}},
            color={0,127,255},
            thickness=0.5));
        connect(FT121.port_b, CV123.port_a) annotation (Line(
            points={{50,-140},{50,-120}},
            color={0,127,255},
            thickness=0.5));
        connect(cons_cold.y, TFPA.TSet) annotation (Line(points={{-179,30},{-136,30},{
                -136,10},{0,10},{0,-1},{18,-1}}, color={0,0,127}));
        connect(TFPA.port_b2, XV112A.port_a) annotation (Line(
            points={{20,-16},{-30,-16},{-30,-80}},
            color={0,127,255},
            thickness=0.5));
        connect(CV523.port_b, TFPA.port_a1)
          annotation (Line(points={{10,40},{10,-4},{20,-4}}, color={238,46,47},
            thickness=0.5));

        connect(XV112A_switch.y, XV112A.y) annotation (Line(points={{-99,-70},{-6,-70},
                {-6,-90},{-18,-90}}, color={0,0,127}));
        connect(cons_cold1.y, pID_Valve_evap.DEG_TT121) annotation (Line(points={{-179,
                -194},{-152,-194},{-152,-226},{-122,-226}}, color={0,0,127}));
        connect(bou2.ports[1], fan1.port_a) annotation (Line(points={{-80,332},{-60,332},
                {-60,330},{-40,330}}, color={0,127,255}));
        connect(fan1.port_b, jun.port_1)
          annotation (Line(points={{-20,330},{10,330},{10,260}}, color={0,127,255}));
        connect(TT511.port_b, bou2.ports[2]) annotation (Line(points={{100,260},{122,260},
                {122,352},{-80,352},{-80,328}}, color={0,127,255}));
        connect(bou3.ports[1], fan2.port_a) annotation (Line(points={{140,-288},{120,-288},
                {120,-290},{100,-290}}, color={0,127,255}));
        connect(fan2.port_b, jun5.port_1) annotation (Line(points={{80,-290},{50,-290},
                {50,-260}}, color={0,127,255}));
        connect(XV112A.port_b, bou3.ports[2]) annotation (Line(points={{-30,-100},{-30,
                -324},{140,-324},{140,-292}}, color={0,127,255}));
        connect(TFPA.port_a2, TT121.port_b) annotation (Line(
            points={{40,-16},{50,-16},{50,-70}},
            color={0,127,255},
            thickness=0.5));
        connect(jun5.port_3, val.port_3) annotation (Line(points={{60,-250},{72,
                -250},{72,-220},{24,-220},{24,-200},{40,-200}}, color={0,127,
                255}));
        connect(cons_cold2.y, pID_Valve_evap.PEM_TT200) annotation (Line(points=
               {{-179,-150},{-179,-185},{-122,-185},{-122,-222}}, color={0,0,
                127}));
        connect(TFPA.port_b1, XV522.port_a) annotation (Line(points={{40,-4},{
                70,-4},{70,220}}, color={0,127,255}));
        connect(jun.port_3, val1.port_3) annotation (Line(points={{0,250},{-30,
                250},{-30,186},{48,186},{48,150},{20,150}}, color={0,127,255}));
        annotation (Diagram(coordinateSystem(extent={{-100,-100},{100,100}})), Icon(
              coordinateSystem(extent={{-100,-100},{100,100}}), graphics={Rectangle(
                extent={{0,80},{60,20}},
                lineColor={238,46,47},
                fillColor={238,46,47},
                fillPattern=FillPattern.Solid),                           Rectangle(
                extent={{0,-20},{60,-80}},
                lineColor={28,108,200},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid),                           Rectangle(
                extent={{-60,80},{0,20}},
                lineColor={238,46,47},
                fillColor={244,125,35},
                fillPattern=FillPattern.Solid),                           Rectangle(
                extent={{-60,-20},{0,-80}},
                lineColor={28,108,200},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid)}),
          Documentation(info="<html>
<h4><span style=\"color: #000000\">HPSHC modes</span></h4>
<p>For the HPSHC, 4 possible modes :</p>
<p>0 - Off</p>
<p>1 - Cold mode</p>
<p>2 - HPSHC full</p>
<p>3 - HPSHC 1/2</p>
</html>"),experiment(StopTime=1, __Dymola_Algorithm="Dassl"));
      end carnot_wip_1_b;

      model carnot_wip_2
        Integer mode = 2;
        parameter Modelica.SIunits.MassFlowRate m_flow_hot= 211*1000/3600;
        parameter Modelica.SIunits.MassFlowRate m_flow_cold= 332*1000/3600;
        parameter Real T_set_hot = 61+273.15;
        parameter Real T_set_hot_max = 63+273.15;
        parameter Real T_set_hot_min = 41+273.15;
        parameter Real T_set_cold_max = 14+273.15;
        parameter Real T_set_cold = 4+273.15;

        Fluid.FixedResistances.Junction jun(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={m_flow_hot,-m_flow_hot,-m_flow_hot},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=270,
              origin={10,250})));
        Fluid.Actuators.Valves.TwoWayLinear XV522(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_hot,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          dpValve_nominal=5000)
                              annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={70,230})));
        Fluid.Actuators.Valves.TwoWayLinear CV523(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_hot,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          dpValve_nominal=5000,
          use_inputFilter=false)
                              annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={10,50})));
        Fluid.Actuators.Valves.TwoWayLinear CV123(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_cold,
          dpValve_nominal=5000,
          use_inputFilter=false)
                              annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=90,
              origin={50,-110})));
        Fluid.FixedResistances.Junction jun5(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={m_flow_cold,-m_flow_cold,-m_flow_cold},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=90,
              origin={50,-250})));
        Fluid.Actuators.Valves.TwoWayLinear XV112A(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_cold/2,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          dpValve_nominal=5000)
                              annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-30,-90})));
        Fluid.Sensors.VolumeFlowRate FT521(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={10,90})));
        Controls.Continuous.LimPID FT_PID_521(k=1, Ti=1)
          annotation (Placement(transformation(extent={{140,120},{160,140}})));
        Controls.Continuous.LimPID FT_PID_123(k=1, Ti=1)
          annotation (Placement(transformation(extent={{140,-100},{160,-80}})));
        Fluid.Sensors.VolumeFlowRate FT121(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=m_flow_cold)
                                                         annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=90,
              origin={50,-150})));
        Fluid.Sensors.TemperatureTwoPort TT511(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100)
          annotation (Placement(transformation(extent={{80,250},{100,270}})));
        Fluid.Sensors.TemperatureTwoPort TT521(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=-90,
              origin={10,120})));
        Modelica.Blocks.Sources.RealExpression XV521_switch(y=if mode == 1 then 1
               else 0)
          annotation (Placement(transformation(extent={{-240,240},{-220,260}})));
        Modelica.Blocks.Sources.RealExpression XV522_switch(y=if mode >= 2 then 1
               else 0)
          annotation (Placement(transformation(extent={{-240,210},{-220,230}})));
        Modelica.Blocks.Sources.RealExpression XV112A_switch(y=if mode >= 1 then 1
               else 0)
          annotation (Placement(transformation(extent={{-120,-80},{-100,-60}})));
        Modelica.Blocks.Sources.RealExpression cons_cold(y=4 + 273.15)
          annotation (Placement(transformation(extent={{-200,20},{-180,40}})));
        Modelica.Blocks.Sources.RealExpression CV123_reg(y=if mode == 1 or mode
               == 3 then 166/3600 else 332/3600)
          annotation (Placement(transformation(extent={{100,-100},{120,-80}})));
        Fluid.Sensors.TemperatureTwoPort TT121(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=322/3.6)
                                                         annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=270,
              origin={50,-80})));
        Controls_a.TFP.PID_Valve_evap pID_Valve_evap annotation (Placement(
              transformation(extent={{-120,-240},{-100,-220}})));
        Controls_a.TFP.PID_Valve_cond pID_Valve_cond
          annotation (Placement(transformation(extent={{-200,160},{-180,180}})));
        Modelica.Blocks.Sources.RealExpression CV523_reg(y=211/3600)
          annotation (Placement(transformation(extent={{100,120},{120,140}})));
        Fluid.Actuators.Valves.ThreeWayLinear val(
          redeclare package Medium = Buildings.Media.Water,
          use_inputFilter=false,
          m_flow_nominal=m_flow_cold,
          dpValve_nominal=5000) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=270,
              origin={50,-200})));
        Fluid.Actuators.Valves.ThreeWayLinear val1(
          redeclare package Medium = Buildings.Media.Water,
          use_inputFilter=false,
          m_flow_nominal=m_flow_hot,
          dpValve_nominal=5000) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=90,
              origin={10,150})));
        Modelica.Blocks.Sources.IntegerExpression integerExpression(y=mode)
          annotation (Placement(transformation(extent={{-240,160},{-220,180}})));
        Fluid.Chillers.Carnot_TEva TFPA(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=m_flow_hot,
          m2_flow_nominal=m_flow_cold/2,
          QEva_flow_nominal=-166/3.6*4185*(7),
          dTEva_nominal=-7,
          dTCon_nominal=15,
          use_eta_Carnot_nominal=true,
          etaCarnot_nominal=0.95,
          COP_nominal=6.5,
          TCon_nominal=313.15,
          dp1_nominal=40000,
          dp2_nominal=40000,
          QEva_flow_min(displayUnit="kW") = -1800000)
          annotation (Placement(transformation(extent={{20,-20},{40,0}})));
        RJC.Heat_exchanger heat_exchanger(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water)
          annotation (Placement(transformation(extent={{200,180},{220,200}})));
        RJF.Cold_exchanger cold_exchanger(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water)
          annotation (Placement(transformation(extent={{200,-20},{220,0}})));
        Fluid.Sources.Boundary_pT bou1(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=false,
          T=285.15,
          nPorts=3)
          annotation (Placement(transformation(extent={{320,240},{300,260}})));
        Fluid.Sensors.TemperatureTwoPort TT1(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100)
          annotation (Placement(transformation(extent={{240,240},{220,260}})));
        Buildings.Fluid.Movers.FlowControlled_dp fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=500/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          constantHead(displayUnit="bar") = 300000)
          annotation (Placement(transformation(extent={{280,240},{260,260}})));
        Modelica.Blocks.Sources.RealExpression cons_cold1(y=15 + 273.15)
          annotation (Placement(transformation(extent={{-200,-204},{-180,-184}})));
        Fluid.Sources.Boundary_pT bou2(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=false,
          T=323.15,
          nPorts=2)
          annotation (Placement(transformation(extent={{-100,320},{-80,340}})));
        Buildings.Fluid.Movers.FlowControlled_m_flow fan1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=211/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_PEC per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          addPowerToMedium=true,
          dp_nominal(displayUnit="bar") = 1000000,
          constantMassFlowRate=200/3.6)
          annotation (Placement(transformation(extent={{-40,320},{-20,340}})));
        Fluid.Sources.Boundary_pT bou3(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=false,
          T=285.15,
          nPorts=2)
          annotation (Placement(transformation(extent={{160,-300},{140,-280}})));
        Buildings.Fluid.Movers.FlowControlled_m_flow fan2(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=315/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_PEG per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          addPowerToMedium=true,
          dp_nominal(displayUnit="bar") = 1000000,
          constantMassFlowRate=200/3.6)
          annotation (Placement(transformation(extent={{100,-300},{80,-280}})));
        Modelica.Blocks.Sources.IntegerExpression integerExpression1(y=mode)
          annotation (Placement(transformation(extent={{158,148},{178,168}})));
      equation

        connect(FT521.port_b, CV523.port_a)
          annotation (Line(points={{10,80},{10,60}}, color={238,46,47},
            thickness=0.5));
        connect(FT521.V_flow, FT_PID_521.u_m) annotation (Line(points={{21,90},{50,90},
                {50,100},{150,100},{150,118}}, color={0,0,127}));
        connect(FT_PID_521.y, CV523.y) annotation (Line(points={{161,130},{180,130},{180,
                50},{22,50}}, color={0,0,127}));
        connect(FT121.V_flow, FT_PID_123.u_m) annotation (Line(points={{61,-150},{150,
                -150},{150,-102}}, color={0,0,127}));
        connect(FT_PID_123.y, CV123.y) annotation (Line(points={{161,-90},{180,-90},{180,
                -68},{80,-68},{80,-110},{62,-110}},
                                                  color={0,0,127}));
        connect(XV522.port_b, TT511.port_a) annotation (Line(points={{70,240},{70,
                260},{80,260}}, color={238,46,47},
            thickness=0.5));
        connect(TT521.port_b, FT521.port_a)
          annotation (Line(points={{10,110},{10,100}}, color={238,46,47},
            thickness=0.5));
        connect(XV522_switch.y, XV522.y) annotation (Line(points={{-219,220},{
                -160,220},{-160,230},{58,230}},
                                      color={0,0,127}));
        connect(CV123_reg.y, FT_PID_123.u_s)
          annotation (Line(points={{121,-90},{138,-90}}, color={0,0,127}));
        connect(TT121.port_a, CV123.port_b)
          annotation (Line(points={{50,-90},{50,-100}}, color={0,127,255},
            thickness=0.5));
        connect(pID_Valve_evap.TFP_TT121, TT121.T) annotation (Line(points={{-122,-234},
                {-220,-234},{-220,-260},{10,-260},{10,-80},{39,-80}},       color=
               {0,0,127}));
        connect(TT511.T, pID_Valve_evap.TFP_TT511) annotation (Line(points={{90,271},
                {90,300},{-250,300},{-250,-252},{-208,-252},{-208,-238},{-122,
                -238}},      color={0,0,127}));
        connect(TT511.T, pID_Valve_cond.TFP_TT511) annotation (Line(points={{90,271},
                {90,300},{-250,300},{-250,176},{-202,176}},      color={0,0,127}));
        connect(TT521.T, pID_Valve_cond.TFP_TT521) annotation (Line(points={{-1,
                120},{-220,120},{-220,162},{-202,162}}, color={0,0,127}));
        connect(CV523_reg.y, FT_PID_521.u_s)
          annotation (Line(points={{121,130},{138,130}}, color={0,0,127}));
        connect(val.port_1, jun5.port_2) annotation (Line(
            points={{50,-210},{50,-240}},
            color={0,127,255},
            thickness=0.5));
        connect(pID_Valve_evap.CV121, val.y) annotation (Line(points={{-99,-235},
                {80,-235},{80,-200},{62,-200}}, color={0,0,127}));
        connect(pID_Valve_cond.CV521, val1.y) annotation (Line(points={{-179,165},{-31.5,
                165},{-31.5,150},{-2,150}}, color={0,0,127}));
        connect(val1.port_2, TT521.port_a) annotation (Line(
            points={{10,140},{10,130}},
            color={238,46,47},
            thickness=0.5));
        connect(val1.port_1, jun.port_2) annotation (Line(
            points={{10,160},{10,240}},
            color={238,46,47},
            thickness=0.5));
        connect(integerExpression.y, pID_Valve_cond.TFP_mode) annotation (Line(points=
               {{-219,170},{-212,170},{-212,170},{-202,170}}, color={255,127,0}));
        connect(FT121.port_a, val.port_2) annotation (Line(
            points={{50,-160},{50,-190}},
            color={0,127,255},
            thickness=0.5));
        connect(FT121.port_b, CV123.port_a) annotation (Line(
            points={{50,-140},{50,-120}},
            color={0,127,255},
            thickness=0.5));
        connect(cons_cold.y, TFPA.TSet) annotation (Line(points={{-179,30},{-136,30},{
                -136,10},{0,10},{0,-1},{18,-1}}, color={0,0,127}));
        connect(TFPA.port_b2, XV112A.port_a) annotation (Line(
            points={{20,-16},{-30,-16},{-30,-80}},
            color={0,127,255},
            thickness=0.5));
        connect(CV523.port_b, TFPA.port_a1)
          annotation (Line(points={{10,40},{10,-4},{20,-4}}, color={0,127,255}));
        connect(heat_exchanger.port_b2, val1.port_3) annotation (Line(points={{200,184},
                {90,184},{90,150},{20,150}}, color={0,127,255}));
        connect(XV112A_switch.y, XV112A.y) annotation (Line(points={{-99,-70},{-6,-70},
                {-6,-90},{-18,-90}}, color={0,0,127}));
        connect(jun5.port_3, cold_exchanger.port_a2) annotation (Line(points={{60,-250},
                {220,-250},{220,-16}}, color={0,127,255}));
        connect(cold_exchanger.port_b2, val.port_3) annotation (Line(points={{200,-16},
                {200,-180},{30,-180},{30,-200},{40,-200}}, color={0,127,255}));
        connect(TT1.port_b, heat_exchanger.port_a1) annotation (Line(points={{220,250},
                {200,250},{200,196}}, color={0,127,255}));
        connect(TT1.port_b, cold_exchanger.port_a1) annotation (Line(points={{220,250},
                {190,250},{190,-4},{200,-4}}, color={0,127,255}));
        connect(heat_exchanger.port_b1, bou1.ports[1]) annotation (Line(points={{220,196},
                {300,196},{300,252.667}}, color={0,127,255}));
        connect(cold_exchanger.port_b1, bou1.ports[2])
          annotation (Line(points={{220,-4},{300,-4},{300,250}}, color={0,127,255}));
        connect(TT1.T, heat_exchanger.PEM_TT200) annotation (Line(points={{230,261},{230,
                270},{180,270},{180,186},{198,186}}, color={0,0,127}));
        connect(TT1.T, cold_exchanger.PEM_TT200) annotation (Line(points={{230,261},{230,
                270},{184,270},{184,-14},{198,-14}}, color={0,0,127}));
        connect(pID_Valve_evap.CV122, cold_exchanger.TFP_CV122) annotation (Line(
              points={{-99,-225},{192,-225},{192,-6},{198,-6}}, color={0,0,127}));
        connect(pID_Valve_cond.CV522, heat_exchanger.TFP_CV522) annotation (Line(
              points={{-179,175},{-180,175},{-180,176},{158,176},{158,194},{198,194}},
              color={0,0,127}));
        connect(TT1.T, pID_Valve_evap.PEM_TT200) annotation (Line(points={{230,261},{230,
                284},{346,284},{346,-270},{-140,-270},{-140,-222},{-122,-222}}, color=
               {0,0,127}));
        connect(fan.port_a, bou1.ports[3]) annotation (Line(points={{280,250},{
                290,250},{290,247.333},{300,247.333}},
                                              color={0,127,255}));
        connect(fan.port_b, TT1.port_a)
          annotation (Line(points={{260,250},{240,250}}, color={0,127,255}));
        connect(cons_cold1.y, pID_Valve_evap.DEG_TT121) annotation (Line(points={{-179,
                -194},{-152,-194},{-152,-226},{-122,-226}}, color={0,0,127}));
        connect(bou2.ports[1], fan1.port_a) annotation (Line(points={{-80,332},{-60,332},
                {-60,330},{-40,330}}, color={0,127,255}));
        connect(fan1.port_b, jun.port_1)
          annotation (Line(points={{-20,330},{10,330},{10,260}}, color={0,127,255}));
        connect(TT511.port_b, bou2.ports[2]) annotation (Line(points={{100,260},{122,260},
                {122,352},{-80,352},{-80,328}}, color={0,127,255}));
        connect(bou3.ports[1], fan2.port_a) annotation (Line(points={{140,-288},{120,-288},
                {120,-290},{100,-290}}, color={0,127,255}));
        connect(fan2.port_b, jun5.port_1) annotation (Line(points={{80,-290},{50,-290},
                {50,-260}}, color={0,127,255}));
        connect(XV112A.port_b, bou3.ports[2]) annotation (Line(points={{-30,-100},{-30,
                -324},{140,-324},{140,-292}}, color={0,127,255}));
        connect(integerExpression1.y, heat_exchanger.mode) annotation (Line(
              points={{179,158},{192,158},{192,160},{204,160},{204,178}}, color=
               {255,127,0}));
        connect(TFPA.port_a2, TT121.port_b) annotation (Line(
            points={{40,-16},{50,-16},{50,-70}},
            color={0,127,255},
            thickness=0.5));
        connect(TFPA.port_b1, XV522.port_a) annotation (Line(points={{40,-4},{
                70,-4},{70,220}}, color={0,127,255}));
        connect(jun.port_3, heat_exchanger.port_a2) annotation (Line(points={{0,
                250},{-62,250},{-62,190},{136,190},{136,172},{232,172},{232,184},
                {220,184}}, color={0,127,255}));
        annotation (Diagram(coordinateSystem(extent={{-100,-100},{100,100}})), Icon(
              coordinateSystem(extent={{-100,-100},{100,100}}), graphics={Rectangle(
                extent={{0,80},{60,20}},
                lineColor={238,46,47},
                fillColor={238,46,47},
                fillPattern=FillPattern.Solid),                           Rectangle(
                extent={{0,-20},{60,-80}},
                lineColor={28,108,200},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid),                           Rectangle(
                extent={{-60,80},{0,20}},
                lineColor={238,46,47},
                fillColor={244,125,35},
                fillPattern=FillPattern.Solid),                           Rectangle(
                extent={{-60,-20},{0,-80}},
                lineColor={28,108,200},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid)}),
          Documentation(info="<html>
<h4><span style=\"color: #000000\">HPSHC modes</span></h4>
<p>For the HPSHC, 4 possible modes :</p>
<p>0 - Off</p>
<p>1 - Cold mode</p>
<p>2 - HPSHC full</p>
<p>3 - HPSHC 1/2</p>
</html>"),experiment(StopTime=1, __Dymola_Algorithm="Dassl"));
      end carnot_wip_2;

      model carnot_wip_3
        Integer mode = 2;
        parameter Modelica.SIunits.MassFlowRate m_flow_hot= 211*1000/3600;
        parameter Modelica.SIunits.MassFlowRate m_flow_cold= 332*1000/3600;
        parameter Real T_set_hot = 61+273.15;
        parameter Real T_set_hot_max = 63+273.15;
        parameter Real T_set_hot_min = 41+273.15;
        parameter Real T_set_cold_max = 14+273.15;
        parameter Real T_set_cold = 4+273.15;

        Fluid.FixedResistances.Junction jun(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={m_flow_hot,-m_flow_hot,-m_flow_hot},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=270,
              origin={10,250})));
        Fluid.Actuators.Valves.TwoWayLinear XV522(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_hot,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          dpValve_nominal=5000)
                              annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={70,230})));
        Fluid.Actuators.Valves.TwoWayLinear CV523(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_hot,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          dpValve_nominal=5000,
          use_inputFilter=false)
                              annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={10,50})));
        Fluid.Actuators.Valves.TwoWayLinear CV123(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_cold,
          dpValve_nominal=5000,
          use_inputFilter=false)
                              annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=90,
              origin={50,-110})));
        Fluid.FixedResistances.Junction jun5(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={m_flow_cold,-m_flow_cold,-m_flow_cold},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=90,
              origin={50,-250})));
        Fluid.Actuators.Valves.TwoWayLinear XV112A(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_cold/2,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          dpValve_nominal=5000)
                              annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-30,-90})));
        Fluid.Sensors.VolumeFlowRate FT521(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={10,90})));
        Controls.Continuous.LimPID FT_PID_521(k=1, Ti=1)
          annotation (Placement(transformation(extent={{140,120},{160,140}})));
        Controls.Continuous.LimPID FT_PID_123(k=1, Ti=1)
          annotation (Placement(transformation(extent={{140,-100},{160,-80}})));
        Fluid.Sensors.VolumeFlowRate FT121(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=m_flow_cold)
                                                         annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=90,
              origin={50,-150})));
        Fluid.Sensors.TemperatureTwoPort TT511(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100)
          annotation (Placement(transformation(extent={{80,250},{100,270}})));
        Fluid.Sensors.TemperatureTwoPort TT521(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=-90,
              origin={10,120})));
        Modelica.Blocks.Sources.RealExpression XV522_switch(y=if mode >= 2 then 1
               else 0)
          annotation (Placement(transformation(extent={{-240,210},{-220,230}})));
        Modelica.Blocks.Sources.RealExpression XV112A_switch(y=if mode >= 1 then 1
               else 0)
          annotation (Placement(transformation(extent={{-120,-80},{-100,-60}})));
        Modelica.Blocks.Sources.RealExpression cons_cold(y=4 + 273.15)
          annotation (Placement(transformation(extent={{-200,20},{-180,40}})));
        Modelica.Blocks.Sources.RealExpression CV123_reg(y=if mode == 1 or mode
               == 3 then 166/3600 else 332/3600)
          annotation (Placement(transformation(extent={{100,-100},{120,-80}})));
        Fluid.Sensors.TemperatureTwoPort TT121(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=322/3.6)
                                                         annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=270,
              origin={50,-80})));
        Controls_a.TFP.PID_Valve_evap pID_Valve_evap annotation (Placement(
              transformation(extent={{-120,-240},{-100,-220}})));
        Controls_a.TFP.PID_Valve_cond pID_Valve_cond
          annotation (Placement(transformation(extent={{-200,160},{-180,180}})));
        Modelica.Blocks.Sources.RealExpression CV523_reg(y=211/3600)
          annotation (Placement(transformation(extent={{100,120},{120,140}})));
        Fluid.Actuators.Valves.ThreeWayLinear val(
          redeclare package Medium = Buildings.Media.Water,
          use_inputFilter=false,
          m_flow_nominal=m_flow_cold,
          dpValve_nominal=5000) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=270,
              origin={50,-200})));
        Fluid.Actuators.Valves.ThreeWayLinear val1(
          redeclare package Medium = Buildings.Media.Water,
          use_inputFilter=false,
          m_flow_nominal=m_flow_hot,
          dpValve_nominal=5000) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=90,
              origin={10,150})));
        Modelica.Blocks.Sources.IntegerExpression integerExpression(y=mode)
          annotation (Placement(transformation(extent={{-240,160},{-220,180}})));
        Fluid.Chillers.Carnot_TEva TFPA(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=m_flow_hot,
          m2_flow_nominal=m_flow_cold/2,
          QEva_flow_nominal=-166/3.6*4185*(7),
          dTEva_nominal=-7,
          dTCon_nominal=15,
          use_eta_Carnot_nominal=true,
          etaCarnot_nominal=0.95,
          COP_nominal=6.5,
          TCon_nominal=313.15,
          dp1_nominal=40000,
          dp2_nominal=40000,
          QEva_flow_min(displayUnit="kW") = -1800000)
          annotation (Placement(transformation(extent={{20,-20},{40,0}})));
        RJC.Heat_exchanger heat_exchanger(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water)
          annotation (Placement(transformation(extent={{200,180},{220,200}})));
        RJF.Cold_exchanger cold_exchanger(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water)
          annotation (Placement(transformation(extent={{200,-20},{220,0}})));
        Fluid.Sources.Boundary_pT bou1(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=false,
          T=285.15,
          nPorts=3)
          annotation (Placement(transformation(extent={{320,240},{300,260}})));
        Fluid.Sensors.TemperatureTwoPort TT1(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100)
          annotation (Placement(transformation(extent={{240,240},{220,260}})));
        Buildings.Fluid.Movers.FlowControlled_dp fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=500/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          constantHead(displayUnit="bar") = 300000)
          annotation (Placement(transformation(extent={{280,240},{260,260}})));
        Modelica.Blocks.Sources.RealExpression cons_cold1(y=15 + 273.15)
          annotation (Placement(transformation(extent={{-200,-204},{-180,-184}})));
        Fluid.Sources.Boundary_pT bou2(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=false,
          T=323.15,
          nPorts=2)
          annotation (Placement(transformation(extent={{-100,320},{-80,340}})));
        Buildings.Fluid.Movers.FlowControlled_m_flow fan1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=211/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_PEC per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          addPowerToMedium=true,
          dp_nominal(displayUnit="bar") = 1000000,
          constantMassFlowRate=200/3.6)
          annotation (Placement(transformation(extent={{-40,320},{-20,340}})));
        Fluid.Sources.Boundary_pT bou3(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=false,
          T=285.15,
          nPorts=2)
          annotation (Placement(transformation(extent={{160,-300},{140,-280}})));
        Buildings.Fluid.Movers.FlowControlled_m_flow fan2(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=315/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_PEG per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          addPowerToMedium=true,
          dp_nominal(displayUnit="bar") = 1000000,
          constantMassFlowRate=200/3.6)
          annotation (Placement(transformation(extent={{100,-300},{80,-280}})));
        Modelica.Blocks.Sources.IntegerExpression integerExpression1(y=mode)
          annotation (Placement(transformation(extent={{158,148},{178,168}})));
      equation

        connect(FT521.port_b, CV523.port_a)
          annotation (Line(points={{10,80},{10,60}}, color={238,46,47},
            thickness=0.5));
        connect(FT521.V_flow, FT_PID_521.u_m) annotation (Line(points={{21,90},{50,90},
                {50,100},{150,100},{150,118}}, color={0,0,127}));
        connect(FT_PID_521.y, CV523.y) annotation (Line(points={{161,130},{180,130},{180,
                50},{22,50}}, color={0,0,127}));
        connect(FT121.V_flow, FT_PID_123.u_m) annotation (Line(points={{61,-150},{150,
                -150},{150,-102}}, color={0,0,127}));
        connect(FT_PID_123.y, CV123.y) annotation (Line(points={{161,-90},{180,-90},{180,
                -68},{80,-68},{80,-110},{62,-110}},
                                                  color={0,0,127}));
        connect(XV522.port_b, TT511.port_a) annotation (Line(points={{70,240},{70,
                260},{80,260}}, color={238,46,47},
            thickness=0.5));
        connect(TT521.port_b, FT521.port_a)
          annotation (Line(points={{10,110},{10,100}}, color={238,46,47},
            thickness=0.5));
        connect(XV522_switch.y, XV522.y) annotation (Line(points={{-219,220},{
                -160,220},{-160,230},{58,230}},
                                      color={0,0,127}));
        connect(CV123_reg.y, FT_PID_123.u_s)
          annotation (Line(points={{121,-90},{138,-90}}, color={0,0,127}));
        connect(TT121.port_a, CV123.port_b)
          annotation (Line(points={{50,-90},{50,-100}}, color={0,127,255},
            thickness=0.5));
        connect(pID_Valve_evap.TFP_TT121, TT121.T) annotation (Line(points={{-122,-234},
                {-220,-234},{-220,-260},{10,-260},{10,-80},{39,-80}},       color=
               {0,0,127}));
        connect(TT511.T, pID_Valve_evap.TFP_TT511) annotation (Line(points={{90,271},
                {90,300},{-250,300},{-250,-252},{-208,-252},{-208,-238},{-122,
                -238}},      color={0,0,127}));
        connect(TT511.T, pID_Valve_cond.TFP_TT511) annotation (Line(points={{90,271},
                {90,300},{-250,300},{-250,176},{-202,176}},      color={0,0,127}));
        connect(TT521.T, pID_Valve_cond.TFP_TT521) annotation (Line(points={{-1,
                120},{-220,120},{-220,162},{-202,162}}, color={0,0,127}));
        connect(CV523_reg.y, FT_PID_521.u_s)
          annotation (Line(points={{121,130},{138,130}}, color={0,0,127}));
        connect(val.port_1, jun5.port_2) annotation (Line(
            points={{50,-210},{50,-240}},
            color={0,127,255},
            thickness=0.5));
        connect(pID_Valve_evap.CV121, val.y) annotation (Line(points={{-99,-235},
                {80,-235},{80,-200},{62,-200}}, color={0,0,127}));
        connect(pID_Valve_cond.CV521, val1.y) annotation (Line(points={{-179,165},{-31.5,
                165},{-31.5,150},{-2,150}}, color={0,0,127}));
        connect(val1.port_2, TT521.port_a) annotation (Line(
            points={{10,140},{10,130}},
            color={238,46,47},
            thickness=0.5));
        connect(val1.port_1, jun.port_2) annotation (Line(
            points={{10,160},{10,240}},
            color={238,46,47},
            thickness=0.5));
        connect(integerExpression.y, pID_Valve_cond.TFP_mode) annotation (Line(points=
               {{-219,170},{-212,170},{-212,170},{-202,170}}, color={255,127,0}));
        connect(FT121.port_a, val.port_2) annotation (Line(
            points={{50,-160},{50,-190}},
            color={0,127,255},
            thickness=0.5));
        connect(FT121.port_b, CV123.port_a) annotation (Line(
            points={{50,-140},{50,-120}},
            color={0,127,255},
            thickness=0.5));
        connect(cons_cold.y, TFPA.TSet) annotation (Line(points={{-179,30},{-136,30},{
                -136,10},{0,10},{0,-1},{18,-1}}, color={0,0,127}));
        connect(TFPA.port_b2, XV112A.port_a) annotation (Line(
            points={{20,-16},{-30,-16},{-30,-80}},
            color={0,127,255},
            thickness=0.5));
        connect(CV523.port_b, TFPA.port_a1)
          annotation (Line(points={{10,40},{10,-4},{20,-4}}, color={238,46,47},
            thickness=0.5));

        connect(heat_exchanger.port_b2, val1.port_3) annotation (Line(points={{200,184},
                {90,184},{90,150},{20,150}}, color={0,127,255}));
        connect(XV112A_switch.y, XV112A.y) annotation (Line(points={{-99,-70},{-6,-70},
                {-6,-90},{-18,-90}}, color={0,0,127}));
        connect(jun5.port_3, cold_exchanger.port_a2) annotation (Line(points={{60,-250},
                {220,-250},{220,-16}}, color={0,127,255}));
        connect(cold_exchanger.port_b2, val.port_3) annotation (Line(points={{200,-16},
                {200,-180},{30,-180},{30,-200},{40,-200}}, color={0,127,255}));
        connect(TT1.port_b, heat_exchanger.port_a1) annotation (Line(points={{220,250},
                {200,250},{200,196}}, color={0,127,255}));
        connect(TT1.port_b, cold_exchanger.port_a1) annotation (Line(points={{220,250},
                {190,250},{190,-4},{200,-4}}, color={0,127,255}));
        connect(heat_exchanger.port_b1, bou1.ports[1]) annotation (Line(points={{220,196},
                {300,196},{300,252.667}}, color={0,127,255}));
        connect(cold_exchanger.port_b1, bou1.ports[2])
          annotation (Line(points={{220,-4},{300,-4},{300,250}}, color={0,127,255}));
        connect(TT1.T, heat_exchanger.PEM_TT200) annotation (Line(points={{230,261},{230,
                270},{180,270},{180,186},{198,186}}, color={0,0,127}));
        connect(TT1.T, cold_exchanger.PEM_TT200) annotation (Line(points={{230,261},{230,
                270},{184,270},{184,-14},{198,-14}}, color={0,0,127}));
        connect(pID_Valve_evap.CV122, cold_exchanger.TFP_CV122) annotation (Line(
              points={{-99,-225},{192,-225},{192,-6},{198,-6}}, color={0,0,127}));
        connect(pID_Valve_cond.CV522, heat_exchanger.TFP_CV522) annotation (Line(
              points={{-179,175},{-180,175},{-180,176},{158,176},{158,194},{198,194}},
              color={0,0,127}));
        connect(TT1.T, pID_Valve_evap.PEM_TT200) annotation (Line(points={{230,261},{230,
                284},{346,284},{346,-270},{-140,-270},{-140,-222},{-122,-222}}, color=
               {0,0,127}));
        connect(fan.port_a, bou1.ports[3]) annotation (Line(points={{280,250},{
                290,250},{290,247.333},{300,247.333}},
                                              color={0,127,255}));
        connect(fan.port_b, TT1.port_a)
          annotation (Line(points={{260,250},{240,250}}, color={0,127,255}));
        connect(cons_cold1.y, pID_Valve_evap.DEG_TT121) annotation (Line(points={{-179,
                -194},{-152,-194},{-152,-226},{-122,-226}}, color={0,0,127}));
        connect(bou2.ports[1], fan1.port_a) annotation (Line(points={{-80,332},{-60,332},
                {-60,330},{-40,330}}, color={238,46,47},
            thickness=0.5));
        connect(fan1.port_b, jun.port_1)
          annotation (Line(points={{-20,330},{10,330},{10,260}}, color={238,46,
                47},
            thickness=0.5));
        connect(TT511.port_b, bou2.ports[2]) annotation (Line(points={{100,260},{122,260},
                {122,352},{-80,352},{-80,328}}, color={238,46,47},
            thickness=0.5));
        connect(bou3.ports[1], fan2.port_a) annotation (Line(points={{140,-288},{120,-288},
                {120,-290},{100,-290}}, color={0,127,255}));
        connect(fan2.port_b, jun5.port_1) annotation (Line(points={{80,-290},{50,-290},
                {50,-260}}, color={0,127,255},
            thickness=0.5));
        connect(XV112A.port_b, bou3.ports[2]) annotation (Line(points={{-30,-100},{-30,
                -324},{140,-324},{140,-292}}, color={0,127,255},
            thickness=0.5));
        connect(integerExpression1.y, heat_exchanger.mode) annotation (Line(
              points={{179,158},{192,158},{192,160},{204,160},{204,178}}, color=
               {255,127,0}));
        connect(TFPA.port_a2, TT121.port_b) annotation (Line(
            points={{40,-16},{50,-16},{50,-70}},
            color={0,127,255},
            thickness=0.5));
        connect(jun.port_3, heat_exchanger.port_a2) annotation (Line(points={{
                1.77636e-15,250},{-66,250},{-66,172},{232,172},{232,184},{220,
                184}}, color={0,127,255}));
        connect(TFPA.port_b1, XV522.port_a) annotation (Line(points={{40,-4},{
                70,-4},{70,220}}, color={0,127,255}));
        annotation (Diagram(coordinateSystem(extent={{-100,-100},{100,100}})), Icon(
              coordinateSystem(extent={{-100,-100},{100,100}}), graphics={Rectangle(
                extent={{0,80},{60,20}},
                lineColor={238,46,47},
                fillColor={238,46,47},
                fillPattern=FillPattern.Solid),                           Rectangle(
                extent={{0,-20},{60,-80}},
                lineColor={28,108,200},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid),                           Rectangle(
                extent={{-60,80},{0,20}},
                lineColor={238,46,47},
                fillColor={244,125,35},
                fillPattern=FillPattern.Solid),                           Rectangle(
                extent={{-60,-20},{0,-80}},
                lineColor={28,108,200},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid)}),
          Documentation(info="<html>
<h4><span style=\"color: #000000\">HPSHC modes</span></h4>
<p>For the HPSHC, 4 possible modes :</p>
<p>0 - Off</p>
<p>1 - Cold mode</p>
<p>2 - HPSHC full</p>
<p>3 - HPSHC 1/2</p>
</html>"),experiment(StopTime=1, __Dymola_Algorithm="Dassl"));
      end carnot_wip_3;

      model TFP_duo_carnot
        Integer mode = 3;
        parameter Modelica.SIunits.MassFlowRate m_flow_hot= 211*1000/3600;
        parameter Modelica.SIunits.MassFlowRate m_flow_cold= 332*1000/3600;
        parameter Real T_set_hot = 61+273.15;
        parameter Real T_set_hot_max = 63+273.15;
        parameter Real T_set_hot_min = 41+273.15;
        parameter Real T_set_cold_max = 14+273.15;
        parameter Real T_set_cold = 4+273.15;

        Fluid.FixedResistances.Junction jun(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={m_flow_hot,-m_flow_hot,-m_flow_hot},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=270,
              origin={10,250})));
        Fluid.Actuators.Valves.TwoWayLinear CV523(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=210/3.6*2,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          dpValve_nominal=5000,
          use_inputFilter=false)
                              annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={10,50})));
        Fluid.FixedResistances.Junction jun1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={m_flow_hot,-m_flow_hot,m_flow_hot},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,10},{10,-10}},
              rotation=270,
              origin={-90,200})));
        Fluid.FixedResistances.Junction jun4(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={m_flow_cold,-m_flow_cold/2,-m_flow_cold/2},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,10},{10,-10}},
              rotation=90,
              origin={50,-50})));
        Fluid.Actuators.Valves.TwoWayLinear XV112A(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_cold/2,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          dpValve_nominal=5000)
                              annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-50,-90})));
        Fluid.Actuators.Valves.TwoWayLinear CV123(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_cold,
          dpValve_nominal=5000,
          use_inputFilter=false)
                              annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=90,
              origin={50,-110})));
        Fluid.FixedResistances.Junction jun5(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={m_flow_cold,-m_flow_cold,-m_flow_cold},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=90,
              origin={50,-250})));
        Fluid.FixedResistances.Junction jun6(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={m_flow_cold/2,-m_flow_cold,m_flow_cold/2},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,10},{10,-10}},
              rotation=270,
              origin={-50,-130})));
        Fluid.Actuators.Valves.TwoWayLinear XV112B(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_cold/2,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          dpValve_nominal=5000)
                              annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={10,-90})));
        Controls.Continuous.LimPID FT_PID_123(k=1, Ti=1)
          annotation (Placement(transformation(extent={{180,-100},{200,-80}})));
        Fluid.Sensors.VolumeFlowRate FT121(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=m_flow_cold)
                                                         annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=90,
              origin={50,-150})));
        Fluid.Sensors.TemperatureTwoPort TT111(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=m_flow_cold)
          annotation (Placement(transformation(extent={{-60,-170},{-80,-150}})));
        Fluid.Sensors.TemperatureTwoPort TT511(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100)
          annotation (Placement(transformation(extent={{80,250},{100,270}})));
        Fluid.Sensors.TemperatureTwoPort TT521(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=-90,
              origin={10,120})));
        Modelica.Blocks.Sources.RealExpression XV522_switch(y=if mode >= 2 then 1
               else 0)
          annotation (Placement(transformation(extent={{-240,210},{-220,230}})));
        Modelica.Blocks.Sources.RealExpression XV112A_switch(y=if mode >= 1 then 1
               else 0)
          annotation (Placement(transformation(extent={{-200,-40},{-180,-20}})));
        Modelica.Blocks.Sources.RealExpression XV112B_switch(y=if mode == 1 or mode ==
              2 then 1 else 0)
          annotation (Placement(transformation(extent={{-200,-80},{-180,-60}})));
        Modelica.Blocks.Sources.RealExpression cons_cold(y=T_set_cold)
          annotation (Placement(transformation(extent={{-200,20},{-180,40}})));
        Modelica.Blocks.Sources.RealExpression CV123_reg(y=if mode == 1 or mode
               == 3 then 166/3600 else 332/3600)
          annotation (Placement(transformation(extent={{140,-100},{160,-80}})));
        Fluid.Sensors.TemperatureTwoPort TT121(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=322/3.6)
                                                         annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=270,
              origin={50,-80})));
        Controls_a.TFP.PID_Valve_evap pID_Valve_evap annotation (Placement(
              transformation(extent={{-120,-240},{-100,-220}})));
        Controls_a.TFP.PID_Valve_cond pID_Valve_cond
          annotation (Placement(transformation(extent={{-200,160},{-180,180}})));
        Fluid.Actuators.Valves.ThreeWayLinear val(
          redeclare package Medium = Buildings.Media.Water,
          use_inputFilter=false,
          m_flow_nominal=m_flow_cold,
          dpValve_nominal=5000) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=270,
              origin={50,-200})));
        Fluid.Actuators.Valves.ThreeWayLinear val1(
          redeclare package Medium = Buildings.Media.Water,
          use_inputFilter=false,
          m_flow_nominal=m_flow_hot,
          dpValve_nominal=5000) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=90,
              origin={10,150})));
        Modelica.Blocks.Sources.IntegerExpression integerExpression(y=mode)
          annotation (Placement(transformation(extent={{-240,160},{-220,180}})));
        Fluid.Chillers.Carnot_TEva TFPA(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=m_flow_hot,
          m2_flow_nominal=m_flow_cold/2,
          QEva_flow_nominal=-166/3.6*4185*(7),
          dTEva_nominal=-7,
          dTCon_nominal=15,
          use_eta_Carnot_nominal=true,
          etaCarnot_nominal=0.95,
          COP_nominal=6.5,
          TCon_nominal=313.15,
          dp1_nominal=40000,
          dp2_nominal=40000,
          QEva_flow_min(displayUnit="kW") = -1800000)
          annotation (Placement(transformation(extent={{-40,-20},{-20,0}})));
        Fluid.Chillers.Carnot_TEva TFPB(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=m_flow_hot,
          m2_flow_nominal=m_flow_cold/2,
          QEva_flow_nominal=-166/3.6*4185*(7),
          dTEva_nominal=-7,
          dTCon_nominal=15,
          use_eta_Carnot_nominal=true,
          etaCarnot_nominal=0.95,
          COP_nominal=6.5,
          TCon_nominal=313.15,
          dp1_nominal=40000,
          dp2_nominal=40000,
          QEva_flow_min(displayUnit="kW") = -1800000)
          annotation (Placement(transformation(extent={{20,-20},{40,0}})));
        Buildings.Applications.DHC_Thassalia.Valves.ThreeWayLinear_modif val2(
          redeclare package Medium = Buildings.Media.Water,
          use_inputFilter=false,
          m_flow_nominal=m_flow_hot,
          dpValve_nominal=5000) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=270,
              origin={70,200})));
        Fluid.Sources.Boundary_pT bou2(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=false,
          T=303.15,
          nPorts=2)
          annotation (Placement(transformation(extent={{-100,320},{-80,340}})));
        Fluid.Movers.FlowControlled_m_flow           fan1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=211/3.6,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_PEC per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          addPowerToMedium=true,
          use_inputFilter=false,
          dp_nominal(displayUnit="bar") = 1000000,
          constantMassFlowRate=205/3.6)
          annotation (Placement(transformation(extent={{-40,320},{-20,340}})));
        Fluid.Sensors.TemperatureTwoPort TT1(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100)
          annotation (Placement(transformation(extent={{282,34},{262,54}})));
        Fluid.Movers.FlowControlled_dp           fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=500/3.6,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          constantHead(displayUnit="bar") = 300000)
          annotation (Placement(transformation(extent={{322,34},{302,54}})));
        Fluid.Sources.Boundary_pT bou1(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=false,
          T=285.15,
          nPorts=3)
          annotation (Placement(transformation(extent={{362,34},{342,54}})));
        RJC.Heat_exchanger heat_exchanger(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water)
          annotation (Placement(transformation(extent={{242,-26},{262,-6}})));
        Modelica.Blocks.Sources.IntegerExpression integerExpression1(y=mode)
          annotation (Placement(transformation(extent={{200,-58},{220,-38}})));
        RJF.Cold_exchanger cold_exchanger(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water)
          annotation (Placement(transformation(extent={{240,-220},{260,-200}})));
        Fluid.Movers.FlowControlled_m_flow           fan2(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=315/3.6,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_PEG per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          addPowerToMedium=true,
          dp_nominal(displayUnit="bar") = 1000000,
          constantMassFlowRate=160/3.6)
          annotation (Placement(transformation(extent={{100,-320},{80,-300}})));
        Fluid.Sources.Boundary_pT bou3(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=false,
          T=285.15,
          nPorts=2)
          annotation (Placement(transformation(extent={{160,-320},{140,-300}})));
        Modelica.Blocks.Sources.RealExpression XV112B_switch2(y=273.15 + 12)
          annotation (Placement(transformation(extent={{-200,-180},{-180,-160}})));
        Fluid.Sensors.TemperatureTwoPort TT2(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-2,-4})));
        Modelica.Blocks.Sources.RealExpression XV522_switch1(y=if mode >= 1 then 1
               else 0)
          annotation (Placement(transformation(extent={{-240,90},{-220,110}})));
        Controls.Continuous.LimPID FT_PID_521(k=1, Ti=1)
          annotation (Placement(transformation(extent={{180,120},{200,140}})));
        Modelica.Blocks.Sources.RealExpression CV523_reg(y=211/3600)
          annotation (Placement(transformation(extent={{120,120},{140,140}})));
        Fluid.Sensors.VolumeFlowRate FT521(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={10,80})));
      equation

        connect(jun.port_3, jun1.port_1) annotation (Line(points={{0,250},{-90,250},{-90,
                210}},      color={238,46,47},
            thickness=0.5));

        connect(XV112A.port_b, jun6.port_1)
          annotation (Line(points={{-50,-100},{-50,-120}}, color={0,127,255},
            thickness=0.5));
        connect(jun6.port_3, XV112B.port_b) annotation (Line(points={{-40,-130},{
                10,-130},{10,-100}}, color={0,127,255},
            thickness=0.5));
        connect(FT121.V_flow, FT_PID_123.u_m) annotation (Line(points={{61,-150},{190,
                -150},{190,-102}}, color={0,0,127}));
        connect(FT_PID_123.y, CV123.y) annotation (Line(points={{201,-90},{220,
                -90},{220,-68},{80,-68},{80,-110},{62,-110}},
                                                  color={0,0,127}));
        connect(jun6.port_2, TT111.port_a) annotation (Line(points={{-50,-140},{
                -50,-160},{-60,-160}}, color={0,127,255},
            thickness=0.5));
        connect(XV112A_switch.y, XV112A.y) annotation (Line(points={{-179,-30},{-152,-30},
                {-152,-50},{-30,-50},{-30,-90},{-38,-90}}, color={0,0,127}));
        connect(XV112B_switch.y, XV112B.y) annotation (Line(points={{-179,-70},{30,-70},
                {30,-90},{22,-90}}, color={0,0,127}));
        connect(CV123_reg.y, FT_PID_123.u_s)
          annotation (Line(points={{161,-90},{178,-90}}, color={0,0,127}));
        connect(jun4.port_1, TT121.port_b)
          annotation (Line(points={{50,-60},{50,-70}}, color={0,127,255},
            thickness=0.5));
        connect(TT121.port_a, CV123.port_b)
          annotation (Line(points={{50,-90},{50,-100}}, color={0,127,255},
            thickness=0.5));
        connect(pID_Valve_evap.TFP_TT121, TT121.T) annotation (Line(points={{-122,
                -234},{-220,-234},{-220,-262},{34,-262},{34,-80},{39,-80}}, color=
               {0,0,127}));
        connect(TT511.T, pID_Valve_evap.TFP_TT511) annotation (Line(points={{90,271},
                {90,300},{-250,300},{-250,-252},{-208,-252},{-208,-238},{-122,
                -238}},      color={0,0,127}));
        connect(TT511.T, pID_Valve_cond.TFP_TT511) annotation (Line(points={{90,271},
                {90,300},{-250,300},{-250,176},{-202,176}},      color={0,0,127}));
        connect(TT521.T, pID_Valve_cond.TFP_TT521) annotation (Line(points={{-1,
                120},{-220,120},{-220,162},{-202,162}}, color={0,0,127}));
        connect(val.port_1, jun5.port_2) annotation (Line(
            points={{50,-210},{50,-240}},
            color={0,127,255},
            thickness=0.5));
        connect(pID_Valve_evap.CV121, val.y) annotation (Line(points={{-99,-235},
                {80,-235},{80,-200},{62,-200}}, color={0,0,127}));
        connect(pID_Valve_cond.CV521, val1.y) annotation (Line(points={{-179,165},{-31.5,
                165},{-31.5,150},{-2,150}}, color={0,0,127}));
        connect(val1.port_2, TT521.port_a) annotation (Line(
            points={{10,140},{10,130}},
            color={238,46,47},
            thickness=0.5));
        connect(val1.port_1, jun.port_2) annotation (Line(
            points={{10,160},{10,240}},
            color={238,46,47},
            thickness=0.5));
        connect(integerExpression.y, pID_Valve_cond.TFP_mode) annotation (Line(points=
               {{-219,170},{-212,170},{-212,170},{-202,170}}, color={255,127,0}));
        connect(FT121.port_a, val.port_2) annotation (Line(
            points={{50,-160},{50,-190}},
            color={0,127,255},
            thickness=0.5));
        connect(FT121.port_b, CV123.port_a) annotation (Line(
            points={{50,-140},{50,-120}},
            color={0,127,255},
            thickness=0.5));
        connect(cons_cold.y, TFPA.TSet) annotation (Line(points={{-179,30},{-136,30},{
                -136,-1},{-42,-1}}, color={0,0,127}));
        connect(cons_cold.y, TFPB.TSet) annotation (Line(points={{-179,30},{-136,30},{
                -136,10},{0,10},{0,-1},{18,-1}}, color={0,0,127}));
        connect(CV523.port_b, TFPA.port_a1) annotation (Line(
            points={{10,40},{10,28},{-50,28},{-50,-4},{-40,-4}},
            color={238,46,47},
            thickness=0.5));
        connect(TFPB.port_a2, jun4.port_2) annotation (Line(
            points={{40,-16},{50,-16},{50,-40}},
            color={0,127,255},
            thickness=0.5));
        connect(jun4.port_3, TFPA.port_a2) annotation (Line(
            points={{40,-50},{0,-50},{0,-16},{-20,-16}},
            color={0,127,255},
            thickness=0.5));
        connect(TFPB.port_b2, XV112B.port_a) annotation (Line(
            points={{20,-16},{10,-16},{10,-80}},
            color={0,127,255},
            thickness=0.5));
        connect(TFPA.port_b2, XV112A.port_a) annotation (Line(
            points={{-40,-16},{-50,-16},{-50,-80}},
            color={0,127,255},
            thickness=0.5));
        connect(jun1.port_3, val2.port_3) annotation (Line(
            points={{-80,200},{60,200}},
            color={238,46,47},
            thickness=0.5));
        connect(val2.port_2, TT511.port_a) annotation (Line(
            points={{70,210},{70,260},{80,260}},
            color={238,46,47},
            thickness=0.5));
        connect(val2.port_1, TFPB.port_b1) annotation (Line(
            points={{70,190},{70,-4},{40,-4}},
            color={238,46,47},
            thickness=0.5));
        connect(bou2.ports[1], fan1.port_a)
          annotation (Line(points={{-80,332},{-60,332},{-60,330},{-40,330}},
                                                         color={0,127,255}));
        connect(fan1.port_b, jun.port_1)
          annotation (Line(points={{-20,330},{10,330},{10,260}}, color={0,127,255}));
        connect(fan2.port_b, jun5.port_1) annotation (Line(points={{80,-310},{50,-310},
                {50,-260}}, color={0,127,255}));
        connect(fan2.port_a, bou3.ports[1]) annotation (Line(points={{100,-310},{120,-310},
                {120,-308},{140,-308}}, color={0,127,255}));
        connect(bou1.ports[1], fan.port_a) annotation (Line(points={{342,
                46.6667},{332,46.6667},{332,44},{322,44}},
                                             color={0,127,255}));
        connect(fan.port_b, TT1.port_a)
          annotation (Line(points={{302,44},{282,44}}, color={0,127,255}));
        connect(TT1.port_b, heat_exchanger.port_a1) annotation (Line(points={{262,44},
                {256,44},{256,42},{236,42},{236,-10},{242,-10}}, color={0,127,255}));
        connect(heat_exchanger.port_b1, bou1.ports[2]) annotation (Line(points={{262,-10},
                {342,-10},{342,44}}, color={0,127,255}));
        connect(TT1.port_b, cold_exchanger.port_a1) annotation (Line(points={{262,44},
                {228,44},{228,-204},{240,-204}}, color={0,127,255}));
        connect(cold_exchanger.port_b1, bou1.ports[3]) annotation (Line(points={{260,
                -204},{342,-204},{342,41.3333}},
                                           color={0,127,255}));
        connect(integerExpression1.y, heat_exchanger.mode) annotation (Line(points={{221,
                -48},{246,-48},{246,-28}}, color={255,127,0}));
        connect(TT111.port_b, bou3.ports[2]) annotation (Line(points={{-80,-160},{-82,
                -160},{-82,-338},{140,-338},{140,-312}}, color={0,127,255}));
        connect(jun5.port_3, cold_exchanger.port_a2) annotation (Line(points={{60,-250},
                {280,-250},{280,-216},{260,-216},{260,-216}}, color={0,127,255}));
        connect(cold_exchanger.port_b2, val.port_3) annotation (Line(points={{240,-216},
                {240,-222},{22,-222},{22,-200},{40,-200}}, color={0,127,255}));
        connect(pID_Valve_evap.CV122, cold_exchanger.TFP_CV122) annotation (Line(
              points={{-99,-225},{54,-225},{54,-226},{208,-226},{208,-206},{238,-206}},
              color={0,0,127}));
        connect(pID_Valve_cond.CV522, heat_exchanger.TFP_CV522) annotation (Line(
              points={{-179,175},{106,175},{106,-12},{240,-12}}, color={0,0,127}));
        connect(jun1.port_2, heat_exchanger.port_a2) annotation (Line(points={{
                -90,190},{-90,18},{276,18},{276,-22},{262,-22}}, color={0,127,
                255}));
        connect(heat_exchanger.port_b2, val1.port_3) annotation (Line(points={{
                242,-22},{96,-22},{96,150},{20,150}}, color={0,127,255}));
        connect(XV522_switch.y, val2.y) annotation (Line(points={{-219,220},{
                114,220},{114,200},{82,200}}, color={0,0,127}));
        connect(TT511.port_b, bou2.ports[2]) annotation (Line(points={{100,260},
                {120,260},{120,352},{-80,352},{-80,328}}, color={0,127,255}));
        connect(TFPA.port_b1, TT2.port_a)
          annotation (Line(points={{-20,-4},{-12,-4}}, color={0,127,255}));
        connect(TT2.port_b, TFPB.port_a1)
          annotation (Line(points={{8,-4},{20,-4}}, color={0,127,255}));
        connect(pID_Valve_evap.DEG_TT121, XV112B_switch2.y) annotation (Line(
              points={{-122,-226},{-150,-226},{-150,-170},{-179,-170}}, color={
                0,0,127}));
        connect(TT1.T, heat_exchanger.PEM_TT200) annotation (Line(points={{272,
                55},{272,68},{214,68},{214,-20},{240,-20}}, color={0,0,127}));
        connect(TT1.T, cold_exchanger.PEM_TT200) annotation (Line(points={{272,
                55},{272,60},{290,60},{290,-176},{222,-176},{222,-214},{238,
                -214}}, color={0,0,127}));
        connect(TT1.T, pID_Valve_evap.PEM_TT200) annotation (Line(points={{272,
                55},{274,55},{274,60},{290,60},{290,-280},{-134,-280},{-134,
                -222},{-122,-222}}, color={0,0,127}));
        connect(CV523_reg.y,FT_PID_521. u_s)
          annotation (Line(points={{141,130},{178,130}}, color={0,0,127}));
        connect(CV523.y, FT_PID_521.y) annotation (Line(points={{22,50},{220,50},
                {220,130},{201,130}}, color={0,0,127}));
        connect(TT521.port_b, FT521.port_a)
          annotation (Line(points={{10,110},{10,90}}, color={0,127,255}));
        connect(FT521.port_b, CV523.port_a)
          annotation (Line(points={{10,70},{10,60}}, color={0,127,255}));
        connect(FT521.V_flow, FT_PID_521.u_m) annotation (Line(points={{21,80},
                {190,80},{190,118}}, color={0,0,127}));
        annotation (Diagram(coordinateSystem(extent={{-100,-100},{100,100}})), Icon(
              coordinateSystem(extent={{-100,-100},{100,100}}), graphics={Rectangle(
                extent={{0,80},{60,20}},
                lineColor={238,46,47},
                fillColor={238,46,47},
                fillPattern=FillPattern.Solid),                           Rectangle(
                extent={{0,-20},{60,-80}},
                lineColor={28,108,200},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid),                           Rectangle(
                extent={{-60,80},{0,20}},
                lineColor={238,46,47},
                fillColor={244,125,35},
                fillPattern=FillPattern.Solid),                           Rectangle(
                extent={{-60,-20},{0,-80}},
                lineColor={28,108,200},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid)}),
          Documentation(info="<html>
<h4><span style=\"color: #000000\">HPSHC modes</span></h4>
<p>For the HPSHC, 4 possible modes :</p>
<p>0 - Off</p>
<p>1 - Cold mode</p>
<p>2 - HPSHC full</p>
<p>3 - HPSHC 1/2</p>
</html>"),experiment(StopTime=50000, __Dymola_Algorithm="Dassl"));
      end TFP_duo_carnot;

      model TFP_duo_carnot_var
        Integer mode = 2;
        parameter Modelica.SIunits.MassFlowRate m_flow_hot= 211*1000/3600;
        parameter Modelica.SIunits.MassFlowRate m_flow_cold= 332*1000/3600;
        parameter Real T_set_hot = 61+273.15;
        parameter Real T_set_hot_max = 63+273.15;
        parameter Real T_set_hot_min = 41+273.15;
        parameter Real T_set_cold_max = 14+273.15;
        parameter Real T_set_cold = 4+273.15;

        Fluid.FixedResistances.Junction jun(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={m_flow_hot,-m_flow_hot,-m_flow_hot},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=270,
              origin={10,250})));
        Fluid.Actuators.Valves.TwoWayLinear CV523(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_hot,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          dpValve_nominal=5000,
          use_inputFilter=false)
                              annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={10,50})));
        Fluid.FixedResistances.Junction jun1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={m_flow_hot,-m_flow_hot,m_flow_hot},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,10},{10,-10}},
              rotation=270,
              origin={-90,200})));
        Fluid.Actuators.Valves.TwoWayLinear XV112A(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_cold/2,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          dpValve_nominal=5000)
                              annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-50,-90})));
        Fluid.Actuators.Valves.TwoWayLinear CV123(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_cold,
          dpValve_nominal=5000,
          use_inputFilter=false)
                              annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=90,
              origin={50,-110})));
        Fluid.FixedResistances.Junction jun5(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={m_flow_cold,-m_flow_cold,-m_flow_cold},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=90,
              origin={50,-250})));
        Fluid.FixedResistances.Junction jun6(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={m_flow_cold/2,-m_flow_cold,m_flow_cold/2},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,10},{10,-10}},
              rotation=270,
              origin={-50,-130})));
        Fluid.Sensors.VolumeFlowRate FT521(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={10,90})));
        Controls.Continuous.LimPID FT_PID_521(k=1, Ti=1)
          annotation (Placement(transformation(extent={{200,120},{220,140}})));
        Controls.Continuous.LimPID FT_PID_123(k=1, Ti=1)
          annotation (Placement(transformation(extent={{180,-100},{200,-80}})));
        Fluid.Sensors.VolumeFlowRate FT121(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=m_flow_cold)
                                                         annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=90,
              origin={50,-150})));
        Fluid.Sensors.TemperatureTwoPort TT111(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=m_flow_cold)
          annotation (Placement(transformation(extent={{-60,-170},{-80,-150}})));
        Fluid.Sensors.TemperatureTwoPort TT511(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100)
          annotation (Placement(transformation(extent={{80,250},{100,270}})));
        Fluid.Sensors.TemperatureTwoPort TT521(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=-90,
              origin={10,120})));
        Modelica.Blocks.Sources.RealExpression XV522_switch(y=if mode >= 2 then 1
               else 0)
          annotation (Placement(transformation(extent={{-240,210},{-220,230}})));
        Modelica.Blocks.Sources.RealExpression XV112A_switch(y=if mode >= 1 then 1
               else 0)
          annotation (Placement(transformation(extent={{-200,-40},{-180,-20}})));
        Modelica.Blocks.Sources.RealExpression XV112B_switch(y=if mode == 1 or mode ==
              2 then 1 else 0)
          annotation (Placement(transformation(extent={{-200,-80},{-180,-60}})));
        Modelica.Blocks.Sources.RealExpression cons_cold(y=T_set_cold)
          annotation (Placement(transformation(extent={{-200,20},{-180,40}})));
        Modelica.Blocks.Sources.RealExpression CV123_reg(y=if mode == 1 or mode
               == 3 then 166/3600 else 332/3600)
          annotation (Placement(transformation(extent={{140,-100},{160,-80}})));
        Fluid.Sensors.TemperatureTwoPort TT121(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=322/3.6)
                                                         annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=270,
              origin={50,-80})));
        Controls_a.TFP.PID_Valve_evap pID_Valve_evap annotation (Placement(
              transformation(extent={{-120,-240},{-100,-220}})));
        Controls_a.TFP.PID_Valve_cond pID_Valve_cond
          annotation (Placement(transformation(extent={{-200,160},{-180,180}})));
        Modelica.Blocks.Sources.RealExpression CV523_reg(y=211/3600)
          annotation (Placement(transformation(extent={{140,120},{160,140}})));
        Fluid.Actuators.Valves.ThreeWayLinear val(
          redeclare package Medium = Buildings.Media.Water,
          use_inputFilter=false,
          m_flow_nominal=m_flow_cold,
          dpValve_nominal=5000) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=270,
              origin={50,-200})));
        Fluid.Actuators.Valves.ThreeWayLinear val1(
          redeclare package Medium = Buildings.Media.Water,
          use_inputFilter=false,
          m_flow_nominal=m_flow_hot,
          dpValve_nominal=5000) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=90,
              origin={10,150})));
        Modelica.Blocks.Sources.IntegerExpression integerExpression(y=mode)
          annotation (Placement(transformation(extent={{-240,160},{-220,180}})));
        Fluid.Chillers.Carnot_TEva TFPA(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=m_flow_hot,
          m2_flow_nominal=m_flow_cold/2,
          QEva_flow_nominal=-166/3.6*4185*(7),
          dTEva_nominal=-7,
          dTCon_nominal=15,
          use_eta_Carnot_nominal=true,
          etaCarnot_nominal=0.95,
          COP_nominal=6.5,
          TCon_nominal=313.15,
          dp1_nominal=40000,
          dp2_nominal=40000,
          QEva_flow_min(displayUnit="kW") = -1800000)
          annotation (Placement(transformation(extent={{-40,-20},{-20,0}})));
        Fluid.Actuators.Valves.ThreeWayLinear val2(
          redeclare package Medium = Buildings.Media.Water,
          use_inputFilter=false,
          m_flow_nominal=m_flow_hot,
          dpValve_nominal=5000) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=270,
              origin={70,200})));
        Fluid.Sources.Boundary_pT bou2(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=false,
          T=323.15,
          nPorts=1)
          annotation (Placement(transformation(extent={{-100,320},{-80,340}})));
        Fluid.Movers.FlowControlled_m_flow           fan1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=211/3.6,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_PEC per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          addPowerToMedium=true,
          dp_nominal(displayUnit="bar") = 1000000,
          constantMassFlowRate=200/3.6)
          annotation (Placement(transformation(extent={{-40,320},{-20,340}})));
        Fluid.Sensors.TemperatureTwoPort TT1(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100)
          annotation (Placement(transformation(extent={{282,34},{262,54}})));
        Fluid.Movers.FlowControlled_dp           fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=500/3.6,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          constantHead(displayUnit="bar") = 300000)
          annotation (Placement(transformation(extent={{322,34},{302,54}})));
        Fluid.Sources.Boundary_pT bou1(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=false,
          T=285.15,
          nPorts=3)
          annotation (Placement(transformation(extent={{362,34},{342,54}})));
        RJC.Heat_exchanger heat_exchanger(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water)
          annotation (Placement(transformation(extent={{242,-26},{262,-6}})));
        Modelica.Blocks.Sources.IntegerExpression integerExpression1(y=mode)
          annotation (Placement(transformation(extent={{200,-58},{220,-38}})));
        RJF.Cold_exchanger cold_exchanger(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water)
          annotation (Placement(transformation(extent={{240,-220},{260,-200}})));
        Fluid.Movers.FlowControlled_m_flow           fan2(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=315/3.6,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_PEG per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          addPowerToMedium=true,
          dp_nominal(displayUnit="bar") = 1000000,
          constantMassFlowRate=200/3.6)
          annotation (Placement(transformation(extent={{100,-320},{80,-300}})));
        Fluid.Sources.Boundary_pT bou3(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=false,
          T=285.15,
          nPorts=2)
          annotation (Placement(transformation(extent={{160,-320},{140,-300}})));
        Modelica.Blocks.Sources.RealExpression XV112B_switch2(y=273.15 + 12)
          annotation (Placement(transformation(extent={{-200,-220},{-180,-200}})));
        Modelica.Blocks.Sources.RealExpression XV112B_switch1(y=273.15 + 12)
          annotation (Placement(transformation(extent={{174,-34},{194,-14}})));
        Modelica.Blocks.Sources.RealExpression XV112B_switch3(y=273.15 + 12)
          annotation (Placement(transformation(extent={{170,-220},{190,-200}})));
      equation

        connect(jun.port_3, jun1.port_1) annotation (Line(points={{0,250},{-90,250},{-90,
                210}},      color={238,46,47},
            thickness=0.5));

        connect(XV112A.port_b, jun6.port_1)
          annotation (Line(points={{-50,-100},{-50,-120}}, color={0,127,255},
            thickness=0.5));
        connect(FT521.port_b, CV523.port_a)
          annotation (Line(points={{10,80},{10,60}}, color={238,46,47},
            thickness=0.5));
        connect(FT521.V_flow, FT_PID_521.u_m) annotation (Line(points={{21,90},{50,90},
                {50,100},{210,100},{210,118}}, color={0,0,127}));
        connect(FT_PID_521.y, CV523.y) annotation (Line(points={{221,130},{240,130},{240,
                50},{22,50}}, color={0,0,127}));
        connect(FT121.V_flow, FT_PID_123.u_m) annotation (Line(points={{61,-150},{190,
                -150},{190,-102}}, color={0,0,127}));
        connect(FT_PID_123.y, CV123.y) annotation (Line(points={{201,-90},{220,
                -90},{220,-68},{80,-68},{80,-110},{62,-110}},
                                                  color={0,0,127}));
        connect(jun6.port_2, TT111.port_a) annotation (Line(points={{-50,-140},{
                -50,-160},{-60,-160}}, color={0,127,255},
            thickness=0.5));
        connect(TT521.port_b, FT521.port_a)
          annotation (Line(points={{10,110},{10,100}}, color={238,46,47},
            thickness=0.5));
        connect(XV112A_switch.y, XV112A.y) annotation (Line(points={{-179,-30},{-152,-30},
                {-152,-50},{-30,-50},{-30,-90},{-38,-90}}, color={0,0,127}));
        connect(CV123_reg.y, FT_PID_123.u_s)
          annotation (Line(points={{161,-90},{178,-90}}, color={0,0,127}));
        connect(TT121.port_a, CV123.port_b)
          annotation (Line(points={{50,-90},{50,-100}}, color={0,127,255},
            thickness=0.5));
        connect(pID_Valve_evap.TFP_TT121, TT121.T) annotation (Line(points={{-122,
                -234},{-220,-234},{-220,-262},{34,-262},{34,-80},{39,-80}}, color=
               {0,0,127}));
        connect(TT511.T, pID_Valve_evap.TFP_TT511) annotation (Line(points={{90,271},
                {90,300},{-250,300},{-250,-252},{-208,-252},{-208,-238},{-122,
                -238}},      color={0,0,127}));
        connect(TT511.T, pID_Valve_cond.TFP_TT511) annotation (Line(points={{90,271},
                {90,300},{-250,300},{-250,176},{-202,176}},      color={0,0,127}));
        connect(TT521.T, pID_Valve_cond.TFP_TT521) annotation (Line(points={{-1,
                120},{-220,120},{-220,162},{-202,162}}, color={0,0,127}));
        connect(CV523_reg.y, FT_PID_521.u_s)
          annotation (Line(points={{161,130},{198,130}}, color={0,0,127}));
        connect(val.port_1, jun5.port_2) annotation (Line(
            points={{50,-210},{50,-240}},
            color={0,127,255},
            thickness=0.5));
        connect(pID_Valve_evap.CV121, val.y) annotation (Line(points={{-99,-235},
                {80,-235},{80,-200},{62,-200}}, color={0,0,127}));
        connect(pID_Valve_cond.CV521, val1.y) annotation (Line(points={{-179,165},{-31.5,
                165},{-31.5,150},{-2,150}}, color={0,0,127}));
        connect(val1.port_2, TT521.port_a) annotation (Line(
            points={{10,140},{10,130}},
            color={238,46,47},
            thickness=0.5));
        connect(val1.port_1, jun.port_2) annotation (Line(
            points={{10,160},{10,240}},
            color={238,46,47},
            thickness=0.5));
        connect(integerExpression.y, pID_Valve_cond.TFP_mode) annotation (Line(points=
               {{-219,170},{-212,170},{-212,170},{-202,170}}, color={255,127,0}));
        connect(FT121.port_a, val.port_2) annotation (Line(
            points={{50,-160},{50,-190}},
            color={0,127,255},
            thickness=0.5));
        connect(FT121.port_b, CV123.port_a) annotation (Line(
            points={{50,-140},{50,-120}},
            color={0,127,255},
            thickness=0.5));
        connect(cons_cold.y, TFPA.TSet) annotation (Line(points={{-179,30},{-136,30},{
                -136,-1},{-42,-1}}, color={0,0,127}));
        connect(CV523.port_b, TFPA.port_a1) annotation (Line(
            points={{10,40},{10,28},{-50,28},{-50,-4},{-40,-4}},
            color={238,46,47},
            thickness=0.5));
        connect(TFPA.port_b2, XV112A.port_a) annotation (Line(
            points={{-40,-16},{-50,-16},{-50,-80}},
            color={0,127,255},
            thickness=0.5));
        connect(jun1.port_3, val2.port_3) annotation (Line(
            points={{-80,200},{60,200}},
            color={238,46,47},
            thickness=0.5));
        connect(val2.port_2, TT511.port_a) annotation (Line(
            points={{70,210},{70,260},{80,260}},
            color={238,46,47},
            thickness=0.5));
        connect(bou2.ports[1], fan1.port_a)
          annotation (Line(points={{-80,330},{-40,330}}, color={0,127,255}));
        connect(fan1.port_b, jun.port_1)
          annotation (Line(points={{-20,330},{10,330},{10,260}}, color={0,127,255}));
        connect(fan2.port_b, jun5.port_1) annotation (Line(points={{80,-310},{50,-310},
                {50,-260}}, color={0,127,255}));
        connect(fan2.port_a, bou3.ports[1]) annotation (Line(points={{100,-310},{120,-310},
                {120,-308},{140,-308}}, color={0,127,255}));
        connect(bou1.ports[1], fan.port_a) annotation (Line(points={{342,
                46.6667},{332,46.6667},{332,44},{322,44}},
                                             color={0,127,255}));
        connect(fan.port_b, TT1.port_a)
          annotation (Line(points={{302,44},{282,44}}, color={0,127,255}));
        connect(TT1.port_b, heat_exchanger.port_a1) annotation (Line(points={{262,44},
                {256,44},{256,42},{236,42},{236,-10},{242,-10}}, color={0,127,255}));
        connect(heat_exchanger.port_b1, bou1.ports[2]) annotation (Line(points={{262,-10},
                {342,-10},{342,44}}, color={0,127,255}));
        connect(TT1.port_b, cold_exchanger.port_a1) annotation (Line(points={{262,44},
                {228,44},{228,-204},{240,-204}}, color={0,127,255}));
        connect(cold_exchanger.port_b1, bou1.ports[3]) annotation (Line(points={{260,
                -204},{342,-204},{342,41.3333}},
                                           color={0,127,255}));
        connect(integerExpression1.y, heat_exchanger.mode) annotation (Line(points={{221,
                -48},{246,-48},{246,-28}}, color={255,127,0}));
        connect(XV112B_switch2.y, pID_Valve_evap.DEG_TT121) annotation (Line(points={{
                -179,-210},{-150,-210},{-150,-226},{-122,-226}}, color={0,0,127}));
        connect(XV112B_switch2.y, pID_Valve_evap.PEM_TT200) annotation (Line(points={{
                -179,-210},{-152,-210},{-152,-222},{-122,-222}}, color={0,0,127}));
        connect(TT111.port_b, bou3.ports[2]) annotation (Line(points={{-80,-160},{-82,
                -160},{-82,-338},{140,-338},{140,-312}}, color={0,127,255}));
        connect(jun5.port_3, cold_exchanger.port_a2) annotation (Line(points={{60,-250},
                {280,-250},{280,-216},{260,-216},{260,-216}}, color={0,127,255}));
        connect(cold_exchanger.port_b2, val.port_3) annotation (Line(points={{240,-216},
                {240,-222},{22,-222},{22,-200},{40,-200}}, color={0,127,255}));
        connect(XV112B_switch1.y, heat_exchanger.PEM_TT200) annotation (Line(points={{
                195,-24},{218,-24},{218,-20},{240,-20}}, color={0,0,127}));
        connect(XV112B_switch3.y, cold_exchanger.PEM_TT200) annotation (Line(points={{
                191,-210},{216,-210},{216,-214},{238,-214}}, color={0,0,127}));
        connect(pID_Valve_evap.CV122, cold_exchanger.TFP_CV122) annotation (Line(
              points={{-99,-225},{54,-225},{54,-226},{208,-226},{208,-206},{238,-206}},
              color={0,0,127}));
        connect(pID_Valve_cond.CV522, heat_exchanger.TFP_CV522) annotation (Line(
              points={{-179,175},{106,175},{106,-12},{240,-12}}, color={0,0,127}));
        connect(jun1.port_2, heat_exchanger.port_a2) annotation (Line(points={{
                -90,190},{-90,18},{276,18},{276,-22},{262,-22}}, color={0,127,
                255}));
        connect(heat_exchanger.port_b2, val1.port_3) annotation (Line(points={{
                242,-22},{96,-22},{96,150},{20,150}}, color={0,127,255}));
        connect(XV522_switch.y, val2.y) annotation (Line(points={{-219,220},{
                114,220},{114,200},{82,200}}, color={0,0,127}));
        connect(TT121.port_b, TFPA.port_a2) annotation (Line(points={{50,-70},{
                50,-16},{-20,-16}}, color={0,127,255}));
        connect(TFPA.port_b1, val2.port_1) annotation (Line(points={{-20,-4},{
                70,-4},{70,190}}, color={0,127,255}));
        annotation (Diagram(coordinateSystem(extent={{-100,-100},{100,100}})), Icon(
              coordinateSystem(extent={{-100,-100},{100,100}}), graphics={Rectangle(
                extent={{0,80},{60,20}},
                lineColor={238,46,47},
                fillColor={238,46,47},
                fillPattern=FillPattern.Solid),                           Rectangle(
                extent={{0,-20},{60,-80}},
                lineColor={28,108,200},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid),                           Rectangle(
                extent={{-60,80},{0,20}},
                lineColor={238,46,47},
                fillColor={244,125,35},
                fillPattern=FillPattern.Solid),                           Rectangle(
                extent={{-60,-20},{0,-80}},
                lineColor={28,108,200},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid)}),
          Documentation(info="<html>
<h4><span style=\"color: #000000\">HPSHC modes</span></h4>
<p>For the HPSHC, 4 possible modes :</p>
<p>0 - Off</p>
<p>1 - Cold mode</p>
<p>2 - HPSHC full</p>
<p>3 - HPSHC 1/2</p>
</html>"),experiment(StopTime=1, __Dymola_Algorithm="Dassl"));
      end TFP_duo_carnot_var;

      model TFP_duo_carnot_froid
        Integer mode = 1;
        parameter Modelica.SIunits.MassFlowRate m_flow_hot= 211*1000/3600;
        parameter Modelica.SIunits.MassFlowRate m_flow_cold= 332*1000/3600;
        parameter Real T_set_hot = 61+273.15;
        parameter Real T_set_hot_max = 63+273.15;
        parameter Real T_set_hot_min = 41+273.15;
        parameter Real T_set_cold_max = 14+273.15;
        parameter Real T_set_cold = 4+273.15;

        Fluid.FixedResistances.Junction jun(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={m_flow_hot,-m_flow_hot,-m_flow_hot},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=270,
              origin={10,250})));
        Fluid.Actuators.Valves.TwoWayLinear CV523(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_hot,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          dpValve_nominal=5000,
          use_inputFilter=false)
                              annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={10,50})));
        Fluid.FixedResistances.Junction jun1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={m_flow_hot,-m_flow_hot,m_flow_hot},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,10},{10,-10}},
              rotation=270,
              origin={-90,200})));
        Fluid.FixedResistances.Junction jun4(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={m_flow_cold,-m_flow_cold/2,-m_flow_cold/2},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,10},{10,-10}},
              rotation=90,
              origin={50,-50})));
        Fluid.Actuators.Valves.TwoWayLinear XV112A(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_cold/2,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          dpValve_nominal=5000)
                              annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-50,-90})));
        Fluid.Actuators.Valves.TwoWayLinear CV123(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_cold,
          dpValve_nominal=5000,
          use_inputFilter=false)
                              annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=90,
              origin={50,-110})));
        Fluid.FixedResistances.Junction jun5(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={m_flow_cold,-m_flow_cold,-m_flow_cold},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=90,
              origin={50,-250})));
        Fluid.FixedResistances.Junction jun6(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={m_flow_cold/2,-m_flow_cold,m_flow_cold/2},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,10},{10,-10}},
              rotation=270,
              origin={-50,-130})));
        Fluid.Actuators.Valves.TwoWayLinear XV112B(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=m_flow_cold/2,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          dpValve_nominal=5000)
                              annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={10,-90})));
        Fluid.Sensors.VolumeFlowRate FT521(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={10,90})));
        Controls.Continuous.LimPID FT_PID_521(k=1, Ti=1)
          annotation (Placement(transformation(extent={{200,120},{220,140}})));
        Controls.Continuous.LimPID FT_PID_123(k=1, Ti=1)
          annotation (Placement(transformation(extent={{180,-100},{200,-80}})));
        Fluid.Sensors.VolumeFlowRate FT121(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=m_flow_cold)
                                                         annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=90,
              origin={50,-150})));
        Fluid.Sensors.TemperatureTwoPort TT111(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=m_flow_cold)
          annotation (Placement(transformation(extent={{-60,-170},{-80,-150}})));
        Fluid.Sensors.TemperatureTwoPort TT511(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100)
          annotation (Placement(transformation(extent={{80,250},{100,270}})));
        Fluid.Sensors.TemperatureTwoPort TT521(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=-90,
              origin={10,120})));
        Modelica.Blocks.Sources.RealExpression XV522_switch(y=if mode >= 2 then 1
               else 0)
          annotation (Placement(transformation(extent={{-240,210},{-220,230}})));
        Modelica.Blocks.Sources.RealExpression XV112A_switch(y=if mode >= 1 then 1
               else 0)
          annotation (Placement(transformation(extent={{-200,-40},{-180,-20}})));
        Modelica.Blocks.Sources.RealExpression XV112B_switch(y=if mode == 1 or mode ==
              2 then 1 else 0)
          annotation (Placement(transformation(extent={{-200,-80},{-180,-60}})));
        Modelica.Blocks.Sources.RealExpression cons_cold(y=T_set_cold)
          annotation (Placement(transformation(extent={{-200,20},{-180,40}})));
        Modelica.Blocks.Sources.RealExpression CV123_reg(y=if mode == 1 or mode
               == 3 then 166/3600 else 332/3600)
          annotation (Placement(transformation(extent={{140,-100},{160,-80}})));
        Fluid.Sensors.TemperatureTwoPort TT121(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=322/3.6)
                                                         annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=270,
              origin={50,-80})));
        Controls_a.TFP.PID_Valve_evap pID_Valve_evap annotation (Placement(
              transformation(extent={{-120,-240},{-100,-220}})));
        Controls_a.TFP.PID_Valve_cond pID_Valve_cond
          annotation (Placement(transformation(extent={{-200,160},{-180,180}})));
        Modelica.Blocks.Sources.RealExpression CV523_reg(y=211/3600)
          annotation (Placement(transformation(extent={{140,120},{160,140}})));
        Fluid.Actuators.Valves.ThreeWayLinear val(
          redeclare package Medium = Buildings.Media.Water,
          use_inputFilter=false,
          m_flow_nominal=m_flow_cold,
          dpValve_nominal=5000) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=270,
              origin={50,-200})));
        Fluid.Actuators.Valves.ThreeWayLinear val1(
          redeclare package Medium = Buildings.Media.Water,
          use_inputFilter=false,
          m_flow_nominal=m_flow_hot,
          dpValve_nominal=5000) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=90,
              origin={10,150})));
        Modelica.Blocks.Sources.IntegerExpression integerExpression(y=mode)
          annotation (Placement(transformation(extent={{-240,160},{-220,180}})));
        Fluid.Chillers.Carnot_TEva TFPA(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=m_flow_hot,
          m2_flow_nominal=m_flow_cold/2,
          QEva_flow_nominal=-166/3.6*4185*(7),
          dTEva_nominal=-7,
          dTCon_nominal=15,
          use_eta_Carnot_nominal=true,
          etaCarnot_nominal=0.95,
          COP_nominal=6.5,
          TCon_nominal=313.15,
          dp1_nominal=40000,
          dp2_nominal=40000,
          QEva_flow_min(displayUnit="kW") = -1800000)
          annotation (Placement(transformation(extent={{-40,-20},{-20,0}})));
        Fluid.Chillers.Carnot_TEva TFPB(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=m_flow_hot,
          m2_flow_nominal=m_flow_cold/2,
          QEva_flow_nominal=-166/3.6*4185*(7),
          dTEva_nominal=-7,
          dTCon_nominal=15,
          use_eta_Carnot_nominal=true,
          etaCarnot_nominal=0.95,
          COP_nominal=6.5,
          TCon_nominal=313.15,
          dp1_nominal=40000,
          dp2_nominal=40000,
          QEva_flow_min(displayUnit="kW") = -1800000)
          annotation (Placement(transformation(extent={{20,-20},{40,0}})));
        Fluid.Actuators.Valves.ThreeWayLinear val2(
          redeclare package Medium = Buildings.Media.Water,
          use_inputFilter=true,
          m_flow_nominal=m_flow_hot,
          dpValve_nominal=5000) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=270,
              origin={70,200})));
        Fluid.Sources.Boundary_pT bou2(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=false,
          T=303.15,
          nPorts=2)
          annotation (Placement(transformation(extent={{-100,320},{-80,340}})));
        Fluid.Movers.FlowControlled_m_flow           fan1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=211/3.6,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_PEC per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          addPowerToMedium=true,
          dp_nominal(displayUnit="bar") = 1000000,
          constantMassFlowRate=0)
          annotation (Placement(transformation(extent={{-40,320},{-20,340}})));
        Fluid.Sensors.TemperatureTwoPort TT1(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100)
          annotation (Placement(transformation(extent={{282,34},{262,54}})));
        Fluid.Movers.FlowControlled_dp           fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=500/3.6,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          constantHead(displayUnit="bar") = 300000)
          annotation (Placement(transformation(extent={{322,34},{302,54}})));
        Fluid.Sources.Boundary_pT bou1(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=false,
          T=285.15,
          nPorts=3)
          annotation (Placement(transformation(extent={{362,34},{342,54}})));
        RJC.Heat_exchanger heat_exchanger(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water)
          annotation (Placement(transformation(extent={{242,-26},{262,-6}})));
        Modelica.Blocks.Sources.IntegerExpression integerExpression1(y=mode)
          annotation (Placement(transformation(extent={{200,-58},{220,-38}})));
        RJF.Cold_exchanger cold_exchanger(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water)
          annotation (Placement(transformation(extent={{240,-220},{260,-200}})));
        Fluid.Movers.FlowControlled_m_flow           fan2(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=315/3.6,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_PEG per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          addPowerToMedium=true,
          dp_nominal(displayUnit="bar") = 1000000,
          constantMassFlowRate=320/3.6)
          annotation (Placement(transformation(extent={{100,-320},{80,-300}})));
        Fluid.Sources.Boundary_pT bou3(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=false,
          T=285.15,
          nPorts=2)
          annotation (Placement(transformation(extent={{160,-320},{140,-300}})));
        Modelica.Blocks.Sources.RealExpression XV112B_switch2(y=273.15 + 12)
          annotation (Placement(transformation(extent={{-200,-180},{-180,-160}})));
        Fluid.Sensors.TemperatureTwoPort TT2(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-2,-4})));
      equation

        connect(jun.port_3, jun1.port_1) annotation (Line(points={{0,250},{-90,250},{-90,
                210}},      color={238,46,47},
            thickness=0.5));

        connect(XV112A.port_b, jun6.port_1)
          annotation (Line(points={{-50,-100},{-50,-120}}, color={0,127,255},
            thickness=0.5));
        connect(jun6.port_3, XV112B.port_b) annotation (Line(points={{-40,-130},{
                10,-130},{10,-100}}, color={0,127,255},
            thickness=0.5));
        connect(FT521.port_b, CV523.port_a)
          annotation (Line(points={{10,80},{10,60}}, color={238,46,47},
            thickness=0.5));
        connect(FT521.V_flow, FT_PID_521.u_m) annotation (Line(points={{21,90},{50,90},
                {50,100},{210,100},{210,118}}, color={0,0,127}));
        connect(FT_PID_521.y, CV523.y) annotation (Line(points={{221,130},{240,130},{240,
                50},{22,50}}, color={0,0,127}));
        connect(FT121.V_flow, FT_PID_123.u_m) annotation (Line(points={{61,-150},{190,
                -150},{190,-102}}, color={0,0,127}));
        connect(FT_PID_123.y, CV123.y) annotation (Line(points={{201,-90},{220,
                -90},{220,-68},{80,-68},{80,-110},{62,-110}},
                                                  color={0,0,127}));
        connect(jun6.port_2, TT111.port_a) annotation (Line(points={{-50,-140},{
                -50,-160},{-60,-160}}, color={0,127,255},
            thickness=0.5));
        connect(TT521.port_b, FT521.port_a)
          annotation (Line(points={{10,110},{10,100}}, color={238,46,47},
            thickness=0.5));
        connect(XV112A_switch.y, XV112A.y) annotation (Line(points={{-179,-30},{-152,-30},
                {-152,-50},{-30,-50},{-30,-90},{-38,-90}}, color={0,0,127}));
        connect(XV112B_switch.y, XV112B.y) annotation (Line(points={{-179,-70},{30,-70},
                {30,-90},{22,-90}}, color={0,0,127}));
        connect(CV123_reg.y, FT_PID_123.u_s)
          annotation (Line(points={{161,-90},{178,-90}}, color={0,0,127}));
        connect(jun4.port_1, TT121.port_b)
          annotation (Line(points={{50,-60},{50,-70}}, color={0,127,255},
            thickness=0.5));
        connect(TT121.port_a, CV123.port_b)
          annotation (Line(points={{50,-90},{50,-100}}, color={0,127,255},
            thickness=0.5));
        connect(pID_Valve_evap.TFP_TT121, TT121.T) annotation (Line(points={{-122,
                -234},{-220,-234},{-220,-262},{34,-262},{34,-80},{39,-80}}, color=
               {0,0,127}));
        connect(TT511.T, pID_Valve_evap.TFP_TT511) annotation (Line(points={{90,271},
                {90,300},{-250,300},{-250,-252},{-208,-252},{-208,-238},{-122,
                -238}},      color={0,0,127}));
        connect(TT511.T, pID_Valve_cond.TFP_TT511) annotation (Line(points={{90,271},
                {90,300},{-250,300},{-250,176},{-202,176}},      color={0,0,127}));
        connect(TT521.T, pID_Valve_cond.TFP_TT521) annotation (Line(points={{-1,
                120},{-220,120},{-220,162},{-202,162}}, color={0,0,127}));
        connect(CV523_reg.y, FT_PID_521.u_s)
          annotation (Line(points={{161,130},{198,130}}, color={0,0,127}));
        connect(val.port_1, jun5.port_2) annotation (Line(
            points={{50,-210},{50,-240}},
            color={0,127,255},
            thickness=0.5));
        connect(pID_Valve_evap.CV121, val.y) annotation (Line(points={{-99,-235},
                {80,-235},{80,-200},{62,-200}}, color={0,0,127}));
        connect(pID_Valve_cond.CV521, val1.y) annotation (Line(points={{-179,165},{-31.5,
                165},{-31.5,150},{-2,150}}, color={0,0,127}));
        connect(val1.port_2, TT521.port_a) annotation (Line(
            points={{10,140},{10,130}},
            color={238,46,47},
            thickness=0.5));
        connect(val1.port_1, jun.port_2) annotation (Line(
            points={{10,160},{10,240}},
            color={238,46,47},
            thickness=0.5));
        connect(integerExpression.y, pID_Valve_cond.TFP_mode) annotation (Line(points=
               {{-219,170},{-212,170},{-212,170},{-202,170}}, color={255,127,0}));
        connect(FT121.port_a, val.port_2) annotation (Line(
            points={{50,-160},{50,-190}},
            color={0,127,255},
            thickness=0.5));
        connect(FT121.port_b, CV123.port_a) annotation (Line(
            points={{50,-140},{50,-120}},
            color={0,127,255},
            thickness=0.5));
        connect(cons_cold.y, TFPA.TSet) annotation (Line(points={{-179,30},{-136,30},{
                -136,-1},{-42,-1}}, color={0,0,127}));
        connect(cons_cold.y, TFPB.TSet) annotation (Line(points={{-179,30},{-136,30},{
                -136,10},{0,10},{0,-1},{18,-1}}, color={0,0,127}));
        connect(CV523.port_b, TFPA.port_a1) annotation (Line(
            points={{10,40},{10,28},{-50,28},{-50,-4},{-40,-4}},
            color={238,46,47},
            thickness=0.5));
        connect(TFPB.port_a2, jun4.port_2) annotation (Line(
            points={{40,-16},{50,-16},{50,-40}},
            color={0,127,255},
            thickness=0.5));
        connect(jun4.port_3, TFPA.port_a2) annotation (Line(
            points={{40,-50},{0,-50},{0,-16},{-20,-16}},
            color={0,127,255},
            thickness=0.5));
        connect(TFPB.port_b2, XV112B.port_a) annotation (Line(
            points={{20,-16},{10,-16},{10,-80}},
            color={0,127,255},
            thickness=0.5));
        connect(TFPA.port_b2, XV112A.port_a) annotation (Line(
            points={{-40,-16},{-50,-16},{-50,-80}},
            color={0,127,255},
            thickness=0.5));
        connect(jun1.port_3, val2.port_3) annotation (Line(
            points={{-80,200},{60,200}},
            color={238,46,47},
            thickness=0.5));
        connect(val2.port_2, TT511.port_a) annotation (Line(
            points={{70,210},{70,260},{80,260}},
            color={238,46,47},
            thickness=0.5));
        connect(val2.port_1, TFPB.port_b1) annotation (Line(
            points={{70,190},{70,-4},{40,-4}},
            color={238,46,47},
            thickness=0.5));
        connect(bou2.ports[1], fan1.port_a)
          annotation (Line(points={{-80,332},{-60,332},{-60,330},{-40,330}},
                                                         color={238,46,47},
            thickness=0.5));
        connect(fan1.port_b, jun.port_1)
          annotation (Line(points={{-20,330},{10,330},{10,260}}, color={238,46,
                47},
            thickness=0.5));
        connect(fan2.port_b, jun5.port_1) annotation (Line(points={{80,-310},{50,-310},
                {50,-260}}, color={0,127,255},
            thickness=0.5));
        connect(fan2.port_a, bou3.ports[1]) annotation (Line(points={{100,-310},{120,-310},
                {120,-308},{140,-308}}, color={0,127,255}));
        connect(bou1.ports[1], fan.port_a) annotation (Line(points={{342,
                46.6667},{332,46.6667},{332,44},{322,44}},
                                             color={0,127,255}));
        connect(fan.port_b, TT1.port_a)
          annotation (Line(points={{302,44},{282,44}}, color={0,127,255}));
        connect(TT1.port_b, heat_exchanger.port_a1) annotation (Line(points={{262,44},
                {256,44},{256,42},{236,42},{236,-10},{242,-10}}, color={0,127,255}));
        connect(heat_exchanger.port_b1, bou1.ports[2]) annotation (Line(points={{262,-10},
                {342,-10},{342,44}}, color={0,127,255}));
        connect(TT1.port_b, cold_exchanger.port_a1) annotation (Line(points={{262,44},
                {228,44},{228,-204},{240,-204}}, color={0,127,255}));
        connect(cold_exchanger.port_b1, bou1.ports[3]) annotation (Line(points={{260,
                -204},{342,-204},{342,41.3333}},
                                           color={0,127,255}));
        connect(integerExpression1.y, heat_exchanger.mode) annotation (Line(points={{221,
                -48},{246,-48},{246,-28}}, color={255,127,0}));
        connect(TT111.port_b, bou3.ports[2]) annotation (Line(points={{-80,-160},{-82,
                -160},{-82,-338},{140,-338},{140,-312}}, color={0,127,255},
            thickness=0.5));
        connect(jun5.port_3, cold_exchanger.port_a2) annotation (Line(points={{60,-250},
                {280,-250},{280,-216},{260,-216},{260,-216}}, color={0,127,255}));
        connect(cold_exchanger.port_b2, val.port_3) annotation (Line(points={{240,-216},
                {240,-222},{22,-222},{22,-200},{40,-200}}, color={0,127,255}));
        connect(pID_Valve_evap.CV122, cold_exchanger.TFP_CV122) annotation (Line(
              points={{-99,-225},{54,-225},{54,-226},{208,-226},{208,-206},{238,-206}},
              color={0,0,127}));
        connect(pID_Valve_cond.CV522, heat_exchanger.TFP_CV522) annotation (Line(
              points={{-179,175},{106,175},{106,-12},{240,-12}}, color={0,0,127}));
        connect(jun1.port_2, heat_exchanger.port_a2) annotation (Line(points={{
                -90,190},{-90,18},{276,18},{276,-22},{262,-22}}, color={238,46,
                47},
            thickness=0.5));
        connect(heat_exchanger.port_b2, val1.port_3) annotation (Line(points={{
                242,-22},{96,-22},{96,150},{20,150}}, color={238,46,47},
            thickness=0.5));
        connect(XV522_switch.y, val2.y) annotation (Line(points={{-219,220},{
                114,220},{114,200},{82,200}}, color={0,0,127}));
        connect(TT511.port_b, bou2.ports[2]) annotation (Line(points={{100,260},
                {120,260},{120,352},{-80,352},{-80,328}}, color={238,46,47},
            thickness=0.5));
        connect(TFPA.port_b1, TT2.port_a)
          annotation (Line(points={{-20,-4},{-12,-4}}, color={0,127,255}));
        connect(TT2.port_b, TFPB.port_a1)
          annotation (Line(points={{8,-4},{20,-4}}, color={0,127,255}));
        connect(pID_Valve_evap.DEG_TT121, XV112B_switch2.y) annotation (Line(points={{
                -122,-226},{-150,-226},{-150,-170},{-179,-170}}, color={0,0,127}));
        connect(TT1.T, heat_exchanger.PEM_TT200) annotation (Line(points={{272,55},{272,
                68},{214,68},{214,-20},{240,-20}}, color={0,0,127}));
        connect(TT1.T, cold_exchanger.PEM_TT200) annotation (Line(points={{272,55},{272,
                60},{290,60},{290,-176},{222,-176},{222,-214},{238,-214}}, color={0,0,
                127}));
        connect(TT1.T, pID_Valve_evap.PEM_TT200) annotation (Line(points={{272,55},{274,
                55},{274,60},{290,60},{290,-280},{-134,-280},{-134,-222},{-122,-222}},
              color={0,0,127}));
        annotation (Diagram(coordinateSystem(extent={{-100,-100},{100,100}})), Icon(
              coordinateSystem(extent={{-100,-100},{100,100}}), graphics={Rectangle(
                extent={{0,80},{60,20}},
                lineColor={238,46,47},
                fillColor={238,46,47},
                fillPattern=FillPattern.Solid),                           Rectangle(
                extent={{0,-20},{60,-80}},
                lineColor={28,108,200},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid),                           Rectangle(
                extent={{-60,80},{0,20}},
                lineColor={238,46,47},
                fillColor={244,125,35},
                fillPattern=FillPattern.Solid),                           Rectangle(
                extent={{-60,-20},{0,-80}},
                lineColor={28,108,200},
                fillColor={0,0,127},
                fillPattern=FillPattern.Solid)}),
          Documentation(info="<html>
<h4><span style=\"color: #000000\">HPSHC modes</span></h4>
<p>For the HPSHC, 4 possible modes :</p>
<p>0 - Off</p>
<p>1 - Cold mode</p>
<p>2 - HPSHC full</p>
<p>3 - HPSHC 1/2</p>
</html>"),experiment(StopTime=50000, __Dymola_Algorithm="Dassl"));
      end TFP_duo_carnot_froid;

      model aa
        Real m_flow_hot = 211/3.6;
        Real m_flow_cold = 166/3.6;
        Fluid.Sources.Boundary_pT bou2(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=false,
          T=313.15,
          nPorts=2)
          annotation (Placement(transformation(extent={{-100,80},{-80,100}})));
        Fluid.Movers.FlowControlled_m_flow           fan1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=211/3.6,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_PEC per,
          inputType=Buildings.Fluid.Types.InputType.Continuous,
          addPowerToMedium=true,
          use_inputFilter=false,
          dp_nominal(displayUnit="bar") = 1000000,
          constantMassFlowRate=211/3.6)
          annotation (Placement(transformation(extent={{-40,80},{-20,100}})));
        Fluid.Chillers.Carnot_TEva TFPA(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=166/3.6,
          m2_flow_nominal=166/3.6,
          QEva_flow_nominal=-166/3.6*4185*(7),
          dTEva_nominal=-7,
          dTCon_nominal=15,
          use_eta_Carnot_nominal=true,
          etaCarnot_nominal=0.95,
          COP_nominal=6.5,
          TCon_nominal=313.15,
          dp1_nominal=40000,
          dp2_nominal=40000,
          QEva_flow_min(displayUnit="kW") = -1800000)
          annotation (Placement(transformation(extent={{0,-60},{20,-40}})));
        Fluid.Movers.FlowControlled_m_flow           fan2(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=315/3.6,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_PEG per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          addPowerToMedium=true,
          dp_nominal(displayUnit="bar") = 1000000,
          constantMassFlowRate=160/3.6)
          annotation (Placement(transformation(extent={{60,-80},{40,-60}})));
        Fluid.Sources.Boundary_pT bou3(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=false,
          T=285.15,
          nPorts=2)
          annotation (Placement(transformation(extent={{120,-100},{100,-80}})));
        Fluid.Actuators.Valves.ThreeWayLinear val1(
          redeclare package Medium = Buildings.Media.Water,
          use_inputFilter=false,
          m_flow_nominal=220/3.6,
          dpValve_nominal=5000) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=90,
              origin={-10,-10})));
        Fluid.Movers.FlowControlled_m_flow           fan3(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=211/3.6,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_PEC per,
          inputType=Buildings.Fluid.Types.InputType.Continuous,
          addPowerToMedium=true,
          use_inputFilter=false,
          dp_nominal(displayUnit="bar") = 1000000,
          constantMassFlowRate=0)
          annotation (Placement(transformation(extent={{120,-20},{100,0}})));
        Modelica.Blocks.Sources.RealExpression cons_cold1(y=4 + 273.15)
          annotation (Placement(transformation(extent={{-130,-70},{-110,-50}})));
        Fluid.FixedResistances.Junction jun(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={211/3.6,-211/3.6,-211/3.6},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-10,50})));
        Fluid.FixedResistances.Junction jun1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={211/3.6,-211/3.6,211/3.6},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,10},{10,-10}},
              rotation=270,
              origin={-70,30})));
        Valves.ThreeWayLinear_modif val(
          redeclare package Medium = Buildings.Media.Water,
          use_inputFilter=false,
          m_flow_nominal=220/3.6,
          dpValve_nominal=5000) annotation (Placement(transformation(
              extent={{-10,10},{10,-10}},
              rotation=90,
              origin={50,30})));
        Controls_a.opposite opposite
          annotation (Placement(transformation(extent={{120,40},{140,60}})));
        Modelica.Blocks.Math.Product product1
          annotation (Placement(transformation(extent={{160,30},{180,50}})));
        Modelica.Blocks.Sources.RealExpression cons_cold2(y=211/3.6)
          annotation (Placement(transformation(extent={{120,20},{140,40}})));
        Modelica.Blocks.Sources.RealExpression cons_cold3(y=211/3.6)
          annotation (Placement(transformation(extent={{-100,130},{-80,150}})));
        Modelica.Blocks.Math.Product product2
          annotation (Placement(transformation(extent={{-60,140},{-40,160}})));
        Modelica.Blocks.Sources.Step step(
          height=-1,
          offset=1,
          startTime=5000)
          annotation (Placement(transformation(extent={{-180,20},{-160,40}})));
      equation
        connect(bou2.ports[1], fan1.port_a) annotation (Line(points={{-80,92},{
                -60,92},{-60,90},{-40,90}},
                                    color={0,127,255}));
        connect(fan2.port_a, bou3.ports[1]) annotation (Line(points={{60,-70},{
                70,-70},{70,-88},{100,-88}},
                                    color={0,127,255}));
        connect(fan2.port_b, TFPA.port_a2) annotation (Line(points={{40,-70},{
                28,-70},{28,-56},{20,-56}},
                                    color={0,127,255}));
        connect(TFPA.port_b2, bou3.ports[2]) annotation (Line(points={{0,-56},{
                -14,-56},{-14,-94},{100,-94},{100,-92}},
                                              color={0,127,255}));
        connect(cons_cold1.y, TFPA.TSet) annotation (Line(points={{-109,-60},{
                -32,-60},{-32,-41},{-2,-41}}, color={0,0,127}));
        connect(fan1.port_b, jun.port_1) annotation (Line(points={{-20,90},{-10,
                90},{-10,60}}, color={0,127,255}));
        connect(jun1.port_1, jun.port_3) annotation (Line(points={{-70,40},{-70,
                50},{-20,50}}, color={0,127,255}));
        connect(jun.port_2, val1.port_1)
          annotation (Line(points={{-10,40},{-10,0}}, color={0,127,255}));
        connect(val1.port_2, TFPA.port_a1) annotation (Line(points={{-10,-20},{
                -10,-44},{0,-44}}, color={0,127,255}));
        connect(val1.port_3, fan3.port_b)
          annotation (Line(points={{0,-10},{100,-10}}, color={0,127,255}));
        connect(jun1.port_2, fan3.port_a) annotation (Line(points={{-70,20},{
                -70,10},{134,10},{134,-10},{120,-10}}, color={0,127,255}));
        connect(jun1.port_3, val.port_3)
          annotation (Line(points={{-60,30},{40,30}}, color={0,127,255}));
        connect(val.port_2, bou2.ports[2]) annotation (Line(points={{50,40},{50,
                114},{-80,114},{-80,88}}, color={0,127,255}));
        connect(val.port_1, TFPA.port_b1) annotation (Line(points={{50,20},{50,
                -44},{20,-44}}, color={0,127,255}));
        connect(opposite.y, product1.u1) annotation (Line(points={{141,50},{148,
                50},{148,46},{158,46}}, color={0,0,127}));
        connect(product1.u2, cons_cold2.y) annotation (Line(points={{158,34},{
                150,34},{150,30},{141,30}}, color={0,0,127}));
        connect(product1.y, fan3.m_flow_in) annotation (Line(points={{181,40},{
                188,40},{188,16},{110,16},{110,2}}, color={0,0,127}));
        connect(cons_cold3.y, product2.u2) annotation (Line(points={{-79,140},{
                -72,140},{-72,144},{-62,144}}, color={0,0,127}));
        connect(product2.y, fan1.m_flow_in) annotation (Line(points={{-39,150},
                {-30,150},{-30,102}}, color={0,0,127}));
        connect(step.y, product2.u1) annotation (Line(points={{-159,30},{-112,
                30},{-112,156},{-62,156}}, color={0,0,127}));
        connect(step.y, val1.y) annotation (Line(points={{-159,30},{-100,30},{
                -100,-10},{-22,-10}}, color={0,0,127}));
        connect(step.y, val.y) annotation (Line(points={{-159,30},{-100,30},{
                -100,4},{78,4},{78,30},{62,30}}, color={0,0,127}));
        connect(step.y, opposite.u) annotation (Line(points={{-159,30},{-112,30},
                {-112,172},{108,172},{108,50},{118,50}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end aa;

      model aaa
        Real m_flow_hot = 211/3.6;
        Real m_flow_cold = 166/3.6;
        Fluid.Sources.Boundary_pT bou2(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=false,
          T=313.15,
          nPorts=2)
          annotation (Placement(transformation(extent={{-100,80},{-80,100}})));
        Fluid.Movers.FlowControlled_m_flow           fan1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=211/3.6,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_PEC per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          addPowerToMedium=true,
          dp_nominal(displayUnit="bar") = 1000000,
          constantMassFlowRate=0)
          annotation (Placement(transformation(extent={{-40,80},{-20,100}})));
        Fluid.Chillers.Carnot_TEva TFPA(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=166/3.6,
          m2_flow_nominal=166/3.6,
          QEva_flow_nominal=-166/3.6*4185*(7),
          dTEva_nominal=-7,
          dTCon_nominal=15,
          use_eta_Carnot_nominal=true,
          etaCarnot_nominal=0.95,
          COP_nominal=6.5,
          TCon_nominal=313.15,
          dp1_nominal=40000,
          dp2_nominal=40000,
          QEva_flow_min(displayUnit="kW") = -1800000)
          annotation (Placement(transformation(extent={{0,-60},{20,-40}})));
        Fluid.Movers.FlowControlled_m_flow           fan2(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=315/3.6,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_PEG per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          addPowerToMedium=true,
          dp_nominal(displayUnit="bar") = 1000000,
          constantMassFlowRate=160/3.6)
          annotation (Placement(transformation(extent={{60,-80},{40,-60}})));
        Fluid.Sources.Boundary_pT bou3(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=false,
          T=285.15,
          nPorts=2)
          annotation (Placement(transformation(extent={{120,-100},{100,-80}})));
        Fluid.Actuators.Valves.ThreeWayLinear val1(
          redeclare package Medium = Buildings.Media.Water,
          use_inputFilter=false,
          m_flow_nominal=220/3.6,
          dpValve_nominal=5000) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=90,
              origin={-10,-10})));
        Fluid.Movers.FlowControlled_m_flow           fan3(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=211/3.6,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_PEC per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          addPowerToMedium=true,
          dp_nominal(displayUnit="bar") = 1000000,
          constantMassFlowRate=211/3.6)
          annotation (Placement(transformation(extent={{120,-20},{100,0}})));
        Modelica.Blocks.Sources.RealExpression cons_cold(y=0)
          annotation (Placement(transformation(extent={{-186,16},{-166,36}})));
        Modelica.Blocks.Sources.RealExpression cons_cold1(y=4 + 273.15)
          annotation (Placement(transformation(extent={{-130,-70},{-110,-50}})));
        Fluid.FixedResistances.Junction jun(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={211/3.6,-211/3.6,-211/3.6},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-10,50})));
        Fluid.FixedResistances.Junction jun1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={211/3.6,-211/3.6,211/3.6},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,10},{10,-10}},
              rotation=270,
              origin={-70,30})));
        Valves.ThreeWayLinear_modif val(
          redeclare package Medium = Buildings.Media.Water,
          use_inputFilter=false,
          m_flow_nominal=220/3.6,
          dpValve_nominal=5000) annotation (Placement(transformation(
              extent={{-10,10},{10,-10}},
              rotation=90,
              origin={30,30})));
        Fluid.Sensors.TemperatureTwoPort senTem(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100)
          annotation (Placement(transformation(extent={{80,-20},{60,0}})));
      equation
        connect(bou2.ports[1], fan1.port_a) annotation (Line(points={{-80,92},{
                -60,92},{-60,90},{-40,90}},
                                    color={0,127,255}));
        connect(fan2.port_a, bou3.ports[1]) annotation (Line(points={{60,-70},{
                70,-70},{70,-88},{100,-88}},
                                    color={0,127,255}));
        connect(fan2.port_b, TFPA.port_a2) annotation (Line(points={{40,-70},{
                28,-70},{28,-56},{20,-56}},
                                    color={0,127,255}));
        connect(TFPA.port_b2, bou3.ports[2]) annotation (Line(points={{0,-56},{
                -14,-56},{-14,-94},{100,-94},{100,-92}},
                                              color={0,127,255}));
        connect(cons_cold1.y, TFPA.TSet) annotation (Line(points={{-109,-60},{
                -32,-60},{-32,-41},{-2,-41}}, color={0,0,127}));
        connect(fan1.port_b, jun.port_1) annotation (Line(points={{-20,90},{-10,
                90},{-10,60}}, color={0,127,255}));
        connect(jun1.port_1, jun.port_3) annotation (Line(points={{-70,40},{-70,
                50},{-20,50}}, color={0,127,255}));
        connect(jun.port_2, val1.port_1)
          annotation (Line(points={{-10,40},{-10,0}}, color={0,127,255}));
        connect(val1.port_2, TFPA.port_a1) annotation (Line(points={{-10,-20},{
                -10,-44},{0,-44}}, color={0,127,255}));
        connect(jun1.port_2, fan3.port_a) annotation (Line(points={{-70,20},{
                -70,10},{134,10},{134,-10},{120,-10}}, color={0,127,255}));
        connect(cons_cold.y, val1.y) annotation (Line(points={{-165,26},{-96,26},
                {-96,-10},{-22,-10},{-22,-10}}, color={0,0,127}));
        connect(TFPA.port_b1, val.port_1) annotation (Line(points={{20,-44},{30,
                -44},{30,20}}, color={0,127,255}));
        connect(val.port_3, jun1.port_3)
          annotation (Line(points={{20,30},{-60,30}}, color={0,127,255}));
        connect(val.port_2, bou2.ports[2]) annotation (Line(points={{30,40},{30,
                118},{-80,118},{-80,88}}, color={0,127,255}));
        connect(cons_cold.y, val.y) annotation (Line(points={{-165,26},{-142,26},
                {-142,140},{60,140},{60,30},{42,30}}, color={0,0,127}));
        connect(val1.port_3, senTem.port_b)
          annotation (Line(points={{0,-10},{60,-10}}, color={0,127,255}));
        connect(senTem.port_a, fan3.port_b)
          annotation (Line(points={{80,-10},{100,-10}}, color={0,127,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end aaa;

      model switch_mode
        Real m_flow_hot = 211/3.6;
        Real m_flow_cold = 166/3.6;
        Fluid.Sources.Boundary_pT bou2(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=false,
          T=313.15,
          nPorts=2)
          annotation (Placement(transformation(extent={{-100,80},{-80,100}})));
        Fluid.Movers.FlowControlled_m_flow           fan1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=211/3.6,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_PEC per,
          inputType=Buildings.Fluid.Types.InputType.Continuous,
          addPowerToMedium=true,
          use_inputFilter=false,
          dp_nominal(displayUnit="bar") = 1000000,
          constantMassFlowRate=211/3.6)
          annotation (Placement(transformation(extent={{-40,80},{-20,100}})));
        Fluid.Chillers.Carnot_TEva TFPA(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=166/3.6,
          m2_flow_nominal=166/3.6,
          QEva_flow_nominal=-166/3.6*4185*(7),
          dTEva_nominal=-7,
          dTCon_nominal=15,
          use_eta_Carnot_nominal=true,
          etaCarnot_nominal=0.95,
          COP_nominal=6.5,
          TCon_nominal=313.15,
          dp1_nominal=40000,
          dp2_nominal=40000,
          QEva_flow_min(displayUnit="kW") = -1800000)
          annotation (Placement(transformation(extent={{0,-60},{20,-40}})));
        Fluid.Movers.FlowControlled_m_flow           fan2(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=315/3.6,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_PEG per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          addPowerToMedium=true,
          dp_nominal(displayUnit="bar") = 1000000,
          constantMassFlowRate=160/3.6)
          annotation (Placement(transformation(extent={{60,-80},{40,-60}})));
        Fluid.Sources.Boundary_pT bou3(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=false,
          T=285.15,
          nPorts=2)
          annotation (Placement(transformation(extent={{120,-100},{100,-80}})));
        Fluid.Actuators.Valves.ThreeWayLinear val1(
          redeclare package Medium = Buildings.Media.Water,
          use_inputFilter=false,
          m_flow_nominal=220/3.6,
          dpValve_nominal=5000) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=90,
              origin={-10,-10})));
        Fluid.Movers.FlowControlled_m_flow           fan3(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=211/3.6,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_PEC per,
          inputType=Buildings.Fluid.Types.InputType.Continuous,
          addPowerToMedium=true,
          use_inputFilter=false,
          dp_nominal(displayUnit="bar") = 1000000,
          constantMassFlowRate=0)
          annotation (Placement(transformation(extent={{120,-20},{100,0}})));
        Modelica.Blocks.Sources.RealExpression cons_cold1(y=4 + 273.15)
          annotation (Placement(transformation(extent={{-130,-70},{-110,-50}})));
        Fluid.FixedResistances.Junction jun(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={211/3.6,-211/3.6,-211/3.6},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-10,50})));
        Fluid.FixedResistances.Junction jun1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={211/3.6,-211/3.6,211/3.6},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-10,10},{10,-10}},
              rotation=270,
              origin={-70,30})));
        Valves.ThreeWayLinear_modif val(
          redeclare package Medium = Buildings.Media.Water,
          use_inputFilter=false,
          m_flow_nominal=220/3.6,
          dpValve_nominal=5000) annotation (Placement(transformation(
              extent={{-10,10},{10,-10}},
              rotation=90,
              origin={50,30})));
        Controls_a.opposite opposite
          annotation (Placement(transformation(extent={{120,40},{140,60}})));
        Modelica.Blocks.Math.Product product1
          annotation (Placement(transformation(extent={{160,30},{180,50}})));
        Modelica.Blocks.Sources.RealExpression cons_cold2(y=211/3.6)
          annotation (Placement(transformation(extent={{120,20},{140,40}})));
        Modelica.Blocks.Sources.RealExpression cons_cold3(y=211/3.6)
          annotation (Placement(transformation(extent={{-100,130},{-80,150}})));
        Modelica.Blocks.Math.Product product2
          annotation (Placement(transformation(extent={{-60,140},{-40,160}})));
        Modelica.Blocks.Sources.Step step(
          height=-1,
          offset=1,
          startTime=5000)
          annotation (Placement(transformation(extent={{-180,20},{-160,40}})));
      equation
        connect(bou2.ports[1], fan1.port_a) annotation (Line(points={{-80,92},{
                -60,92},{-60,90},{-40,90}},
                                    color={0,127,255}));
        connect(fan2.port_a, bou3.ports[1]) annotation (Line(points={{60,-70},{
                70,-70},{70,-88},{100,-88}},
                                    color={0,127,255}));
        connect(fan2.port_b, TFPA.port_a2) annotation (Line(points={{40,-70},{
                28,-70},{28,-56},{20,-56}},
                                    color={0,127,255}));
        connect(TFPA.port_b2, bou3.ports[2]) annotation (Line(points={{0,-56},{
                -14,-56},{-14,-94},{100,-94},{100,-92}},
                                              color={0,127,255}));
        connect(cons_cold1.y, TFPA.TSet) annotation (Line(points={{-109,-60},{
                -32,-60},{-32,-41},{-2,-41}}, color={0,0,127}));
        connect(fan1.port_b, jun.port_1) annotation (Line(points={{-20,90},{-10,
                90},{-10,60}}, color={0,127,255}));
        connect(jun1.port_1, jun.port_3) annotation (Line(points={{-70,40},{-70,
                50},{-20,50}}, color={0,127,255}));
        connect(jun.port_2, val1.port_1)
          annotation (Line(points={{-10,40},{-10,0}}, color={0,127,255}));
        connect(val1.port_2, TFPA.port_a1) annotation (Line(points={{-10,-20},{
                -10,-44},{0,-44}}, color={0,127,255}));
        connect(val1.port_3, fan3.port_b)
          annotation (Line(points={{0,-10},{100,-10}}, color={0,127,255}));
        connect(jun1.port_2, fan3.port_a) annotation (Line(points={{-70,20},{
                -70,10},{134,10},{134,-10},{120,-10}}, color={0,127,255}));
        connect(jun1.port_3, val.port_3)
          annotation (Line(points={{-60,30},{40,30}}, color={0,127,255}));
        connect(val.port_2, bou2.ports[2]) annotation (Line(points={{50,40},{50,
                114},{-80,114},{-80,88}}, color={0,127,255}));
        connect(val.port_1, TFPA.port_b1) annotation (Line(points={{50,20},{50,
                -44},{20,-44}}, color={0,127,255}));
        connect(opposite.y, product1.u1) annotation (Line(points={{141,50},{148,
                50},{148,46},{158,46}}, color={0,0,127}));
        connect(product1.u2, cons_cold2.y) annotation (Line(points={{158,34},{
                150,34},{150,30},{141,30}}, color={0,0,127}));
        connect(product1.y, fan3.m_flow_in) annotation (Line(points={{181,40},{
                188,40},{188,16},{110,16},{110,2}}, color={0,0,127}));
        connect(cons_cold3.y, product2.u2) annotation (Line(points={{-79,140},{
                -72,140},{-72,144},{-62,144}}, color={0,0,127}));
        connect(product2.y, fan1.m_flow_in) annotation (Line(points={{-39,150},
                {-30,150},{-30,102}}, color={0,0,127}));
        connect(step.y, product2.u1) annotation (Line(points={{-159,30},{-112,
                30},{-112,156},{-62,156}}, color={0,0,127}));
        connect(step.y, val1.y) annotation (Line(points={{-159,30},{-100,30},{
                -100,-10},{-22,-10}}, color={0,0,127}));
        connect(step.y, val.y) annotation (Line(points={{-159,30},{-100,30},{
                -100,4},{78,4},{78,30},{62,30}}, color={0,0,127}));
        connect(step.y, opposite.u) annotation (Line(points={{-159,30},{-112,30},
                {-112,172},{108,172},{108,50},{118,50}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end switch_mode;
    end carnot;
  end TFP;

  package Plant
    extends Modelica.Icons.VariantsPackage;

    package Tests
      extends Modelica.Icons.ExamplesPackage;
      model complete_plant
        PEM.pem pem(redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
            m_flow_nominal=2500)
          annotation (Placement(transformation(extent={{-60,100},{-40,120}})));
        Fluid.FixedResistances.Junction jun(redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal={3600/3.6,-800/3.6,-2400/3.6},
          dp_nominal={0,0,0})                                              annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=270,
              origin={-170,80})));
        RJF.Cold_exchanger cold_exchanger(redeclare package Medium1 =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water, redeclare
            package Medium2 = Buildings.Media.Water)                     annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={10,10})));
        RJC.Heat_exchanger heat_exchanger(redeclare package Medium1 =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water, redeclare
            package Medium2 = Buildings.Media.Water)                     annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-30,10})));
        GF.Chiller gf1(redeclare package Medium1 =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          redeclare package Medium2 = Buildings.Media.Water,
          per=Fluid.Chillers.Data.ElectricReformulatedEIR.ReformEIRChiller_Carrier_23XL_1196kW_6_39COP_Valve())
                       annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-90,-30})));
        GF.Chiller gf2(redeclare package Medium1 =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          redeclare package Medium2 = Buildings.Media.Water,
          per=Fluid.Chillers.Data.ElectricReformulatedEIR.ReformEIRChiller_Carrier_23XL_724kW_6_04COP_Vanes())
                       annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-130,-30})));
        Fluid.FixedResistances.Junction jun1(redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal={2400/3.6,-1600 - 3.6,-800/3.6},
          dp_nominal={0,0,0})                                               annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={-110,80})));
        Fluid.FixedResistances.Junction jun2(redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal={1600,-800,-800},
          dp_nominal={0,0,0})                                               annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={-50,80})));
        Fluid.FixedResistances.Junction jun3(redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal={800/3.6,-1600/3.6,800/3.6},
          dp_nominal={0,0,0})                                               annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={-70,60})));
        Fluid.FixedResistances.Junction jun4(redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal={1600/3.6,-2400/3.6,800/3.6},
          dp_nominal={0,0,0})                                               annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={-20,60})));
        Fluid.FixedResistances.Junction jun5(redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal={800/3.6,-3600/3.6,2400/3.6},
          dp_nominal={0,0,0})                                               annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=90,
              origin={30,60})));
        TFP.TFP_solo tfp(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          redeclare package Medium3 = Buildings.Media.Water,
          redeclare package Medium4 = Buildings.Media.Water,
          m1_flow_nominal=211/3.6,
          m2_flow_nominal=211/3.6,
          m3_flow_nominal=332/3.6,
          m4_flow_nominal=332/3.6)
          annotation (Placement(transformation(extent={{-20,-60},{0,-40}})));
        Fluid.FixedResistances.Junction jun6(redeclare package Medium =
              Buildings.Media.Water,
          m_flow_nominal={500/3.6,850/3.6,-1350/3.6},
          dp_nominal={0,0,0})                annotation (Placement(
              transformation(
              extent={{10,-10},{-10,10}},
              rotation=90,
              origin={-150,-110})));
        Fluid.FixedResistances.Junction jun7(redeclare package Medium =
              Buildings.Media.Water,
          m_flow_nominal={350/3.6,-850/3.6,500/3.6},
          dp_nominal={0,0,0})                annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-100,-110})));
        PEC_PEG.pompes_pec pompes_pec(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=211/3.6)
          annotation (Placement(transformation(extent={{-20,-100},{0,-80}})));
        DEC_DEG.DEC dEC(redeclare package Medium1 = Buildings.Media.Water,
            redeclare package Medium2 = Buildings.Media.Water)
          annotation (Placement(transformation(extent={{40,-106},{60,-84}})));
        PEC_PEG.pompes_peg pompes_peg(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=1350/3.6)
          annotation (Placement(transformation(extent={{-20,-160},{0,-140}})));
        DEC_DEG.DEG dEG(redeclare package Medium1 = Buildings.Media.Water,
            redeclare package Medium2 = Buildings.Media.Water)
          annotation (Placement(transformation(extent={{40,-166},{60,-144}})));
        Fluid.FixedResistances.Junction jun8(redeclare package Medium =
              Buildings.Media.Water,
          m_flow_nominal={1000/3.6,-500/3.6,-500/3.6},
          dp_nominal={0,0,0})                annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-80,-70})));
        Fluid.FixedResistances.Junction jun9(redeclare package Medium =
              Buildings.Media.Water,
          m_flow_nominal={1350/3.6,-350/3.6,-1000/3.6},
          dp_nominal={0,0,0})                annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=90,
              origin={100,-124})));
        Controls_a.DEC_DEG.DEC_controls_parallel dEC_controls_parallel
          annotation (Placement(transformation(extent={{160,80},{200,120}})));
        Controls_a.DEC_DEG.DEG_controls_parallel dEG_controls_parallel
          annotation (Placement(transformation(extent={{160,-20},{200,20}})));
        Modelica.Blocks.Sources.RealExpression realExpression1
          annotation (Placement(transformation(extent={{120,60},{140,80}})));
        SST.distribution_hot distribution_hot(redeclare package Medium =
              Buildings.Media.Water)          annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={170,-110})));
        SST.distribution_cold distribution_cold(redeclare package Medium =
              Buildings.Media.Water)            annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={170,-170})));
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource("modelica://Buildings/Data/conditions_exterieures.txt"),
          columns={2,3})
          annotation (Placement(transformation(extent={{-280,180},{-260,200}})));
      equation
        connect(pem.port_b, jun.port_1) annotation (Line(points={{-40,110},{0,
                110},{0,100},{-170,100},{-170,90}},
                                              color={0,140,72},
            thickness=0.5));
        connect(jun.port_2, gf2.port_a1) annotation (Line(points={{-170,70},{
                -170,-24},{-140,-24}}, color={0,140,72},
            thickness=0.5));
        connect(jun.port_3, jun1.port_1)
          annotation (Line(points={{-160,80},{-120,80}},color={0,140,72},
            thickness=0.5));
        connect(jun1.port_3, gf1.port_a1) annotation (Line(points={{-110,70},{
                -110,-24},{-100,-24}},
                                     color={0,140,72},
            thickness=0.5));
        connect(jun1.port_2, jun2.port_1)
          annotation (Line(points={{-100,80},{-60,80}},color={0,140,72},
            thickness=0.5));
        connect(jun2.port_3, heat_exchanger.port_a1) annotation (Line(points={{-50,70},
                {-50,16},{-40,16}},       color={0,140,72},
            thickness=0.5));
        connect(jun2.port_2, cold_exchanger.port_a1) annotation (Line(points={{-40,80},
                {0,80},{0,16}},                   color={0,140,72},
            thickness=0.5));
        connect(gf2.port_b1, jun3.port_1) annotation (Line(points={{-120,-24},{
                -120,60},{-80,60}},color={0,140,72},
            thickness=0.5));
        connect(gf1.port_b1, jun3.port_3) annotation (Line(points={{-80,-24},{
                -70,-24},{-70,50}}, color={0,140,72},
            thickness=0.5));
        connect(jun3.port_2, jun4.port_1)
          annotation (Line(points={{-60,60},{-30,60}},color={0,140,72},
            thickness=0.5));
        connect(heat_exchanger.port_b1, jun4.port_3)
          annotation (Line(points={{-20,16},{-20,50}},
                                                     color={0,140,72},
            thickness=0.5));
        connect(jun4.port_2, jun5.port_3)
          annotation (Line(points={{-10,60},{20,60}},color={0,140,72},
            thickness=0.5));
        connect(cold_exchanger.port_b1, jun5.port_1) annotation (Line(points={{20,16},
                {30,16},{30,50}},        color={0,140,72},
            thickness=0.5));
        connect(jun5.port_2, pem.port_a) annotation (Line(points={{30,70},{30,
                140},{-80,140},{-80,110},{-60,110}},
                                                   color={0,140,72},
            thickness=0.5));
        connect(gf2.port_b2, jun6.port_1)
          annotation (Line(points={{-140,-36},{-150,-36},{-150,-100}},
                                                           color={0,127,255},
            thickness=0.5));
        connect(jun6.port_3, jun7.port_2)
          annotation (Line(points={{-140,-110},{-110,-110}},
                                                         color={0,127,255},
            thickness=0.5));
        connect(jun7.port_3, gf1.port_b2)
          annotation (Line(points={{-100,-100},{-100,-36}},
                                                         color={0,127,255},
            thickness=0.5));
        connect(pompes_pec.port_b, dEC.port_a1) annotation (Line(points={{0,-90},
                {40,-90}},                            color={238,46,47},
            thickness=0.5));
        connect(heat_exchanger.port_b2, tfp.port_a2) annotation (Line(points={{
                -40,4},{-50,4},{-50,-20},{12,-20},{12,-47},{0,-47}}, color={238,46,
                47},
            thickness=0.5));
        connect(dEC.port_b2, tfp.port_a1) annotation (Line(points={{40,-102},{
                20,-102},{20,-120},{80,-120},{80,-70},{-40,-70},{-40,-42},{-20,
                -42}}, color={238,46,47},
            thickness=0.5));
        connect(pompes_peg.port_b, dEG.port_a1)
          annotation (Line(points={{0,-150},{40,-150}},  color={0,127,255},
            thickness=0.5));
        connect(tfp.port_b3, cold_exchanger.port_a2) annotation (Line(points={{
                0,-53.1},{14,-53.1},{14,-34},{30,-34},{30,4},{20,4}}, color={0,127,
                255},
            thickness=0.5));
        connect(cold_exchanger.port_b2, tfp.port_a3) annotation (Line(points={{
                0,4},{0,-24},{-30,-24},{-30,-53.2},{-20,-53.2}}, color={0,127,
                255},
            thickness=0.5));
        connect(tfp.port_b4, jun7.port_1) annotation (Line(points={{-20,-58.5},
                {-60,-58.5},{-60,-110},{-90,-110}}, color={0,127,255},
            thickness=0.5));
        connect(jun6.port_2, pompes_peg.port_a) annotation (Line(points={{-150,
                -120},{-150,-150},{-20,-150}},color={0,127,255},
            thickness=0.5));
        connect(pem.PEM_TT200, gf2.PEM_TT200) annotation (Line(points={{-39,115},
                {-20,115},{-20,150},{-220,150},{-220,-20},{-142,-20}},
                                                                     color={0,0,
                127}));
        connect(pem.PEM_TT200, gf1.PEM_TT200) annotation (Line(points={{-39,115},
                {-20,115},{-20,150},{-220,150},{-220,-12},{-106,-12},{-106,-20},
                {-102,-20}},
                           color={0,0,127}));
        connect(pem.PEM_TT200, heat_exchanger.PEM_TT200) annotation (Line(
              points={{-39,115},{-20,115},{-20,150},{-220,150},{-220,6},{-42,6}},
              color={0,0,127}));
        connect(pem.PEM_TT200, cold_exchanger.PEM_TT200) annotation (Line(
              points={{-39,115},{-20,115},{-20,150},{-220,150},{-220,32},{-12,
                32},{-12,6},{-2,6}},
                                   color={0,0,127}));
        connect(dEG.port_b2, jun9.port_1) annotation (Line(points={{40,-162},{20,-162},
                {20,-180},{100,-180},{100,-134}},          color={0,127,255},
            thickness=0.5));
        connect(jun9.port_2, tfp.port_a4) annotation (Line(points={{100,-114},{100,-58},
                {0,-58}},          color={0,127,255},
            thickness=0.5));
        connect(jun9.port_3, jun8.port_1) annotation (Line(points={{90,-124},{-66,-124},
                {-66,-70},{-70,-70}},           color={0,127,255},
            thickness=0.5));
        connect(jun8.port_3, gf1.port_a2)
          annotation (Line(points={{-80,-60},{-80,-36}}, color={0,127,255},
            thickness=0.5));
        connect(jun8.port_2, gf2.port_a2) annotation (Line(points={{-90,-70},{
                -114,-70},{-114,-36},{-120,-36}},
                                               color={0,127,255},
            thickness=0.5));
        connect(tfp.FT521_DEC, dEC_controls_parallel.FT_TFP) annotation (Line(
              points={{3,-44},{60,-44},{60,91},{158,91}}, color={0,0,127}));
        connect(tfp.FT121_DEG, dEG_controls_parallel.FT_TFP) annotation (Line(
              points={{3,-56},{120,-56},{120,-9.8},{158,-9.8}}, color={0,0,127}));
        connect(gf2.y, dEG_controls_parallel.FT_GF1) annotation (Line(points={{-130,
                -41},{-130,-60},{-200,-60},{-200,-200},{140,-200},{140,2},{158,
                2}},        color={0,0,127}));
        connect(gf1.y, dEG_controls_parallel.FT_GF2) annotation (Line(points={{-90,-41},
                {-90,-54},{-212,-54},{-212,-206},{146,-206},{146,-4},{158,-4}},
                            color={0,0,127}));
        connect(tfp.CV522_pid, heat_exchanger.TFP_CV522) annotation (Line(
              points={{-17,-37},{-17,-12},{-56,-12},{-56,14},{-42,14}}, color={
                0,0,127}));
        connect(tfp.CV122_pid, cold_exchanger.TFP_CV122) annotation (Line(
              points={{-3,-37},{-3,-12},{-8,-12},{-8,14},{-2,14}}, color={0,0,
                127}));
        connect(pem.PEM_TT200, tfp.PEM_TT200) annotation (Line(points={{-39,115},
                {-20,115},{-20,150},{-220,150},{-220,-86},{-54,-86},{-54,-74},{
                -10,-74},{-10,-62}}, color={0,0,127}));
        connect(dEC_controls_parallel.HPSHC, dEG_controls_parallel.TFP_DEC)
          annotation (Line(points={{202,117},{220,117},{220,40},{150,40},{150,
                -16},{158,-16}}, color={255,127,0}));
        connect(dEG.TT121_DEG, tfp.DEG_TT121) annotation (Line(points={{50,-167},
                {50,-172},{10,-172},{10,-74},{-2,-74},{-2,-62}}, color={0,0,127}));
        connect(dEG_controls_parallel.GF2, gf2.u) annotation (Line(points={{202,
                10},{240,10},{240,-220},{-240,-220},{-240,-30},{-142,-30}},
              color={255,0,255}));
        connect(realExpression1.y, dEC_controls_parallel.FT_CHA) annotation (
            Line(points={{141,70},{150,70},{150,82},{158,82}}, color={0,0,127}));
        connect(dEG.DEG_out, dEG_controls_parallel.DEG) annotation (Line(points=
               {{63,-156},{130,-156},{130,14},{158,14}}, color={0,0,127}));
        connect(dEC.DEC, dEC_controls_parallel.DEC) annotation (Line(points={{
                63,-96},{110,-96},{110,111},{158,111}}, color={0,0,127}));
        connect(dEG_controls_parallel.GF1, gf1.u) annotation (Line(points={{202,
                2},{220,2},{220,-214},{-116,-214},{-116,-30},{-102,-30}}, color=
               {255,0,255}));
        connect(dEG_controls_parallel.GF1, pompes_peg.gf1) annotation (Line(
              points={{202,2},{220,2},{220,-214},{-34,-214},{-34,-154},{-22,
                -154}}, color={255,0,255}));
        connect(dEG_controls_parallel.GF2, pompes_peg.gf2) annotation (Line(
              points={{202,10},{240,10},{240,-220},{-30,-220},{-30,-160},{-22,
                -160}}, color={255,0,255}));
        connect(dEG_controls_parallel.HPSHC, heat_exchanger.mode) annotation (
            Line(points={{202,18},{260,18},{260,-240},{-46,-240},{-46,-8},{-36,
                -8},{-36,-2}}, color={255,127,0}));
        connect(dEG_controls_parallel.HPSHC, pompes_peg.tfp) annotation (Line(
              points={{202,18},{260,18},{260,-240},{-46,-240},{-46,-140},{-22,
                -140}}, color={255,127,0}));
        connect(dEG_controls_parallel.HPSHC, pompes_pec.tfp) annotation (Line(
              points={{202,18},{260,18},{260,-240},{-46,-240},{-46,-80},{-22,
                -80}}, color={255,127,0}));
        connect(dEG_controls_parallel.HPSHC, tfp.mode) annotation (Line(points=
                {{202,18},{260,18},{260,-240},{-46,-240},{-46,-66},{-18,-66},{-18,
                -62}}, color={255,127,0}));
        connect(dEG_controls_parallel.HPSHC, dEC.hpshc) annotation (Line(points={{202,18},
                {260,18},{260,-76},{45,-76},{45,-84}},          color={255,127,
                0}));
        connect(distribution_hot.port_b, dEC.port_a2) annotation (Line(points={
                {170,-120},{170,-128},{124,-128},{124,-102},{60,-102}}, color={238,46,
                47},
            thickness=0.5));
        connect(dEC.port_b1, distribution_hot.port_a) annotation (Line(points={
                {60,-90},{170,-90},{170,-100}}, color={238,46,47},
            thickness=0.5));
        connect(dEG.port_b1, distribution_cold.port_a) annotation (Line(points=
                {{60,-150},{170,-150},{170,-160}}, color={0,127,255},
            thickness=0.5));
        connect(distribution_cold.port_b, dEG.port_a2) annotation (Line(points=
                {{170,-180},{170,-190},{120,-190},{120,-162},{60,-162}}, color={0,127,
                255},
            thickness=0.5));
        connect(combiTimeTable.y[1], pem.T_sea) annotation (Line(points={{-259,
                190},{-140,190},{-140,115},{-62,115}}, color={0,0,127}));
        connect(combiTimeTable.y[2], dEC.T_ext) annotation (Line(points={{-259,190},
                {55,190},{55,-84}},      color={0,0,127}));
        connect(combiTimeTable.y[2], dEG.T_ext) annotation (Line(points={{-259,190},
                {54,190},{54,-20},{68,-20},{68,-140},{55,-140},{55,-144}},
              color={0,0,127}));
        connect(tfp.port_b2, heat_exchanger.port_a2) annotation (Line(
            points={{-20,-47},{-26,-47},{-26,-8},{-16,-8},{-16,4},{-20,4}},
            color={238,46,47},
            thickness=0.5));
        connect(tfp.port_b1, pompes_pec.port_a) annotation (Line(
            points={{0,-42},{4,-42},{4,-28},{-44,-28},{-44,-90},{-20,-90}},
            color={238,46,47},
            thickness=0.5));
        connect(tfp.FT521_DEC, heat_exchanger.TFP_debit_cons) annotation (Line(
              points={{3,-44},{8,-44},{8,-6},{-24,-6},{-24,-2}}, color={0,0,127}));
        connect(dEC_controls_parallel.CHA, pompes_pec.cha) annotation (Line(points={
                {202,107},{208,107},{208,108},{270,108},{270,-250},{-40,-250},{-40,-85},
                {-22,-85}}, color={255,0,255}));
        connect(dEG_controls_parallel.HPSHC, dEG.hpshc) annotation (Line(points={{202,
                18},{260,18},{260,-138},{45,-138},{45,-144}}, color={255,127,0}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{
                  -280,-280},{280,260}})),                             Diagram(
              coordinateSystem(preserveAspectRatio=false, extent={{-280,-280},{
                  280,260}})));
      end complete_plant;

      model complete_plant_simple
        Buildings.Applications.DHC_Thassalia.PEM.pem_simple pem(redeclare
            package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water, DP(
              displayUnit="bar") = 190000)
          annotation (Placement(transformation(extent={{-60,100},{-40,120}})));
        Fluid.FixedResistances.Junction jun(redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal={3600/3.6,-800/3.6,-2400/3.6},
          dp_nominal={0,0,0})                                              annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=270,
              origin={-170,80})));
        RJF.Cold_exchanger cold_exchanger(redeclare package Medium1 =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water, redeclare
            package Medium2 = Buildings.Media.Water)                     annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={10,10})));
        RJC.Heat_exchanger heat_exchanger(redeclare package Medium1 =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water, redeclare
            package Medium2 = Buildings.Media.Water)                     annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-30,10})));
        GF.Chiller gf1(redeclare package Medium1 =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          redeclare package Medium2 = Buildings.Media.Water,
          per=Fluid.Chillers.Data.ElectricReformulatedEIR.ReformEIRChiller_Carrier_23XL_1196kW_6_39COP_Valve())
                       annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-90,-30})));
        GF.Chiller gf2(redeclare package Medium1 =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          redeclare package Medium2 = Buildings.Media.Water,
          per=Fluid.Chillers.Data.ElectricReformulatedEIR.ReformEIRChiller_Carrier_23XL_724kW_6_04COP_Vanes())
                       annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-130,-30})));
        Fluid.FixedResistances.Junction jun1(redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal={2400/3.6,-1600 - 3.6,-800/3.6},
          dp_nominal={0,0,0})                                               annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={-110,80})));
        Fluid.FixedResistances.Junction jun2(redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal={1600,-800,-800},
          dp_nominal={0,0,0})                                               annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={-50,80})));
        Fluid.FixedResistances.Junction jun3(redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal={800/3.6,-1600/3.6,800/3.6},
          dp_nominal={0,0,0})                                               annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={-70,60})));
        Fluid.FixedResistances.Junction jun4(redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal={1600/3.6,-2400/3.6,800/3.6},
          dp_nominal={0,0,0})                                               annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={-20,60})));
        Fluid.FixedResistances.Junction jun5(redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal={800/3.6,-3600/3.6,2400/3.6},
          dp_nominal={0,0,0})                                               annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=90,
              origin={30,60})));
        TFP.TFP_solo tfp(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          redeclare package Medium3 = Buildings.Media.Water,
          redeclare package Medium4 = Buildings.Media.Water,
          m1_flow_nominal=211/3.6,
          m2_flow_nominal=211/3.6,
          m3_flow_nominal=332/3.6,
          m4_flow_nominal=332/3.6)
          annotation (Placement(transformation(extent={{-20,-60},{0,-40}})));
        Fluid.FixedResistances.Junction jun6(redeclare package Medium =
              Buildings.Media.Water,
          m_flow_nominal={500/3.6,850/3.6,-1350/3.6},
          dp_nominal={0,0,0})                annotation (Placement(
              transformation(
              extent={{10,-10},{-10,10}},
              rotation=90,
              origin={-150,-110})));
        Fluid.FixedResistances.Junction jun7(redeclare package Medium =
              Buildings.Media.Water,
          m_flow_nominal={350/3.6,-850/3.6,500/3.6},
          dp_nominal={0,0,0})                annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-100,-110})));
        PEC_PEG.pompes_pec pompes_pec(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=211/3.6)
          annotation (Placement(transformation(extent={{-20,-100},{0,-80}})));
        DEC_DEG.DEC_simple dEC(redeclare package Medium1 =
              Buildings.Media.Water,
            redeclare package Medium2 = Buildings.Media.Water)
          annotation (Placement(transformation(extent={{40,-106},{60,-84}})));
        PEC_PEG.pompes_peg pompes_peg(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=1350/3.6)
          annotation (Placement(transformation(extent={{-20,-160},{0,-140}})));
        DEC_DEG.DEG_simple dEG(redeclare package Medium1 =
              Buildings.Media.Water,
            redeclare package Medium2 = Buildings.Media.Water)
          annotation (Placement(transformation(extent={{40,-166},{60,-144}})));
        Fluid.FixedResistances.Junction jun8(redeclare package Medium =
              Buildings.Media.Water,
          m_flow_nominal={1000/3.6,-500/3.6,-500/3.6},
          dp_nominal={0,0,0})                annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-80,-70})));
        Fluid.FixedResistances.Junction jun9(redeclare package Medium =
              Buildings.Media.Water,
          m_flow_nominal={1350/3.6,-350/3.6,-1000/3.6},
          dp_nominal={0,0,0})                annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=90,
              origin={100,-124})));
        Controls_a.DEC_DEG.DEC_controls_parallel dEC_controls_parallel
          annotation (Placement(transformation(extent={{160,80},{200,120}})));
        Controls_a.DEC_DEG.DEG_controls_parallel dEG_controls_parallel
          annotation (Placement(transformation(extent={{160,-20},{200,20}})));
        Modelica.Blocks.Sources.RealExpression realExpression1
          annotation (Placement(transformation(extent={{120,60},{140,80}})));
        SST.distribution_hot distribution_hot(redeclare package Medium =
              Buildings.Media.Water)          annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={170,-110})));
        SST.distribution_cold distribution_cold(redeclare package Medium =
              Buildings.Media.Water)            annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={170,-170})));
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource("modelica://Buildings/Data/conditions_exterieures.txt"),
          columns={2,3})
          annotation (Placement(transformation(extent={{-280,180},{-260,200}})));
      equation
        connect(pem.port_b, jun.port_1) annotation (Line(points={{-40,110},{0,
                110},{0,100},{-170,100},{-170,90}},
                                              color={0,140,72},
            thickness=0.5));
        connect(jun.port_2, gf2.port_a1) annotation (Line(points={{-170,70},{
                -170,-24},{-140,-24}}, color={0,140,72},
            thickness=0.5));
        connect(jun.port_3, jun1.port_1)
          annotation (Line(points={{-160,80},{-120,80}},color={0,140,72},
            thickness=0.5));
        connect(jun1.port_3, gf1.port_a1) annotation (Line(points={{-110,70},{
                -110,-24},{-100,-24}},
                                     color={0,140,72},
            thickness=0.5));
        connect(jun1.port_2, jun2.port_1)
          annotation (Line(points={{-100,80},{-60,80}},color={0,140,72},
            thickness=0.5));
        connect(jun2.port_3, heat_exchanger.port_a1) annotation (Line(points={{-50,70},
                {-50,16},{-40,16}},       color={0,140,72},
            thickness=0.5));
        connect(jun2.port_2, cold_exchanger.port_a1) annotation (Line(points={{-40,80},
                {0,80},{0,16}},                   color={0,140,72},
            thickness=0.5));
        connect(gf2.port_b1, jun3.port_1) annotation (Line(points={{-120,-24},{
                -120,60},{-80,60}},color={0,140,72},
            thickness=0.5));
        connect(gf1.port_b1, jun3.port_3) annotation (Line(points={{-80,-24},{
                -70,-24},{-70,50}}, color={0,140,72},
            thickness=0.5));
        connect(jun3.port_2, jun4.port_1)
          annotation (Line(points={{-60,60},{-30,60}},color={0,140,72},
            thickness=0.5));
        connect(heat_exchanger.port_b1, jun4.port_3)
          annotation (Line(points={{-20,16},{-20,50}},
                                                     color={0,140,72},
            thickness=0.5));
        connect(jun4.port_2, jun5.port_3)
          annotation (Line(points={{-10,60},{20,60}},color={0,140,72},
            thickness=0.5));
        connect(cold_exchanger.port_b1, jun5.port_1) annotation (Line(points={{20,16},
                {30,16},{30,50}},        color={0,140,72},
            thickness=0.5));
        connect(jun5.port_2, pem.port_a) annotation (Line(points={{30,70},{30,
                140},{-80,140},{-80,110},{-60,110}},
                                                   color={0,140,72},
            thickness=0.5));
        connect(gf2.port_b2, jun6.port_1)
          annotation (Line(points={{-140,-36},{-150,-36},{-150,-100}},
                                                           color={0,127,255},
            thickness=0.5));
        connect(jun6.port_3, jun7.port_2)
          annotation (Line(points={{-140,-110},{-110,-110}},
                                                         color={0,127,255},
            thickness=0.5));
        connect(jun7.port_3, gf1.port_b2)
          annotation (Line(points={{-100,-100},{-100,-36}},
                                                         color={0,127,255},
            thickness=0.5));
        connect(pompes_pec.port_b, dEC.port_a1) annotation (Line(points={{0,-90},
                {20,-90},{20,-88.4},{40,-88.4}},      color={238,46,47},
            thickness=0.5));
        connect(heat_exchanger.port_b2, tfp.port_a2) annotation (Line(points={{
                -40,4},{-50,4},{-50,-20},{12,-20},{12,-47},{0,-47}}, color={238,46,
                47},
            thickness=0.5));
        connect(dEC.port_b2, tfp.port_a1) annotation (Line(points={{40,-101.6},
                {20,-101.6},{20,-120},{80,-120},{80,-70},{-40,-70},{-40,-42},{
                -20,-42}},
                       color={238,46,47},
            thickness=0.5));
        connect(pompes_peg.port_b, dEG.port_a1)
          annotation (Line(points={{0,-150},{20,-150},{20,-148.4},{40,-148.4}},
                                                         color={0,127,255},
            thickness=0.5));
        connect(tfp.port_b3, cold_exchanger.port_a2) annotation (Line(points={{
                0,-53.1},{14,-53.1},{14,-34},{30,-34},{30,4},{20,4}}, color={0,127,
                255},
            thickness=0.5));
        connect(cold_exchanger.port_b2, tfp.port_a3) annotation (Line(points={{
                0,4},{0,-24},{-30,-24},{-30,-53.2},{-20,-53.2}}, color={0,127,
                255},
            thickness=0.5));
        connect(tfp.port_b4, jun7.port_1) annotation (Line(points={{-20,-58.5},
                {-60,-58.5},{-60,-110},{-90,-110}}, color={0,127,255},
            thickness=0.5));
        connect(jun6.port_2, pompes_peg.port_a) annotation (Line(points={{-150,
                -120},{-150,-150},{-20,-150}},color={0,127,255},
            thickness=0.5));
        connect(pem.PEM_TT200, gf2.PEM_TT200) annotation (Line(points={{-39,115},
                {-20,115},{-20,150},{-220,150},{-220,-20},{-142,-20}},
                                                                     color={0,0,
                127}));
        connect(pem.PEM_TT200, gf1.PEM_TT200) annotation (Line(points={{-39,115},
                {-20,115},{-20,150},{-220,150},{-220,-12},{-106,-12},{-106,-20},
                {-102,-20}},
                           color={0,0,127}));
        connect(pem.PEM_TT200, heat_exchanger.PEM_TT200) annotation (Line(
              points={{-39,115},{-20,115},{-20,150},{-220,150},{-220,6},{-42,6}},
              color={0,0,127}));
        connect(pem.PEM_TT200, cold_exchanger.PEM_TT200) annotation (Line(
              points={{-39,115},{-20,115},{-20,150},{-220,150},{-220,32},{-12,
                32},{-12,6},{-2,6}},
                                   color={0,0,127}));
        connect(dEG.port_b2, jun9.port_1) annotation (Line(points={{40,-161.6},
                {20,-161.6},{20,-180},{100,-180},{100,-134}},
                                                           color={0,127,255},
            thickness=0.5));
        connect(jun9.port_2, tfp.port_a4) annotation (Line(points={{100,-114},{100,-58},
                {0,-58}},          color={0,127,255},
            thickness=0.5));
        connect(jun9.port_3, jun8.port_1) annotation (Line(points={{90,-124},{-66,-124},
                {-66,-70},{-70,-70}},           color={0,127,255},
            thickness=0.5));
        connect(jun8.port_3, gf1.port_a2)
          annotation (Line(points={{-80,-60},{-80,-36}}, color={0,127,255},
            thickness=0.5));
        connect(jun8.port_2, gf2.port_a2) annotation (Line(points={{-90,-70},{
                -114,-70},{-114,-36},{-120,-36}},
                                               color={0,127,255},
            thickness=0.5));
        connect(tfp.FT521_DEC, dEC_controls_parallel.FT_TFP) annotation (Line(
              points={{3,-44},{60,-44},{60,91},{158,91}}, color={0,0,127}));
        connect(tfp.FT121_DEG, dEG_controls_parallel.FT_TFP) annotation (Line(
              points={{3,-56},{120,-56},{120,-9.8},{158,-9.8}}, color={0,0,127}));
        connect(gf2.y, dEG_controls_parallel.FT_GF1) annotation (Line(points={{-130,
                -41},{-130,-60},{-200,-60},{-200,-200},{140,-200},{140,2},{158,
                2}},        color={0,0,127}));
        connect(gf1.y, dEG_controls_parallel.FT_GF2) annotation (Line(points={{-90,-41},
                {-90,-54},{-212,-54},{-212,-206},{146,-206},{146,-4},{158,-4}},
                            color={0,0,127}));
        connect(tfp.CV522_pid, heat_exchanger.TFP_CV522) annotation (Line(
              points={{-17,-37},{-17,-12},{-56,-12},{-56,14},{-42,14}}, color={
                0,0,127}));
        connect(tfp.CV122_pid, cold_exchanger.TFP_CV122) annotation (Line(
              points={{-3,-37},{-3,-12},{-8,-12},{-8,14},{-2,14}}, color={0,0,
                127}));
        connect(pem.PEM_TT200, tfp.PEM_TT200) annotation (Line(points={{-39,115},
                {-20,115},{-20,150},{-220,150},{-220,-86},{-54,-86},{-54,-74},{
                -10,-74},{-10,-62}}, color={0,0,127}));
        connect(dEC_controls_parallel.HPSHC, dEG_controls_parallel.TFP_DEC)
          annotation (Line(points={{202,117},{220,117},{220,40},{150,40},{150,
                -16},{158,-16}}, color={255,127,0}));
        connect(dEG.TT121_DEG, tfp.DEG_TT121) annotation (Line(points={{50,
                -167.1},{50,-172},{10,-172},{10,-74},{-2,-74},{-2,-62}},
                                                                 color={0,0,127}));
        connect(dEG_controls_parallel.GF2, gf2.u) annotation (Line(points={{202,
                10},{240,10},{240,-220},{-240,-220},{-240,-30},{-142,-30}},
              color={255,0,255}));
        connect(realExpression1.y, dEC_controls_parallel.FT_CHA) annotation (
            Line(points={{141,70},{150,70},{150,82},{158,82}}, color={0,0,127}));
        connect(dEG.DEG_out, dEG_controls_parallel.DEG) annotation (Line(points={{63,-155},
                {130,-155},{130,14},{158,14}},           color={0,0,127}));
        connect(dEC.DEC, dEC_controls_parallel.DEC) annotation (Line(points={{63,-95},
                {110,-95},{110,111},{158,111}},         color={0,0,127}));
        connect(dEG_controls_parallel.GF1, gf1.u) annotation (Line(points={{202,
                2},{220,2},{220,-214},{-116,-214},{-116,-30},{-102,-30}}, color=
               {255,0,255}));
        connect(dEG_controls_parallel.GF1, pompes_peg.gf1) annotation (Line(
              points={{202,2},{220,2},{220,-214},{-34,-214},{-34,-154},{-22,
                -154}}, color={255,0,255}));
        connect(dEG_controls_parallel.GF2, pompes_peg.gf2) annotation (Line(
              points={{202,10},{240,10},{240,-220},{-30,-220},{-30,-160},{-22,
                -160}}, color={255,0,255}));
        connect(dEG_controls_parallel.HPSHC, heat_exchanger.mode) annotation (
            Line(points={{202,18},{260,18},{260,-240},{-46,-240},{-46,-8},{-36,
                -8},{-36,-2}}, color={255,127,0}));
        connect(dEG_controls_parallel.HPSHC, pompes_peg.tfp) annotation (Line(
              points={{202,18},{260,18},{260,-240},{-46,-240},{-46,-140},{-22,
                -140}}, color={255,127,0}));
        connect(dEG_controls_parallel.HPSHC, pompes_pec.tfp) annotation (Line(
              points={{202,18},{260,18},{260,-240},{-46,-240},{-46,-80},{-22,
                -80}}, color={255,127,0}));
        connect(dEG_controls_parallel.HPSHC, tfp.mode) annotation (Line(points=
                {{202,18},{260,18},{260,-240},{-46,-240},{-46,-66},{-18,-66},{-18,
                -62}}, color={255,127,0}));
        connect(distribution_hot.port_b, dEC.port_a2) annotation (Line(points={{170,
                -120},{170,-128},{124,-128},{124,-101.6},{60,-101.6}},  color={238,46,
                47},
            thickness=0.5));
        connect(dEC.port_b1, distribution_hot.port_a) annotation (Line(points={{60,
                -88.4},{170,-88.4},{170,-100}}, color={238,46,47},
            thickness=0.5));
        connect(dEG.port_b1, distribution_cold.port_a) annotation (Line(points={{60,
                -148.4},{170,-148.4},{170,-160}},  color={0,127,255},
            thickness=0.5));
        connect(distribution_cold.port_b, dEG.port_a2) annotation (Line(points={{170,
                -180},{170,-190},{120,-190},{120,-161.6},{60,-161.6}},   color={0,127,
                255},
            thickness=0.5));
        connect(combiTimeTable.y[1], pem.T_sea) annotation (Line(points={{-259,
                190},{-140,190},{-140,115},{-62,115}}, color={0,0,127}));
        connect(tfp.port_b2, heat_exchanger.port_a2) annotation (Line(
            points={{-20,-47},{-26,-47},{-26,-8},{-16,-8},{-16,4},{-20,4}},
            color={238,46,47},
            thickness=0.5));
        connect(tfp.port_b1, pompes_pec.port_a) annotation (Line(
            points={{0,-42},{4,-42},{4,-28},{-44,-28},{-44,-90},{-20,-90}},
            color={238,46,47},
            thickness=0.5));
        connect(tfp.FT521_DEC, heat_exchanger.TFP_debit_cons) annotation (Line(
              points={{3,-44},{8,-44},{8,-6},{-24,-6},{-24,-2}}, color={0,0,127}));
        connect(dEC_controls_parallel.CHA, pompes_pec.cha) annotation (Line(points={
                {202,107},{208,107},{208,108},{270,108},{270,-250},{-40,-250},{-40,-85},
                {-22,-85}}, color={255,0,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{
                  -280,-280},{280,260}})),                             Diagram(
              coordinateSystem(preserveAspectRatio=false, extent={{-280,-280},{
                  280,260}})));
      end complete_plant_simple;

      model test0
        import Media;
        import Media;
        import Media;
        TFP.TFP_solo tFP_solo
          annotation (Placement(transformation(extent={{-100,-20},{-80,0}})));
        RJC.Heat_exchanger heat_exchanger
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-50,10})));
        RJF.Cold_exchanger cold_exchanger
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-50,-50})));
        GF.Chiller chiller annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={40,90})));
        PEM.pem_simple pEM_simple annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=0,
              origin={90,10})));
        Fluid.FixedResistances.Junction jun2(
          redeclare package Medium = Media.Sea_Water,
          m_flow_nominal={190/3.6,-190/3.6,-190/3.6},
          dp_nominal={0,0,0}) annotation (Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=90,
              origin={70,50})));
        Fluid.FixedResistances.Junction jun1(
          redeclare package Medium = Media.Sea_Water,
          m_flow_nominal={190/3.6,-190/3.6,-190/3.6},
          dp_nominal={0,0,0}) annotation (Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=90,
              origin={-10,30})));
        Fluid.FixedResistances.Junction jun4(
          redeclare package Medium = Media.Sea_Water,
          m_flow_nominal={190/3.6,-190/3.6,-190/3.6},
          dp_nominal={0,0,0}) annotation (Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=90,
              origin={20,-10})));
        Fluid.FixedResistances.Junction jun5(
          redeclare package Medium = Media.Sea_Water,
          m_flow_nominal={190/3.6,-190/3.6,-190/3.6},
          dp_nominal={0,0,0}) annotation (Placement(transformation(
              extent={{-10,10},{10,-10}},
              rotation=0,
              origin={20,-70})));
      equation
        connect(pEM_simple.port_b, jun2.port_2) annotation (Line(points={{80,10},
                {70,10},{70,40}}, color={0,127,255}));
        connect(jun2.port_1, chiller.port_a1) annotation (Line(points={{70,60},
                {70,84},{50,84}}, color={0,127,255}));
        connect(jun2.port_3, jun1.port_1) annotation (Line(points={{60,50},{-10,
                50},{-10,40}}, color={0,127,255}));
        connect(jun1.port_3, heat_exchanger.port_a1) annotation (Line(points={{
                -20,30},{-44,30},{-44,20}}, color={0,127,255}));
        connect(chiller.port_b1, jun4.port_1) annotation (Line(points={{30,84},
                {20,84},{20,0}}, color={0,127,255}));
        connect(heat_exchanger.port_b1, jun4.port_3) annotation (Line(points={{
                -44,0},{-44,-10},{10,-10}}, color={0,127,255}));
        connect(cold_exchanger.port_b1, jun5.port_1) annotation (Line(points={{
                -44,-60},{-44,-70},{10,-70}}, color={0,127,255}));
        connect(jun4.port_2, jun5.port_3) annotation (Line(points={{20,-20},{20,
                -60},{20,-60}}, color={0,127,255}));
        connect(jun1.port_2, cold_exchanger.port_a1) annotation (Line(points={{
                -10,20},{-10,-28},{-44,-28},{-44,-40}}, color={0,127,255}));
        connect(jun5.port_2, pEM_simple.port_a) annotation (Line(points={{30,
                -70},{120,-70},{120,10},{100,10}}, color={0,127,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end test0;

      model test_1
        PEM.pem pem(lolilol(displayUnit="bar") = 500000)
          annotation (Placement(transformation(extent={{-100,0},{-80,20}})));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end test_1;


      model gf1
        GF.Chiller gf1(redeclare package Medium1 =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          redeclare package Medium2 = Buildings.Media.Water,
          per=Fluid.Chillers.Data.ElectricReformulatedEIR.ReformEIRChiller_Carrier_23XL_1196kW_6_39COP_Valve())
                       annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-90,-30})));
        PEC_PEG.pompes_peg pompes_peg(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=1350/3.6)
          annotation (Placement(transformation(extent={{-20,-160},{0,-140}})));
        DEC_DEG.DEG_simple dEG(redeclare package Medium1 =
              Buildings.Media.Water,
            redeclare package Medium2 = Buildings.Media.Water)
          annotation (Placement(transformation(extent={{40,-166},{60,-144}})));
        SST.distribution_cold distribution_cold(redeclare package Medium =
              Buildings.Media.Water)            annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={170,-170})));
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource("modelica://Buildings/Data/conditions_exterieures.txt"),
          columns={2,3})
          annotation (Placement(transformation(extent={{-220,60},{-200,80}})));
        Modelica.Blocks.Sources.IntegerExpression integerExpression
          annotation (Placement(transformation(extent={{-60,-120},{-40,-100}})));
        Modelica.Blocks.Sources.BooleanExpression booleanExpression
          annotation (Placement(transformation(extent={{-80,-220},{-60,-200}})));
        Modelica.Blocks.Sources.BooleanExpression booleanExpression1(y=true)
          annotation (Placement(transformation(extent={{-80,-200},{-60,-180}})));
        PEM.pem_simple pEM_simple(redeclare package Medium =
              Buildings.Media.Water, DP(displayUnit="bar") = 200000)
          annotation (Placement(transformation(extent={{-80,20},{-60,40}})));
      equation
        connect(pompes_peg.port_b, dEG.port_a1)
          annotation (Line(points={{0,-150},{20,-150},{20,-148.4},{40,-148.4}},
                                                         color={0,127,255},
            thickness=0.5));
        connect(dEG.port_b1, distribution_cold.port_a) annotation (Line(points={{60,-148.4},
                {170,-148.4},{170,-160}},          color={0,127,255},
            thickness=0.5));
        connect(distribution_cold.port_b, dEG.port_a2) annotation (Line(points={{170,-180},
                {170,-190},{120,-190},{120,-161.6},{60,-161.6}},         color={0,127,
                255},
            thickness=0.5));
        connect(integerExpression.y, pompes_peg.tfp) annotation (Line(points={{-39,-110},
                {-32,-110},{-32,-140},{-22,-140}}, color={255,127,0}));
        connect(booleanExpression.y, pompes_peg.gf2) annotation (Line(points={{-59,-210},
                {-34,-210},{-34,-160},{-22,-160}}, color={255,0,255}));
        connect(booleanExpression1.y, pompes_peg.gf1) annotation (Line(points={{-59,-190},
                {-44,-190},{-44,-154},{-22,-154}}, color={255,0,255}));
        connect(dEG.port_b2, gf1.port_a2) annotation (Line(points={{40,-161.6},{20,-161.6},
                {20,-36},{-80,-36}}, color={0,127,255}));
        connect(gf1.port_b2, pompes_peg.port_a) annotation (Line(points={{-100,-36},{-114,
                -36},{-114,-150},{-20,-150}}, color={0,127,255}));
        connect(booleanExpression1.y, gf1.u) annotation (Line(points={{-59,-190},{-44,
                -190},{-44,-164},{-140,-164},{-140,-30},{-102,-30}}, color={255,0,255}));
        connect(pEM_simple.port_b, gf1.port_a1) annotation (Line(points={{-60,
                30},{-38,30},{-38,0},{-118,0},{-118,-24},{-100,-24}}, color={0,
                127,255}));
        connect(gf1.port_b1, pEM_simple.port_a) annotation (Line(points={{-80,
                -24},{-68,-24},{-68,8},{-104,8},{-104,30},{-80,30}}, color={0,
                127,255}));
        connect(combiTimeTable.y[1], pEM_simple.T_sea) annotation (Line(points={{-199,70},
                {-140,70},{-140,35},{-82,35}},            color={0,0,127}));
        connect(pEM_simple.PEM_TT200, gf1.PEM_TT200) annotation (Line(points={{-59,35},
                {-44,35},{-44,-12},{-128,-12},{-128,-20},{-102,-20}},
              color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{
                  -280,-280},{280,260}})),                             Diagram(
              coordinateSystem(preserveAspectRatio=false, extent={{-280,-280},{
                  280,260}})));
      end gf1;

      model corrections_b
        GF.Chiller gf1(redeclare package Medium1 =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          redeclare package Medium2 = Buildings.Media.Water,
          per=Fluid.Chillers.Data.ElectricReformulatedEIR.ReformEIRChiller_Carrier_23XL_1196kW_6_39COP_Valve(),
          pID_Valve_evap(
            TDT_PID(k=0.1, Ti=10),
            T_PID(k=0.1, Ti=10),
            DPT_PID(k=0.1, Ti=10)))
                       annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-90,-30})));
        PEC_PEG.pompes_peg pompes_peg(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=1350/3.6)
          annotation (Placement(transformation(extent={{-20,-160},{0,-140}})));
        DEC_DEG.DEG_simple dEG(redeclare package Medium1 =
              Buildings.Media.Water,
            redeclare package Medium2 = Buildings.Media.Water)
          annotation (Placement(transformation(extent={{40,-166},{60,-144}})));
        SST.distribution_cold distribution_cold(redeclare package Medium =
              Buildings.Media.Water)            annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={170,-170})));
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource("modelica://Buildings/Data/conditions_exterieures.txt"),
          columns={2,3})
          annotation (Placement(transformation(extent={{-220,60},{-200,80}})));
        Modelica.Blocks.Sources.IntegerExpression integerExpression
          annotation (Placement(transformation(extent={{-60,-120},{-40,-100}})));
        Modelica.Blocks.Sources.BooleanExpression booleanExpression
          annotation (Placement(transformation(extent={{-80,-220},{-60,-200}})));
        Modelica.Blocks.Sources.BooleanExpression booleanExpression1(y=true)
          annotation (Placement(transformation(extent={{-80,-200},{-60,-180}})));
        PEM.pem pem(redeclare package Medium = Buildings.Media.Water,
            m_flow_nominal=(800*2 + 350)/3.6)
          annotation (Placement(transformation(extent={{-100,20},{-80,40}})));
      equation
        connect(pompes_peg.port_b, dEG.port_a1)
          annotation (Line(points={{0,-150},{20,-150},{20,-148.4},{40,-148.4}},
                                                         color={0,127,255},
            thickness=0.5));
        connect(dEG.port_b1, distribution_cold.port_a) annotation (Line(points={{60,-148.4},
                {170,-148.4},{170,-160}},          color={0,127,255},
            thickness=0.5));
        connect(distribution_cold.port_b, dEG.port_a2) annotation (Line(points={{170,-180},
                {170,-190},{120,-190},{120,-161.6},{60,-161.6}},         color={0,127,
                255},
            thickness=0.5));
        connect(integerExpression.y, pompes_peg.tfp) annotation (Line(points={{-39,-110},
                {-32,-110},{-32,-140},{-22,-140}}, color={255,127,0}));
        connect(booleanExpression.y, pompes_peg.gf2) annotation (Line(points={{-59,-210},
                {-34,-210},{-34,-160},{-22,-160}}, color={255,0,255}));
        connect(booleanExpression1.y, pompes_peg.gf1) annotation (Line(points={{-59,-190},
                {-44,-190},{-44,-154},{-22,-154}}, color={255,0,255}));
        connect(dEG.port_b2, gf1.port_a2) annotation (Line(points={{40,-161.6},{20,-161.6},
                {20,-36},{-80,-36}}, color={0,127,255}));
        connect(gf1.port_b2, pompes_peg.port_a) annotation (Line(points={{-100,-36},{-114,
                -36},{-114,-150},{-20,-150}}, color={0,127,255}));
        connect(booleanExpression1.y, gf1.u) annotation (Line(points={{-59,-190},{-44,
                -190},{-44,-164},{-140,-164},{-140,-30},{-102,-30}}, color={255,0,255}));
        connect(combiTimeTable.y[1], pem.T_sea) annotation (Line(points={{-199,70},
                {-150,70},{-150,35},{-102,35}},     color={0,0,127}));
        connect(combiTimeTable.y[1], gf1.PEM_TT200) annotation (Line(points={{
                -199,70},{-150,70},{-150,-20},{-102,-20}}, color={0,0,127}));
        connect(pem.port_b, gf1.port_a1) annotation (Line(points={{-80,30},{-66,
                30},{-66,0},{-120,0},{-120,-24},{-100,-24}}, color={0,127,255}));
        connect(gf1.port_b1, pem.port_a) annotation (Line(points={{-80,-24},{
                -74,-24},{-74,10},{-110,10},{-110,30},{-100,30}}, color={0,127,
                255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{
                  -280,-280},{280,260}})),                             Diagram(
              coordinateSystem(preserveAspectRatio=false, extent={{-280,-280},{
                  280,260}})),
          experiment(
            StopTime=500,
            Interval=10,
            __Dymola_Algorithm="Dassl"));
      end corrections_b;

      model gf2
        GF.Chiller gf1(redeclare package Medium1 =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          redeclare package Medium2 = Buildings.Media.Water,
          per=Fluid.Chillers.Data.ElectricReformulatedEIR.ReformEIRChiller_Carrier_23XL_1196kW_6_39COP_Valve())
                       annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-90,-30})));
        PEC_PEG.pompes_peg pompes_peg(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=1350/3.6)
          annotation (Placement(transformation(extent={{-20,-160},{0,-140}})));
        DEC_DEG.DEG_simple dEG(redeclare package Medium1 =
              Buildings.Media.Water,
            redeclare package Medium2 = Buildings.Media.Water)
          annotation (Placement(transformation(extent={{40,-166},{60,-144}})));
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource("modelica://Buildings/Data/conditions_exterieures.txt"),
          columns={2,3})
          annotation (Placement(transformation(extent={{-220,60},{-200,80}})));
        Modelica.Blocks.Sources.IntegerExpression integerExpression
          annotation (Placement(transformation(extent={{-60,-120},{-40,-100}})));
        Modelica.Blocks.Sources.BooleanExpression booleanExpression
          annotation (Placement(transformation(extent={{-80,-220},{-60,-200}})));
        Modelica.Blocks.Sources.BooleanExpression booleanExpression1(y=true)
          annotation (Placement(transformation(extent={{-80,-200},{-60,-180}})));
        PEM.pem_simple pEM_simple(redeclare package Medium =
              Buildings.Media.Water, DP(displayUnit="bar") = 200000)
          annotation (Placement(transformation(extent={{-80,20},{-60,40}})));
      equation
        connect(pompes_peg.port_b, dEG.port_a1)
          annotation (Line(points={{0,-150},{20,-150},{20,-148.4},{40,-148.4}},
                                                         color={0,127,255},
            thickness=0.5));
        connect(integerExpression.y, pompes_peg.tfp) annotation (Line(points={{-39,-110},
                {-32,-110},{-32,-140},{-22,-140}}, color={255,127,0}));
        connect(booleanExpression.y, pompes_peg.gf2) annotation (Line(points={{-59,-210},
                {-34,-210},{-34,-160},{-22,-160}}, color={255,0,255}));
        connect(booleanExpression1.y, pompes_peg.gf1) annotation (Line(points={{-59,-190},
                {-44,-190},{-44,-154},{-22,-154}}, color={255,0,255}));
        connect(dEG.port_b2, gf1.port_a2) annotation (Line(points={{40,-161.6},{20,-161.6},
                {20,-36},{-80,-36}}, color={0,127,255}));
        connect(gf1.port_b2, pompes_peg.port_a) annotation (Line(points={{-100,-36},{-114,
                -36},{-114,-150},{-20,-150}}, color={0,127,255}));
        connect(booleanExpression1.y, gf1.u) annotation (Line(points={{-59,-190},{-44,
                -190},{-44,-164},{-140,-164},{-140,-30},{-102,-30}}, color={255,0,255}));
        connect(pEM_simple.port_b, gf1.port_a1) annotation (Line(points={{-60,
                30},{-38,30},{-38,0},{-118,0},{-118,-24},{-100,-24}}, color={0,
                127,255}));
        connect(gf1.port_b1, pEM_simple.port_a) annotation (Line(points={{-80,
                -24},{-68,-24},{-68,8},{-104,8},{-104,30},{-80,30}}, color={0,
                127,255}));
        connect(combiTimeTable.y[1], pEM_simple.T_sea) annotation (Line(points={{-199,70},
                {-140,70},{-140,35},{-82,35}},            color={0,0,127}));
        connect(pEM_simple.PEM_TT200, gf1.PEM_TT200) annotation (Line(points={{-59,35},
                {-44,35},{-44,-12},{-128,-12},{-128,-20},{-102,-20}},
              color={0,0,127}));
        connect(dEG.port_b1, dEG.port_a2) annotation (Line(points={{60,-148.4},
                {88,-148.4},{88,-162},{60,-162},{60,-161.6}}, color={0,127,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{
                  -280,-280},{280,260}})),                             Diagram(
              coordinateSystem(preserveAspectRatio=false, extent={{-280,-280},{
                  280,260}})));
      end gf2;

      model complete_plant_simple_nouv
        Buildings.Applications.DHC_Thassalia.PEM.pem_simple pem(redeclare
            package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water, DP(
              displayUnit="bar") = 190000)
          annotation (Placement(transformation(extent={{-60,100},{-40,120}})));
        Fluid.FixedResistances.Junction jun(redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal={3600/3.6,-800/3.6,-2400/3.6},
          dp_nominal={0,0,0})                                              annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=270,
              origin={-170,80})));
        RJF.Cold_exchanger cold_exchanger(redeclare package Medium1 =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water, redeclare
            package Medium2 = Buildings.Media.Water)                     annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={10,10})));
        RJC.Heat_exchanger heat_exchanger(redeclare package Medium1 =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water, redeclare
            package Medium2 = Buildings.Media.Water)                     annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-30,10})));
        GF.Chiller gf1(redeclare package Medium1 =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          redeclare package Medium2 = Buildings.Media.Water,
          per=Fluid.Chillers.Data.ElectricReformulatedEIR.ReformEIRChiller_Carrier_23XL_1196kW_6_39COP_Valve())
                       annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-90,-30})));
        GF.Chiller gf2(redeclare package Medium1 =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          redeclare package Medium2 = Buildings.Media.Water,
          per=Fluid.Chillers.Data.ElectricReformulatedEIR.ReformEIRChiller_Carrier_23XL_724kW_6_04COP_Vanes())
                       annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-130,-30})));
        Fluid.FixedResistances.Junction jun1(redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal={2400/3.6,-1600 - 3.6,-800/3.6},
          dp_nominal={0,0,0})                                               annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={-110,80})));
        Fluid.FixedResistances.Junction jun2(redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal={1600,-800,-800},
          dp_nominal={0,0,0})                                               annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={-50,80})));
        Fluid.FixedResistances.Junction jun3(redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal={800/3.6,-1600/3.6,800/3.6},
          dp_nominal={0,0,0})                                               annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={-70,60})));
        Fluid.FixedResistances.Junction jun4(redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal={1600/3.6,-2400/3.6,800/3.6},
          dp_nominal={0,0,0})                                               annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={-20,60})));
        Fluid.FixedResistances.Junction jun5(redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal={800/3.6,-3600/3.6,2400/3.6},
          dp_nominal={0,0,0})                                               annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=90,
              origin={30,60})));
        TFP.TFP_solo tfp(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          redeclare package Medium3 = Buildings.Media.Water,
          redeclare package Medium4 = Buildings.Media.Water,
          m1_flow_nominal=211/3.6,
          m2_flow_nominal=211/3.6,
          m3_flow_nominal=332/3.6,
          m4_flow_nominal=332/3.6)
          annotation (Placement(transformation(extent={{-20,-60},{0,-40}})));
        Fluid.FixedResistances.Junction jun6(redeclare package Medium =
              Buildings.Media.Water,
          m_flow_nominal={500/3.6,850/3.6,-1350/3.6},
          dp_nominal={0,0,0})                annotation (Placement(
              transformation(
              extent={{10,-10},{-10,10}},
              rotation=90,
              origin={-150,-110})));
        Fluid.FixedResistances.Junction jun7(redeclare package Medium =
              Buildings.Media.Water,
          m_flow_nominal={350/3.6,-850/3.6,500/3.6},
          dp_nominal={0,0,0})                annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-100,-110})));
        Fluid.FixedResistances.Junction jun8(redeclare package Medium =
              Buildings.Media.Water,
          m_flow_nominal={1000/3.6,-500/3.6,-500/3.6},
          dp_nominal={0,0,0})                annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-80,-70})));
        Fluid.FixedResistances.Junction jun9(redeclare package Medium =
              Buildings.Media.Water,
          m_flow_nominal={1350/3.6,-350/3.6,-1000/3.6},
          dp_nominal={0,0,0})                annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=90,
              origin={100,-124})));
        SST.distribution_hot distribution_hot(redeclare package Medium =
              Buildings.Media.Water)          annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={170,-92})));
        SST.distribution_cold distribution_cold(redeclare package Medium =
              Buildings.Media.Water)            annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={170,-170})));
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource("modelica://Buildings/Data/conditions_exterieures.txt"),
          columns={2,3})
          annotation (Placement(transformation(extent={{-280,180},{-260,200}})));
        DE_PE.hot hot(redeclare package Medium1 = Buildings.Media.Water,
            redeclare package Medium2 = Buildings.Media.Water) annotation (
            Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={50,-90})));
        DE_PE.cold cold(redeclare package Medium1 = Buildings.Media.Water,
            redeclare package Medium2 = Buildings.Media.Water) annotation (
            Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={30,-180})));
        Controls_a.DE_PE.DE_PE_hot dE_PE_hot
          annotation (Placement(transformation(extent={{140,40},{180,80}})));
        Controls_a.DE_PE.DE_PE_cold dE_PE_cold
          annotation (Placement(transformation(extent={{140,-20},{180,20}})));
      equation
        connect(pem.port_b, jun.port_1) annotation (Line(points={{-40,110},{0,
                110},{0,100},{-170,100},{-170,90}},
                                              color={0,140,72},
            thickness=0.5));
        connect(jun.port_2, gf2.port_a1) annotation (Line(points={{-170,70},{
                -170,-24},{-140,-24}}, color={0,140,72},
            thickness=0.5));
        connect(jun.port_3, jun1.port_1)
          annotation (Line(points={{-160,80},{-120,80}},color={0,140,72},
            thickness=0.5));
        connect(jun1.port_3, gf1.port_a1) annotation (Line(points={{-110,70},{
                -110,-24},{-100,-24}},
                                     color={0,140,72},
            thickness=0.5));
        connect(jun1.port_2, jun2.port_1)
          annotation (Line(points={{-100,80},{-60,80}},color={0,140,72},
            thickness=0.5));
        connect(jun2.port_3, heat_exchanger.port_a1) annotation (Line(points={{-50,70},
                {-50,16},{-40,16}},       color={0,140,72},
            thickness=0.5));
        connect(jun2.port_2, cold_exchanger.port_a1) annotation (Line(points={{-40,80},
                {0,80},{0,16}},                   color={0,140,72},
            thickness=0.5));
        connect(gf2.port_b1, jun3.port_1) annotation (Line(points={{-120,-24},{
                -120,60},{-80,60}},color={0,140,72},
            thickness=0.5));
        connect(gf1.port_b1, jun3.port_3) annotation (Line(points={{-80,-24},{
                -70,-24},{-70,50}}, color={0,140,72},
            thickness=0.5));
        connect(jun3.port_2, jun4.port_1)
          annotation (Line(points={{-60,60},{-30,60}},color={0,140,72},
            thickness=0.5));
        connect(heat_exchanger.port_b1, jun4.port_3)
          annotation (Line(points={{-20,16},{-20,50}},
                                                     color={0,140,72},
            thickness=0.5));
        connect(jun4.port_2, jun5.port_3)
          annotation (Line(points={{-10,60},{20,60}},color={0,140,72},
            thickness=0.5));
        connect(cold_exchanger.port_b1, jun5.port_1) annotation (Line(points={{20,16},
                {30,16},{30,50}},        color={0,140,72},
            thickness=0.5));
        connect(jun5.port_2, pem.port_a) annotation (Line(points={{30,70},{30,
                140},{-80,140},{-80,110},{-60,110}},
                                                   color={0,140,72},
            thickness=0.5));
        connect(gf2.port_b2, jun6.port_1)
          annotation (Line(points={{-140,-36},{-150,-36},{-150,-100}},
                                                           color={0,127,255},
            thickness=0.5));
        connect(jun6.port_3, jun7.port_2)
          annotation (Line(points={{-140,-110},{-110,-110}},
                                                         color={0,127,255},
            thickness=0.5));
        connect(jun7.port_3, gf1.port_b2)
          annotation (Line(points={{-100,-100},{-100,-36}},
                                                         color={0,127,255},
            thickness=0.5));
        connect(heat_exchanger.port_b2, tfp.port_a2) annotation (Line(points={{
                -40,4},{-50,4},{-50,-20},{12,-20},{12,-47},{0,-47}}, color={238,46,
                47},
            thickness=0.5));
        connect(tfp.port_b3, cold_exchanger.port_a2) annotation (Line(points={{
                0,-53.1},{14,-53.1},{14,-34},{30,-34},{30,4},{20,4}}, color={0,127,
                255},
            thickness=0.5));
        connect(cold_exchanger.port_b2, tfp.port_a3) annotation (Line(points={{
                0,4},{0,-24},{-30,-24},{-30,-53.2},{-20,-53.2}}, color={0,127,
                255},
            thickness=0.5));
        connect(tfp.port_b4, jun7.port_1) annotation (Line(points={{-20,-58.5},
                {-60,-58.5},{-60,-110},{-90,-110}}, color={0,127,255},
            thickness=0.5));
        connect(pem.PEM_TT200, gf2.PEM_TT200) annotation (Line(points={{-39,115},
                {-20,115},{-20,150},{-220,150},{-220,-20},{-142,-20}},
                                                                     color={0,0,
                127}));
        connect(pem.PEM_TT200, gf1.PEM_TT200) annotation (Line(points={{-39,115},
                {-20,115},{-20,150},{-220,150},{-220,-12},{-106,-12},{-106,-20},
                {-102,-20}},
                           color={0,0,127}));
        connect(pem.PEM_TT200, heat_exchanger.PEM_TT200) annotation (Line(
              points={{-39,115},{-20,115},{-20,150},{-220,150},{-220,6},{-42,6}},
              color={0,0,127}));
        connect(pem.PEM_TT200, cold_exchanger.PEM_TT200) annotation (Line(
              points={{-39,115},{-20,115},{-20,150},{-220,150},{-220,32},{-12,
                32},{-12,6},{-2,6}},
                                   color={0,0,127}));
        connect(jun9.port_2, tfp.port_a4) annotation (Line(points={{100,-114},{100,-58},
                {0,-58}},          color={0,127,255},
            thickness=0.5));
        connect(jun9.port_3, jun8.port_1) annotation (Line(points={{90,-124},{-66,-124},
                {-66,-70},{-70,-70}},           color={0,127,255},
            thickness=0.5));
        connect(jun8.port_3, gf1.port_a2)
          annotation (Line(points={{-80,-60},{-80,-36}}, color={0,127,255},
            thickness=0.5));
        connect(jun8.port_2, gf2.port_a2) annotation (Line(points={{-90,-70},{
                -114,-70},{-114,-36},{-120,-36}},
                                               color={0,127,255},
            thickness=0.5));
        connect(tfp.CV522_pid, heat_exchanger.TFP_CV522) annotation (Line(
              points={{-17,-37},{-17,-12},{-56,-12},{-56,14},{-42,14}}, color={
                0,0,127}));
        connect(tfp.CV122_pid, cold_exchanger.TFP_CV122) annotation (Line(
              points={{-3,-37},{-3,-12},{-8,-12},{-8,14},{-2,14}}, color={0,0,
                127}));
        connect(pem.PEM_TT200, tfp.PEM_TT200) annotation (Line(points={{-39,115},
                {-20,115},{-20,150},{-220,150},{-220,-86},{-54,-86},{-54,-74},{
                -10,-74},{-10,-62}}, color={0,0,127}));
        connect(combiTimeTable.y[1], pem.T_sea) annotation (Line(points={{-259,
                190},{-140,190},{-140,115},{-62,115}}, color={0,0,127}));
        connect(tfp.port_b2, heat_exchanger.port_a2) annotation (Line(
            points={{-20,-47},{-26,-47},{-26,-8},{-16,-8},{-16,4},{-20,4}},
            color={238,46,47},
            thickness=0.5));
        connect(tfp.FT521_DEC, heat_exchanger.TFP_debit_cons) annotation (Line(
              points={{3,-44},{8,-44},{8,-6},{-24,-6},{-24,-2}}, color={0,0,127}));
        connect(dE_PE_hot.HPSHC, dE_PE_cold.TFP_DEC) annotation (Line(points={{
                182,77},{200,77},{200,30},{120,30},{120,-16},{138,-16}}, color=
                {255,127,0}));
        connect(dE_PE_hot.m_flow, hot.m_flow) annotation (Line(points={{182,60},
                {220,60},{220,-70},{38,-70},{38,-90}}, color={0,0,127}));
        connect(cold.m_flow, dE_PE_cold.m_flow) annotation (Line(points={{18,
                -180},{10,-180},{10,-148},{200,-148},{200,-6},{182,-6}}, color=
                {0,0,127}));
        connect(dE_PE_cold.GF2, gf2.u) annotation (Line(points={{182,10},{260,
                10},{260,-220},{-170,-220},{-170,-30},{-142,-30}}, color={255,0,
                255}));
        connect(dE_PE_cold.HPSHC, tfp.mode) annotation (Line(points={{182,18},{
                188,18},{188,-50},{20,-50},{20,-76},{-18,-76},{-18,-62}}, color=
               {255,127,0}));
        connect(dE_PE_cold.GF1, gf1.u) annotation (Line(points={{182,2},{240,2},
                {240,-210},{-116,-210},{-116,-30},{-102,-30}}, color={255,0,255}));
        connect(hot.y, dE_PE_hot.DEC) annotation (Line(points={{50,-77},{80,-77},
                {80,71},{138,71}}, color={0,0,127}));
        connect(cold.y, dE_PE_cold.DEG) annotation (Line(points={{30,-167},{128,
                -167},{128,14},{138,14}}, color={0,0,127}));
        connect(dE_PE_cold.HPSHC, heat_exchanger.mode) annotation (Line(points=
                {{182,18},{188,18},{188,-50},{20,-50},{20,-76},{-36,-76},{-36,
                -2}}, color={255,127,0}));
        connect(cold.deg_tt121, tfp.DEG_TT121) annotation (Line(points={{41,
                -180},{41,-200},{-2,-200},{-2,-62}}, color={0,0,127}));
        connect(jun6.port_2, cold.port_a1) annotation (Line(
            points={{-150,-120},{-150,-196},{24,-196},{24,-190}},
            color={0,127,255},
            thickness=0.5));
        connect(cold.port_b1, jun9.port_1) annotation (Line(
            points={{24,-170},{24,-140},{100,-140},{100,-134}},
            color={0,127,255},
            thickness=0.5));
        connect(cold.port_b2, distribution_cold.port_a) annotation (Line(
            points={{36,-190},{36,-196},{170,-196},{170,-180}},
            color={0,127,255},
            thickness=0.5));
        connect(distribution_cold.port_b, cold.port_a2) annotation (Line(
            points={{170,-160},{170,-154},{36,-154},{36,-170}},
            color={0,127,255},
            thickness=0.5));
        connect(hot.port_b1, tfp.port_a1) annotation (Line(
            points={{44,-80},{44,-74},{24,-74},{24,-88},{-40,-88},{-40,-42},{
                -20,-42}},
            color={238,46,47},
            thickness=0.5));
        connect(tfp.port_b1, hot.port_a1) annotation (Line(
            points={{0,-42},{28,-42},{28,-108},{44,-108},{44,-100}},
            color={238,46,47},
            thickness=0.5));
        connect(hot.port_b2, distribution_hot.port_a) annotation (Line(
            points={{56,-100},{56,-108},{170,-108},{170,-102}},
            color={238,46,47},
            thickness=0.5));
        connect(hot.port_a2, distribution_hot.port_b) annotation (Line(
            points={{56,-80},{56,-74},{170,-74},{170,-82}},
            color={238,46,47},
            thickness=0.5));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{
                  -280,-280},{280,260}})),                             Diagram(
              coordinateSystem(preserveAspectRatio=false, extent={{-280,-280},{
                  280,260}})));
      end complete_plant_simple_nouv;

      model gf1_cold
        GF.Chiller gf1(redeclare package Medium1 =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          redeclare package Medium2 = Buildings.Media.Water,
          per=Fluid.Chillers.Data.ElectricReformulatedEIR.ReformEIRChiller_Carrier_23XL_1196kW_6_39COP_Valve())
                       annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-90,-30})));
        SST.distribution_cold distribution_cold(redeclare package Medium =
              Buildings.Media.Water)            annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={170,-170})));
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource("modelica://Buildings/Data/conditions_exterieures.txt"),
          columns={2,3})
          annotation (Placement(transformation(extent={{-220,60},{-200,80}})));
        Modelica.Blocks.Sources.BooleanExpression booleanExpression1(y=true)
          annotation (Placement(transformation(extent={{-80,-200},{-60,-180}})));
        PEM.pem_simple pEM_simple(redeclare package Medium =
              Buildings.Media.Water, DP(displayUnit="bar") = 200000)
          annotation (Placement(transformation(extent={{-80,20},{-60,40}})));
        DE_PE.cold cold(redeclare package Medium1 = Buildings.Media.Water,
            redeclare package Medium2 = Buildings.Media.Water)
          annotation (Placement(transformation(extent={{40,-160},{60,-140}})));
        Modelica.Blocks.Sources.RealExpression realExpression(y=500/3.6)
          annotation (Placement(transformation(extent={{20,-120},{40,-100}})));
      equation
        connect(booleanExpression1.y, gf1.u) annotation (Line(points={{-59,-190},{-44,
                -190},{-44,-164},{-140,-164},{-140,-30},{-102,-30}}, color={255,0,255}));
        connect(pEM_simple.port_b, gf1.port_a1) annotation (Line(points={{-60,
                30},{-38,30},{-38,0},{-118,0},{-118,-24},{-100,-24}}, color={0,
                127,255}));
        connect(gf1.port_b1, pEM_simple.port_a) annotation (Line(points={{-80,
                -24},{-68,-24},{-68,8},{-104,8},{-104,30},{-80,30}}, color={0,
                127,255}));
        connect(combiTimeTable.y[1], pEM_simple.T_sea) annotation (Line(points={{-199,70},
                {-140,70},{-140,35},{-82,35}},            color={0,0,127}));
        connect(pEM_simple.PEM_TT200, gf1.PEM_TT200) annotation (Line(points={{-59,35},
                {-44,35},{-44,-12},{-128,-12},{-128,-20},{-102,-20}},
              color={0,0,127}));
        connect(cold.port_b1, gf1.port_a2) annotation (Line(points={{60,-144},{
                72,-144},{72,-36},{-80,-36}}, color={0,127,255}));
        connect(cold.port_b2, distribution_cold.port_a) annotation (Line(points=
               {{40,-156},{34,-156},{34,-178},{132,-178},{132,-152},{170,-152},
                {170,-160}}, color={0,127,255}));
        connect(distribution_cold.port_b, cold.port_a2) annotation (Line(points=
               {{170,-180},{170,-194},{102,-194},{102,-156},{60,-156}}, color={
                0,127,255}));
        connect(realExpression.y, cold.m_flow) annotation (Line(points={{41,
                -110},{50,-110},{50,-138}}, color={0,0,127}));
        connect(gf1.port_b2, cold.port_a1) annotation (Line(points={{-100,-36},
                {-100,-144},{40,-144}}, color={0,127,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{
                  -280,-280},{280,260}})),                             Diagram(
              coordinateSystem(preserveAspectRatio=false, extent={{-280,-280},{
                  280,260}})));
      end gf1_cold;

      model sst_caly
      extends Modelica.Icons.Example;
        Controls_a.DEC_DEG.DEG_controls_simple dEG_controls_simple(
          gf1_set=500/3.6,
          gf2_set=500/3.6,
          tfp_set=322/3.6)
          annotation (Placement(transformation(extent={{120,-20},{160,20}})));
        SST.distribution_cold_simple distribution_cold_simple(redeclare package
            Medium = Buildings.Media.Water) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={90,-70})));
        DEC_DEG.DEG_simple dEG_simple(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water)
          annotation (Placement(transformation(extent={{20,-80},{40,-60}})));
        Fluid.Sources.Boundary_pT bou(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=true,
          T=278.15,
          nPorts=3)
          annotation (Placement(transformation(extent={{-200,-80},{-180,-60}})));
        Buildings.Fluid.Movers.FlowControlled_m_flow fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=500/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_PEG per,
          inputType=Buildings.Fluid.Types.InputType.Continuous,
          addPowerToMedium=false,
          dp_nominal(displayUnit="bar") = 1000000,
          constantMassFlowRate=50/3.6)
          annotation (Placement(transformation(extent={{-40,-80},{-20,-60}})));
        Buildings.Applications.DHC_Thassalia.TFP.TFP_duo_carnot tFP_duo_simple(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          redeclare package Medium3 = Buildings.Media.Water,
          redeclare package Medium4 = Buildings.Media.Water,
          m1_flow_nominal=220/3.6,
          m2_flow_nominal=220/3.6,
          m3_flow_nominal=340/3.6,
          m4_flow_nominal=340/3.6)
          annotation (Placement(transformation(extent={{-160,-20},{-140,0}})));
        GF.Chiller chiller(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          per=Fluid.Chillers.Data.ElectricReformulatedEIR.ReformEIRChiller_Carrier_19EX_4667kW_6_16COP_Vanes())
                  annotation (Placement(transformation(extent={{-86,-20},{-66,0}})));
        RJC.Heat_exchanger heat_exchanger(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water)
          annotation (Placement(transformation(extent={{-200,40},{-180,60}})));
        RJF.Cold_exchanger cold_exchanger(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water)
          annotation (Placement(transformation(extent={{-140,40},{-120,60}})));
        Buildings.Fluid.Movers.FlowControlled_m_flow fan1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=211/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_PEC per,
          inputType=Buildings.Fluid.Types.InputType.Continuous,
          addPowerToMedium=false,
          dp_nominal(displayUnit="bar") = 1000000,
          constantMassFlowRate=50/3.6)
          annotation (Placement(transformation(extent={{0,100},{20,120}})));
        SST.distribution_hot_simple distribution_hot_simple(redeclare package
            Medium =
              Buildings.Media.Water) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={150,110})));
        Fluid.Sources.Boundary_pT bou1(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=true,
          T=278.15,
          nPorts=2)
          annotation (Placement(transformation(extent={{-80,80},{-60,100}})));
        Fluid.Sources.Boundary_pT bou2(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=true,
          T=278.15,
          nPorts=4)
          annotation (Placement(transformation(extent={{-300,100},{-280,120}})));
        DEC_DEG.DEC_simple dEC_simple(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water)
          annotation (Placement(transformation(extent={{62,100},{82,120}})));
        Controls_a.DEC_DEG.DEC_controls_simple dEC_controls_simple
          annotation (Placement(transformation(extent={{120,160},{160,200}})));
        Buildings.Fluid.Movers.FlowControlled_dp fan2(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=800/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          dp_nominal(displayUnit="bar") = 200000,
          constantHead(displayUnit="bar") = 200000)
          annotation (Placement(transformation(extent={{-240,100},{-220,120}})));
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource("modelica://Buildings/Data/pem.txt"),
          columns={2,3,4})
          annotation (Placement(transformation(extent={{-340,120},{-320,140}})));

      equation
        connect(dEG_simple.port_b1, distribution_cold_simple.port_a)
          annotation (Line(points={{40,-64},{60,-64},{60,-50},{90,-50},{90,-60}},
                                                                     color={0,127,255},
            thickness=0.5));

        connect(distribution_cold_simple.port_b, dEG_simple.port_a2)
          annotation (Line(points={{90,-80},{90,-90},{60,-90},{60,-76},{40,-76}},
              color={0,127,255},
            thickness=0.5));
        connect(fan.port_b, dEG_simple.port_a1) annotation (Line(points={{-20,-70},{-2,
                -70},{-2,-64},{20,-64}},
                                      color={0,127,255},
            thickness=0.5));
        connect(dEG_simple.DEG_out, dEG_controls_simple.DEG) annotation (Line(
              points={{43,-70},{50,-70},{50,14},{118,14}}, color={0,0,127}));
        connect(distribution_cold_simple.y, dEG_controls_simple.SST)
          annotation (Line(points={{101,-70},{108,-70},{108,2},{118,2}},
              color={0,0,127}));
        connect(dEG_controls_simple.m_flow, fan.m_flow_in) annotation (Line(
              points={{162,-6},{180,-6},{180,-40},{-30,-40},{-30,-58}},   color=
               {0,0,127}));
        connect(tFP_duo_simple.port_a4, bou.ports[1]) annotation (Line(
            points={{-140,-18},{-134,-18},{-134,-67.3333},{-180,-67.3333}},
            color={0,127,255},
            thickness=0.5));
        connect(tFP_duo_simple.port_b4, fan.port_a) annotation (Line(
            points={{-160,-18.5},{-164,-18.5},{-164,-84},{-40,-84},{-40,-70}},
            color={0,127,255},
            thickness=0.5));
        connect(dEG_controls_simple.HPSHC, tFP_duo_simple.mode) annotation (Line(
              points={{162,18},{220,18},{220,-110},{-158,-110},{-158,-22}}, color={255,
                127,0}));
        connect(tFP_duo_simple.port_b3, cold_exchanger.port_a2) annotation (Line(
            points={{-140,-13.1},{-112,-13.1},{-112,44},{-120,44}},
            color={0,127,255},
            thickness=0.5));
        connect(cold_exchanger.port_b2, tFP_duo_simple.port_a3) annotation (Line(
            points={{-140,44},{-160,44},{-160,20},{-180,20},{-180,-13.2},{-160,-13.2}},
            color={0,127,255},
            thickness=0.5));

        connect(tFP_duo_simple.port_a2, heat_exchanger.port_a2) annotation (Line(
            points={{-140,-7},{-138,-7},{-138,-8},{-126,-8},{-126,34},{-172,34},{-172,
                44},{-180,44}},
            color={238,46,47},
            thickness=0.5));
        connect(heat_exchanger.port_b2, tFP_duo_simple.port_b2) annotation (Line(
            points={{-200,44},{-200,-7},{-160,-7}},
            color={238,46,47},
            thickness=0.5));
        connect(bou1.ports[1], tFP_duo_simple.port_a1) annotation (Line(
            points={{-60,92},{-50,92},{-50,12},{-166,12},{-166,-2},{-160,-2}},
            color={238,46,47},
            thickness=0.5));
        connect(tFP_duo_simple.port_b1, fan1.port_a) annotation (Line(
            points={{-140,-2},{-106,-2},{-106,52},{-14,52},{-14,110},{0,110}},
            color={238,46,47},
            thickness=0.5));
        connect(heat_exchanger.port_b1, bou2.ports[1]) annotation (Line(
            points={{-180,56},{-168,56},{-168,142},{-260,142},{-260,113},{-280,113}},
            color={0,140,72},
            thickness=0.5));

        connect(cold_exchanger.port_b1, bou2.ports[2]) annotation (Line(
            points={{-120,56},{-114,56},{-114,136},{-272,136},{-272,111},{-280,111}},
            color={0,140,72},
            thickness=0.5));

        connect(tFP_duo_simple.CV522_pid, heat_exchanger.TFP_CV522) annotation (Line(
              points={{-137,-4},{-130,-4},{-130,28},{-214,28},{-214,54},{-202,54}},
              color={0,0,127}));
        connect(tFP_duo_simple.CV122_pid, cold_exchanger.TFP_CV122) annotation (Line(
              points={{-137,-16},{-120,-16},{-120,38},{-152,38},{-152,54},{-142,54}},
              color={0,0,127}));
        connect(bou.ports[2], dEG_simple.port_b2) annotation (Line(
            points={{-180,-70},{-180,-94},{20,-94},{20,-76}},
            color={0,127,255},
            thickness=0.5));
        connect(dEG_simple.TT121_DEG, bou.T_in) annotation (Line(points={{30,-81},{30,
                -124},{-216,-124},{-216,-66},{-202,-66}}, color={0,0,127}));
        connect(fan1.port_b, dEC_simple.port_a1) annotation (Line(
            points={{20,110},{40,110},{40,116},{62,116}},
            color={238,46,47},
            thickness=0.5));
        connect(dEC_simple.port_b1, distribution_hot_simple.port_a) annotation (Line(
            points={{82,116},{114,116},{114,134},{150,134},{150,120}},
            color={238,46,47},
            thickness=0.5));
        connect(distribution_hot_simple.port_b, dEC_simple.port_a2) annotation (Line(
            points={{150,100},{150,82},{120,82},{120,104},{82,104}},
            color={238,46,47},
            thickness=0.5));
        connect(dEC_simple.port_b2, bou1.ports[2]) annotation (Line(
            points={{62,104},{46,104},{46,88},{-60,88}},
            color={238,46,47},
            thickness=0.5));
        connect(dEC_simple.TT521_DEC, bou1.T_in) annotation (Line(points={{72,99},{72,
                68},{-92,68},{-92,94},{-82,94}}, color={0,0,127}));
        connect(dEC_simple.DEC, dEC_controls_simple.DEC) annotation (Line(points={{85,
                110},{100,110},{100,191},{118,191}}, color={0,0,127}));
        connect(distribution_hot_simple.y, dEC_controls_simple.SST) annotation (Line(
              points={{161,110},{172,110},{172,148},{108,148},{108,182},{118,182}},
              color={0,0,127}));
        connect(dEC_controls_simple.HPSHC, dEG_controls_simple.TFP_DEC) annotation (
            Line(points={{162,197},{200,197},{200,40},{80,40},{80,-16},{118,-16}},
              color={255,127,0}));
        connect(dEC_controls_simple.m_flow, fan1.m_flow_in) annotation (Line(points={{
                162,180},{192,180},{192,140},{10,140},{10,122}}, color={0,0,127}));
        connect(bou2.ports[3], fan2.port_a) annotation (Line(
            points={{-280,109},{-262,109},{-262,110},{-240,110}},
            color={0,140,72},
            thickness=0.5));
        connect(fan2.port_b, heat_exchanger.port_a1) annotation (Line(
            points={{-220,110},{-210,110},{-210,56},{-200,56}},
            color={0,140,72},
            thickness=0.5));
        connect(fan2.port_b, cold_exchanger.port_a1) annotation (Line(
            points={{-220,110},{-158,110},{-158,60},{-140,60},{-140,56}},
            color={0,140,72},
            thickness=0.5));
        connect(fan2.port_b, chiller.port_a1) annotation (Line(
            points={{-220,110},{-100,110},{-100,-4},{-86,-4}},
            color={0,140,72},
            thickness=0.5));
        connect(combiTimeTable.y[1], bou2.T_in) annotation (Line(points={{-319,130},{-310,
                130},{-310,114},{-302,114}}, color={0,0,127}));
        connect(dEG_simple.TT121_DEG, tFP_duo_simple.DEG_TT121) annotation (Line(
              points={{30,-81},{30,-124},{-142,-124},{-142,-22}}, color={0,0,127}));
        connect(combiTimeTable.y[1], heat_exchanger.PEM_TT200) annotation (Line(
              points={{-319,130},{-310,130},{-310,46},{-202,46}}, color={0,0,127}));
        connect(combiTimeTable.y[1], cold_exchanger.PEM_TT200) annotation (Line(
              points={{-319,130},{-310,130},{-310,32},{-142,32},{-142,46}}, color={0,0,
                127}));
        connect(combiTimeTable.y[1], tFP_duo_simple.PEM_TT200) annotation (Line(
              points={{-319,130},{-310,130},{-310,-34},{-150,-34},{-150,-22}}, color={
                0,0,127}));
        connect(combiTimeTable.y[1], chiller.PEM_TT200) annotation (Line(points={{-319,
                130},{-310,130},{-310,-34},{-92,-34},{-92,0},{-88,0}}, color={0,0,127}));
        connect(dEG_controls_simple.HPSHC, heat_exchanger.mode) annotation (Line(
              points={{162,18},{220,18},{220,-150},{-234,-150},{-234,14},{-196,14},{-196,
                38}}, color={255,127,0}));
        connect(bou.ports[3], chiller.port_a2) annotation (Line(
            points={{-180,-72.6667},{-120,-72.6667},{-120,-72},{-60,-72},{-60,
                -16},{-66,-16}},
            color={0,127,255},
            thickness=0.5));
        connect(chiller.port_b2, fan.port_a) annotation (Line(
            points={{-86,-16},{-86,-52},{-50,-52},{-50,-70},{-40,-70}},
            color={0,127,255},
            thickness=0.5));
        connect(dEG_controls_simple.GF1, chiller.u) annotation (Line(points={{162,10},
                {198,10},{198,-136},{-102,-136},{-102,-10},{-88,-10}}, color={255,0,255}));
        connect(chiller.port_b1, bou2.ports[4]) annotation (Line(
            points={{-66,-4},{-40,-4},{-40,148},{-280,148},{-280,107}},
            color={0,140,72},
            thickness=0.5));
        annotation (
          Icon(coordinateSystem(preserveAspectRatio=false)),
          Diagram(coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=13132800,
            Interval=3600,
            __Dymola_Algorithm="Dassl"));
      end sst_caly;

      model sst_caly0
        import Fluid;
        Fluid.Sources.Boundary_pT bou(
          redeclare package Medium = Buildings.Media.Water,
          T=278.15,
          nPorts=2)
          annotation (Placement(transformation(extent={{-100,20},{-80,40}})));
        Buildings.Fluid.Movers.FlowControlled_dp fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=500/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_PEG per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          dp_nominal=20000,
          constantHead=20000)
          annotation (Placement(transformation(extent={{-40,20},{-20,40}})));
        Buildings.Fluid.Sources.MassFlowSource_T
                                       boundary(
          redeclare package Medium = Buildings.Media.Water,
          use_m_flow_in=true,
          use_T_in=true,
          nPorts=1)
          annotation (Placement(transformation(extent={{194,110},{174,130}})));
        Buildings.Fluid.Sources.Boundary_pT
                                  bou1(redeclare package Medium =
              Buildings.Media.Water, nPorts=1)
          annotation (Placement(transformation(extent={{-6,110},{14,130}})));
        Buildings.Fluid.HeatExchangers.PlateHeatExchangerEffectivenessNTU
                                                                hex(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=400000/(4185*15),
          m2_flow_nominal=400000/(4185*15),
          dp1_nominal(displayUnit="kPa") = 70000,
          dp2_nominal(displayUnit="kPa") = 70000,
          configuration=Buildings.Fluid.Types.HeatExchangerConfiguration.CounterFlow,
          use_Q_flow_nominal=false,
          eps_nominal=0.72)
          annotation (Placement(transformation(extent={{114,46},{94,66}})));

        Buildings.Fluid.Actuators.Valves.TwoWayLinear
                                            val(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=400000/(4185*15),
          dpValve_nominal=5000,
          use_inputFilter=false)
          annotation (Placement(transformation(extent={{54,10},{74,30}})));
        Buildings.Fluid.Sensors.TemperatureTwoPort
                                         T_in_sec(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=180,
              origin={144,120})));
        Buildings.Fluid.Sensors.TemperatureTwoPort
                                         T_out_sec(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=180,
              origin={64,120})));
        Buildings.Fluid.Sensors.TemperatureTwoPort
                                         T_out_prim(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={144,20})));
        Buildings.Fluid.Sensors.TemperatureTwoPort
                                         T_in_prim(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100) annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={24,20})));
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource("modelica://Buildings/Data/sst/froid_caly_1h.txt"),
          columns={2,3,4})
          annotation (Placement(transformation(extent={{-140,150},{-120,170}})));
        Controls.Continuous.LimPID PID_T(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=0.05,
          Ti=15,
          initType=Modelica.Blocks.Types.InitPID.NoInit,
          reverseActing=false,
          y_reset=0)           annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-50,80})));
        Controls_a.SST.Switch_off switch1
          annotation (Placement(transformation(extent={{-20,60},{0,80}})));
        Modelica.Blocks.Sources.Step step(
          height=-1,
          offset=1,
          startTime=50000)
          annotation (Placement(transformation(extent={{-140,40},{-120,60}})));
      equation
        connect(bou.ports[1], fan.port_a) annotation (Line(points={{-80,32},{-58,32},{
                -58,30},{-40,30}}, color={0,127,255}));
        connect(val.port_b,hex. port_a2)
          annotation (Line(points={{74,20},{84,20},{84,50},{94,50}},
                                                   color={0,127,255}));
        connect(boundary.ports[1],T_in_sec. port_a)
          annotation (Line(points={{174,120},{154,120}},
                                                     color={0,127,255}));
        connect(T_in_sec.port_b,hex. port_a1) annotation (Line(points={{134,120},{124,
                120},{124,62},{114,62}},
                                  color={0,127,255}));
        connect(bou1.ports[1], T_out_sec.port_b)
          annotation (Line(points={{14,120},{54,120}}, color={0,127,255}));
        connect(T_out_sec.port_a,hex. port_b1) annotation (Line(points={{74,120},{84,120},
                {84,62},{94,62}},     color={0,127,255}));
        connect(hex.port_b2,T_out_prim. port_a) annotation (Line(points={{114,50},{124,
                50},{124,20},{134,20}},color={0,127,255}));
        connect(T_in_prim.port_b,val. port_a)
          annotation (Line(points={{34,20},{54,20}},     color={0,127,255}));
        connect(combiTimeTable.y[3],PID_T. u_s) annotation (Line(points={{-119,
                160},{-80,160},{-80,80},{-62,80}},   color={0,0,127}));
        connect(T_out_sec.T,PID_T. u_m) annotation (Line(points={{64,131},{64,
                140},{-100,140},{-100,60},{-50,60},{-50,68}},
                                                        color={0,0,127}));
        connect(fan.port_b, T_in_prim.port_a) annotation (Line(points={{-20,30},{-4,30},
                {-4,20},{14,20}}, color={0,127,255}));
        connect(T_out_prim.port_b, bou.ports[2]) annotation (Line(points={{154,20},
                {180,20},{180,-20},{-80,-20},{-80,28}},
                                                 color={0,127,255}));
        connect(combiTimeTable.y[1], boundary.m_flow_in) annotation (Line(
              points={{-119,160},{220,160},{220,128},{196,128}}, color={0,0,127}));
        connect(combiTimeTable.y[2], boundary.T_in) annotation (Line(points={{
                -119,160},{220,160},{220,124},{196,124}}, color={0,0,127}));
        connect(PID_T.y, switch1.u1) annotation (Line(points={{-39,80},{-32,80},
                {-32,78},{-22,78}}, color={0,0,127}));
        connect(step.y, switch1.u2) annotation (Line(points={{-119,50},{-70,50},
                {-70,70},{-22,70}}, color={0,0,127}));
        connect(switch1.y, val.y) annotation (Line(points={{1,70},{8,70},{8,72},
                {64,72},{64,32}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end sst_caly0;

      model sst_caly_b
        import Fluid;
        SST.distribution_cold_simple_bis distribution_cold_simple(redeclare
            package Medium =
                     Buildings.Media.Water) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={90,90})));
        DEC_DEG.DEG_simple dEG_simple(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water)
          annotation (Placement(transformation(extent={{20,80},{40,100}})));
        Fluid.Sources.Boundary_pT bou(
          redeclare package Medium = Buildings.Media.Water,
          T=278.15,
          nPorts=2)
          annotation (Placement(transformation(extent={{-180,80},{-160,100}})));
        Buildings.Fluid.Movers.FlowControlled_m_flow fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=500/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_PEG per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          addPowerToMedium=false,
          dp_nominal(displayUnit="bar") = 1300000,
          constantMassFlowRate=500/3.6)
          annotation (Placement(transformation(extent={{-40,80},{-20,100}})));
      equation
        connect(dEG_simple.port_b1, distribution_cold_simple.port_a)
          annotation (Line(points={{40,96},{60,96},{60,110},{90,110},{90,100}},
                                                                     color={0,
                127,255}));
        connect(distribution_cold_simple.port_b, dEG_simple.port_a2)
          annotation (Line(points={{90,80},{90,70},{60,70},{60,84},{40,84}},
              color={0,127,255}));
        connect(dEG_simple.port_b2, bou.ports[1]) annotation (Line(points={{20,84},
                {0,84},{0,72},{-72,72},{-72,92},{-160,92}},
                                                          color={0,127,255}));
        connect(bou.ports[2], fan.port_a) annotation (Line(points={{-160,88},{
                -60,88},{-60,90},{-40,90}},
                                   color={0,127,255}));
        connect(fan.port_b, dEG_simple.port_a1) annotation (Line(points={{-20,90},{-2,
                90},{-2,96},{20,96}}, color={0,127,255}));
        annotation (
          Icon(coordinateSystem(preserveAspectRatio=false)),
          Diagram(coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=13132800,
            Interval=3600,
            __Dymola_Algorithm="Dassl"));
      end sst_caly_b;

      model sst_nexi
      extends Modelica.Icons.Example;
        import Fluid;
        Controls_a.DEC_DEG.DEG_controls_simple dEG_controls_simple(
          gf1_set=500/3.6,
          gf2_set=500/3.6,
          tfp_set=322/3.6)
          annotation (Placement(transformation(extent={{120,-20},{160,20}})));
        SST.distribution_cold_simple distribution_cold_simple(redeclare package
            Medium = Buildings.Media.Water) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={90,-70})));
        DEC_DEG.DEG_simple dEG_simple(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water)
          annotation (Placement(transformation(extent={{20,-80},{40,-60}})));
        Fluid.Sources.Boundary_pT bou(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=true,
          T=278.15,
          nPorts=3)
          annotation (Placement(transformation(extent={{-200,-80},{-180,-60}})));
        Buildings.Fluid.Movers.FlowControlled_m_flow fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=500/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_PEG per,
          inputType=Buildings.Fluid.Types.InputType.Continuous,
          addPowerToMedium=false,
          dp_nominal(displayUnit="bar") = 1000000,
          constantMassFlowRate=50/3.6)
          annotation (Placement(transformation(extent={{-40,-80},{-20,-60}})));
        TFP.TFP_duo_simple tFP_duo_simple(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          redeclare package Medium3 = Buildings.Media.Water,
          redeclare package Medium4 = Buildings.Media.Water,
          m1_flow_nominal=320/3.6,
          m2_flow_nominal=320/3.6,
          m3_flow_nominal=320/3.6,
          m4_flow_nominal=320/3.6)
          annotation (Placement(transformation(extent={{-160,-20},{-140,0}})));
        GF.Chiller chiller(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          per=Fluid.Chillers.Data.ElectricReformulatedEIR.ReformEIRChiller_Carrier_19EX_4667kW_6_16COP_Vanes())
                  annotation (Placement(transformation(extent={{-86,-20},{-66,0}})));
        RJC.Heat_exchanger heat_exchanger(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water)
          annotation (Placement(transformation(extent={{-200,40},{-180,60}})));
        RJF.Cold_exchanger cold_exchanger(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water)
          annotation (Placement(transformation(extent={{-140,40},{-120,60}})));
        Buildings.Fluid.Movers.FlowControlled_m_flow fan1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=211/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_PEC per,
          inputType=Buildings.Fluid.Types.InputType.Continuous,
          addPowerToMedium=false,
          dp_nominal(displayUnit="bar") = 1000000,
          constantMassFlowRate=50/3.6)
          annotation (Placement(transformation(extent={{0,100},{20,120}})));
        SST.distribution_hot_simple distribution_hot_simple(redeclare package
            Medium =
              Buildings.Media.Water) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={150,110})));
        Fluid.Sources.Boundary_pT bou1(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=true,
          T=278.15,
          nPorts=2)
          annotation (Placement(transformation(extent={{-80,80},{-60,100}})));
        Fluid.Sources.Boundary_pT bou2(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=true,
          T=278.15,
          nPorts=4)
          annotation (Placement(transformation(extent={{-300,100},{-280,120}})));
        DEC_DEG.DEC_simple dEC_simple(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water)
          annotation (Placement(transformation(extent={{62,100},{82,120}})));
        Controls_a.DEC_DEG.DEC_controls_simple dEC_controls_simple
          annotation (Placement(transformation(extent={{120,160},{160,200}})));
        Buildings.Fluid.Movers.FlowControlled_dp fan2(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=800/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          dp_nominal(displayUnit="bar") = 200000,
          constantHead(displayUnit="bar") = 200000)
          annotation (Placement(transformation(extent={{-240,100},{-220,120}})));
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource("modelica://Buildings/Data/pem.txt"),
          columns={2,3,4})
          annotation (Placement(transformation(extent={{-340,120},{-320,140}})));

      equation
        connect(dEG_simple.port_b1, distribution_cold_simple.port_a)
          annotation (Line(points={{40,-64},{60,-64},{60,-50},{90,-50},{90,-60}},
                                                                     color={0,127,255},
            thickness=0.5));

        connect(distribution_cold_simple.port_b, dEG_simple.port_a2)
          annotation (Line(points={{90,-80},{90,-90},{60,-90},{60,-76},{40,-76}},
              color={0,127,255},
            thickness=0.5));
        connect(fan.port_b, dEG_simple.port_a1) annotation (Line(points={{-20,-70},{-2,
                -70},{-2,-64},{20,-64}},
                                      color={0,127,255},
            thickness=0.5));
        connect(dEG_simple.DEG_out, dEG_controls_simple.DEG) annotation (Line(
              points={{43,-70},{50,-70},{50,14},{118,14}}, color={0,0,127}));
        connect(distribution_cold_simple.y, dEG_controls_simple.SST)
          annotation (Line(points={{101,-70},{108,-70},{108,2},{118,2}},
              color={0,0,127}));
        connect(dEG_controls_simple.m_flow, fan.m_flow_in) annotation (Line(
              points={{162,-6},{180,-6},{180,-40},{-30,-40},{-30,-58}},   color=
               {0,0,127}));
        connect(tFP_duo_simple.port_a4, bou.ports[1]) annotation (Line(
            points={{-140,-18},{-134,-18},{-134,-67.3333},{-180,-67.3333}},
            color={0,127,255},
            thickness=0.5));
        connect(tFP_duo_simple.port_b4, fan.port_a) annotation (Line(
            points={{-160,-18.5},{-164,-18.5},{-164,-84},{-40,-84},{-40,-70}},
            color={0,127,255},
            thickness=0.5));
        connect(dEG_controls_simple.HPSHC, tFP_duo_simple.mode) annotation (Line(
              points={{162,18},{220,18},{220,-110},{-158,-110},{-158,-22}}, color={255,
                127,0}));
        connect(tFP_duo_simple.port_b3, cold_exchanger.port_a2) annotation (Line(
            points={{-140,-13.1},{-112,-13.1},{-112,44},{-120,44}},
            color={0,127,255},
            thickness=0.5));
        connect(cold_exchanger.port_b2, tFP_duo_simple.port_a3) annotation (Line(
            points={{-140,44},{-160,44},{-160,20},{-180,20},{-180,-13.2},{-160,-13.2}},
            color={0,127,255},
            thickness=0.5));

        connect(tFP_duo_simple.port_a2, heat_exchanger.port_a2) annotation (Line(
            points={{-140,-7},{-138,-7},{-138,-8},{-126,-8},{-126,34},{-172,34},{-172,
                44},{-180,44}},
            color={238,46,47},
            thickness=0.5));
        connect(heat_exchanger.port_b2, tFP_duo_simple.port_b2) annotation (Line(
            points={{-200,44},{-200,-7},{-160,-7}},
            color={238,46,47},
            thickness=0.5));
        connect(bou1.ports[1], tFP_duo_simple.port_a1) annotation (Line(
            points={{-60,92},{-50,92},{-50,12},{-166,12},{-166,-2},{-160,-2}},
            color={238,46,47},
            thickness=0.5));
        connect(tFP_duo_simple.port_b1, fan1.port_a) annotation (Line(
            points={{-140,-2},{-106,-2},{-106,52},{-14,52},{-14,110},{0,110}},
            color={238,46,47},
            thickness=0.5));
        connect(heat_exchanger.port_b1, bou2.ports[1]) annotation (Line(
            points={{-180,56},{-168,56},{-168,142},{-260,142},{-260,113},{-280,113}},
            color={0,140,72},
            thickness=0.5));

        connect(cold_exchanger.port_b1, bou2.ports[2]) annotation (Line(
            points={{-120,56},{-114,56},{-114,136},{-272,136},{-272,111},{-280,111}},
            color={0,140,72},
            thickness=0.5));

        connect(tFP_duo_simple.CV522_pid, heat_exchanger.TFP_CV522) annotation (Line(
              points={{-137,-4},{-130,-4},{-130,28},{-214,28},{-214,54},{-202,54}},
              color={0,0,127}));
        connect(tFP_duo_simple.CV122_pid, cold_exchanger.TFP_CV122) annotation (Line(
              points={{-137,-16},{-120,-16},{-120,38},{-152,38},{-152,54},{-142,54}},
              color={0,0,127}));
        connect(bou.ports[2], dEG_simple.port_b2) annotation (Line(
            points={{-180,-70},{-180,-94},{20,-94},{20,-76}},
            color={0,127,255},
            thickness=0.5));
        connect(dEG_simple.TT121_DEG, bou.T_in) annotation (Line(points={{30,-81},{30,
                -124},{-216,-124},{-216,-66},{-202,-66}}, color={0,0,127}));
        connect(fan1.port_b, dEC_simple.port_a1) annotation (Line(
            points={{20,110},{40,110},{40,116},{62,116}},
            color={238,46,47},
            thickness=0.5));
        connect(dEC_simple.port_b1, distribution_hot_simple.port_a) annotation (Line(
            points={{82,116},{114,116},{114,134},{150,134},{150,120}},
            color={238,46,47},
            thickness=0.5));
        connect(distribution_hot_simple.port_b, dEC_simple.port_a2) annotation (Line(
            points={{150,100},{150,82},{120,82},{120,104},{82,104}},
            color={238,46,47},
            thickness=0.5));
        connect(dEC_simple.port_b2, bou1.ports[2]) annotation (Line(
            points={{62,104},{46,104},{46,88},{-60,88}},
            color={238,46,47},
            thickness=0.5));
        connect(dEC_simple.TT521_DEC, bou1.T_in) annotation (Line(points={{72,99},{72,
                68},{-92,68},{-92,94},{-82,94}}, color={0,0,127}));
        connect(dEC_simple.DEC, dEC_controls_simple.DEC) annotation (Line(points={{85,
                110},{100,110},{100,191},{118,191}}, color={0,0,127}));
        connect(distribution_hot_simple.y, dEC_controls_simple.SST) annotation (Line(
              points={{161,110},{172,110},{172,148},{108,148},{108,182},{118,182}},
              color={0,0,127}));
        connect(dEC_controls_simple.HPSHC, dEG_controls_simple.TFP_DEC) annotation (
            Line(points={{162,197},{200,197},{200,40},{80,40},{80,-16},{118,-16}},
              color={255,127,0}));
        connect(dEC_controls_simple.m_flow, fan1.m_flow_in) annotation (Line(points={{
                162,180},{192,180},{192,140},{10,140},{10,122}}, color={0,0,127}));
        connect(bou2.ports[3], fan2.port_a) annotation (Line(
            points={{-280,109},{-262,109},{-262,110},{-240,110}},
            color={0,140,72},
            thickness=0.5));
        connect(fan2.port_b, heat_exchanger.port_a1) annotation (Line(
            points={{-220,110},{-210,110},{-210,56},{-200,56}},
            color={0,140,72},
            thickness=0.5));
        connect(fan2.port_b, cold_exchanger.port_a1) annotation (Line(
            points={{-220,110},{-158,110},{-158,60},{-140,60},{-140,56}},
            color={0,140,72},
            thickness=0.5));
        connect(fan2.port_b, chiller.port_a1) annotation (Line(
            points={{-220,110},{-100,110},{-100,-4},{-86,-4}},
            color={0,140,72},
            thickness=0.5));
        connect(combiTimeTable.y[1], bou2.T_in) annotation (Line(points={{-319,130},{-310,
                130},{-310,114},{-302,114}}, color={0,0,127}));
        connect(dEG_simple.TT121_DEG, tFP_duo_simple.DEG_TT121) annotation (Line(
              points={{30,-81},{30,-124},{-142,-124},{-142,-22}}, color={0,0,127}));
        connect(combiTimeTable.y[1], heat_exchanger.PEM_TT200) annotation (Line(
              points={{-319,130},{-310,130},{-310,46},{-202,46}}, color={0,0,127}));
        connect(combiTimeTable.y[1], cold_exchanger.PEM_TT200) annotation (Line(
              points={{-319,130},{-310,130},{-310,32},{-142,32},{-142,46}}, color={0,0,
                127}));
        connect(combiTimeTable.y[1], tFP_duo_simple.PEM_TT200) annotation (Line(
              points={{-319,130},{-310,130},{-310,-34},{-150,-34},{-150,-22}}, color={
                0,0,127}));
        connect(combiTimeTable.y[1], chiller.PEM_TT200) annotation (Line(points={{-319,
                130},{-310,130},{-310,-34},{-92,-34},{-92,0},{-88,0}}, color={0,0,127}));
        connect(dEG_controls_simple.HPSHC, heat_exchanger.mode) annotation (Line(
              points={{162,18},{220,18},{220,-150},{-234,-150},{-234,14},{-196,14},{-196,
                38}}, color={255,127,0}));
        connect(bou.ports[3], chiller.port_a2) annotation (Line(
            points={{-180,-72.6667},{-120,-72.6667},{-120,-72},{-60,-72},{-60,
                -16},{-66,-16}},
            color={0,127,255},
            thickness=0.5));
        connect(chiller.port_b2, fan.port_a) annotation (Line(
            points={{-86,-16},{-86,-52},{-50,-52},{-50,-70},{-40,-70}},
            color={0,127,255},
            thickness=0.5));
        connect(dEG_controls_simple.GF1, chiller.u) annotation (Line(points={{162,10},
                {198,10},{198,-136},{-102,-136},{-102,-10},{-88,-10}}, color={255,0,255}));
        connect(chiller.port_b1, bou2.ports[4]) annotation (Line(
            points={{-66,-4},{-40,-4},{-40,148},{-280,148},{-280,107}},
            color={0,140,72},
            thickness=0.5));
        annotation (
          Icon(coordinateSystem(preserveAspectRatio=false)),
          Diagram(coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=13132800,
            Interval=3600,
            __Dymola_Algorithm="Dassl"));
      end sst_nexi;

      model sst_nexi_tfp
      extends Modelica.Icons.Example;

        SST.distribution_cold_simple distribution_cold_simple(redeclare package
            Medium = Buildings.Media.Water) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={90,-70})));
        DEC_DEG.DEG_simple dEG_simple(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water)
          annotation (Placement(transformation(extent={{20,-80},{40,-60}})));
        Fluid.Sources.Boundary_pT bou(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=true,
          T=278.15,
          nPorts=2)
          annotation (Placement(transformation(extent={{-200,-80},{-180,-60}})));
        Buildings.Fluid.Movers.FlowControlled_m_flow fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=322/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_PEG per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          addPowerToMedium=false,
          dp_nominal(displayUnit="bar") = 1000000,
          constantMassFlowRate=320/3.6)
          annotation (Placement(transformation(extent={{-40,-80},{-20,-60}})));
        Buildings.Applications.DHC_Thassalia.TFP.TFP_duo_simple tFP_duo_simple(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          redeclare package Medium3 = Buildings.Media.Water,
          redeclare package Medium4 = Buildings.Media.Water,
          m1_flow_nominal=211/3.6,
          m2_flow_nominal=211/3.6,
          m3_flow_nominal=332/3.6,
          m4_flow_nominal=332/3.6)
          annotation (Placement(transformation(extent={{-160,-20},{-140,0}})));
        RJC.Heat_exchanger heat_exchanger(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water)
          annotation (Placement(transformation(extent={{-200,40},{-180,60}})));
        RJF.Cold_exchanger cold_exchanger(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water)
          annotation (Placement(transformation(extent={{-140,40},{-120,60}})));
        Buildings.Fluid.Movers.FlowControlled_m_flow fan1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=211/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_PEC per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          addPowerToMedium=false,
          dp_nominal(displayUnit="bar") = 1000000,
          constantMassFlowRate=205/3.6)
          annotation (Placement(transformation(extent={{0,100},{20,120}})));
        SST.distribution_hot_simple distribution_hot_simple(redeclare package
            Medium =
              Buildings.Media.Water) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={150,110})));
        Fluid.Sources.Boundary_pT bou1(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=true,
          T=278.15,
          nPorts=2)
          annotation (Placement(transformation(extent={{-80,80},{-60,100}})));
        Fluid.Sources.Boundary_pT bou2(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=true,
          T=278.15,
          nPorts=3)
          annotation (Placement(transformation(extent={{-300,100},{-280,120}})));
        DEC_DEG.DEC_simple dEC_simple(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water)
          annotation (Placement(transformation(extent={{62,100},{82,120}})));
        Buildings.Fluid.Movers.FlowControlled_dp fan2(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=800/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          dp_nominal(displayUnit="bar") = 200000,
          constantHead(displayUnit="bar") = 200000)
          annotation (Placement(transformation(extent={{-240,100},{-220,120}})));
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource("modelica://Buildings/Data/pem.txt"),
          columns={2,3,4})
          annotation (Placement(transformation(extent={{-340,120},{-320,140}})));

        Modelica.Blocks.Sources.IntegerExpression integerExpression(y=2)
          annotation (Placement(transformation(extent={{-296,-62},{-276,-42}})));
      equation
        connect(dEG_simple.port_b1, distribution_cold_simple.port_a)
          annotation (Line(points={{40,-64},{60,-64},{60,-50},{90,-50},{90,-60}},
                                                                     color={0,127,255},
            thickness=0.5));

        connect(distribution_cold_simple.port_b, dEG_simple.port_a2)
          annotation (Line(points={{90,-80},{90,-90},{60,-90},{60,-76},{40,-76}},
              color={0,127,255},
            thickness=0.5));
        connect(fan.port_b, dEG_simple.port_a1) annotation (Line(points={{-20,-70},{-2,
                -70},{-2,-64},{20,-64}},
                                      color={0,127,255},
            thickness=0.5));
        connect(tFP_duo_simple.port_a4, bou.ports[1]) annotation (Line(
            points={{-140,-18},{-134,-18},{-134,-68},{-180,-68}},
            color={0,127,255},
            thickness=0.5));
        connect(tFP_duo_simple.port_b4, fan.port_a) annotation (Line(
            points={{-160,-18.5},{-164,-18.5},{-164,-84},{-40,-84},{-40,-70}},
            color={0,127,255},
            thickness=0.5));
        connect(tFP_duo_simple.port_b3, cold_exchanger.port_a2) annotation (Line(
            points={{-140,-13.1},{-112,-13.1},{-112,44},{-120,44}},
            color={0,127,255},
            thickness=0.5));
        connect(cold_exchanger.port_b2, tFP_duo_simple.port_a3) annotation (Line(
            points={{-140,44},{-160,44},{-160,20},{-180,20},{-180,-13.2},{-160,-13.2}},
            color={0,127,255},
            thickness=0.5));

        connect(tFP_duo_simple.port_a2, heat_exchanger.port_a2) annotation (Line(
            points={{-140,-7},{-138,-7},{-138,-8},{-126,-8},{-126,34},{-172,34},{-172,
                44},{-180,44}},
            color={238,46,47},
            thickness=0.5));
        connect(heat_exchanger.port_b2, tFP_duo_simple.port_b2) annotation (Line(
            points={{-200,44},{-200,-7},{-160,-7}},
            color={238,46,47},
            thickness=0.5));
        connect(bou1.ports[1], tFP_duo_simple.port_a1) annotation (Line(
            points={{-60,92},{-50,92},{-50,12},{-166,12},{-166,-2},{-160,-2}},
            color={238,46,47},
            thickness=0.5));
        connect(tFP_duo_simple.port_b1, fan1.port_a) annotation (Line(
            points={{-140,-2},{-106,-2},{-106,52},{-14,52},{-14,110},{0,110}},
            color={238,46,47},
            thickness=0.5));
        connect(heat_exchanger.port_b1, bou2.ports[1]) annotation (Line(
            points={{-180,56},{-168,56},{-168,142},{-260,142},{-260,112.667},{
                -280,112.667}},
            color={0,140,72},
            thickness=0.5));

        connect(cold_exchanger.port_b1, bou2.ports[2]) annotation (Line(
            points={{-120,56},{-114,56},{-114,136},{-272,136},{-272,110},{-280,
                110}},
            color={0,140,72},
            thickness=0.5));

        connect(tFP_duo_simple.CV522_pid, heat_exchanger.TFP_CV522) annotation (Line(
              points={{-137,-4},{-130,-4},{-130,28},{-214,28},{-214,54},{-202,54}},
              color={0,0,127}));
        connect(tFP_duo_simple.CV122_pid, cold_exchanger.TFP_CV122) annotation (Line(
              points={{-137,-16},{-120,-16},{-120,38},{-152,38},{-152,54},{-142,54}},
              color={0,0,127}));
        connect(bou.ports[2], dEG_simple.port_b2) annotation (Line(
            points={{-180,-72},{-180,-94},{20,-94},{20,-76}},
            color={0,127,255},
            thickness=0.5));
        connect(dEG_simple.TT121_DEG, bou.T_in) annotation (Line(points={{30,-81},{30,
                -124},{-216,-124},{-216,-66},{-202,-66}}, color={0,0,127}));
        connect(fan1.port_b, dEC_simple.port_a1) annotation (Line(
            points={{20,110},{40,110},{40,116},{62,116}},
            color={238,46,47},
            thickness=0.5));
        connect(dEC_simple.port_b1, distribution_hot_simple.port_a) annotation (Line(
            points={{82,116},{114,116},{114,134},{150,134},{150,120}},
            color={238,46,47},
            thickness=0.5));
        connect(distribution_hot_simple.port_b, dEC_simple.port_a2) annotation (Line(
            points={{150,100},{150,82},{120,82},{120,104},{82,104}},
            color={238,46,47},
            thickness=0.5));
        connect(dEC_simple.port_b2, bou1.ports[2]) annotation (Line(
            points={{62,104},{46,104},{46,88},{-60,88}},
            color={238,46,47},
            thickness=0.5));
        connect(dEC_simple.TT521_DEC, bou1.T_in) annotation (Line(points={{72,99},{72,
                68},{-92,68},{-92,94},{-82,94}}, color={0,0,127}));
        connect(bou2.ports[3], fan2.port_a) annotation (Line(
            points={{-280,107.333},{-262,107.333},{-262,110},{-240,110}},
            color={0,140,72},
            thickness=0.5));
        connect(fan2.port_b, heat_exchanger.port_a1) annotation (Line(
            points={{-220,110},{-210,110},{-210,56},{-200,56}},
            color={0,140,72},
            thickness=0.5));
        connect(fan2.port_b, cold_exchanger.port_a1) annotation (Line(
            points={{-220,110},{-158,110},{-158,60},{-140,60},{-140,56}},
            color={0,140,72},
            thickness=0.5));
        connect(combiTimeTable.y[1], bou2.T_in) annotation (Line(points={{-319,130},{-310,
                130},{-310,114},{-302,114}}, color={0,0,127}));
        connect(dEG_simple.TT121_DEG, tFP_duo_simple.DEG_TT121) annotation (Line(
              points={{30,-81},{30,-124},{-142,-124},{-142,-22}}, color={0,0,127}));
        connect(combiTimeTable.y[1], heat_exchanger.PEM_TT200) annotation (Line(
              points={{-319,130},{-310,130},{-310,46},{-202,46}}, color={0,0,127}));
        connect(combiTimeTable.y[1], cold_exchanger.PEM_TT200) annotation (Line(
              points={{-319,130},{-310,130},{-310,32},{-142,32},{-142,46}}, color={0,0,
                127}));
        connect(combiTimeTable.y[1], tFP_duo_simple.PEM_TT200) annotation (Line(
              points={{-319,130},{-310,130},{-310,-34},{-150,-34},{-150,-22}}, color={
                0,0,127}));
        connect(integerExpression.y, tFP_duo_simple.mode) annotation (Line(
              points={{-275,-52},{-217.5,-52},{-217.5,-22},{-158,-22}}, color={
                255,127,0}));
        connect(integerExpression.y, heat_exchanger.mode) annotation (Line(
              points={{-275,-52},{-234,-52},{-234,38},{-196,38}}, color={255,
                127,0}));
        annotation (
          Icon(coordinateSystem(preserveAspectRatio=false)),
          Diagram(coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=13132800,
            Interval=3600,
            __Dymola_Algorithm="Dassl"));
      end sst_nexi_tfp;

      model sst_nexi_tfp_bis
      extends Modelica.Icons.Example;
        import Fluid;
        SST.distribution_cold_simple distribution_cold_simple(redeclare package
            Medium = Buildings.Media.Water) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={90,-70})));
        DEC_DEG.DEG_simple dEG_simple(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water)
          annotation (Placement(transformation(extent={{20,-80},{40,-60}})));
        Fluid.Sources.Boundary_pT bou(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=true,
          T=278.15,
          nPorts=2)
          annotation (Placement(transformation(extent={{-200,-80},{-180,-60}})));
        Buildings.Fluid.Movers.FlowControlled_m_flow fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=500/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_PEG per,
          inputType=Buildings.Fluid.Types.InputType.Continuous,
          addPowerToMedium=true,
          dp_nominal(displayUnit="bar") = 1000000,
          constantMassFlowRate=50/3.6)
          annotation (Placement(transformation(extent={{-40,-80},{-20,-60}})));
        Buildings.Fluid.Movers.FlowControlled_m_flow fan1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=211/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_PEC per,
          inputType=Buildings.Fluid.Types.InputType.Continuous,
          addPowerToMedium=true,
          dp_nominal(displayUnit="bar") = 1000000,
          constantMassFlowRate=50/3.6)
          annotation (Placement(transformation(extent={{0,100},{20,120}})));
        SST.distribution_hot_simple distribution_hot_simple(redeclare package
            Medium =
              Buildings.Media.Water) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={150,110})));
        Fluid.Sources.Boundary_pT bou1(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=true,
          T=278.15,
          nPorts=2)
          annotation (Placement(transformation(extent={{-80,80},{-60,100}})));
        DEC_DEG.DEC_simple dEC_simple(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water)
          annotation (Placement(transformation(extent={{62,100},{82,120}})));

        Modelica.Blocks.Sources.RealExpression realExpression(y=211/3.6)
          annotation (Placement(transformation(extent={{-60,140},{-40,160}})));
        Modelica.Blocks.Sources.RealExpression realExpression1(y=166/3.6)
          annotation (Placement(transformation(extent={{-60,-40},{-40,-20}})));
        Fluid.Chillers.ElectricReformulatedEIR TFPA(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=211/3.6,
          m2_flow_nominal=332/3.6/2,
          dp1_nominal=70000,
          dp2_nominal=70000,
          per=Fluid.Chillers.Data.ElectricReformulatedEIR.ReformEIRChiller_York_YT_2110kW_7_15COP_Vanes(
                    mEva_flow_nominal=166/3.6,
                    mCon_flow_nominal=211/3.6,
                    TEvaLvg_nominal=273.15 + 5,
                    TEvaLvgMin=273.15 + 4,
                    TEvaLvgMax=273.15 + 11,
                    TConLvg_nominal=273.15 + 61,
                    TConLvgMin=273.15 + 46,
                    TConLvgMax=273.15 + 63))
          annotation (Placement(transformation(extent={{-160,20},{-140,40}})));
        Modelica.Blocks.Sources.RealExpression realExpression2(y=4 + 273.15)
          annotation (Placement(transformation(extent={{-224,14},{-204,34}})));
        Modelica.Blocks.Sources.BooleanExpression booleanExpression(y=true)
          annotation (Placement(transformation(extent={{-220,40},{-200,60}})));
        Fluid.Sensors.TemperatureTwoPort TT121(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=322/3.6)
                                                         annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=270,
              origin={-130,-10})));
        Fluid.Sensors.TemperatureTwoPort TT1(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=322/3.6)
                                                         annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=90,
              origin={-160,-42})));
      equation
        connect(dEG_simple.port_b1, distribution_cold_simple.port_a)
          annotation (Line(points={{40,-64},{60,-64},{60,-50},{90,-50},{90,-60}},
                                                                     color={0,127,255},
            thickness=0.5));

        connect(distribution_cold_simple.port_b, dEG_simple.port_a2)
          annotation (Line(points={{90,-80},{90,-90},{60,-90},{60,-76},{40,-76}},
              color={0,127,255},
            thickness=0.5));
        connect(fan.port_b, dEG_simple.port_a1) annotation (Line(points={{-20,-70},{-2,
                -70},{-2,-64},{20,-64}},
                                      color={0,127,255},
            thickness=0.5));

        connect(bou.ports[1], dEG_simple.port_b2) annotation (Line(
            points={{-180,-68},{-180,-94},{20,-94},{20,-76}},
            color={0,127,255},
            thickness=0.5));
        connect(dEG_simple.TT121_DEG, bou.T_in) annotation (Line(points={{30,-81},{30,
                -124},{-216,-124},{-216,-66},{-202,-66}}, color={0,0,127}));
        connect(fan1.port_b, dEC_simple.port_a1) annotation (Line(
            points={{20,110},{40,110},{40,116},{62,116}},
            color={238,46,47},
            thickness=0.5));
        connect(dEC_simple.port_b1, distribution_hot_simple.port_a) annotation (Line(
            points={{82,116},{114,116},{114,134},{150,134},{150,120}},
            color={238,46,47},
            thickness=0.5));
        connect(distribution_hot_simple.port_b, dEC_simple.port_a2) annotation (Line(
            points={{150,100},{150,82},{120,82},{120,104},{82,104}},
            color={238,46,47},
            thickness=0.5));
        connect(dEC_simple.port_b2, bou1.ports[1]) annotation (Line(
            points={{62,104},{46,104},{46,92},{-60,92}},
            color={238,46,47},
            thickness=0.5));
        connect(dEC_simple.TT521_DEC, bou1.T_in) annotation (Line(points={{72,99},{72,
                68},{-92,68},{-92,94},{-82,94}}, color={0,0,127}));
        connect(realExpression.y, fan1.m_flow_in) annotation (Line(points={{-39,
                150},{10,150},{10,122}}, color={0,0,127}));
        connect(realExpression1.y, fan.m_flow_in) annotation (Line(points={{-39,
                -30},{-30,-30},{-30,-58}}, color={0,0,127}));
        connect(TFPA.port_b1, fan1.port_a) annotation (Line(points={{-140,36},{
                -24,36},{-24,110},{0,110}}, color={0,127,255}));
        connect(bou1.ports[2], TFPA.port_a1) annotation (Line(points={{-60,88},
                {-60,54},{-172,54},{-172,36},{-160,36}}, color={0,127,255}));
        connect(realExpression2.y, TFPA.TSet) annotation (Line(points={{-203,24},
                {-184,24},{-184,27},{-162,27}}, color={0,0,127}));
        connect(booleanExpression.y, TFPA.on) annotation (Line(points={{-199,50},
                {-180,50},{-180,33},{-162,33}}, color={255,0,255}));
        connect(TFPA.port_a2, TT121.port_b) annotation (Line(points={{-140,24},
                {-130,24},{-130,3.55271e-15}}, color={0,127,255}));
        connect(TT121.port_a, bou.ports[2]) annotation (Line(points={{-130,-20},
                {-130,-72},{-180,-72}}, color={0,127,255}));
        connect(TFPA.port_b2, TT1.port_a)
          annotation (Line(points={{-160,24},{-160,-32}}, color={0,127,255}));
        connect(TT1.port_b, fan.port_a) annotation (Line(points={{-160,-52},{
                -160,-70},{-40,-70}}, color={0,127,255}));
        annotation (
          Icon(coordinateSystem(preserveAspectRatio=false)),
          Diagram(coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=13132800,
            Interval=3600,
            __Dymola_Algorithm="Dassl"));
      end sst_nexi_tfp_bis;

      model sst_nexi_tfp_ter
      extends Modelica.Icons.Example;
        import Fluid;
        TFP.TFP_duo_simple tFP_duo_simple(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          redeclare package Medium3 = Buildings.Media.Water,
          redeclare package Medium4 = Buildings.Media.Water,
          m1_flow_nominal=211/3.6,
          m2_flow_nominal=211/3.6,
          m3_flow_nominal=322/3.6,
          m4_flow_nominal=322/3.6)
          annotation (Placement(transformation(extent={{-160,-20},{-140,0}})));
        RJC.Heat_exchanger heat_exchanger(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water)
          annotation (Placement(transformation(extent={{-200,40},{-180,60}})));
        RJF.Cold_exchanger cold_exchanger(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water)
          annotation (Placement(transformation(extent={{-140,40},{-120,60}})));
        Fluid.Sources.Boundary_pT bou2(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=true,
          T=278.15,
          nPorts=3)
          annotation (Placement(transformation(extent={{-300,100},{-280,120}})));
        Buildings.Fluid.Movers.FlowControlled_dp fan2(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=800/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          dp_nominal(displayUnit="bar") = 200000,
          constantHead(displayUnit="bar") = 200000)
          annotation (Placement(transformation(extent={{-240,100},{-220,120}})));
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource("modelica://Buildings/Data/pem.txt"),
          columns={2,3,4})
          annotation (Placement(transformation(extent={{-340,120},{-320,140}})));

        Modelica.Blocks.Sources.IntegerExpression integerExpression(y=2)
          annotation (Placement(transformation(extent={{-280,-20},{-260,0}})));
        Buildings.Fluid.Sources.Boundary_pT
                                  bou(
          redeclare package Medium = Buildings.Media.Water,
          T=285.15,
          nPorts=2) annotation (Placement(transformation(extent={{-242,-80},{-222,-60}})));
        Buildings.Fluid.Movers.FlowControlled_m_flow
                                           fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=350/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_PEG per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          dp_nominal(displayUnit="bar") = 500000,
          constantMassFlowRate=322/3.6) annotation (Placement(transformation(
                extent={{-200,-80},{-180,-60}})));
        Buildings.Fluid.Sources.Boundary_pT
                                  bou1(redeclare package Medium =
              Buildings.Media.Water, nPorts=2)
          annotation (Placement(transformation(extent={{-80,60},{-60,80}})));
        Buildings.Fluid.Movers.FlowControlled_m_flow
                                           fan1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=211/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_PEC per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          dp_nominal=500000,
          constantMassFlowRate=200/3.6)
          annotation (Placement(transformation(extent={{-20,60},{0,80}})));
        Buildings.Fluid.Sensors.TemperatureTwoPort
                                         TT111(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100)
          annotation (Placement(transformation(extent={{-160,-80},{-140,-60}})));
      equation

        connect(tFP_duo_simple.port_b3, cold_exchanger.port_a2) annotation (Line(
            points={{-140,-13.1},{-112,-13.1},{-112,44},{-120,44}},
            color={0,127,255},
            thickness=0.5));
        connect(cold_exchanger.port_b2, tFP_duo_simple.port_a3) annotation (Line(
            points={{-140,44},{-160,44},{-160,20},{-180,20},{-180,-13.2},{-160,-13.2}},
            color={0,127,255},
            thickness=0.5));

        connect(tFP_duo_simple.port_a2, heat_exchanger.port_a2) annotation (Line(
            points={{-140,-7},{-138,-7},{-138,-8},{-126,-8},{-126,34},{-172,34},{-172,
                44},{-180,44}},
            color={238,46,47},
            thickness=0.5));
        connect(heat_exchanger.port_b2, tFP_duo_simple.port_b2) annotation (Line(
            points={{-200,44},{-200,-7},{-160,-7}},
            color={238,46,47},
            thickness=0.5));
        connect(heat_exchanger.port_b1, bou2.ports[1]) annotation (Line(
            points={{-180,56},{-168,56},{-168,142},{-260,142},{-260,112.667},{
                -280,112.667}},
            color={0,140,72},
            thickness=0.5));

        connect(cold_exchanger.port_b1, bou2.ports[2]) annotation (Line(
            points={{-120,56},{-114,56},{-114,136},{-272,136},{-272,110},{-280,
                110}},
            color={0,140,72},
            thickness=0.5));

        connect(tFP_duo_simple.CV522_pid, heat_exchanger.TFP_CV522) annotation (Line(
              points={{-137,-4},{-130,-4},{-130,28},{-214,28},{-214,54},{-202,54}},
              color={0,0,127}));
        connect(tFP_duo_simple.CV122_pid, cold_exchanger.TFP_CV122) annotation (Line(
              points={{-137,-16},{-120,-16},{-120,38},{-152,38},{-152,54},{-142,54}},
              color={0,0,127}));
        connect(bou2.ports[3], fan2.port_a) annotation (Line(
            points={{-280,107.333},{-262,107.333},{-262,110},{-240,110}},
            color={0,140,72},
            thickness=0.5));
        connect(fan2.port_b, heat_exchanger.port_a1) annotation (Line(
            points={{-220,110},{-210,110},{-210,56},{-200,56}},
            color={0,140,72},
            thickness=0.5));
        connect(fan2.port_b, cold_exchanger.port_a1) annotation (Line(
            points={{-220,110},{-158,110},{-158,60},{-140,60},{-140,56}},
            color={0,140,72},
            thickness=0.5));
        connect(combiTimeTable.y[1], bou2.T_in) annotation (Line(points={{-319,130},{-310,
                130},{-310,114},{-302,114}}, color={0,0,127}));
        connect(combiTimeTable.y[1], heat_exchanger.PEM_TT200) annotation (Line(
              points={{-319,130},{-310,130},{-310,46},{-202,46}}, color={0,0,127}));
        connect(combiTimeTable.y[1], cold_exchanger.PEM_TT200) annotation (Line(
              points={{-319,130},{-310,130},{-310,32},{-142,32},{-142,46}}, color={0,0,
                127}));
        connect(combiTimeTable.y[1], tFP_duo_simple.PEM_TT200) annotation (Line(
              points={{-319,130},{-310,130},{-310,-34},{-150,-34},{-150,-22}}, color={
                0,0,127}));
        connect(integerExpression.y, tFP_duo_simple.mode) annotation (Line(
              points={{-259,-10},{-217.5,-10},{-217.5,-22},{-158,-22}}, color={
                255,127,0}));
        connect(integerExpression.y, heat_exchanger.mode) annotation (Line(
              points={{-259,-10},{-234,-10},{-234,38},{-196,38}}, color={255,
                127,0}));
        connect(bou.ports[1], fan.port_a) annotation (Line(
            points={{-222,-68},{-212,-68},{-212,-70},{-200,-70}},
            color={0,127,255},
            thickness=0.5));
        connect(tFP_duo_simple.port_b4, bou.ports[2]) annotation (Line(
            points={{-160,-18.5},{-170,-18.5},{-170,-18},{-204,-18},{-204,-72},{-222,-72}},
            color={0,127,255},
            thickness=0.5));

        connect(bou1.ports[1], fan1.port_a) annotation (Line(points={{-60,72},{-40,72},
                {-40,70},{-20,70}}, color={0,127,255}));
        connect(fan1.port_b, tFP_duo_simple.port_a1) annotation (Line(points={{0,70},{
                16,70},{16,10},{-170,10},{-170,-2},{-160,-2}}, color={0,127,255}));
        connect(tFP_duo_simple.port_b1, bou1.ports[2]) annotation (Line(points={{-140,
                -2},{-94,-2},{-94,34},{-54,34},{-54,68},{-60,68}}, color={0,127,255}));
        connect(fan.port_b, TT111.port_a) annotation (Line(
            points={{-180,-70},{-160,-70}},
            color={0,127,255},
            thickness=0.5));
        connect(TT111.port_b, tFP_duo_simple.port_a4) annotation (Line(
            points={{-140,-70},{-116,-70},{-116,-18},{-140,-18}},
            color={0,127,255},
            thickness=0.5));
        connect(TT111.T, tFP_duo_simple.DEG_TT121) annotation (Line(points={{-150,-59},
                {-150,-40},{-142,-40},{-142,-22}}, color={0,0,127}));
        annotation (
          Icon(coordinateSystem(preserveAspectRatio=false)),
          Diagram(coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=13132800,
            Interval=3600,
            __Dymola_Algorithm="Dassl"));
      end sst_nexi_tfp_ter;

      model sst_nexi_tfp_ter_somp
      extends Modelica.Icons.Example;
        import Fluid;
        TFP.TFP_duo_simple tFP_duo_simple(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          redeclare package Medium3 = Buildings.Media.Water,
          redeclare package Medium4 = Buildings.Media.Water,
          m1_flow_nominal=320/3.6,
          m2_flow_nominal=320/3.6,
          m3_flow_nominal=320/3.6,
          m4_flow_nominal=320/3.6)
          annotation (Placement(transformation(extent={{-160,-20},{-140,0}})));
        RJC.Heat_exchanger heat_exchanger(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water)
          annotation (Placement(transformation(extent={{-200,40},{-180,60}})));
        Fluid.Sources.Boundary_pT bou2(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=true,
          T=278.15,
          nPorts=2)
          annotation (Placement(transformation(extent={{-300,100},{-280,120}})));
        Buildings.Fluid.Movers.FlowControlled_dp fan2(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=800/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          dp_nominal(displayUnit="bar") = 200000,
          constantHead(displayUnit="bar") = 200000)
          annotation (Placement(transformation(extent={{-240,100},{-220,120}})));
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource("modelica://Buildings/Data/pem.txt"),
          columns={2,3,4})
          annotation (Placement(transformation(extent={{-340,120},{-320,140}})));

        Modelica.Blocks.Sources.IntegerExpression integerExpression(y=2)
          annotation (Placement(transformation(extent={{-280,-20},{-260,0}})));
        Buildings.Fluid.Sources.Boundary_pT
                                  bou(
          redeclare package Medium = Buildings.Media.Water,
          T=285.15,
          nPorts=2) annotation (Placement(transformation(extent={{-242,-80},{
                  -222,-60}})));
        Buildings.Fluid.Sources.Boundary_pT
                                  bou1(redeclare package Medium =
              Buildings.Media.Water, nPorts=2)
          annotation (Placement(transformation(extent={{-80,60},{-60,80}})));
        Buildings.Fluid.Movers.FlowControlled_m_flow
                                           fan1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=211/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_PEC per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          dp_nominal=500000,
          constantMassFlowRate=211/3.6)
          annotation (Placement(transformation(extent={{-20,60},{0,80}})));
        Buildings.Fluid.Sensors.TemperatureTwoPort
                                         TT111(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100)
          annotation (Placement(transformation(extent={{-160,-80},{-140,-60}})));
        Buildings.Fluid.Movers.FlowControlled_dp fan3(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=800/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          dp_nominal(displayUnit="bar") = 200000,
          constantHead(displayUnit="bar") = 200000)
          annotation (Placement(transformation(extent={{-194,-78},{-174,-58}})));
      equation

        connect(tFP_duo_simple.port_a2, heat_exchanger.port_a2) annotation (Line(
            points={{-140,-7},{-138,-7},{-138,-8},{-126,-8},{-126,34},{-172,34},{-172,
                44},{-180,44}},
            color={238,46,47},
            thickness=0.5));
        connect(heat_exchanger.port_b2, tFP_duo_simple.port_b2) annotation (Line(
            points={{-200,44},{-200,-7},{-160,-7}},
            color={238,46,47},
            thickness=0.5));
        connect(heat_exchanger.port_b1, bou2.ports[1]) annotation (Line(
            points={{-180,56},{-168,56},{-168,142},{-260,142},{-260,112},{-280,
                112}},
            color={0,140,72},
            thickness=0.5));

        connect(tFP_duo_simple.CV522_pid, heat_exchanger.TFP_CV522) annotation (Line(
              points={{-137,-4},{-130,-4},{-130,28},{-214,28},{-214,54},{-202,54}},
              color={0,0,127}));
        connect(bou2.ports[2], fan2.port_a) annotation (Line(
            points={{-280,108},{-262,108},{-262,110},{-240,110}},
            color={0,140,72},
            thickness=0.5));
        connect(fan2.port_b, heat_exchanger.port_a1) annotation (Line(
            points={{-220,110},{-210,110},{-210,56},{-200,56}},
            color={0,140,72},
            thickness=0.5));
        connect(combiTimeTable.y[1], bou2.T_in) annotation (Line(points={{-319,130},{-310,
                130},{-310,114},{-302,114}}, color={0,0,127}));
        connect(combiTimeTable.y[1], heat_exchanger.PEM_TT200) annotation (Line(
              points={{-319,130},{-310,130},{-310,46},{-202,46}}, color={0,0,127}));
        connect(combiTimeTable.y[1], tFP_duo_simple.PEM_TT200) annotation (Line(
              points={{-319,130},{-310,130},{-310,-34},{-150,-34},{-150,-22}}, color={
                0,0,127}));
        connect(integerExpression.y, tFP_duo_simple.mode) annotation (Line(
              points={{-259,-10},{-217.5,-10},{-217.5,-22},{-158,-22}}, color={
                255,127,0}));
        connect(integerExpression.y, heat_exchanger.mode) annotation (Line(
              points={{-259,-10},{-234,-10},{-234,38},{-196,38}}, color={255,
                127,0}));
        connect(tFP_duo_simple.port_b4, bou.ports[1]) annotation (Line(points={
                {-160,-18.5},{-170,-18.5},{-170,-18},{-204,-18},{-204,-68},{
                -222,-68}}, color={0,127,255}));
        connect(bou1.ports[1], fan1.port_a) annotation (Line(points={{-60,72},{
                -40,72},{-40,70},{-20,70}}, color={0,127,255}));
        connect(fan1.port_b, tFP_duo_simple.port_a1) annotation (Line(points={{
                0,70},{16,70},{16,10},{-170,10},{-170,-2},{-160,-2}}, color={0,
                127,255}));
        connect(tFP_duo_simple.port_b1, bou1.ports[2]) annotation (Line(points=
                {{-140,-2},{-94,-2},{-94,34},{-54,34},{-54,68},{-60,68}}, color=
               {0,127,255}));
        connect(TT111.port_b, tFP_duo_simple.port_a4) annotation (Line(points={
                {-140,-70},{-116,-70},{-116,-18},{-140,-18}}, color={0,127,255}));
        connect(TT111.T, tFP_duo_simple.DEG_TT121) annotation (Line(points={{
                -150,-59},{-150,-40},{-142,-40},{-142,-22}}, color={0,0,127}));
        connect(tFP_duo_simple.port_b3, tFP_duo_simple.port_a3) annotation (
            Line(points={{-140,-13.1},{-130,-13.1},{-130,-12},{-90,-12},{-90,
                -28},{-172,-28},{-172,-13.2},{-160,-13.2}}, color={0,127,255}));
        connect(bou.ports[2], fan3.port_a) annotation (Line(points={{-222,-72},
                {-209,-72},{-209,-68},{-194,-68}}, color={0,127,255}));
        connect(fan3.port_b, TT111.port_a) annotation (Line(points={{-174,-68},
                {-168,-68},{-168,-70},{-160,-70}}, color={0,127,255}));
        annotation (
          Icon(coordinateSystem(preserveAspectRatio=false)),
          Diagram(coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=13132800,
            Interval=3600,
            __Dymola_Algorithm="Dassl"));
      end sst_nexi_tfp_ter_somp;

      model sst_nexi_tfp_ter_essai
      extends Modelica.Icons.Example;
        import Fluid;
        TFP.TFP_duo_simple tFP_duo_simple(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          redeclare package Medium3 = Buildings.Media.Water,
          redeclare package Medium4 = Buildings.Media.Water,
          m1_flow_nominal=320/3.6,
          m2_flow_nominal=320/3.6,
          m3_flow_nominal=320/3.6,
          m4_flow_nominal=320/3.6)
          annotation (Placement(transformation(extent={{-160,-20},{-140,0}})));
        RJC.Heat_exchanger heat_exchanger(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water)
          annotation (Placement(transformation(extent={{-200,40},{-180,60}})));
        RJF.Cold_exchanger cold_exchanger(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water)
          annotation (Placement(transformation(extent={{-140,40},{-120,60}})));
        Fluid.Sources.Boundary_pT bou2(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=true,
          T=278.15,
          nPorts=3)
          annotation (Placement(transformation(extent={{-300,100},{-280,120}})));
        Buildings.Fluid.Movers.FlowControlled_dp fan2(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=800/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          dp_nominal(displayUnit="bar") = 200000,
          constantHead(displayUnit="bar") = 200000)
          annotation (Placement(transformation(extent={{-240,100},{-220,120}})));
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource("modelica://Buildings/Data/pem.txt"),
          columns={2,3,4})
          annotation (Placement(transformation(extent={{-340,120},{-320,140}})));

        Modelica.Blocks.Sources.IntegerExpression integerExpression(y=3)
          annotation (Placement(transformation(extent={{-280,-20},{-260,0}})));
        Buildings.Fluid.Sources.Boundary_pT
                                  bou(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=true,
          T=285.15,
          nPorts=2) annotation (Placement(transformation(extent={{-242,-80},{
                  -222,-60}})));
        Buildings.Fluid.Sources.Boundary_pT
                                  bou1(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=true,
          nPorts=2)
          annotation (Placement(transformation(extent={{-80,60},{-60,80}})));
        Buildings.Fluid.Sensors.TemperatureTwoPort
                                         TT111(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100)
          annotation (Placement(transformation(extent={{-160,-80},{-140,-60}})));
        Buildings.Fluid.Sensors.TemperatureTwoPort
                                         TT1(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100)
          annotation (Placement(transformation(extent={{-84,24},{-64,44}})));
        Buildings.Fluid.Sensors.TemperatureTwoPort
                                         TT2(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=100)
          annotation (Placement(transformation(extent={{-108,-124},{-128,-104}})));
        Buildings.Fluid.Movers.FlowControlled_m_flow fan1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=211/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_PEC per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          addPowerToMedium=true,
          dp_nominal(displayUnit="bar") = 200000,
          constantMassFlowRate=200/3.6)
          annotation (Placement(transformation(extent={{0,88},{20,108}})));
        SST.distribution_hot_simple distribution_hot_simple(redeclare package
            Medium = Buildings.Media.Water)
                                     annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={150,98})));
        DEC_DEG.DEC_simple dEC_simple(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water)
          annotation (Placement(transformation(extent={{64,66},{84,86}})));
        SST.distribution_cold_simple distribution_cold_simple(redeclare package
            Medium = Buildings.Media.Water) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=-90,
              origin={48,-72})));
        DEC_DEG.DEG_simple dEG_simple(redeclare package Medium1 =
              Buildings.Media.Water, redeclare package Medium2 =
              Buildings.Media.Water)
          annotation (Placement(transformation(extent={{-22,-82},{-2,-62}})));
        Buildings.Fluid.Movers.FlowControlled_m_flow fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=500/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_PEG per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          addPowerToMedium=true,
          dp_nominal(displayUnit="bar") = 200000,
          constantMassFlowRate=160/3.6)
          annotation (Placement(transformation(extent={{-82,-82},{-62,-62}})));
      equation

        connect(tFP_duo_simple.port_b3, cold_exchanger.port_a2) annotation (Line(
            points={{-140,-13.1},{-112,-13.1},{-112,44},{-120,44}},
            color={0,127,255},
            thickness=0.5));
        connect(cold_exchanger.port_b2, tFP_duo_simple.port_a3) annotation (Line(
            points={{-140,44},{-160,44},{-160,20},{-180,20},{-180,-13.2},{-160,-13.2}},
            color={0,127,255},
            thickness=0.5));

        connect(heat_exchanger.port_b1, bou2.ports[1]) annotation (Line(
            points={{-180,56},{-168,56},{-168,142},{-260,142},{-260,112.667},{
                -280,112.667}},
            color={0,140,72},
            thickness=0.5));

        connect(cold_exchanger.port_b1, bou2.ports[2]) annotation (Line(
            points={{-120,56},{-114,56},{-114,136},{-272,136},{-272,110},{-280,
                110}},
            color={0,140,72},
            thickness=0.5));

        connect(tFP_duo_simple.CV522_pid, heat_exchanger.TFP_CV522) annotation (Line(
              points={{-137,-4},{-130,-4},{-130,28},{-214,28},{-214,54},{-202,54}},
              color={0,0,127}));
        connect(tFP_duo_simple.CV122_pid, cold_exchanger.TFP_CV122) annotation (Line(
              points={{-137,-16},{-120,-16},{-120,38},{-152,38},{-152,54},{-142,54}},
              color={0,0,127}));
        connect(bou2.ports[3], fan2.port_a) annotation (Line(
            points={{-280,107.333},{-262,107.333},{-262,110},{-240,110}},
            color={0,140,72},
            thickness=0.5));
        connect(fan2.port_b, heat_exchanger.port_a1) annotation (Line(
            points={{-220,110},{-210,110},{-210,56},{-200,56}},
            color={0,140,72},
            thickness=0.5));
        connect(fan2.port_b, cold_exchanger.port_a1) annotation (Line(
            points={{-220,110},{-158,110},{-158,60},{-140,60},{-140,56}},
            color={0,140,72},
            thickness=0.5));
        connect(combiTimeTable.y[1], bou2.T_in) annotation (Line(points={{-319,130},{-310,
                130},{-310,114},{-302,114}}, color={0,0,127}));
        connect(combiTimeTable.y[1], heat_exchanger.PEM_TT200) annotation (Line(
              points={{-319,130},{-310,130},{-310,46},{-202,46}}, color={0,0,127}));
        connect(combiTimeTable.y[1], cold_exchanger.PEM_TT200) annotation (Line(
              points={{-319,130},{-310,130},{-310,32},{-142,32},{-142,46}}, color={0,0,
                127}));
        connect(combiTimeTable.y[1], tFP_duo_simple.PEM_TT200) annotation (Line(
              points={{-319,130},{-310,130},{-310,-34},{-150,-34},{-150,-22}}, color={
                0,0,127}));
        connect(integerExpression.y, tFP_duo_simple.mode) annotation (Line(
              points={{-259,-10},{-217.5,-10},{-217.5,-22},{-158,-22}}, color={
                255,127,0}));
        connect(integerExpression.y, heat_exchanger.mode) annotation (Line(
              points={{-259,-10},{-234,-10},{-234,38},{-196,38}}, color={255,
                127,0}));
        connect(TT111.T, tFP_duo_simple.DEG_TT121) annotation (Line(points={{
                -150,-59},{-150,-40},{-142,-40},{-142,-22}}, color={0,0,127}));
        connect(tFP_duo_simple.port_a4, bou.ports[1]) annotation (Line(points={
                {-140,-18},{-140,-50},{-222,-50},{-222,-68}}, color={0,127,255}));
        connect(tFP_duo_simple.port_b1, TT1.port_a) annotation (Line(points={{
                -140,-2},{-94,-2},{-94,34},{-84,34}}, color={0,127,255}));
        connect(TT1.port_b, bou1.ports[1]) annotation (Line(points={{-64,34},{
                -54,34},{-54,72},{-60,72}}, color={0,127,255}));
        connect(TT2.port_b, bou.ports[2]) annotation (Line(points={{-128,-114},
                {-176,-114},{-176,-134},{-222,-134},{-222,-72}}, color={0,127,
                255}));
        connect(TT2.T, bou.T_in) annotation (Line(points={{-118,-103},{-118,
                -100},{-244,-100},{-244,-66}}, color={0,0,127}));
        connect(tFP_duo_simple.port_b4, TT111.port_a) annotation (Line(points={
                {-160,-18.5},{-178,-18.5},{-178,-70},{-160,-70}}, color={0,127,
                255}));
        connect(fan1.port_b,dEC_simple. port_a1) annotation (Line(
            points={{20,98},{40,98},{40,82},{64,82}},
            color={238,46,47},
            thickness=0.5));
        connect(dEC_simple.port_b1,distribution_hot_simple. port_a) annotation (Line(
            points={{84,82},{114,82},{114,122},{150,122},{150,108}},
            color={238,46,47},
            thickness=0.5));
        connect(distribution_hot_simple.port_b,dEC_simple. port_a2) annotation (Line(
            points={{150,88},{150,70},{84,70}},
            color={238,46,47},
            thickness=0.5));
        connect(dEC_simple.TT521_DEC, bou1.T_in) annotation (Line(points={{74,65},
                {74,56},{-92,56},{-92,74},{-82,74}},
                                                 color={0,0,127}));
        connect(dEC_simple.port_b2, tFP_duo_simple.port_a1) annotation (Line(
              points={{64,70},{16,70},{16,8},{-166,8},{-166,-2},{-160,-2}},
              color={0,127,255}));
        connect(bou1.ports[2], fan1.port_a) annotation (Line(points={{-60,68},{
                -32,68},{-32,98},{0,98}}, color={0,127,255}));
        connect(TT111.port_b, fan.port_a) annotation (Line(points={{-140,-70},{
                -110,-70},{-110,-72},{-82,-72}}, color={0,127,255}));
        connect(fan.port_b, dEG_simple.port_a1) annotation (Line(points={{-62,
                -72},{-42,-72},{-42,-66},{-22,-66}}, color={0,127,255}));
        connect(dEG_simple.port_b1, distribution_cold_simple.port_a)
          annotation (Line(points={{-2,-66},{26,-66},{26,-60},{48,-60},{48,-62}},
              color={0,127,255}));
        connect(distribution_cold_simple.port_b, dEG_simple.port_a2)
          annotation (Line(points={{48,-82},{24,-82},{24,-78},{-2,-78}}, color=
                {0,127,255}));
        connect(dEG_simple.port_b2, TT2.port_a) annotation (Line(points={{-22,
                -78},{-66,-78},{-66,-114},{-108,-114}}, color={0,127,255}));
        connect(tFP_duo_simple.port_a2, heat_exchanger.port_b2) annotation (
            Line(points={{-140,-7},{-138,-7},{-138,-8},{-124,-8},{-124,22},{
                -210,22},{-210,44},{-200,44}}, color={0,127,255}));
        connect(tFP_duo_simple.port_b2, heat_exchanger.port_a2) annotation (
            Line(points={{-160,-7},{-166,-7},{-166,-6},{-192,-6},{-192,36},{
                -174,36},{-174,44},{-180,44}}, color={0,127,255}));
        annotation (
          Icon(coordinateSystem(preserveAspectRatio=false)),
          Diagram(coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=13132800,
            Interval=3600,
            __Dymola_Algorithm="Dassl"));
      end sst_nexi_tfp_ter_essai;

      model give_up
      extends Modelica.Icons.Example;
        import Fluid;
        Fluid.Sources.Boundary_pT bou(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=true,
          T=283.15,
          nPorts=2)
          annotation (Placement(transformation(extent={{-100,-80},{-80,-60}})));
        Buildings.Fluid.Movers.FlowControlled_m_flow fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=500/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_PEG per,
          inputType=Buildings.Fluid.Types.InputType.Continuous,
          addPowerToMedium=true,
          dp_nominal(displayUnit="bar") = 1000000,
          constantMassFlowRate=50/3.6)
          annotation (Placement(transformation(extent={{60,-80},{80,-60}})));
        Buildings.Fluid.Movers.FlowControlled_m_flow fan1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=211/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_PEC per,
          inputType=Buildings.Fluid.Types.InputType.Continuous,
          addPowerToMedium=true,
          dp_nominal(displayUnit="bar") = 1000000,
          constantMassFlowRate=50/3.6)
          annotation (Placement(transformation(extent={{60,60},{80,80}})));
        Fluid.Sources.Boundary_pT bou1(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=true,
          T=323.15,
          nPorts=2)
          annotation (Placement(transformation(extent={{-112,80},{-92,100}})));

        Modelica.Blocks.Sources.RealExpression realExpression(y=211/3.6)
          annotation (Placement(transformation(extent={{-60,140},{-40,160}})));
        Modelica.Blocks.Sources.RealExpression realExpression1(y=166/3.6)
          annotation (Placement(transformation(extent={{40,-40},{60,-20}})));
        Modelica.Blocks.Sources.RealExpression realExpression2(y=4 + 273.15)
          annotation (Placement(transformation(extent={{-110,26},{-90,46}})));
        Fluid.Sensors.TemperatureTwoPort TT121(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=322/3.6)
                                                         annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=270,
              origin={-30,-10})));
        Fluid.Sensors.TemperatureTwoPort TT1(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=322/3.6)
                                                         annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=90,
              origin={-60,-42})));
        Fluid.Sensors.TemperatureTwoPort TT2(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=322/3.6)
                                                         annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={30,30})));
        Fluid.Chillers.Carnot_TEva TFPA(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=211/3.6,
          m2_flow_nominal=166/3.6/2,
          QEva_flow_nominal=-166/3.6*4185*(7),
          dTEva_nominal=-7,
          dTCon_nominal=15,
          use_eta_Carnot_nominal=true,
          etaCarnot_nominal=0.95,
          COP_nominal=6.5,
          TCon_nominal=313.15,
          dp1_nominal=40000,
          dp2_nominal=40000,
          QEva_flow_min(displayUnit="kW") = -1800000)
          annotation (Placement(transformation(extent={{-64,0},{-44,20}})));
      equation

        connect(realExpression.y, fan1.m_flow_in) annotation (Line(points={{-39,150},
                {70,150},{70,82}},       color={0,0,127}));
        connect(realExpression1.y, fan.m_flow_in) annotation (Line(points={{61,-30},
                {70,-30},{70,-58}},        color={0,0,127}));
        connect(TT121.port_a, bou.ports[1]) annotation (Line(points={{-30,-20},
                {-30,-68},{-80,-68}},   color={0,127,255}));
        connect(TT1.port_b, fan.port_a) annotation (Line(points={{-60,-52},{-60,
                -60},{10,-60},{10,-70},{60,-70}},
                                      color={0,127,255}));
        connect(fan.port_b, bou.ports[2]) annotation (Line(points={{80,-70},{88,
                -70},{88,-72},{96,-72},{96,-92},{-80,-92},{-80,-72}}, color={0,
                127,255}));
        connect(TT2.port_b, fan1.port_a) annotation (Line(points={{40,30},{50,
                30},{50,70},{60,70}}, color={0,127,255}));
        connect(fan1.port_b, bou1.ports[1]) annotation (Line(points={{80,70},{
                98,70},{98,92},{-92,92}}, color={0,127,255}));
        connect(realExpression2.y, TFPA.TSet) annotation (Line(points={{-89,36},
                {-84,36},{-84,19},{-66,19}}, color={0,0,127}));
        connect(bou1.ports[2], TFPA.port_a1) annotation (Line(points={{-92,88},
                {-80,88},{-80,16},{-64,16}}, color={0,127,255}));
        connect(TFPA.port_b1, TT2.port_a) annotation (Line(points={{-44,16},{0,
                16},{0,30},{20,30}}, color={0,127,255}));
        connect(TT121.port_b, TFPA.port_a2) annotation (Line(points={{-30,0},{
                -30,4},{-44,4}}, color={0,127,255}));
        connect(TFPA.port_b2, TT1.port_a) annotation (Line(points={{-64,4},{-68,
                4},{-68,-18},{-60,-18},{-60,-32}}, color={0,127,255}));
        connect(TT2.T, bou1.T_in) annotation (Line(points={{30,41},{30,60},{
                -122,60},{-122,94},{-114,94}}, color={0,0,127}));
        connect(TT1.T, bou.T_in) annotation (Line(points={{-49,-42},{-42,-42},{
                -42,-26},{-112,-26},{-112,-66},{-102,-66}}, color={0,0,127}));
        annotation (
          Icon(coordinateSystem(preserveAspectRatio=false)),
          Diagram(coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=13132800,
            Interval=3600,
            __Dymola_Algorithm="Dassl"));
      end give_up;

      model give_up_b
      extends Modelica.Icons.Example;
        import Fluid;
        Fluid.Sources.Boundary_pT bou(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=true,
          T=283.15,
          nPorts=2)
          annotation (Placement(transformation(extent={{-100,-80},{-80,-60}})));
        Buildings.Fluid.Movers.FlowControlled_m_flow fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=500/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_PEG per,
          inputType=Buildings.Fluid.Types.InputType.Continuous,
          addPowerToMedium=true,
          dp_nominal(displayUnit="bar") = 1000000,
          constantMassFlowRate=50/3.6)
          annotation (Placement(transformation(extent={{60,-80},{80,-60}})));
        Buildings.Fluid.Movers.FlowControlled_m_flow fan1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=211/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_PEC per,
          inputType=Buildings.Fluid.Types.InputType.Continuous,
          addPowerToMedium=true,
          dp_nominal(displayUnit="bar") = 1000000,
          constantMassFlowRate=50/3.6)
          annotation (Placement(transformation(extent={{60,60},{80,80}})));
        Fluid.Sources.Boundary_pT bou1(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=true,
          T=323.15,
          nPorts=2)
          annotation (Placement(transformation(extent={{-112,80},{-92,100}})));

        Modelica.Blocks.Sources.RealExpression realExpression(y=211/3.6)
          annotation (Placement(transformation(extent={{-60,140},{-40,160}})));
        Modelica.Blocks.Sources.RealExpression realExpression1(y=166/3.6)
          annotation (Placement(transformation(extent={{40,-40},{60,-20}})));
        Modelica.Blocks.Sources.RealExpression realExpression2(y=4 + 273.15)
          annotation (Placement(transformation(extent={{-110,26},{-90,46}})));
        Fluid.Sensors.TemperatureTwoPort TT121(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=322/3.6)
                                                         annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=270,
              origin={-26,-22})));
        Fluid.Sensors.TemperatureTwoPort TT1(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=322/3.6)
                                                         annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=90,
              origin={-60,-42})));
        Fluid.Sensors.TemperatureTwoPort TT2(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=322/3.6)
                                                         annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={30,30})));
        Buildings.Fluid.Chillers.ElectricReformulatedEIR
          electricReformulatedEIR(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=211/3.6,
          m2_flow_nominal=166/3.6,
          dp1_nominal=50000,
          dp2_nominal=50000,
          per=Buildings.Fluid.Chillers.Data.ElectricReformulatedEIR.ReformEIRChiller_York_YT_2110kW_7_15COP_Vanes(
              TConLvgMin=273.15 + 40, TConLvgMax=273.15 + 70))
          annotation (Placement(transformation(extent={{-60,0},{-40,20}})));
        Modelica.Blocks.Sources.BooleanExpression booleanExpression(y=true)
          annotation (Placement(transformation(extent={{-120,0},{-100,20}})));
      equation

        connect(realExpression.y, fan1.m_flow_in) annotation (Line(points={{-39,150},
                {70,150},{70,82}},       color={0,0,127}));
        connect(realExpression1.y, fan.m_flow_in) annotation (Line(points={{61,-30},
                {70,-30},{70,-58}},        color={0,0,127}));
        connect(TT121.port_a, bou.ports[1]) annotation (Line(points={{-26,-32},
                {-26,-68},{-80,-68}},   color={0,127,255}));
        connect(TT1.port_b, fan.port_a) annotation (Line(points={{-60,-52},{-60,
                -60},{10,-60},{10,-70},{60,-70}},
                                      color={0,127,255}));
        connect(fan.port_b, bou.ports[2]) annotation (Line(points={{80,-70},{88,
                -70},{88,-72},{96,-72},{96,-92},{-80,-92},{-80,-72}}, color={0,
                127,255}));
        connect(TT2.port_b, fan1.port_a) annotation (Line(points={{40,30},{50,
                30},{50,70},{60,70}}, color={0,127,255}));
        connect(fan1.port_b, bou1.ports[1]) annotation (Line(points={{80,70},{
                98,70},{98,92},{-92,92}}, color={0,127,255}));
        connect(TT2.T, bou1.T_in) annotation (Line(points={{30,41},{30,60},{
                -122,60},{-122,94},{-114,94}}, color={0,0,127}));
        connect(TT1.T, bou.T_in) annotation (Line(points={{-49,-42},{-42,-42},{
                -42,-26},{-112,-26},{-112,-66},{-102,-66}}, color={0,0,127}));
        connect(realExpression2.y, electricReformulatedEIR.TSet) annotation (
            Line(points={{-89,36},{-80,36},{-80,8},{-72,8},{-72,7},{-62,7}},
              color={0,0,127}));
        connect(bou1.ports[2], electricReformulatedEIR.port_a1) annotation (
            Line(points={{-92,88},{-70,88},{-70,16},{-60,16}}, color={0,127,255}));
        connect(electricReformulatedEIR.port_b1, TT2.port_a) annotation (Line(
              points={{-40,16},{-10,16},{-10,30},{20,30}}, color={0,127,255}));
        connect(TT1.port_a, electricReformulatedEIR.port_b2)
          annotation (Line(points={{-60,-32},{-60,4}}, color={0,127,255}));
        connect(TT121.port_b, electricReformulatedEIR.port_a2) annotation (Line(
              points={{-26,-12},{-26,4},{-40,4}}, color={0,127,255}));
        connect(booleanExpression.y, electricReformulatedEIR.on) annotation (
            Line(points={{-99,10},{-82,10},{-82,13},{-62,13}}, color={255,0,255}));
        annotation (
          Icon(coordinateSystem(preserveAspectRatio=false)),
          Diagram(coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=13132800,
            Interval=3600,
            __Dymola_Algorithm="Dassl"));
      end give_up_b;

      model give_up_c
      extends Modelica.Icons.Example;
        import Fluid;
        Fluid.Sources.Boundary_pT bou(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=true,
          T=283.15,
          nPorts=2)
          annotation (Placement(transformation(extent={{-100,-80},{-80,-60}})));
        Buildings.Fluid.Movers.FlowControlled_m_flow fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=500/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_PEG per,
          inputType=Buildings.Fluid.Types.InputType.Continuous,
          addPowerToMedium=true,
          dp_nominal(displayUnit="bar") = 1000000,
          constantMassFlowRate=50/3.6)
          annotation (Placement(transformation(extent={{60,-80},{80,-60}})));
        Buildings.Fluid.Movers.FlowControlled_m_flow fan1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=211/3.6,
          redeclare Buildings.Fluid.Movers.Data.Pumps.KSB.KSB_PEC per,
          inputType=Buildings.Fluid.Types.InputType.Continuous,
          addPowerToMedium=true,
          dp_nominal(displayUnit="bar") = 1000000,
          constantMassFlowRate=50/3.6)
          annotation (Placement(transformation(extent={{60,60},{80,80}})));
        Fluid.Sources.Boundary_pT bou1(
          redeclare package Medium = Buildings.Media.Water,
          use_T_in=true,
          T=323.15,
          nPorts=2)
          annotation (Placement(transformation(extent={{-112,80},{-92,100}})));

        Modelica.Blocks.Sources.RealExpression realExpression(y=211/3.6)
          annotation (Placement(transformation(extent={{-60,140},{-40,160}})));
        Modelica.Blocks.Sources.RealExpression realExpression1(y=166/3.6)
          annotation (Placement(transformation(extent={{40,-40},{60,-20}})));
        Modelica.Blocks.Sources.RealExpression realExpression2(y=4 + 273.15)
          annotation (Placement(transformation(extent={{-110,26},{-90,46}})));
        Fluid.Sensors.TemperatureTwoPort TT121(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=322/3.6)
                                                         annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=270,
              origin={-26,-22})));
        Fluid.Sensors.TemperatureTwoPort TT1(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=322/3.6)
                                                         annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=90,
              origin={-60,-42})));
        Fluid.Sensors.TemperatureTwoPort TT2(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=322/3.6)
                                                         annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={30,30})));
        Buildings.Fluid.Chillers.ElectricReformulatedEIR
          electricReformulatedEIR(
          redeclare package Medium1 = Buildings.Media.Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=211/3.6,
          m2_flow_nominal=166/3.6,
          dp1_nominal=50000,
          dp2_nominal=50000,
          per=Buildings.Fluid.Chillers.Data.ElectricReformulatedEIR.ReformEIRChiller_York_YT_2110kW_7_15COP_Vanes(
              TConLvgMin=273.15 + 40, TConLvgMax=273.15 + 70))
          annotation (Placement(transformation(extent={{-60,0},{-40,20}})));
        Modelica.Blocks.Sources.BooleanExpression booleanExpression(y=true)
          annotation (Placement(transformation(extent={{-120,0},{-100,20}})));
      equation

        connect(realExpression.y, fan1.m_flow_in) annotation (Line(points={{-39,150},
                {70,150},{70,82}},       color={0,0,127}));
        connect(realExpression1.y, fan.m_flow_in) annotation (Line(points={{61,-30},
                {70,-30},{70,-58}},        color={0,0,127}));
        connect(TT121.port_a, bou.ports[1]) annotation (Line(points={{-26,-32},
                {-26,-68},{-80,-68}},   color={0,127,255}));
        connect(TT1.port_b, fan.port_a) annotation (Line(points={{-60,-52},{-60,
                -60},{10,-60},{10,-70},{60,-70}},
                                      color={0,127,255}));
        connect(fan.port_b, bou.ports[2]) annotation (Line(points={{80,-70},{88,
                -70},{88,-72},{96,-72},{96,-92},{-80,-92},{-80,-72}}, color={0,
                127,255}));
        connect(TT2.port_b, fan1.port_a) annotation (Line(points={{40,30},{50,
                30},{50,70},{60,70}}, color={0,127,255}));
        connect(fan1.port_b, bou1.ports[1]) annotation (Line(points={{80,70},{
                98,70},{98,92},{-92,92}}, color={0,127,255}));
        connect(TT2.T, bou1.T_in) annotation (Line(points={{30,41},{30,60},{
                -122,60},{-122,94},{-114,94}}, color={0,0,127}));
        connect(TT1.T, bou.T_in) annotation (Line(points={{-49,-42},{-42,-42},{
                -42,-26},{-112,-26},{-112,-66},{-102,-66}}, color={0,0,127}));
        connect(realExpression2.y, electricReformulatedEIR.TSet) annotation (
            Line(points={{-89,36},{-80,36},{-80,8},{-72,8},{-72,7},{-62,7}},
              color={0,0,127}));
        connect(bou1.ports[2], electricReformulatedEIR.port_a1) annotation (
            Line(points={{-92,88},{-70,88},{-70,16},{-60,16}}, color={0,127,255}));
        connect(electricReformulatedEIR.port_b1, TT2.port_a) annotation (Line(
              points={{-40,16},{-10,16},{-10,30},{20,30}}, color={0,127,255}));
        connect(TT1.port_a, electricReformulatedEIR.port_b2)
          annotation (Line(points={{-60,-32},{-60,4}}, color={0,127,255}));
        connect(TT121.port_b, electricReformulatedEIR.port_a2) annotation (Line(
              points={{-26,-12},{-26,4},{-40,4}}, color={0,127,255}));
        connect(booleanExpression.y, electricReformulatedEIR.on) annotation (
            Line(points={{-99,10},{-82,10},{-82,13},{-62,13}}, color={255,0,255}));
        annotation (
          Icon(coordinateSystem(preserveAspectRatio=false)),
          Diagram(coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=13132800,
            Interval=3600,
            __Dymola_Algorithm="Dassl"));
      end give_up_c;
    end Tests;
  end Plant;

  package Media "Package with medium models"
  extends Modelica.Icons.Package;
    package Sea_Water
      "Package with model for sea water with constant density"
       extends Modelica.Media.Water.ConstantPropertyLiquidWater(
       cp_const=3979,
       d_const= 1025,
         final cv_const=cp_const,
         p_default=300000,
         reference_p=300000,
         reference_T=273.15,
         reference_X={1},
         AbsolutePressure(start=p_default),
         Temperature(start=T_default),
         Density(start=d_const));
      // cp_const and cv_const have been made final because the model sets u=h.
      extends Modelica.Icons.Package;

      redeclare model BaseProperties "Base properties"
        Temperature T(stateSelect=
          if preferredMediumStates then StateSelect.prefer else StateSelect.default)
          "Temperature of medium";
        InputAbsolutePressure p "Absolute pressure of medium";
        InputMassFraction[nXi] Xi=fill(0, 0)
          "Structurally independent mass fractions";
        InputSpecificEnthalpy h "Specific enthalpy of medium";
        Modelica.SIunits.SpecificInternalEnergy u
          "Specific internal energy of medium";
        Modelica.SIunits.Density d=d_const "Density of medium";
        Modelica.SIunits.MassFraction[nX] X={1}
          "Mass fractions (= (component mass)/total mass  m_i/m)";
        final Modelica.SIunits.SpecificHeatCapacity R=0
          "Gas constant (of mixture if applicable)";
        final Modelica.SIunits.MolarMass MM=MM_const
          "Molar mass (of mixture or single fluid)";
        ThermodynamicState state
          "Thermodynamic state record for optional functions";
        parameter Boolean preferredMediumStates=false
          "= true if StateSelect.prefer shall be used for the independent property variables of the medium"
          annotation(Evaluate=true, Dialog(tab="Advanced"));
        final parameter Boolean standardOrderComponents=true
          "If true, and reducedX = true, the last element of X will be computed from the other ones";
        Modelica.SIunits.Conversions.NonSIunits.Temperature_degC T_degC=
            Modelica.SIunits.Conversions.to_degC(T)
          "Temperature of medium in [degC]";
        Modelica.SIunits.Conversions.NonSIunits.Pressure_bar p_bar=
            Modelica.SIunits.Conversions.to_bar(p)
          "Absolute pressure of medium in [bar]";

        // Local connector definition, used for equation balancing check
        connector InputAbsolutePressure = input
            Modelica.SIunits.AbsolutePressure
          "Pressure as input signal connector";
        connector InputSpecificEnthalpy = input
            Modelica.SIunits.SpecificEnthalpy
          "Specific enthalpy as input signal connector";
        connector InputMassFraction = input Modelica.SIunits.MassFraction
          "Mass fraction as input signal connector";

      equation
        assert(T >= T_min,
                       "
  In "     + getInstanceName() + ": Temperature T = " + String(T) + " K exceeded its minimum allowed value of " +
      String(T_min-273.15) + " degC (" + String(T_min) + " Kelvin)
as required from medium model \""     + mediumName + "\".");
        assert(T <= T_max,
                       "
  In "     + getInstanceName() + ": Temperature T = " + String(T) + " K exceeded its maximum allowed value of " +
      String(T_max-273.15) + " degC (" + String(T_max) + " Kelvin)
as required from medium model \""     + mediumName + "\".");

        h = cp_const*(T-reference_T);
        u = h;
        state.T = T;
        state.p = p;
        annotation(Documentation(info="<html>
    <p>
    This base properties model is identical to
    <a href=\"modelica://Modelica.Media.Water.ConstantPropertyLiquidWater\">
    Modelica.Media.Water.ConstantPropertyLiquidWater</a>,
    except that the equation
    <code>u = cv_const*(T - reference_T)</code>
    has been replaced by <code>u=h</code> because
    <code>cp_const=cv_const</code>.
    </p>
</html>"));
      end BaseProperties;

    function enthalpyOfLiquid "Return the specific enthalpy of liquid"
      extends Modelica.Icons.Function;
      input Modelica.SIunits.Temperature T "Temperature";
      output Modelica.SIunits.SpecificEnthalpy h "Specific enthalpy";
    algorithm
      h := cp_const*(T-reference_T);
    annotation (
      smoothOrder=5,
      Inline=true,
    Documentation(info="<html>
<p>
Enthalpy of the water.
</p>
</html>",     revisions="<html>
<ul>
<li>
October 16, 2014 by Michael Wetter:<br/>
First implementation.
This function is used by
<a href=\"modelica://Buildings.Fluid.MixingVolumes.MixingVolumeMoistAir\">
Buildings.Fluid.MixingVolumes.MixingVolumeMoistAir</a>.
</li>
</ul>
</html>"));
    end enthalpyOfLiquid;
      annotation(preferredView="info", Documentation(info="<html>
<p>
This medium package models liquid water.
</p>
<p>
The mass density is computed using a constant value of <i>995.586</i> kg/s.
For a medium model in which the density is a function of temperature, use
<a href=\"modelica://Buildings.Media.Specialized.Water.TemperatureDependentDensity\">
Buildings.Media.Specialized.Water.TemperatureDependentDensity</a> which may have considerably higher computing time.
</p>
<p>
For the specific heat capacities at constant pressure and at constant volume,
a constant value of <i>4184</i> J/(kg K), which corresponds to <i>20</i>&deg;C
is used.
The figure below shows the relative error of the specific heat capacity that
is introduced by this simplification.
</p>
<p align=\"center\">
<img src=\"modelica://Buildings/Resources/Images/Media/Water/plotCp.png\" border=\"1\"
alt=\"Relative variation of specific heat capacity with temperature\"/>
</p>
<p>
The enthalpy is computed using the convention that <i>h=0</i>
if <i>T=0</i> &deg;C.
</p>
<h4>Limitations</h4>
<p>
Density, specific heat capacity, thermal conductivity and viscosity are constant.
Water is modeled as an incompressible liquid.
There are no phase changes.
</p>
</html>",     revisions="<html>
<ul>
<li>
October 26, 2018, by Filip Jorissen and Michael Wetter:<br/>
Now printing different messages if temperature is above or below its limit,
and adding instance name as JModelica does not print the full instance name in the assertion.
This is for
<a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1045\">#1045</a>.
</li>
<li>
June 6, 2015, by Michael Wetter:<br/>
Set <code>AbsolutePressure(start=p_default)</code> to avoid
a translation error if
<a href=\"modelica://Buildings.Fluid.Sources.Examples.TraceSubstancesFlowSource\">
Buildings.Fluid.Sources.Examples.TraceSubstancesFlowSource</a>
(if used with water instead of air)
is translated in pedantic mode in Dymola 2016.
The reason is that pressures use <code>Medium.p_default</code> as start values,
but
<a href=\"modelica://Modelica.Media.Interfaces.Types\">
Modelica.Media.Interfaces.Types</a>
sets a default value of <i>1E-5</i>.
A similar change has been done for pressure and density.
This fixes
<a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/266\">#266</a>.
</li>
<li>
June 6, 2015, by Michael Wetter:<br/>
Changed type of <code>BaseProperties.T</code> from
<code>Modelica.SIunits.Temperature</code> to <code>Temperature</code>.
Otherwise, it has a different start value than <code>Medium.T</code>, which
causes an error if
<a href=\"Buildings.Media.Examples.WaterProperties\">
Buildings.Media.Examples.WaterProperties</a>
is translated in pedantic mode.
This fixes
<a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/266\">#266</a>.
</li>
<li>
June 5, 2015, by Michael Wetter:<br/>
Added <code>stateSelect</code> attribute in <code>BaseProperties.T</code>
to allow correct use of <code>preferredMediumState</code> as
described in
<a href=\"modelica://Modelica.Media.Interfaces.PartialMedium\">
Modelica.Media.Interfaces.PartialMedium</a>,
and set <code>preferredMediumState=false</code>
to keep the same states as were used before.
This is for
<a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/260\">#260</a>.
</li>
<li>
June 5, 2015, by Michael Wetter:<br/>
Removed <code>ThermodynamicState</code> declaration as this lead to
the error
\"Attempting to redeclare record ThermodynamicState when the original was not replaceable.\"
in Dymola 2016 using the pedantic model check.
</li>
<li>
May 1, 2015, by Michael Wetter:<br/>
Added <code>Inline=true</code> for
<a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/227\">
issue 227</a>.
</li>
<li>
February 25, 2015, by Michael Wetter:<br/>
Removed <code>stateSelect</code> attribute on pressure as this caused
<a href=\"modelica://Buildings.Examples.Tutorial.SpaceCooling.System3\">
Buildings.Examples.Tutorial.SpaceCooling.System3</a>
to fail with the error message
\"differentiated if-then-else was not continuous\".
</li>
<li>
October 15, 2014, by Michael Wetter:<br/>
Reimplemented media based on
<a href=\"https://github.com/ibpsa/modelica-ibpsa/blob/446aa83720884052476ad6d6d4f90a6a29bb8ec9/Buildings/Media/Water.mo\">446aa83</a>.
</li>
<li>
November 15, 2013, by Michael Wetter:<br/>
Complete new reimplementation because the previous version
had the option to add a compressibility to the medium, which
has never been used.
</li>
</ul>
</html>"),
        Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}}),
            graphics={
            Polygon(
              points={{16,-28},{32,-42},{26,-48},{10,-36},{16,-28}},
              lineColor={95,95,95},
              fillPattern=FillPattern.Sphere,
              fillColor={95,95,95}),
            Polygon(
              points={{10,34},{26,44},{30,36},{14,26},{10,34}},
              lineColor={95,95,95},
              fillPattern=FillPattern.Sphere,
              fillColor={95,95,95}),
            Ellipse(
              extent={{-82,52},{24,-54}},
              lineColor={95,95,95},
              fillPattern=FillPattern.Sphere,
              fillColor={0,0,0}),
            Ellipse(
              extent={{22,82},{80,24}},
              lineColor={0,0,0},
              fillPattern=FillPattern.Sphere,
              fillColor={95,95,95}),
            Ellipse(
              extent={{20,-30},{78,-88}},
              lineColor={0,0,0},
              fillPattern=FillPattern.Sphere,
              fillColor={95,95,95})}));
    end Sea_Water;

  annotation (preferredView="info", Documentation(info="<html>
<p>This package contains media models for sea water. The media models in this package are compatible with <a href=\"modelica://Modelica.Media\">Modelica.Media</a> but the implementation is in general simpler, which often leads to more efficient simulation. Due to the simplifications, the media model of this package are generally accurate for a smaller temperature range than the models in <a href=\"modelica://Modelica.Media\">Modelica.Media</a>, but the smaller temperature range may often be sufficient for building HVAC applications. </p>
</html>"),
  Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}}),
          graphics={
          Line(
            points = {{-76,-80},{-62,-30},{-32,40},{4,66},{48,66},{73,45},{62,-8},{48,-50},{38,-80}},
            color={64,64,64},
            smooth=Smooth.Bezier),
          Line(
            points={{-40,20},{68,20}},
            color={175,175,175}),
          Line(
            points={{-40,20},{-44,88},{-44,88}},
            color={175,175,175}),
          Line(
            points={{68,20},{86,-58}},
            color={175,175,175}),
          Line(
            points={{-60,-28},{56,-28}},
            color={175,175,175}),
          Line(
            points={{-60,-28},{-74,84},{-74,84}},
            color={175,175,175}),
          Line(
            points={{56,-28},{70,-80}},
            color={175,175,175}),
          Line(
            points={{-76,-80},{38,-80}},
            color={175,175,175}),
          Line(
            points={{-76,-80},{-94,-16},{-94,-16}},
            color={175,175,175})}));
  end Media;

  package Interfaces
    extends Modelica.Icons.InterfacesPackage;

    partial model EightPort_modif "Partial model with eight ports"

      replaceable package Medium1 =
        Modelica.Media.Interfaces.PartialMedium "Medium 1 in the component"
          annotation (choices(
            choice(redeclare package Medium = Buildings.Media.Air "Moist air"),
            choice(redeclare package Medium = Buildings.Media.Water "Water"),
            choice(redeclare package Medium =
                Buildings.Media.Antifreeze.PropyleneGlycolWater (
              property_T=293.15,
              X_a=0.40)
              "Propylene glycol water, 40% mass fraction")));
      replaceable package Medium2 =
        Modelica.Media.Interfaces.PartialMedium "Medium 2 in the component"
          annotation (choices(
            choice(redeclare package Medium = Buildings.Media.Air "Moist air"),
            choice(redeclare package Medium = Buildings.Media.Water "Water"),
            choice(redeclare package Medium =
                Buildings.Media.Antifreeze.PropyleneGlycolWater (
              property_T=293.15,
              X_a=0.40)
              "Propylene glycol water, 40% mass fraction")));
      replaceable package Medium3 =
        Modelica.Media.Interfaces.PartialMedium "Medium 3 in the component"
          annotation (choices(
            choice(redeclare package Medium = Buildings.Media.Air "Moist air"),
            choice(redeclare package Medium = Buildings.Media.Water "Water"),
            choice(redeclare package Medium =
                Buildings.Media.Antifreeze.PropyleneGlycolWater (
              property_T=293.15,
              X_a=0.40)
              "Propylene glycol water, 40% mass fraction")));
      replaceable package Medium4 =
        Modelica.Media.Interfaces.PartialMedium "Medium 4 in the component"
          annotation (choices(
            choice(redeclare package Medium = Buildings.Media.Air "Moist air"),
            choice(redeclare package Medium = Buildings.Media.Water "Water"),
            choice(redeclare package Medium =
                Buildings.Media.Antifreeze.PropyleneGlycolWater (
              property_T=293.15,
              X_a=0.40)
              "Propylene glycol water, 40% mass fraction")));

      parameter Boolean allowFlowReversal1 = true
        "= true to allow flow reversal in medium 1, false restricts to design direction (port_a -> port_b)"
        annotation(Dialog(tab="Assumptions"), Evaluate=true);
      parameter Boolean allowFlowReversal2 = true
        "= true to allow flow reversal in medium 2, false restricts to design direction (port_a -> port_b)"
        annotation(Dialog(tab="Assumptions"), Evaluate=true);
      parameter Boolean allowFlowReversal3 = true
        "= true to allow flow reversal in medium 3, false restricts to design direction (port_a -> port_b)"
        annotation(Dialog(tab="Assumptions"), Evaluate=true);
      parameter Boolean allowFlowReversal4 = true
        "= true to allow flow reversal in medium 4, false restricts to design direction (port_a -> port_b)"
        annotation(Dialog(tab="Assumptions"), Evaluate=true);

      parameter Modelica.SIunits.SpecificEnthalpy h_outflow_a1_start = Medium1.h_default
        "Start value for enthalpy flowing out of port a1"
        annotation (Dialog(tab="Advanced", group="Initialization"));

      parameter Modelica.SIunits.SpecificEnthalpy h_outflow_b1_start = Medium1.h_default
        "Start value for enthalpy flowing out of port b1"
        annotation (Dialog(tab="Advanced", group="Initialization"));

      parameter Modelica.SIunits.SpecificEnthalpy h_outflow_a2_start = Medium2.h_default
        "Start value for enthalpy flowing out of port a2"
        annotation (Dialog(tab="Advanced", group="Initialization"));

      parameter Modelica.SIunits.SpecificEnthalpy h_outflow_b2_start = Medium2.h_default
        "Start value for enthalpy flowing out of port b2"
        annotation (Dialog(tab="Advanced", group="Initialization"));

        parameter Modelica.SIunits.SpecificEnthalpy h_outflow_a3_start = Medium3.h_default
        "Start value for enthalpy flowing out of port a1"
        annotation (Dialog(tab="Advanced", group="Initialization"));

      parameter Modelica.SIunits.SpecificEnthalpy h_outflow_b3_start = Medium3.h_default
        "Start value for enthalpy flowing out of port b1"
        annotation (Dialog(tab="Advanced", group="Initialization"));

        parameter Modelica.SIunits.SpecificEnthalpy h_outflow_a4_start = Medium4.h_default
        "Start value for enthalpy flowing out of port a1"
        annotation (Dialog(tab="Advanced", group="Initialization"));

      parameter Modelica.SIunits.SpecificEnthalpy h_outflow_b4_start = Medium4.h_default
        "Start value for enthalpy flowing out of port b1"
        annotation (Dialog(tab="Advanced", group="Initialization"));

      Modelica.Fluid.Interfaces.FluidPort_a port_a1(
                         redeclare final package Medium = Medium1,
                         m_flow(min=if allowFlowReversal1 then -Modelica.Constants.inf else 0),
                         h_outflow(start=h_outflow_a1_start))
        "Fluid connector a1 (positive design flow direction is from port_a1 to port_b1)"
        annotation (Placement(transformation(extent={{50,90},{70,110}})));
      Modelica.Fluid.Interfaces.FluidPort_b port_b1(
                         redeclare final package Medium = Medium1,
                         m_flow(max=if allowFlowReversal1 then +Modelica.Constants.inf else 0),
                         h_outflow(start=h_outflow_b1_start))
        "Fluid connector b1 (positive design flow direction is from port_a1 to port_b1)"
        annotation (Placement(transformation(extent={{30,90},{10,110}}), iconTransformation(extent={{30,90},
                {10,110}})));

      Modelica.Fluid.Interfaces.FluidPort_a port_a2(
                         redeclare final package Medium = Medium2,
                         m_flow(min=if allowFlowReversal2 then -Modelica.Constants.inf else 0),
                         h_outflow(start=h_outflow_a2_start))
        "Fluid connector a2 (positive design flow direction is from port_a2 to port_b2)"
        annotation (Placement(transformation(extent={{-50,90},{-30,110}})));
      Modelica.Fluid.Interfaces.FluidPort_b port_b2(
                         redeclare final package Medium = Medium2,
                         m_flow(max=if allowFlowReversal2 then +Modelica.Constants.inf else 0),
                         h_outflow(start=h_outflow_b2_start))
        "Fluid connector b2 (positive design flow direction is from port_a2 to port_b2)"
        annotation (Placement(transformation(extent={{-70,90},{-90,110}}),
                    iconTransformation(extent={{-70,90},{-90,110}})));

      Modelica.Fluid.Interfaces.FluidPort_a port_a3(
                         redeclare final package Medium = Medium3,
                         m_flow(min=if allowFlowReversal3 then -Modelica.Constants.inf else 0),
                         h_outflow(start=h_outflow_a3_start))
        "Fluid connector a1 (positive design flow direction is from port_a3 to port_b3)"
        annotation (Placement(transformation(extent={{-110,50},{-90,70}})));
      Modelica.Fluid.Interfaces.FluidPort_b port_b3(
                         redeclare final package Medium = Medium3,
                         m_flow(max=if allowFlowReversal3 then +Modelica.Constants.inf else 0),
                         h_outflow(start=h_outflow_b3_start))
        "Fluid connector b2 (positive design flow direction is from port_a3 to port_b3)"
        annotation (Placement(transformation(extent={{-90,10},{-110,30}}),
                    iconTransformation(extent={{-90,10},{-110,30}})));
      Modelica.Fluid.Interfaces.FluidPort_a port_a4(
                         redeclare final package Medium = Medium4,
                         m_flow(min=if allowFlowReversal4 then -Modelica.Constants.inf else 0),
                         h_outflow(start=h_outflow_a4_start))
        "Fluid connector a1 (positive design flow direction is from port_a4 to port_b4)"
        annotation (Placement(transformation(extent={{-110,-50},{-90,-30}})));
      Modelica.Fluid.Interfaces.FluidPort_b port_b4(
                         redeclare final package Medium = Medium4,
                         m_flow(max=if allowFlowReversal4 then +Modelica.Constants.inf else 0),
                         h_outflow(start=h_outflow_b4_start))
        "Fluid connector b2 (positive design flow direction is from port_a4 to port_b4)"
        annotation (Placement(transformation(extent={{-90,-90},{-110,-70}}),
                    iconTransformation(extent={{-90,-95},{-110,-75}})));
      annotation (
        preferredView="info",
        Documentation(info="<html>
<p>This model defines an interface for components with eight ports. The parameters <code>allowFlowReversal1,
</code> <code>allowFlowReversal2</code>, <code>allowFlowReversal3</code> and <code>allowFlowReversal4</code> 
may be used by models that extend this model to treat flow reversal. </p>
<p>This model is identical to <a href=\"modelica://Modelica.Fluid.Interfaces.PartialTwoPort\">Modelica.Fluid.Interfaces.PartialTwoPort</a>, except that it has eight ports. </p>
</html>",     revisions="<html>
<ul>
<li>
January 18, 2019, by Jianjun Hu:<br/>
Limited the media choice.
See <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1050\">#1050</a>.
</li>
<li>July 2014, by Damien Picard:<br/>First implementation. </li>
</ul>
</html>"),
        Icon(coordinateSystem(
              preserveAspectRatio=false,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Text(
              extent={{-151,147},{149,107}},
              lineColor={0,0,255},
              fillPattern=FillPattern.HorizontalCylinder,
              fillColor={0,127,255},
              textString="%name")}),
        Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{
                100,100}})));
    end EightPort_modif;

    partial model SixtPort_modif "Partial model with eight ports"

      replaceable package Medium1 =
        Modelica.Media.Interfaces.PartialMedium "Medium 1 in the component"
          annotation (choices(
            choice(redeclare package Medium = Buildings.Media.Air "Moist air"),
            choice(redeclare package Medium = Buildings.Media.Water "Water"),
            choice(redeclare package Medium =
                Buildings.Media.Antifreeze.PropyleneGlycolWater (
              property_T=293.15,
              X_a=0.40)
              "Propylene glycol water, 40% mass fraction")));
      replaceable package Medium2 =
        Modelica.Media.Interfaces.PartialMedium "Medium 2 in the component"
          annotation (choices(
            choice(redeclare package Medium = Buildings.Media.Air "Moist air"),
            choice(redeclare package Medium = Buildings.Media.Water "Water"),
            choice(redeclare package Medium =
                Buildings.Media.Antifreeze.PropyleneGlycolWater (
              property_T=293.15,
              X_a=0.40)
              "Propylene glycol water, 40% mass fraction")));
      replaceable package Medium3 =
        Modelica.Media.Interfaces.PartialMedium "Medium 3 in the component"
          annotation (choices(
            choice(redeclare package Medium = Buildings.Media.Air "Moist air"),
            choice(redeclare package Medium = Buildings.Media.Water "Water"),
            choice(redeclare package Medium =
                Buildings.Media.Antifreeze.PropyleneGlycolWater (
              property_T=293.15,
              X_a=0.40)
              "Propylene glycol water, 40% mass fraction")));
      replaceable package Medium4 =
        Modelica.Media.Interfaces.PartialMedium "Medium 4 in the component"
          annotation (choices(
            choice(redeclare package Medium = Buildings.Media.Air "Moist air"),
            choice(redeclare package Medium = Buildings.Media.Water "Water"),
            choice(redeclare package Medium =
                Buildings.Media.Antifreeze.PropyleneGlycolWater (
              property_T=293.15,
              X_a=0.40)
              "Propylene glycol water, 40% mass fraction")));

      parameter Boolean allowFlowReversal1 = true
        "= true to allow flow reversal in medium 1, false restricts to design direction (port_a -> port_b)"
        annotation(Dialog(tab="Assumptions"), Evaluate=true);
      parameter Boolean allowFlowReversal2 = true
        "= true to allow flow reversal in medium 2, false restricts to design direction (port_a -> port_b)"
        annotation(Dialog(tab="Assumptions"), Evaluate=true);
      parameter Boolean allowFlowReversal3 = true
        "= true to allow flow reversal in medium 3, false restricts to design direction (port_a -> port_b)"
        annotation(Dialog(tab="Assumptions"), Evaluate=true);
      parameter Boolean allowFlowReversal4 = true
        "= true to allow flow reversal in medium 4, false restricts to design direction (port_a -> port_b)"
        annotation(Dialog(tab="Assumptions"), Evaluate=true);

      parameter Modelica.SIunits.SpecificEnthalpy h_outflow_a1_start = Medium1.h_default
        "Start value for enthalpy flowing out of port a1"
        annotation (Dialog(tab="Advanced", group="Initialization"));

      parameter Modelica.SIunits.SpecificEnthalpy h_outflow_b1_start = Medium1.h_default
        "Start value for enthalpy flowing out of port b1"
        annotation (Dialog(tab="Advanced", group="Initialization"));

      parameter Modelica.SIunits.SpecificEnthalpy h_outflow_a2_start = Medium2.h_default
        "Start value for enthalpy flowing out of port a2"
        annotation (Dialog(tab="Advanced", group="Initialization"));

      parameter Modelica.SIunits.SpecificEnthalpy h_outflow_b2_start = Medium2.h_default
        "Start value for enthalpy flowing out of port b2"
        annotation (Dialog(tab="Advanced", group="Initialization"));

        parameter Modelica.SIunits.SpecificEnthalpy h_outflow_a3_start = Medium3.h_default
        "Start value for enthalpy flowing out of port a1"
        annotation (Dialog(tab="Advanced", group="Initialization"));

      parameter Modelica.SIunits.SpecificEnthalpy h_outflow_b3_start = Medium3.h_default
        "Start value for enthalpy flowing out of port b1"
        annotation (Dialog(tab="Advanced", group="Initialization"));

        parameter Modelica.SIunits.SpecificEnthalpy h_outflow_a4_start = Medium4.h_default
        "Start value for enthalpy flowing out of port a1"
        annotation (Dialog(tab="Advanced", group="Initialization"));

      parameter Modelica.SIunits.SpecificEnthalpy h_outflow_b4_start = Medium4.h_default
        "Start value for enthalpy flowing out of port b1"
        annotation (Dialog(tab="Advanced", group="Initialization"));

      Modelica.Fluid.Interfaces.FluidPort_a port_a1(
                         redeclare final package Medium = Medium1,
                         m_flow(min=if allowFlowReversal1 then -Modelica.Constants.inf else 0),
                         h_outflow(start=h_outflow_a1_start))
        "Fluid connector a1 (positive design flow direction is from port_a1 to port_b1)"
        annotation (Placement(transformation(extent={{90,-60},{110,-40}})));
      Modelica.Fluid.Interfaces.FluidPort_b port_b1(
                         redeclare final package Medium = Medium1,
                         m_flow(max=if allowFlowReversal1 then +Modelica.Constants.inf else 0),
                         h_outflow(start=h_outflow_b1_start))
        "Fluid connector b1 (positive design flow direction is from port_a1 to port_b1)"
        annotation (Placement(transformation(extent={{110,40},{90,60}}), iconTransformation(extent={{110,40},
                {90,60}})));

      Modelica.Fluid.Interfaces.FluidPort_a port_a2(
                         redeclare final package Medium = Medium2,
                         m_flow(min=if allowFlowReversal2 then -Modelica.Constants.inf else 0),
                         h_outflow(start=h_outflow_a2_start))
        "Fluid connector a2 (positive design flow direction is from port_a2 to port_b2)"
        annotation (Placement(transformation(extent={{40,90},{60,110}})));
      Modelica.Fluid.Interfaces.FluidPort_b port_b2(
                         redeclare final package Medium = Medium2,
                         m_flow(max=if allowFlowReversal2 then +Modelica.Constants.inf else 0),
                         h_outflow(start=h_outflow_b2_start))
        "Fluid connector b2 (positive design flow direction is from port_a2 to port_b2)"
        annotation (Placement(transformation(extent={{-40,90},{-60,110}}),
                    iconTransformation(extent={{-40,90},{-60,110}})));

      Modelica.Fluid.Interfaces.FluidPort_a port_a3(
                         redeclare final package Medium = Medium3,
                         m_flow(min=if allowFlowReversal3 then -Modelica.Constants.inf else 0),
                         h_outflow(start=h_outflow_a3_start))
        "Fluid connector a1 (positive design flow direction is from port_a3 to port_b3)"
        annotation (Placement(transformation(extent={{-110,40},{-90,60}})));
      Modelica.Fluid.Interfaces.FluidPort_b port_b3(
                         redeclare final package Medium = Medium3,
                         m_flow(max=if allowFlowReversal3 then +Modelica.Constants.inf else 0),
                         h_outflow(start=h_outflow_b3_start))
        "Fluid connector b2 (positive design flow direction is from port_a3 to port_b3)"
        annotation (Placement(transformation(extent={{-90,-60},{-110,-40}}),
                    iconTransformation(extent={{-90,-60},{-110,-40}})));
      annotation (
        preferredView="info",
        Documentation(info="<html>
<p>This model defines an interface for components with eight ports. The parameters <code>allowFlowReversal1,
</code> <code>allowFlowReversal2</code>, <code>allowFlowReversal3</code> and <code>allowFlowReversal4</code> 
may be used by models that extend this model to treat flow reversal. </p>
<p>This model is identical to <a href=\"modelica://Modelica.Fluid.Interfaces.PartialTwoPort\">Modelica.Fluid.Interfaces.PartialTwoPort</a>, except that it has eight ports. </p>
</html>",     revisions="<html>
<ul>
<li>
January 18, 2019, by Jianjun Hu:<br/>
Limited the media choice.
See <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1050\">#1050</a>.
</li>
<li>July 2014, by Damien Picard:<br/>First implementation. </li>
</ul>
</html>"),
        Icon(coordinateSystem(
              preserveAspectRatio=false,
              extent={{-100,-100},{100,100}},
              grid={1,1}), graphics={Text(
              extent={{-151,147},{149,107}},
              lineColor={0,0,255},
              fillPattern=FillPattern.HorizontalCylinder,
              fillColor={0,127,255},
              textString="%name")}),
        Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{
                100,100}})));
    end SixtPort_modif;
  end Interfaces;

package Valves "Package with valve models"
  extends Modelica.Icons.VariantsPackage;
  partial model PartialThreeWayValve_modif "Partial three way valve"
    extends Buildings.Fluid.BaseClasses.PartialThreeWayResistance(
      m_flow_small = m_flow_nominal*1e-4,
      final mDyn_flow_nominal = m_flow_nominal,
        redeclare replaceable
        Buildings.Fluid.Actuators.BaseClasses.PartialTwoWayValve res2
          constrainedby
          Buildings.Fluid.Actuators.BaseClasses.PartialTwoWayValve(
            deltaM=deltaM,
            dp(start=dpValve_nominal/2),
            from_dp=from_dp,
            final linearized=linearized[1],
            final homotopyInitialization=homotopyInitialization,
            final CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
            final m_flow_nominal=m_flow_nominal,
            final dpValve_nominal=dpValve_nominal,
            final dpFixed_nominal=dpFixed_nominal[1],
            final use_inputFilter=false),
        redeclare Fluid.FixedResistances.LosslessPipe res1(m_flow_nominal=
            m_flow_nominal),
        redeclare replaceable
        Buildings.Fluid.Actuators.BaseClasses.PartialTwoWayValve res3
          constrainedby
          Buildings.Fluid.Actuators.BaseClasses.PartialTwoWayValve(
            deltaM=deltaM,
            dp(start=dpValve_nominal/2),
            from_dp=from_dp,
            final linearized=linearized[2],
            final homotopyInitialization=homotopyInitialization,
            final CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
            final m_flow_nominal=m_flow_nominal,
            final dpValve_nominal=dpValve_nominal/fraK^2,
            final dpFixed_nominal=dpFixed_nominal[2],
            final use_inputFilter=false));
      extends Buildings.Fluid.Actuators.BaseClasses.ActuatorSignal;
      extends Buildings.Fluid.Actuators.BaseClasses.ValveParameters(
        rhoStd=Medium.density_pTX(101325, 273.15+4, Medium.X_default));

    constant Boolean homotopyInitialization = true "= true, use homotopy method"
      annotation(HideResult=true);

    parameter Modelica.SIunits.PressureDifference dpFixed_nominal[2](each displayUnit="Pa",
                                                           each min=0) = {0, 0}
      "Nominal pressure drop of pipes and other equipment in flow legs at port_1 and port_3"
      annotation(Dialog(group="Nominal condition"));

    parameter Real fraK(min=0, max=1) = 0.7
      "Fraction Kv(port_3&rarr;port_2)/Kv(port_1&rarr;port_2)";
    parameter Real[2] l(each min=0, each max=1) = {0.0001, 0.0001}
      "Valve leakage, l=Kv(y=0)/Kv(y=1)";
    parameter Real deltaM = 0.02
      "Fraction of nominal flow rate where linearization starts, if y=1"
      annotation(Dialog(group="Pressure-flow linearization"));

    parameter Boolean[2] linearized = {false, false}
      "= true, use linear relation between m_flow and dp for any flow rate"
      annotation(Dialog(tab="Advanced"));

    protected
    Modelica.Blocks.Math.Feedback inv "Inversion of control signal"
      annotation (Placement(transformation(extent={{-74,40},{-62,52}})));
    Modelica.Blocks.Sources.Constant uni(final k=1)
      "Outputs one for bypass valve"
      annotation (Placement(transformation(extent={{-92,40},{-80,52}})));

  initial equation
    assert(homotopyInitialization, "In " + getInstanceName() +
      ": The constant homotopyInitialization has been modified from its default value. This constant will be removed in future releases.",
      level = AssertionLevel.warning);

  equation
    connect(uni.y, inv.u1)
      annotation (Line(points={{-79.4,46},{-72.8,46}},
                       color={0,0,127}));
    annotation (Icon(coordinateSystem(preserveAspectRatio=true,  extent={{-100,
              -100},{100,100}}), graphics={
      Rectangle(
        extent={{-100,40},{100,-40}},
        lineColor={0,0,0},
        fillPattern=FillPattern.HorizontalCylinder,
        fillColor={192,192,192}),
      Rectangle(
        extent={{-100,22},{100,-22}},
        lineColor={0,0,0},
        fillPattern=FillPattern.HorizontalCylinder,
        fillColor={0,127,255}),
      Rectangle(
        extent={{-60,40},{60,-40}},
        fillColor={255,255,255},
        fillPattern=FillPattern.Solid,
        pattern=LinePattern.None),
      Polygon(
        points={{0,0},{76,60},{76,-60},{0,0}},
        lineColor={0,0,0},
        fillColor=DynamicSelect({0,0,0}, y*{255,255,255}),
        fillPattern=FillPattern.Solid),
      Polygon(
        points={{0,0},{-76,60},{-76,-60},{0,0}},
        lineColor={0,0,0},
        fillColor={255,255,255},
        fillPattern=FillPattern.Solid),
      Rectangle(
        extent={{-40,-56},{40,-100}},
        lineColor={0,0,0},
        fillPattern=FillPattern.VerticalCylinder,
        fillColor={192,192,192}),
      Rectangle(
        extent={{-22,-56},{22,-100}},
        lineColor={0,0,0},
        fillPattern=FillPattern.VerticalCylinder,
        fillColor={0,127,255}),
      Polygon(
            points={{0,0},{60,-76},{-60,-76},{0,0}},
            lineColor={0,0,0},
            fillColor=DynamicSelect({0,0,0}, (1-y)*{255,255,255}),
            fillPattern=FillPattern.Solid),
      Line(
        visible=use_inputFilter,
        points={{-30,40},{30,40}}),
              Line(
        points={{0,40},{0,0}}),
      Line(
        visible=not use_inputFilter,
        points={{0,100},{0,40}})}),
      Documentation(info="<html>
<p>
Partial model of a three way valve. This is the base model for valves
with different opening characteristics, such as linear, equal percentage
or quick opening. The three way valve model consists of a mixer where
valves are placed in two of the flow legs. The third flow leg
has no friction.
The flow coefficient <code>Kv</code> for flow from <code>port_1 &rarr; port_2</code> is
a parameter.
The flow coefficient for the bypass flow from <code>port_3 &rarr; port_2</code>
is computed as
</p>
<pre>
         Kv(port_3 &rarr; port_2)
  fraK = ----------------------
         Kv(port_1 &rarr; port_2)
</pre>
<p>
where <code>0 &lt; fraK &le; 1</code> is a parameter with a default value
of <code>fraK=0.7</code>.
</p>
<p>
Since this model uses two way valves to construct a three way valve, see
<a href=\"modelica://Buildings.Fluid.Actuators.BaseClasses.PartialTwoWayValve\">
Buildings.Fluid.Actuators.BaseClasses.PartialTwoWayValve</a>
for details regarding the valve implementation.
</p>
</html>",   revisions="<html>
<ul>
<li>
April 14, 2020, by Michael Wetter:<br/>
Changed <code>homotopyInitialization</code> to a constant.<br/>
This is for
<a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1341\">Buildings, #1341</a>.
</li>
<li>
November 5, 2019, by Michael Wetter:<br/>
Moved assignment of leakage from <a href=\"modelica://Buildings.Fluid.Actuators.BaseClasses.PartialThreeWayValve\">
Buildings.Fluid.Actuators.BaseClasses.PartialThreeWayValve</a>
to the parent classes.<br/>
This is for
<a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1227\">#1227</a>.
</li>
<li>
October 25, 2019, by Jianjun Hu:<br/>
Improved icon graphics annotation. This is for
<a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1225\">#1225</a>.
</li>
<li>
March 24, 2017, by Michael Wetter:<br/>
Renamed <code>filteredInput</code> to <code>use_inputFilter</code>.<br/>
This is for
<a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/665\">#665</a>.
</li>
<li>
January 22, 2016, by Michael Wetter:<br/>
Corrected type declaration of pressure difference.
This is
for <a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/404\">#404</a>.
</li>
<li>
December 17, 2015, by Michael Wetter:<br/>
Removed assignment <code>redeclare final package Medium=Medium</code>
as this is now done in the base class.
This is for
<a href=\"https://github.com/lbl-srg/modelica-buildings/issues/475\">
https://github.com/lbl-srg/modelica-buildings/issues/475</a>.
</li>
<li>
November 23, 2015 by Filip Jorissen:<br/>
Corrected valve leakage value to avoid warnings.
</li>
<li>
February 28, 2013, by Michael Wetter:<br/>
Reformulated assignment of parameters.
Removed default value for <code>dpValve_nominal</code>, as this
parameter has the attribute <code>fixed=false</code> for some values
of <code>CvData</code>. In this case, assigning a value is not allowed.
Corrected wrong documentation of parameter <code>fraK(min=0, max=1) = 0.7</code>.
The documenation was
<i>Fraction Kv(port_1&rarr;port_2)/Kv(port_3&rarr;port_2)</i> instead of
<i>Fraction Kv(port_3&rarr;port_2)/Kv(port_1&rarr;port_2)</i>.
Because the parameter set correctly its attributes <code>min=0</code> and <code>max=1</code>,
instances of this model used the correct value.
</li>
<li>
April 12, 2012 by Michael Wetter:<br/>
Removed duplicate declaration of <code>m_flow_nominal</code>.
</li>
<li>
February 20, 2012 by Michael Wetter:<br/>
Renamed parameter <code>dp_nominal</code> to <code>dpValve_nominal</code>,
and added new parameter <code>dpFixed_nominal=0</code>.
See
<a href=\"modelica://Buildings.Fluid.Actuators.UsersGuide\">
Buildings.Fluid.Actuators.UsersGuide</a>.
</li>
<li>
March 25, 2011, by Michael Wetter:<br/>
Added homotopy method.
</li>
<li>
June 3, 2008 by Michael Wetter:<br/>
First implementation.
</li>
</ul>
</html>"));
  end PartialThreeWayValve_modif;

  model ThreeWayLinear_modif
    "Three way valve with linear characteristics"
      extends Buildings.Applications.DHC_Thassalia.Valves.PartialThreeWayValve_modif(
      redeclare
        Fluid.Actuators.Valves.TwoWayLinear res2(final l=l[1]), redeclare
        Fluid.Actuators.Valves.TwoWayLinear res3(final l=l[2]));

  equation
    connect(inv.y, res3.y) annotation (Line(points={{-62.6,46},{20,46},{20,-50},{
            12,-50}},      color={0,0,127}));
    connect(y_actual, inv.u2) annotation (Line(points={{50,70},{88,70},{88,34},{
            -68,34},{-68,41.2}},
                           color={0,0,127}));
    connect(y_actual, res2.y) annotation (Line(points={{50,70},{88,70},{88,34},{50,
            34},{50,12}}, color={0,0,127}));
    annotation (defaultComponentName="val",
  Documentation(info="<html>
<p>
Three way valve with linear opening characteristic.
</p><p>
This model is based on the partial valve models
<a href=\"modelica://Buildings.Fluid.Actuators.BaseClasses.PartialThreeWayValve\">
Buildings.Fluid.Actuators.BaseClasses.PartialThreeWayValve</a> and
<a href=\"modelica://Buildings.Fluid.Actuators.BaseClasses.PartialTwoWayValve\">
Buildings.Fluid.Actuators.BaseClasses.PartialTwoWayValve</a>.
See
<a href=\"modelica://Buildings.Fluid.Actuators.BaseClasses.PartialThreeWayValve\">
Buildings.Fluid.Actuators.BaseClasses.PartialThreeWayValve</a>
for the implementation of the three way valve
and see
<a href=\"modelica://Buildings.Fluid.Actuators.BaseClasses.PartialTwoWayValve\">
Buildings.Fluid.Actuators.BaseClasses.PartialTwoWayValve</a>
for the implementation of the regularization near the origin.
</p>
</html>",
  revisions="<html>
<ul>
<li>
November 5, 2019, by Michael Wetter:<br/>
Moved assignment of leakage from <a href=\"modelica://Buildings.Fluid.Actuators.BaseClasses.PartialThreeWayValve\">
Buildings.Fluid.Actuators.BaseClasses.PartialThreeWayValve</a>
to the parent classes.<br/>
This is for
<a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/1227\">#1227</a>.
</li>
<li>
February 20, 2012 by Michael Wetter:<br/>
Renamed parameter <code>dp_nominal</code> to <code>dpValve_nominal</code>,
and added new parameter <code>dpFixed_nominal</code>.
See
<a href=\"modelica://Buildings.Fluid.Actuators.UsersGuide\">
Buildings.Fluid.Actuators.UsersGuide</a>.
</li>
<li>
February 14, 2012 by Michael Wetter:<br/>
Added filter to approximate the travel time of the actuator.
</li>
<li>
March 25, 2011, by Michael Wetter:<br/>
Added homotopy method.
</li>
<li>
June 16, 2008 by Michael Wetter:<br/>
First implementation.
</li>
</ul>
</html>"));
  end ThreeWayLinear_modif;
end Valves;

  package debug
    model chiller_base
      Fluid.Chillers.ElectricReformulatedEIR electricReformulatedEIR(
        redeclare package Medium1 =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
        redeclare package Medium2 = Buildings.Media.Water,
        dp1_nominal=2500,
        dp2_nominal=3000,
        per=Fluid.Chillers.Data.ElectricReformulatedEIR.Test_quantum())
                annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
      Fluid.Sources.MassFlowSource_T boundary(
        redeclare package Medium =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
        m_flow=100,
        T=290.15,
        nPorts=1) annotation (Placement(transformation(extent={{-80,20},{-60,40}})));
      Fluid.Sources.Boundary_pT bou(
        redeclare package Medium =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
        p=100000,
        nPorts=1) annotation (Placement(transformation(extent={{100,40},{80,60}})));
      Fluid.Sources.Boundary_pT bou1(
        redeclare package Medium = Buildings.Media.Water,
        p=100000,
        nPorts=1)
        annotation (Placement(transformation(extent={{-100,-60},{-80,-40}})));
      Fluid.Sources.MassFlowSource_T boundary1(
        redeclare package Medium = Buildings.Media.Water,
        m_flow=15,
        T=298.15,
        nPorts=1) annotation (Placement(transformation(extent={{78,-60},{58,-40}})));
      Modelica.Blocks.Sources.RealExpression realExpression(y=4 + 273.15)
        annotation (Placement(transformation(extent={{-140,-30},{-120,-10}})));
      Modelica.Blocks.Sources.BooleanExpression booleanExpression(y=true)
        annotation (Placement(transformation(extent={{-140,10},{-120,30}})));
    equation
      connect(boundary1.ports[1], electricReformulatedEIR.port_a2) annotation (Line(
            points={{58,-50},{26,-50},{26,-6},{10,-6}}, color={0,127,255}));
      connect(boundary.ports[1], electricReformulatedEIR.port_a1) annotation (Line(
            points={{-60,30},{-34,30},{-34,6},{-10,6}}, color={0,127,255}));
      connect(realExpression.y, electricReformulatedEIR.TSet) annotation (Line(
            points={{-119,-20},{-66,-20},{-66,-3},{-12,-3}}, color={0,0,127}));
      connect(booleanExpression.y, electricReformulatedEIR.on) annotation (Line(
            points={{-119,20},{-66,20},{-66,3},{-12,3}}, color={255,0,255}));
      connect(bou1.ports[1], electricReformulatedEIR.port_b2) annotation (Line(
            points={{-80,-50},{-46,-50},{-46,-6},{-10,-6}}, color={0,127,255}));
      connect(electricReformulatedEIR.port_b1, bou.ports[1]) annotation (Line(
            points={{10,6},{46,6},{46,50},{80,50}}, color={0,127,255}));
      annotation (
        Icon(coordinateSystem(preserveAspectRatio=false)),
        Diagram(coordinateSystem(preserveAspectRatio=false)),
        experiment(
          StopTime=100000,
          Interval=50,
          __Dymola_Algorithm="Dassl"));
    end chiller_base;

    model ElectricReformulatedEIR
      "Test model for chiller electric reformulated EIR"
      extends Modelica.Icons.Example;
      extends Buildings.Applications.DHC_Thassalia.debug.PartialElectric(
        P_nominal=-per.QEva_flow_nominal/per.COP_nominal,
        mEva_flow_nominal=per.mEva_flow_nominal,
        mCon_flow_nominal=per.mCon_flow_nominal,
        sou1(nPorts=1),
        sou2(nPorts=1),
        sin2(nPorts=1));

      parameter
        Fluid.Chillers.Data.ElectricReformulatedEIR.ReformEIRChiller_McQuay_WSC_471kW_5_89COP_Vanes
        per "Chiller performance data"
        annotation (Placement(transformation(extent={{60,80},{80,100}})));

      Buildings.Fluid.Chillers.ElectricReformulatedEIR chi(
           redeclare package Medium1 = Medium1,
           redeclare package Medium2 = Medium2,
           per=per,
           energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
           dp1_nominal=6000,
           dp2_nominal=6000) "Chiller model"
        annotation (Placement(transformation(extent={{0,0},{20,20}})));

      Fluid.Sensors.TemperatureTwoPort senTem(redeclare package Medium =
            Buildings.Media.Water, m_flow_nominal=mEva_flow_nominal)
        annotation (Placement(transformation(extent={{-12,-54},{8,-34}})));
    equation
      connect(sou1.ports[1], chi.port_a1) annotation (Line(
          points={{-40,16},{0,16}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(chi.port_b1, res1.port_a) annotation (Line(
          points={{20,16},{26,16},{26,40},{32,40}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(sou2.ports[1], chi.port_a2) annotation (Line(
          points={{40,4},{20,4}},
          color={0,127,255},
          smooth=Smooth.None));
      connect(chi.on, greaterThreshold.y) annotation (Line(
          points={{-2,13},{-8,13},{-8,90},{-19,90}},
          color={255,0,255},
          smooth=Smooth.None));
      connect(TSet.y, chi.TSet) annotation (Line(
          points={{-59,60},{-20,60},{-20,8},{-2,8},{-2,7}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(chi.port_b2, senTem.port_b) annotation (Line(points={{0,4},{0,-20},{20,
              -20},{20,-44},{8,-44}}, color={0,127,255}));
      connect(senTem.port_a, sin2.ports[1]) annotation (Line(points={{-12,-44},
              {-36,-44},{-36,-20},{-60,-20}}, color={0,127,255}));
      annotation (
    experiment(Tolerance=1e-6, StopTime=14400),
    __Dymola_Commands(file="modelica://Buildings/Resources/Scripts/Dymola/Fluid/Chillers/Examples/ElectricReformulatedEIR.mos"
            "Simulate and plot"),    Documentation(info="<html>
<p>
Example that simulates a chiller whose efficiency is computed based on the
condenser leaving and evaporator leaving fluid temperature.
A bicubic polynomial is used to compute the chiller part load performance.
</p>
</html>",     revisions="<html>
<ul>
<li>
August 14, 2014, by Michael Wetter:<br/>
Added missing <code>redeclare</code> keyword in
performance data redeclaration.
This avoids an error in OpenModelica.
</li>
<li>
September 17, 2010, by Michael Wetter:<br/>
First implementation.
</li>
</ul>
</html>"));
    end ElectricReformulatedEIR;

    partial model PartialElectric
      "Base class for test model of chiller electric EIR"
     package Medium1 = Buildings.Media.Water "Medium model";
     package Medium2 = Buildings.Media.Water "Medium model";

      parameter Modelica.SIunits.Power P_nominal
        "Nominal compressor power (at y=1)";
      parameter Modelica.SIunits.TemperatureDifference dTEva_nominal=10
        "Temperature difference evaporator inlet-outlet";
      parameter Modelica.SIunits.TemperatureDifference dTCon_nominal=10
        "Temperature difference condenser outlet-inlet";
      parameter Real COPc_nominal = 3 "Chiller COP";
      parameter Modelica.SIunits.MassFlowRate mEva_flow_nominal
        "Nominal mass flow rate at evaporator";
      parameter Modelica.SIunits.MassFlowRate mCon_flow_nominal
        "Nominal mass flow rate at condenser";

      Buildings.Fluid.Sources.MassFlowSource_T sou1(
        redeclare package Medium = Medium1,
        use_T_in=true,
        m_flow=mCon_flow_nominal,
        T=298.15)
        annotation (Placement(transformation(extent={{-60,6},{-40,26}})));
      Buildings.Fluid.Sources.MassFlowSource_T sou2(
        redeclare package Medium = Medium2,
        use_T_in=true,
        m_flow=mEva_flow_nominal,
        T=291.15)
        annotation (Placement(transformation(extent={{60,-6},{40,14}})));
      Buildings.Fluid.Sources.Boundary_pT sin1(
        redeclare package Medium = Medium1,
        nPorts=1)                           annotation (Placement(
            transformation(
            extent={{10,-10},{-10,10}},
            origin={70,40})));
      Buildings.Fluid.Sources.Boundary_pT sin2(
        redeclare package Medium = Medium2) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            origin={-70,-20})));
      Modelica.Blocks.Sources.Ramp TSet(
        duration=3600,
        startTime=3*3600,
        offset=273.15 + 10,
        height=8) "Set point for leaving chilled water temperature"
        annotation (Placement(transformation(extent={{-80,50},{-60,70}})));
      Modelica.Blocks.Sources.Ramp TCon_in(
        height=10,
        offset=273.15 + 20,
        duration=3600,
        startTime=2*3600) "Condenser inlet temperature"
        annotation (Placement(transformation(extent={{-90,10},{-70,30}})));
      Modelica.Blocks.Sources.Ramp TEva_in(
        offset=273.15 + 15,
        height=5,
        startTime=3600,
        duration=3600) "Evaporator inlet temperature"
        annotation (Placement(transformation(extent={{50,-40},{70,-20}})));
      Modelica.Blocks.Sources.Pulse pulse(period=3600/2)
        annotation (Placement(transformation(extent={{-80,80},{-60,100}})));
      Modelica.Blocks.Logical.GreaterThreshold greaterThreshold(threshold=0.5)
        annotation (Placement(transformation(extent={{-40,80},{-20,100}})));
      Buildings.Fluid.FixedResistances.PressureDrop res1(
        redeclare package Medium = Medium1,
        m_flow_nominal=mCon_flow_nominal,
        dp_nominal=6000) "Flow resistance"
        annotation (Placement(transformation(extent={{32,30},{52,50}})));
    equation
      connect(TCon_in.y, sou1.T_in) annotation (Line(
          points={{-69,20},{-62,20}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(TEva_in.y, sou2.T_in) annotation (Line(
          points={{71,-30},{80,-30},{80,8},{62,8}},
          color={0,0,127},
          smooth=Smooth.None));

      connect(greaterThreshold.u, pulse.y) annotation (Line(
          points={{-42,90},{-59,90}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(res1.port_b, sin1.ports[1]) annotation (Line(
          points={{52,40},{60,40}},
          color={0,127,255},
          smooth=Smooth.None));
    end PartialElectric;

    model FlowJunction "Test model for the three way splitter/mixer model"
      extends Modelica.Icons.Example;

     package Medium = Buildings.Media.Air "Medium model";

      Buildings.Fluid.FixedResistances.Junction spl(
        redeclare package Medium = Medium,
        m_flow_nominal={10,10,-10},
        dp_nominal={5,-5,-5000},
        energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial) "Splitter"
        annotation (Placement(transformation(extent={{10,-10},{30,10}})));

      Buildings.Fluid.Sources.Boundary_pT bou1(
        redeclare package Medium = Medium,
        T=273.15 + 10,
        use_p_in=true,
        nPorts=1)
        "Pressure boundary condition"
         annotation (Placement(transformation(extent={{-60,-10},{-40,10}})));

      Buildings.Fluid.Sources.Boundary_pT bou2(
        redeclare package Medium = Medium,
        T=273.15 + 20,
        p(displayUnit="Pa") = 101325,
        nPorts=1)
        "Pressure boundary condition"
        annotation (Placement(transformation(
              extent={{90,-10},{70,10}})));

      Buildings.Fluid.Sources.Boundary_pT bou3(
        redeclare package Medium = Medium,
        T=273.15 + 30,
        use_p_in=true,
        nPorts=1)
        "Pressure boundary condition"
        annotation (Placement(transformation(
              extent={{-60,-70},{-40,-50}})));

        Modelica.Blocks.Sources.Ramp P1(
        offset=101320,
        height=10,
        duration=20,
        startTime=20)
        "Ramp pressure signal"
        annotation (Placement(transformation(extent={{-90,-2},{-70,18}})));

        Modelica.Blocks.Sources.Ramp P3(
          offset=101320,
          height=10,
          duration=20,
          startTime=70)
        "Ramp pressure signal"
        annotation (Placement(transformation(extent={{-92,-62},{-72,-42}})));

      Buildings.Fluid.Sensors.TemperatureTwoPort senTem1(
        redeclare package Medium = Medium,
        m_flow_nominal=1)
        "Temperature sensor"
        annotation (Placement(transformation(extent={{-20,-10},{0,10}})));

      Buildings.Fluid.Sensors.TemperatureTwoPort senTem2(
        redeclare package Medium = Medium,
        m_flow_nominal=2)
        "Temperature sensor"
        annotation (Placement(transformation(extent={{40,-10},{60,10}})));

      Buildings.Fluid.Sensors.TemperatureTwoPort senTem3(
        redeclare package Medium = Medium,
        m_flow_nominal=3)
        "Temperature sensor"
        annotation (Placement(transformation(extent={{-20,-70},{0,-50}})));

    equation
      connect(P1.y, bou1.p_in)
        annotation (Line(points={{-69,8},{-69,8},{-62,8}},
                        color={0,0,127}));
      connect(bou3.p_in, P3.y)
        annotation (Line(points={{-62,-52},{-62,-52},{-71,-52}},
                                                       color={0,0,127}));
      connect(bou3.ports[1], senTem3.port_a) annotation (Line(points={{-40,-60},{-40,
              -60},{-20,-60}}, color={0,127,255}));
      connect(senTem3.port_b, spl.port_3)
        annotation (Line(points={{0,-60},{20,-60},{20,-10}}, color={0,127,255}));
      connect(bou1.ports[1], senTem1.port_a)
        annotation (Line(points={{-40,0},{-30,0},{-20,0}}, color={0,127,255}));
      connect(senTem1.port_b, spl.port_1)
        annotation (Line(points={{0,0},{5,0},{10,0}}, color={0,127,255}));
      connect(spl.port_2, senTem2.port_a)
        annotation (Line(points={{30,0},{35,0},{40,0}}, color={0,127,255}));
      connect(senTem2.port_b, bou2.ports[1])
        annotation (Line(points={{60,0},{70,0}},        color={0,127,255}));
      annotation (experiment(Tolerance=1e-6, StopTime=100),
    __Dymola_Commands(file="modelica://Buildings/Resources/Scripts/Dymola/Fluid/FixedResistances/Examples/FlowJunction.mos"
            "Simulate and plot"),
    Documentation(info="<html>
<p>
This model demonstrates the use of the flow junction model
for different flow directions.
The example is configured such that the flow changes its direction in
each flow leg between <i>t = 0</i> seconds to <i>t = 100</i> seconds.
</p>
</html>",     revisions="<html>
<ul>
<li>
November 2, 2017, by Michael Wetter:<br/>
Removed import statement.
</li>
<li>
October 14, 2017 by Michael Wetter:<br/>
Updated documentation and added to Annex 60 library.<br/>
This is for
<a href=\"https://github.com/ibpsa/modelica-ibpsa/issues/451\">issue 451</a>.
</li>
<li>
July 20, 2007 by Michael Wetter:<br/>
First implementation.
</li>
</ul>
</html>"));
    end FlowJunction;

    model test_transition
      block State1
        Modelica.Blocks.Sources.Constant const(k=10)
          annotation (Placement(transformation(extent={{-60,20},{-40,40}})));
        Modelica.Blocks.Interfaces.RealOutput
                   y "Connector of Real output signal" annotation (Placement(
              transformation(extent={{100,0},{120,20}})));
      equation
        connect(const.y, y) annotation (Line(points={{-39,30},{30,30},{30,10},{
                110,10}}, color={0,0,127}));
        annotation (
          Icon(coordinateSystem(preserveAspectRatio=false), graphics={Text(
                extent={{-100,100},{100,-100}},
                lineColor={0,0,0},
                textString="%name")}),
          Diagram(coordinateSystem(preserveAspectRatio=false), graphics={Text(
                extent={{-100,100},{100,-100}},
                lineColor={0,0,0},
                textString="%stateName",
                fontSize=10)}),
          __Dymola_state=true,
          showDiagram=true,
          singleInstance=true);
      end State1;
      State1 state1
        annotation (Placement(transformation(extent={{-20,40},{0,60}})));
      block State2
        Modelica.Blocks.Sources.Constant const(k=20)
          annotation (Placement(transformation(extent={{-60,20},{-40,40}})));
        annotation (
          Icon(coordinateSystem(preserveAspectRatio=false), graphics={Text(
                extent={{-100,100},{100,-100}},
                lineColor={0,0,0},
                textString="%name")}),
          Diagram(coordinateSystem(preserveAspectRatio=false), graphics={Text(
                extent={{-100,100},{100,-100}},
                lineColor={0,0,0},
                textString="%stateName",
                fontSize=10)}),
          __Dymola_state=true,
          showDiagram=true,
          singleInstance=true);
      end State2;
      State2 state2
        annotation (Placement(transformation(extent={{20,0},{40,20}})));
      Modelica.Blocks.Sources.Ramp ramp(height=100, duration=100)
        annotation (Placement(transformation(extent={{-60,-20},{-40,0}})));
    equation
      transition(
            state1,
            state2,
            ramp.y >= 50) annotation (Line(
          points={{2,48},{30,22}},
          color={175,175,175},
          thickness=0.25,
          smooth=Smooth.Bezier), Text(
          string="%condition",
          extent={{-4,4},{-4,10}},
          fontSize=10,
          textStyle={TextStyle.Bold},
          horizontalAlignment=TextAlignment.Right));
      initialState(state1) annotation (Line(
          points={{-12,62},{-10,72}},
          color={175,175,175},
          thickness=0.25,
          smooth=Smooth.Bezier,
          arrow={Arrow.Filled,Arrow.None}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end test_transition;
  end debug;

  package Miscellaneous
    extends Modelica.Icons.VariantsPackage;
    package data_table
      model table

        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName=tableName,
          fileName=fileName,
          columns={2,3})
          annotation (Placement(transformation(extent={{-60,40},{-40,60}})));
        parameter String tableName="tab1"
          "Table name on file or in function usertab (see docu)";
        parameter String fileName=
            ModelicaServices.ExternalReferences.loadResource(
            "modelica://Buildings/Data/sst/gf.txt")
          "File where matrix is stored";
      equation

       annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end table;

      model table_b
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource(
              "modelica://Buildings/Data/pem.txt"),
          columns={2,3,4},
          extrapolation=Modelica.Blocks.Types.Extrapolation.Periodic)
          annotation (Placement(transformation(extent={{-20,-20},{0,0}})));
        Modelica.Thermal.HeatTransfer.Celsius.ToKelvin toKelvin
          annotation (Placement(transformation(extent={{20,-20},{40,0}})));
      equation
        connect(combiTimeTable.y[1], toKelvin.Celsius)
          annotation (Line(points={{1,-10},{18,-10}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end table_b;

      model table_c
        Fluid.Sources.Boundary_pT bou1(
          redeclare package Medium = Media.Water,
          p=100000,
          use_T_in=true,
          T=288.15,
          nPorts=1) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={0,30})));
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource(
              "modelica://Buildings/Data/pem.txt"),
          columns={2,3,4},
          extrapolation=Modelica.Blocks.Types.Extrapolation.Periodic)
          annotation (Placement(transformation(extent={{-80,0},{-60,20}})));
        Modelica.Thermal.HeatTransfer.Celsius.ToKelvin toKelvin
          annotation (Placement(transformation(extent={{-40,0},{-20,20}})));
      equation
        connect(combiTimeTable.y[1],toKelvin. Celsius)
          annotation (Line(points={{-59,10},{-42,10}},   color={0,0,127}));
        connect(toKelvin.Kelvin,bou1. T_in) annotation (Line(points={{-19,10},{
                -4,10},{-4,18}},     color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end table_c;

      model mass_flow_table
        Modelica.Fluid.Sources.FixedBoundary sortie_f(redeclare package Medium =
              Modelica.Media.Water.ConstantPropertyLiquidWater, nPorts=1) annotation (
           Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={90,10})));
        Modelica.Fluid.Sensors.MassFlowRate massFlowRate(redeclare package
            Medium =
              Modelica.Media.Water.ConstantPropertyLiquidWater)
          annotation (Placement(transformation(extent={{20,0},{40,20}})));
        Fluid.Movers.FlowControlled_dp fan(
          redeclare package Medium = Media.Water,
          m_flow_nominal=800,
          redeclare Fluid.Movers.Data.Pumps.Wilo.Stratos25slash1to4 per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          constantHead=870)
          annotation (Placement(transformation(extent={{-40,0},{-20,20}})));
        Fluid.Sources.Boundary_pT bou1(
          redeclare package Medium = Media.Water,
          p=100000,
          use_T_in=true,
          T=288.15,
          nPorts=1) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-70,-10})));
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource(
              "modelica://Buildings/Data/pem.txt"),
          columns={2,3,4},
          extrapolation=Modelica.Blocks.Types.Extrapolation.Periodic)
          annotation (Placement(transformation(extent={{-150,-40},{-130,-20}})));
        Modelica.Thermal.HeatTransfer.Celsius.ToKelvin toKelvin
          annotation (Placement(transformation(extent={{-110,-40},{-90,-20}})));
      equation
        connect(massFlowRate.port_b, sortie_f.ports[1])
          annotation (Line(points={{40,10},{80,10}}, color={0,127,255}));
        connect(fan.port_b, massFlowRate.port_a)
          annotation (Line(points={{-20,10},{20,10}}, color={0,127,255}));
        connect(combiTimeTable.y[1],toKelvin. Celsius)
          annotation (Line(points={{-129,-30},{-112,-30}},
                                                         color={0,0,127}));
        connect(toKelvin.Kelvin,bou1. T_in) annotation (Line(points={{-89,-30},
                {-74,-30},{-74,-22}},color={0,0,127}));
        connect(bou1.ports[1], fan.port_a) annotation (Line(points={{-70,0},{
                -56,0},{-56,10},{-40,10}}, color={0,127,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end mass_flow_table;

      model data_gf
        Modelica.Blocks.Sources.CombiTimeTable pem_data(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource(
              "modelica://Buildings/Data/froid/pem_froid.txt"),
          columns={2,3,4},
          extrapolation=Modelica.Blocks.Types.Extrapolation.Periodic)
          annotation (Placement(transformation(extent={{-100,80},{-80,100}})));
        Modelica.Thermal.HeatTransfer.Celsius.ToKelvin toKelvin
          annotation (Placement(transformation(extent={{-60,80},{-40,100}})));
        Modelica.Blocks.Sources.CombiTimeTable deg_data(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource(
              "modelica://Buildings/Data/froid/deg_froid.txt"),
          columns={2,3,4,5,6,7,8,9},
          extrapolation=Modelica.Blocks.Types.Extrapolation.Periodic)
          annotation (Placement(transformation(extent={{100,60},{80,80}})));
        Modelica.Blocks.Math.Gain gain(k=1/3.6)
          annotation (Placement(transformation(extent={{-60,60},{-80,80}})));
        Modelica.Thermal.HeatTransfer.Celsius.ToKelvin toKelvin1
          annotation (Placement(transformation(extent={{-60,0},{-80,20}})));
        Modelica.Blocks.Math.Add add
          annotation (Placement(transformation(extent={{40,-80},{20,-60}})));
        Modelica.Blocks.Sources.CombiTimeTable tfp_data(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource(
              "modelica://Buildings/Data/froid/tfp_froid.txt"),
          columns={7},
          extrapolation=Modelica.Blocks.Types.Extrapolation.Periodic)
          annotation (Placement(transformation(extent={{100,-60},{80,-40}})));
        Modelica.Blocks.Sources.CombiTimeTable gf_data(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource(
              "modelica://Buildings/Data/froid/gf1_froid.txt"),
          columns={2},
          extrapolation=Modelica.Blocks.Types.Extrapolation.Periodic)
          annotation (Placement(transformation(extent={{100,-100},{80,-80}})));
        Modelica.Thermal.HeatTransfer.Celsius.ToKelvin toKelvin2
          annotation (Placement(transformation(extent={{-60,30},{-80,50}})));
        Modelica.Blocks.Math.Add add1(k1=-1)
          annotation (Placement(transformation(extent={{0,-40},{-20,-20}})));
      equation
        connect(pem_data.y[1],toKelvin. Celsius)
          annotation (Line(points={{-79,90},{-62,90}},     color={0,0,127}));
        connect(deg_data.y[6],gain. u) annotation (Line(points={{79,70},{-58,70}},
                                           color={0,0,127}));
        connect(deg_data.y[5],toKelvin2. Celsius) annotation (Line(points={{79,70},
                {-38.5,70},{-38.5,40},{-58,40}},           color={0,0,127}));
        connect(tfp_data.y[1],add. u1) annotation (Line(points={{79,-50},{62,
                -50},{62,-64},{42,-64}},      color={0,0,127}));
        connect(gf_data.y[1],add. u2) annotation (Line(points={{79,-90},{60,-90},
                {60,-76},{42,-76}},           color={0,0,127}));
        connect(deg_data.y[4],toKelvin1. Celsius) annotation (Line(points={{79,70},
                {0,70},{0,10},{-58,10}},               color={0,0,127}));
        connect(deg_data.y[6],add1. u1) annotation (Line(points={{79,70},{36,70},
                {36,-24},{2,-24}},           color={0,0,127}));
        connect(add.y,add1. u2) annotation (Line(points={{19,-70},{12,-70},{12,
                -36},{2,-36}},         color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end data_gf;

      model pid_b
        Modelica.Blocks.Sources.Constant pression(k=1.87)
          "Scaled differential pressure setpoint"
          annotation (Placement(transformation(extent={{-80,40},{-60,60}})));
        Controls.Continuous.LimPID TT_PID(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=1,
          Ti=2.5,
          reverseActing=true)
                 annotation (Placement(transformation(extent={{-40,40},{-20,60}})));
        Modelica.Blocks.Sources.Constant pression1(k=1.90)
          "Scaled differential pressure setpoint"
          annotation (Placement(transformation(extent={{-80,0},{-60,20}})));
      equation
        connect(pression.y, TT_PID.u_s)
          annotation (Line(points={{-59,50},{-42,50}}, color={0,0,127}));
        connect(pression1.y, TT_PID.u_m) annotation (Line(points={{-59,10},{-30,
                10},{-30,38}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end pid_b;

      model tfp_table
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource(
              "modelica://Buildings/Data/tfp.txt"),
          columns={7,8,11,12})
          annotation (Placement(transformation(extent={{-60,20},{-40,40}})));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end tfp_table;

      model aa
        table table1(fileName=ModelicaServices.ExternalReferences.loadResource(
              "modelica://Buildings/Data/sst/gf1.txt"))
          annotation (Placement(transformation(extent={{-80,20},{-60,40}})));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end aa;

      model froid
        Modelica.Blocks.Sources.CombiTimeTable combiTimeTable(
          tableOnFile=true,
          tableName="tab1",
          fileName=ModelicaServices.ExternalReferences.loadResource(
              "modelica://Buildings/Data/sst/froid_caly.txt"),
          columns={2,3})
          annotation (Placement(transformation(extent={{-40,40},{-20,60}})));
        annotation (
          Icon(coordinateSystem(preserveAspectRatio=false)),
          Diagram(coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=13132800,
            Interval=600,
            __Dymola_Algorithm="Dassl"));
      end froid;
    end data_table;

    package parts
      model test_debit
        Fluid.Movers.SpeedControlled_y fan(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          inputType=Buildings.Fluid.Types.InputType.Continuous,
          addPowerToMedium=false)
          annotation (Placement(transformation(extent={{-20,100},{0,120}})));
        Modelica.Blocks.Sources.Ramp ramp(duration=200, startTime=100)
          annotation (Placement(transformation(extent={{-120,80},{-100,100}})));
        Fluid.Sources.Boundary_pT sortie_e(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          p=100000,
          use_T_in=false)
          annotation (Placement(transformation(extent={{-140,0},{-120,20}})));
        Fluid.Movers.SpeedControlled_y fan1(
          redeclare package Medium = Media.Sea_Water,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          inputType=Buildings.Fluid.Types.InputType.Continuous,
          addPowerToMedium=false)
          annotation (Placement(transformation(extent={{-20,60},{0,80}})));
        Fluid.Movers.SpeedControlled_y fan2(
          redeclare package Medium = Media.Sea_Water,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          inputType=Buildings.Fluid.Types.InputType.Continuous,
          addPowerToMedium=false)
          annotation (Placement(transformation(extent={{-20,20},{0,40}})));
        Fluid.Movers.SpeedControlled_y fan3(
          redeclare package Medium = Media.Sea_Water,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          inputType=Buildings.Fluid.Types.InputType.Continuous,
          addPowerToMedium=false)
          annotation (Placement(transformation(extent={{-20,-20},{0,0}})));
        Fluid.Movers.SpeedControlled_y fan4(
          redeclare package Medium = Media.Sea_Water,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          inputType=Buildings.Fluid.Types.InputType.Continuous,
          addPowerToMedium=false)
          annotation (Placement(transformation(extent={{-20,-60},{0,-40}})));
        Fluid.Movers.SpeedControlled_y fan5(
          redeclare package Medium = Media.Sea_Water,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          inputType=Buildings.Fluid.Types.InputType.Continuous,
          addPowerToMedium=false)
          annotation (Placement(transformation(extent={{-20,-100},{0,-80}})));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{
                  -140,-140},{140,140}})),                             Diagram(
              coordinateSystem(preserveAspectRatio=false, extent={{-140,-140},{
                  140,140}})),
          experiment(
            StopTime=400,
            Interval=10,
            __Dymola_Algorithm="Dassl"));
      end test_debit;

      model PumpsSeries "Two flow machines in series"
        extends Modelica.Icons.Example;
        package Medium = Buildings.Media.Water;

        parameter Modelica.SIunits.MassFlowRate m_flow_nominal=1
          "Nominal mass flow rate";

        Buildings.Fluid.Movers.SpeedControlled_y floMac1(
          redeclare package Medium = Medium,
          per(pressure(V_flow={0, m_flow_nominal/1000}, dp={2*4*1000, 0})),
          energyDynamics=Modelica.Fluid.Types.Dynamics.SteadyState)
          "Model of a flow machine"
          annotation (Placement(transformation(extent={{-20,50},{0,70}})));

        Buildings.Fluid.Sources.Boundary_pT sou(
          redeclare package Medium = Medium,
          use_p_in=false,
          p(displayUnit="Pa") = 300000,
          T=293.15,
          nPorts=1) annotation (Placement(transformation(extent={{-92,50},{-72,70}})));

        parameter Medium.ThermodynamicState state_start = Medium.setState_pTX(
            T=Medium.T_default,
            p=Medium.p_default,
            X=Medium.X_default) "Start state";
        parameter Modelica.SIunits.Density rho_nominal=Medium.density(
           state_start) "Density, used to compute fluid mass";

        Buildings.Fluid.Movers.SpeedControlled_y floMac2(
          redeclare package Medium = Medium,
          per(pressure(V_flow={0, m_flow_nominal/1000}, dp={2*4*1000, 0})),
          inputType=Buildings.Fluid.Types.InputType.Constant,
          energyDynamics=Modelica.Fluid.Types.Dynamics.SteadyState)
          "Model of a flow machine"
          annotation (Placement(transformation(extent={{60,50},{80,70}})));
        Modelica.Blocks.Sources.Step const1(
          height=-1,
          offset=1,
          startTime=150)
          annotation (Placement(transformation(extent={{-40,80},{-20,100}})));
        Buildings.Fluid.Sources.Boundary_pT sou1(
          redeclare package Medium = Medium,
          use_p_in=false,
          p(displayUnit="Pa") = 300000 + 4000,
          T=293.15,
          nPorts=1) annotation (Placement(transformation(extent={{156,50},{136,70}})));
      equation
        connect(const1.y, floMac1.y) annotation (Line(
            points={{-19,90},{-10,90},{-10,72}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(floMac1.port_b, floMac2.port_a) annotation (Line(
            points={{5.55112e-16,60},{60,60}},
            color={0,127,255}));
        connect(sou.ports[1], floMac1.port_a) annotation (Line(
            points={{-72,60},{-20,60}},
            color={0,127,255}));
        connect(floMac2.port_b, sou1.ports[1]) annotation (Line(
            points={{80,60},{136,60}},
            color={0,127,255}));
        annotation (
          Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{160,
                  160}})),
          __Dymola_Commands(file="modelica://Buildings/Resources/Scripts/Dymola/Fluid/Movers/Examples/PumpsSeries.mos"
              "Simulate and plot"),
          Documentation(info="<html>
This example tests the configuration of two flow machines that are installed in series.
Both flow machines start with full speed.
At <i>t=150</i> seconds, the speed of the flow machine on the left is reduced to zero.
As its speed is reduced, the mass flow rate is reduced. Note that even at zero input, the mass flow rate is non-zero,
but the pressure drop of the pump <code>floMac1.dp</code> is positive, which means that this pump has a flow resistance.
However, <code>flowMac2.dp</code> is always negative, as this pump has a constant control input of 1.
</html>",       revisions="<html>
<ul>
<li>
April 2, 2015, by Filip Jorissen:<br/>
Set constant speed for pump using a <code>parameter</code>
instead of a <code>realInput</code>.
</li>
<li>
May 29, 2014, by Michael Wetter:<br/>
Removed undesirable annotation <code>Evaluate=true</code>.
</li>
<li>
February 14, 2012, by Michael Wetter:<br/>
Added filter for start-up and shut-down transient.
</li>
<li>
March 24 2010, by Michael Wetter:<br/>
First implementation.
</li>
</ul>
</html>"),experiment(
            StopTime=300,
            Tolerance=1e-06));
      end PumpsSeries;

      model aaa
        Fluid.Sources.Boundary_pT bou1(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          p=100000,
          nPorts=1)
          annotation (Placement(transformation(extent={{-100,-40},{-80,-20}})));
        Fluid.Sources.Boundary_pT bou2(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          p=300000,
          nPorts=1)
          annotation (Placement(transformation(extent={{100,-40},{80,-20}})));
        Fluid.Movers.SpeedControlled_y fan(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          inputType=Buildings.Fluid.Types.InputType.Continuous,
          addPowerToMedium=false)
          annotation (Placement(transformation(extent={{-20,-40},{0,-20}})));
        Modelica.Blocks.Sources.Ramp ramp(duration=100, startTime=100)
          annotation (Placement(transformation(extent={{-40,20},{-20,40}})));
      equation
        connect(ramp.y, fan.y)
          annotation (Line(points={{-19,30},{-10,30},{-10,-18}}, color={0,0,127}));
        connect(bou1.ports[1], fan.port_a) annotation (Line(points={{-80,-30},{-52,-30},
                {-52,-30},{-20,-30}}, color={0,127,255}));
        connect(fan.port_b, bou2.ports[1])
          annotation (Line(points={{0,-30},{80,-30}}, color={0,127,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end aaa;
    end parts;

    package Regulation
      model test_0
        Modelica.Blocks.Sources.Constant const(k=0.5)
          annotation (Placement(transformation(extent={{-100,-40},{-80,-20}})));
        Modelica.Blocks.Sources.Constant const1(k=1)
          annotation (Placement(transformation(extent={{-100,20},{-80,40}})));
        Modelica.Blocks.Continuous.LimPID PID(controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=1,
          Ti=0.5,
          yMax=1,
          yMin=0)
          annotation (Placement(transformation(extent={{-20,0},{0,20}})));
      equation
        connect(const.y, PID.u_m) annotation (Line(points={{-79,-30},{-10,-30},
                {-10,-2}}, color={0,0,127}));
        connect(const1.y, PID.u_s) annotation (Line(points={{-79,30},{-50,30},{
                -50,10},{-22,10}}, color={0,0,127}));
        annotation (
          Icon(coordinateSystem(preserveAspectRatio=false)),
          Diagram(coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=100,
            Interval=1,
            __Dymola_Algorithm="Dassl"));
      end test_0;

      model PID_RJF
        Modelica.Blocks.Sources.Constant TT_Set(k=30)
          "Scaled differential pressure setpoint"
          annotation (Placement(transformation(extent={{-60,40},{-40,60}})));
        Controls.Continuous.LimPID TT_PID(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=0.5,
          Ti=0.5)
                 annotation (Placement(transformation(extent={{-20,40},{0,60}})));
        Modelica.Blocks.Sources.Ramp ramp(
          height=32,
          duration=30,
          startTime=20)
          annotation (Placement(transformation(extent={{-60,0},{-40,20}})));
        Modelica.Blocks.Sources.Constant TDT_Set(k=5)
          "Scaled differential pressure setpoint"
          annotation (Placement(transformation(extent={{-60,140},{-40,160}})));
        Controls.Continuous.LimPID TDT_PID(
          controllerType=Modelica.Blocks.Types.SimpleController.PI,
          k=0.5,
          Ti=0.5)
          annotation (Placement(transformation(extent={{-20,140},{0,160}})));
        Modelica.Blocks.Sources.Ramp ramp1(
          height=2,
          duration=50,
          offset=4,
          startTime=10)
          annotation (Placement(transformation(extent={{-60,100},{-40,120}})));
        Modelica.Blocks.Math.MinMax maxi(nu=2)
          annotation (Placement(transformation(extent={{40,140},{60,160}})));
      equation
        connect(TT_Set.y, TT_PID.u_s)
          annotation (Line(points={{-39,50},{-22,50}}, color={0,0,127}));
        connect(ramp.y, TT_PID.u_m) annotation (Line(points={{-39,10},{-10,10},{
                -10,38}}, color={0,0,127}));
        connect(TDT_Set.y, TDT_PID.u_s)
          annotation (Line(points={{-39,150},{-22,150}}, color={0,0,127}));
        connect(ramp1.y, TDT_PID.u_m) annotation (Line(points={{-39,110},{-10,110},
                {-10,138}}, color={0,0,127}));
        connect(TDT_PID.y, maxi.u[1]) annotation (Line(points={{1,150},{10,150},{
                10,153.5},{40,153.5}}, color={0,0,127}));
        connect(TT_PID.y, maxi.u[2]) annotation (Line(points={{1,50},{20,50},{20,
                146.5},{40,146.5}}, color={0,0,127}));
        annotation (
          Icon(coordinateSystem(preserveAspectRatio=false)),
          Diagram(coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=80,
            Interval=1,
            __Dymola_Algorithm="Dassl"));
      end PID_RJF;
    end Regulation;

    package Pumps
      model pump_0
        Fluid.Sources.Boundary_pT bou(
          redeclare package Medium = Buildings.Media.Water,
          T=298.15,
          nPorts=2)
          annotation (Placement(transformation(extent={{-100,0},{-80,20}})));
        Fluid.Sensors.TemperatureTwoPort senTem(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=50)
          annotation (Placement(transformation(extent={{-60,0},{-40,20}})));
        Fluid.Sensors.TemperatureTwoPort senTem1(redeclare package Medium =
              Buildings.Media.Water, m_flow_nominal=50)
          annotation (Placement(transformation(extent={{40,0},{60,20}})));
        Fluid.FixedResistances.Pipe pip(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=50,
          thicknessIns=0.1,
          lambdaIns=0.01,
          diameter=2,
          length=20)
          annotation (Placement(transformation(extent={{10,0},{30,20}})));
        HeatTransfer.Sources.FixedTemperature TEnv(T=263.15)
          annotation (Placement(transformation(extent={{-10,80},{10,100}})));
        Modelica.Blocks.Sources.IntegerExpression integerExpression(y=3)
          annotation (Placement(transformation(extent={{-80,40},{-60,60}})));
        Fluid.Movers.FlowControlled_m_flow fan1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=50,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          inputType=Buildings.Fluid.Types.InputType.Stages,
          dp_nominal=1000,
          constantMassFlowRate=50,
          massFlowRates=50*{0,1,1.5})
          annotation (Placement(transformation(extent={{-20,0},{0,20}})));
      equation
        connect(bou.ports[1], senTem.port_a) annotation (Line(points={{-80,12},
                {-70,12},{-70,10},{-60,10}}, color={0,127,255}));
        connect(pip.port_b, senTem1.port_a)
          annotation (Line(points={{30,10},{40,10}}, color={0,127,255}));
        connect(TEnv.port, pip.heatPort)
          annotation (Line(points={{10,90},{20,90},{20,15}},color={191,0,0}));
        connect(senTem1.port_b, bou.ports[2]) annotation (Line(points={{60,10},
                {80,10},{80,-18},{-74,-18},{-74,8},{-80,8}}, color={0,127,255}));
        connect(senTem.port_b, fan1.port_a)
          annotation (Line(points={{-40,10},{-20,10}}, color={0,127,255}));
        connect(pip.port_a, fan1.port_b)
          annotation (Line(points={{10,10},{0,10}}, color={0,127,255}));
        connect(integerExpression.y, fan1.stage) annotation (Line(points={{-59,
                50},{-10,50},{-10,22}}, color={255,127,0}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end pump_0;

      model test_pump
        Fluid.Sources.Boundary_pT bou(redeclare package Medium =
              Buildings.Media.Water,
          p=100000,
          nPorts=2)
          annotation (Placement(transformation(extent={{100,0},{80,20}})));
        Fluid.Actuators.Valves.TwoWayLinear val1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=600,
          dpValve_nominal=20000,
          use_inputFilter=false)
          annotation (Placement(transformation(extent={{10,0},{30,20}})));
        Modelica.Blocks.Sources.Ramp ramp(
          height=1,
          duration=3000,
          startTime=500)
          annotation (Placement(transformation(extent={{-100,60},{-80,80}})));
        Fluid.Movers.FlowControlled_dp fan1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=600,
          redeclare Fluid.Movers.Data.Generic per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          use_inputFilter=true,
          dp_nominal=10000,
          constantHead=20000)
          annotation (Placement(transformation(extent={{-60,0},{-40,20}})));
      equation
        connect(val1.port_b, bou.ports[1]) annotation (Line(points={{30,10},{46,
                10},{46,12},{80,12}}, color={0,127,255}));
        connect(ramp.y, val1.y)
          annotation (Line(points={{-79,70},{20,70},{20,22}},
                                                            color={0,0,127}));
        connect(fan1.port_b, val1.port_a)
          annotation (Line(points={{-40,10},{10,10}},  color={0,127,255}));
        connect(fan1.port_a, bou.ports[2]) annotation (Line(points={{-60,10},{
                -80,10},{-80,-20},{60,-20},{60,8},{80,8}}, color={0,127,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=4000,
            __Dymola_NumberOfIntervals=4000,
            __Dymola_Algorithm="Dassl"));
      end test_pump;

      model test_pump_y
        Fluid.Sources.Boundary_pT           sou1(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          use_p_in=false,
          p(displayUnit="bar") = 100000,
          T=298.15,
          nPorts=2) "Boundary condition for flow source"
          annotation (Placement(
              transformation(extent={{10,-10},{-10,10}},
              rotation=270,
              origin={-90,-10})));
        Fluid.FixedResistances.PressureDrop res(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal=747.6*1025/3600,
          dp_nominal=65900)
          annotation (Placement(transformation(extent={{-20,40},{0,60}})));
        Fluid.Actuators.Valves.TwoWayTable val(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal=747.6*1025/3600,
          dpValve_nominal=2000,
          use_inputFilter=false,
          flowCharacteristics=Fluid.Actuators.Valves.Data.TFP_data())
          annotation (Placement(transformation(extent={{40,40},{60,60}})));
        Fluid.Sensors.VolumeFlowRate senVolFlo(redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water, m_flow_nominal=865*1020/3600)
          annotation (Placement(transformation(extent={{20,0},{0,20}})));
        Modelica.Blocks.Sources.Constant const(k=0.22)
          annotation (Placement(transformation(extent={{0,80},{20,100}})));
        Modelica.Blocks.Interfaces.RealOutput y
          annotation (Placement(transformation(extent={{100,20},{120,40}})));
        Modelica.Blocks.Sources.Ramp ramp(
          height=800/3.6,
          duration=200,
          startTime=100)
          annotation (Placement(transformation(extent={{-100,80},{-80,100}})));
        Fluid.Movers.FlowControlled_m_flow fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=720/3.6,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          use_inputFilter=false)
          annotation (Placement(transformation(extent={{-60,40},{-40,60}})));
      equation
        connect(res.port_b, val.port_a)
          annotation (Line(points={{0,50},{40,50}}, color={0,127,255}));
        connect(val.port_b, senVolFlo.port_a) annotation (Line(points={{60,50},{70,50},
                {70,10},{20,10}}, color={0,127,255}));
        connect(senVolFlo.port_b, sou1.ports[1]) annotation (Line(points={{0,10},{
                -88,10},{-88,-3.55271e-15}},
                                         color={0,127,255}));
        connect(const.y, val.y)
          annotation (Line(points={{21,90},{50,90},{50,62}}, color={0,0,127}));
        y=senVolFlo.V_flow*3600;
        connect(ramp.y, fan.m_flow_in) annotation (Line(points={{-79,90},{-50,
                90},{-50,62}}, color={0,0,127}));
        connect(sou1.ports[2], fan.port_a) annotation (Line(points={{-92,
                -3.55271e-15},{-76,-3.55271e-15},{-76,50},{-60,50}}, color={0,
                127,255}));
        connect(fan.port_b, res.port_a) annotation (Line(points={{-40,50},{-30,
                50},{-30,50},{-20,50}}, color={0,127,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end test_pump_y;

      model valve_RJF_bis
        Fluid.Sources.Boundary_pT           sou1(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          use_p_in=false,
          p(displayUnit="bar") = 100000,
          T=298.15,
          nPorts=4) "Boundary condition for flow source"
          annotation (Placement(
              transformation(extent={{10,-10},{-10,10}},
              rotation=270,
              origin={-90,-10})));
        Fluid.Movers.FlowControlled_dp fan(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal=747.6*1025/3600,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          use_inputFilter=false,
          constantHead(displayUnit="bar") = 187000)
          annotation (Placement(transformation(extent={{-60,40},{-40,60}})));
        Fluid.FixedResistances.PressureDrop res(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal=747.6*1025/3600,
          dp_nominal=65900)
          annotation (Placement(transformation(extent={{-20,40},{0,60}})));
        Fluid.Actuators.Valves.TwoWayTable val(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal=747.6*1025/3600,
          dpValve_nominal=2000,
          use_inputFilter=false,
          flowCharacteristics=Fluid.Actuators.Valves.Data.TFP_data())
          annotation (Placement(transformation(extent={{40,40},{60,60}})));
        Fluid.Sensors.VolumeFlowRate senVolFlo(redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water, m_flow_nominal=865*1020/3600)
          annotation (Placement(transformation(extent={{20,0},{0,20}})));
        Modelica.Blocks.Sources.Constant const(k=0.22)
          annotation (Placement(transformation(extent={{0,80},{20,100}})));
        Modelica.Blocks.Interfaces.RealOutput y
          annotation (Placement(transformation(extent={{100,20},{120,40}})));
        Fluid.Movers.SpeedControlled_y fan1(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          use_inputFilter=false)
          annotation (Placement(transformation(extent={{-60,-80},{-40,-60}})));
        Fluid.FixedResistances.PressureDrop res1(
          redeclare package Medium = Media.Sea_Water,
          m_flow_nominal=747.6*1025/3600,
          dp_nominal=65900)
          annotation (Placement(transformation(extent={{20,-80},{40,-60}})));
        Fluid.Actuators.Valves.TwoWayTable val1(
          redeclare package Medium = Media.Sea_Water,
          m_flow_nominal=747.6*1025/3600,
          dpValve_nominal=2000,
          use_inputFilter=false,
          flowCharacteristics=Fluid.Actuators.Valves.Data.TFP_data())
          annotation (Placement(transformation(extent={{80,-80},{100,-60}})));
        Fluid.Sensors.VolumeFlowRate senVolFlo1(redeclare package Medium =
              Media.Sea_Water, m_flow_nominal=865*1020/3600)
          annotation (Placement(transformation(extent={{0,-120},{-20,-100}})));
        Modelica.Blocks.Sources.Constant const1(k=0.22)
          annotation (Placement(transformation(extent={{40,-40},{60,-20}})));
        Fluid.Sensors.RelativePressure senRelPre
          annotation (Placement(transformation(extent={{-60,-40},{-40,-20}})));
        Modelica.Blocks.Sources.Constant const2(k=187000)
          annotation (Placement(transformation(extent={{-220,-60},{-200,-40}})));
        Controls.Continuous.LimPID           conPID(
          Td=1,
          k=0.5,
          Ti=15,
          reverseActing=true)
                 annotation (Placement(transformation(extent={{-160,-60},{-140,
                  -40}})));
        Modelica.Blocks.Math.Gain gain1(k=-1)
          annotation (Placement(transformation(extent={{-120,-100},{-140,-80}})));
      equation
        connect(sou1.ports[1], fan.port_a) annotation (Line(points={{-87,
                -3.55271e-15},{-87,50},{-60,50}}, color={0,127,255}));
        connect(fan.port_b, res.port_a)
          annotation (Line(points={{-40,50},{-20,50}}, color={0,127,255}));
        connect(res.port_b, val.port_a)
          annotation (Line(points={{0,50},{40,50}}, color={0,127,255}));
        connect(val.port_b, senVolFlo.port_a) annotation (Line(points={{60,50},{70,50},
                {70,10},{20,10}}, color={0,127,255}));
        connect(const.y, val.y)
          annotation (Line(points={{21,90},{50,90},{50,62}}, color={0,0,127}));
        y=senVolFlo.V_flow*3600;
        connect(res1.port_b, val1.port_a)
          annotation (Line(points={{40,-70},{80,-70}}, color={0,127,255}));
        connect(val1.port_b, senVolFlo1.port_a) annotation (Line(points={{100,-70},{110,
                -70},{110,-110},{0,-110}}, color={0,127,255}));
        connect(const1.y, val1.y)
          annotation (Line(points={{61,-30},{90,-30},{90,-58}}, color={0,0,127}));
        connect(fan1.port_b, res1.port_a)
          annotation (Line(points={{-40,-70},{20,-70}}, color={0,127,255}));
        connect(senRelPre.port_a, fan1.port_a) annotation (Line(points={{-60,-30},{-68,
                -30},{-68,-70},{-60,-70}}, color={0,127,255}));
        connect(senRelPre.port_b, fan1.port_b) annotation (Line(points={{-40,-30},{-28,
                -30},{-28,-70},{-40,-70}}, color={0,127,255}));
        connect(senVolFlo.port_b, sou1.ports[2]) annotation (Line(points={{0,10},
                {-44,10},{-44,0},{-89,0}}, color={0,127,255}));
        connect(senVolFlo1.port_b, sou1.ports[3]) annotation (Line(points={{-20,
                -110},{-112,-110},{-112,10},{-91,10},{-91,0}}, color={0,127,255}));
        connect(fan1.port_a, sou1.ports[4]) annotation (Line(points={{-60,-70},
                {-102,-70},{-102,0},{-93,0}}, color={0,127,255}));
        connect(const2.y, conPID.u_s) annotation (Line(points={{-199,-50},{-182,
                -50},{-182,-50},{-162,-50}}, color={0,0,127}));
        connect(conPID.y, fan1.y) annotation (Line(points={{-139,-50},{-50,-50},
                {-50,-58}}, color={0,0,127}));
        connect(senRelPre.p_rel, gain1.u) annotation (Line(points={{-50,-39},{
                -50,-44},{-88,-44},{-88,-90},{-118,-90}}, color={0,0,127}));
        connect(gain1.y, conPID.u_m) annotation (Line(points={{-141,-90},{-150,
                -90},{-150,-62}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end valve_RJF_bis;

      model multiple_pumps
        Fluid.Sources.Boundary_pT           sou1(
          redeclare package Medium = Media.Sea_Water,
          use_p_in=false,
          p(displayUnit="bar") = 100000,
          T=298.15,
          nPorts=3) "Boundary condition for flow source"
          annotation (Placement(
              transformation(extent={{10,-10},{-10,10}},
              rotation=270,
              origin={-72,70})));
        Fluid.Movers.SpeedControlled_y fan1(
          redeclare package Medium = Media.Sea_Water,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          use_inputFilter=false)
          annotation (Placement(transformation(extent={{-30,0},{-10,20}})));
        Fluid.FixedResistances.PressureDrop res1(
          redeclare package Medium = Media.Sea_Water,
          m_flow_nominal=747.6*1025/3600,
          dp_nominal=65900)
          annotation (Placement(transformation(extent={{38,0},{58,20}})));
        Fluid.Actuators.Valves.TwoWayTable val1(
          redeclare package Medium = Media.Sea_Water,
          m_flow_nominal=747.6*1025/3600,
          dpValve_nominal=2000,
          use_inputFilter=false,
          flowCharacteristics=Fluid.Actuators.Valves.Data.TFP_data())
          annotation (Placement(transformation(extent={{98,0},{118,20}})));
        Fluid.Sensors.VolumeFlowRate senVolFlo1(redeclare package Medium =
              Media.Sea_Water, m_flow_nominal=865*1020/3600)
          annotation (Placement(transformation(extent={{40,-100},{20,-80}})));
        Modelica.Blocks.Sources.Constant const1(k=1)
          annotation (Placement(transformation(extent={{58,40},{78,60}})));
        Fluid.Sensors.RelativePressure senRelPre
          annotation (Placement(transformation(extent={{-32,40},{-12,60}})));
        Modelica.Blocks.Sources.Constant const2(k=300000)
          annotation (Placement(transformation(extent={{-202,20},{-182,40}})));
        Controls.Continuous.LimPID           conPID(
          Td=1,
          k=0.5,
          Ti=15,
          reverseActing=true)
                 annotation (Placement(transformation(extent={{-142,20},{-122,
                  40}})));
        Modelica.Blocks.Math.Gain gain1(k=-1)
          annotation (Placement(transformation(extent={{-100,-20},{-120,0}})));
        Fluid.Movers.SpeedControlled_y fan2(
          redeclare package Medium = Media.Sea_Water,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          use_inputFilter=false)
          annotation (Placement(transformation(extent={{-30,-60},{-10,-40}})));
        Modelica.Blocks.Sources.Constant const3(k=300000)
          annotation (Placement(transformation(extent={{-200,-60},{-180,-40}})));
      equation
        connect(res1.port_b,val1. port_a)
          annotation (Line(points={{58,10},{98,10}},   color={0,127,255}));
        connect(val1.port_b,senVolFlo1. port_a) annotation (Line(points={{118,10},
                {128,10},{128,-90},{40,-90}},
                                           color={0,127,255}));
        connect(const1.y,val1. y)
          annotation (Line(points={{79,50},{108,50},{108,22}},  color={0,0,127}));
        connect(senRelPre.port_a,fan1. port_a) annotation (Line(points={{-32,50},
                {-40,50},{-40,10},{-30,10}},
                                           color={0,127,255}));
        connect(senRelPre.port_b,fan1. port_b) annotation (Line(points={{-12,50},
                {0,50},{0,10},{-10,10}},   color={0,127,255}));
        connect(senVolFlo1.port_b, sou1.ports[3]) annotation (Line(points={{20,-90},
                {-92,-90},{-92,90},{-74.6667,90},{-74.6667,80}},      color={0,
                127,255}));
        connect(const2.y, conPID.u_s)
          annotation (Line(points={{-181,30},{-144,30}}, color={0,0,127}));
        connect(conPID.y, fan1.y) annotation (Line(points={{-121,30},{-20,30},{
                -20,22}}, color={0,0,127}));
        connect(senRelPre.p_rel, gain1.u) annotation (Line(points={{-22,41},{
                -22,36},{-60,36},{-60,-10},{-98,-10}}, color={0,0,127}));
        connect(gain1.y, conPID.u_m) annotation (Line(points={{-121,-10},{-132,
                -10},{-132,18}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end multiple_pumps;

      model multiple_pumps_test
        Fluid.FixedResistances.PressureDrop res1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=747.6*1025/3600,
          dp_nominal=65900)
          annotation (Placement(transformation(extent={{60,40},{80,60}})));
        Fluid.Sources.Boundary_pT           sou1(
          redeclare package Medium = Media.Sea_Water,
          use_p_in=false,
          p(displayUnit="bar") = 100000,
          T=298.15,
          nPorts=4) "Boundary condition for flow source"
          annotation (Placement(
              transformation(extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-110,30})));
        Controls.Continuous.LimPID           conPID(
          Td=1,
          k=0.5,
          Ti=15,
          reverseActing=true)
                 annotation (Placement(transformation(extent={{-100,100},{-80,
                  120}})));
        Fluid.Movers.SpeedControlled_y fan(redeclare package Medium =
              Buildings.Media.Water, redeclare
            Fluid.Movers.Data.Pumps.KSB.KSB_edm per)
          annotation (Placement(transformation(extent={{-40,60},{-20,80}})));
        Fluid.Movers.SpeedControlled_y fan1(redeclare package Medium =
              Buildings.Media.Water, redeclare
            Fluid.Movers.Data.Pumps.KSB.KSB_edm per)
          annotation (Placement(transformation(extent={{-40,20},{-20,40}})));
        Fluid.Sensors.RelativePressure senRelPre
          annotation (Placement(transformation(extent={{-20,140},{0,160}})));
        Modelica.Blocks.Sources.Constant const2(k=187000)
          annotation (Placement(transformation(extent={{-140,100},{-120,120}})));
        Modelica.Blocks.Math.Gain gain1(k=-1)
          annotation (Placement(transformation(extent={{-140,60},{-120,80}})));
        Modelica.Blocks.Sources.Constant const1(k=0)
          annotation (Placement(transformation(extent={{-200,42},{-180,62}})));
        Fluid.Actuators.Valves.TwoWayLinear val(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=700/3.6,
          dpValve_nominal=1000,
          y_start=0)
          annotation (Placement(transformation(extent={{0,20},{20,40}})));
        Modelica.Blocks.Sources.Constant const3(k=0)
          annotation (Placement(transformation(extent={{-60,-10},{-40,10}})));
        Fluid.Actuators.Valves.TwoWayQuickOpening val1
          annotation (Placement(transformation(extent={{-240,-8},{-220,12}})));
      equation
        connect(res1.port_b, sou1.ports[1]) annotation (Line(points={{80,50},{
                100,50},{100,-20},{-90,-20},{-90,33},{-100,33}}, color={0,127,
                255}));
        connect(conPID.y, fan.y) annotation (Line(points={{-79,110},{-30,110},{
                -30,82}}, color={0,0,127}));
        connect(const2.y, conPID.u_s)
          annotation (Line(points={{-119,110},{-102,110}}, color={0,0,127}));
        connect(senRelPre.p_rel, gain1.u) annotation (Line(points={{-10,141},{
                -10,130},{-160,130},{-160,70},{-142,70}}, color={0,0,127}));
        connect(gain1.y, conPID.u_m) annotation (Line(points={{-119,70},{-90,70},
                {-90,98}}, color={0,0,127}));
        connect(const1.y, fan1.y) annotation (Line(points={{-179,52},{-30,52},{
                -30,42}}, color={0,0,127}));
        connect(senRelPre.port_a, sou1.ports[2]) annotation (Line(points={{-20,
                150},{-74,150},{-74,30},{-90,30},{-100,30},{-100,31}}, color={0,
                127,255}));
        connect(sou1.ports[3], fan1.port_a) annotation (Line(points={{-100,29},
                {-72,29},{-72,30},{-40,30}}, color={0,127,255}));
        connect(sou1.ports[4], fan.port_a) annotation (Line(points={{-100,27},{
                -70,27},{-70,70},{-40,70}}, color={0,127,255}));
        connect(fan.port_b, res1.port_a) annotation (Line(points={{-20,70},{40,
                70},{40,50},{60,50}}, color={0,127,255}));
        connect(senRelPre.port_b, res1.port_a) annotation (Line(points={{0,150},
                {40,150},{40,50},{60,50}}, color={0,127,255}));
        connect(fan1.port_b, val.port_a)
          annotation (Line(points={{-20,30},{0,30}}, color={0,127,255}));
        connect(val.port_b, res1.port_a) annotation (Line(points={{20,30},{40,
                30},{40,50},{60,50}}, color={0,127,255}));
        connect(const3.y, val.y) annotation (Line(points={{-39,0},{-8,0},{-8,52},
                {10,52},{10,42}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end multiple_pumps_test;

      model pem

        Fluid.Actuators.Valves.TwoWayLinear val(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal=720*1025/3600,
          dpValve_nominal=1000,
          y_start=0)
          annotation (Placement(transformation(extent={{0,60},{20,80}})));
        Fluid.Movers.SpeedControlled_y fan(redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water, redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm
            per) annotation (Placement(transformation(extent={{-40,60},{-20,80}})));
        Fluid.Sources.Boundary_pT sea_water(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          use_p_in=false,
          p(displayUnit="bar") = 100000,
          T=298.15,
          nPorts=7) "Boundary condition for flow source" annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-90,-30})));
        Fluid.Movers.SpeedControlled_y fan1(redeclare package Medium =
              Media.Sea_Water, redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm
            per) annotation (Placement(transformation(extent={{-40,20},{-20,40}})));
        Fluid.Movers.SpeedControlled_y fan2(redeclare package Medium =
              Media.Sea_Water, redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm
            per) annotation (Placement(transformation(extent={{-40,-20},{-20,0}})));
        Buildings.Fluid.Movers.SpeedControlled_y
                                       fan3(redeclare package Medium =
              Media.Sea_Water, redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm
            per) annotation (Placement(transformation(extent={{-40,-60},{-20,
                  -40}})));
        Buildings.Fluid.Movers.SpeedControlled_y
                                       fan4(redeclare package Medium =
              Media.Sea_Water, redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm
            per) annotation (Placement(transformation(extent={{-40,-100},{-20,
                  -80}})));
        Fluid.Actuators.Valves.TwoWayLinear val1(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal=720*1025/3600,
          dpValve_nominal=1000,
          y_start=0)
          annotation (Placement(transformation(extent={{0,20},{20,40}})));
        Fluid.Actuators.Valves.TwoWayLinear val2(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal=720*1025/3600,
          dpValve_nominal=1000,
          y_start=0)
          annotation (Placement(transformation(extent={{0,-20},{20,0}})));
        Fluid.Actuators.Valves.TwoWayLinear val3(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal=720*1025/3600,
          dpValve_nominal=1000,
          y_start=0)
          annotation (Placement(transformation(extent={{0,-60},{20,-40}})));
        Fluid.Actuators.Valves.TwoWayLinear val4(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal=720*1025/3600,
          dpValve_nominal=1000,
          y_start=0)
          annotation (Placement(transformation(extent={{0,-100},{20,-80}})));
        Buildings.Fluid.FixedResistances.PressureDrop
                                            res(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=747.6*1025/3600,
          dp_nominal=65900)
          annotation (Placement(transformation(extent={{80,20},{100,0}})));
        Buildings.Fluid.Sensors.RelativePressure
                                       senRelPre
          annotation (Placement(transformation(extent={{-20,120},{0,140}})));
      equation
        connect(sea_water.ports[1], fan.port_a) annotation (Line(points={{-80,
                -26.5714},{-60,-26.5714},{-60,70},{-40,70}}, color={0,127,255}));
        connect(sea_water.ports[2], fan1.port_a) annotation (Line(points={{-80,
                -27.7143},{-60,-27.7143},{-60,30},{-40,30}}, color={0,127,255}));
        connect(sea_water.ports[3], fan2.port_a) annotation (Line(points={{-80,
                -28.8571},{-60,-28.8571},{-60,-10},{-40,-10}}, color={0,127,255}));
        connect(sea_water.ports[4], fan3.port_a) annotation (Line(points={{-80,
                -30},{-60,-30},{-60,-50},{-40,-50}}, color={0,127,255}));
        connect(sea_water.ports[5], fan4.port_a) annotation (Line(points={{-80,
                -31.1429},{-60,-31.1429},{-60,-90},{-40,-90}}, color={0,127,255}));
        connect(fan.port_b, val.port_a)
          annotation (Line(points={{-20,70},{0,70}}, color={0,127,255}));
        connect(fan1.port_b, val1.port_a)
          annotation (Line(points={{-20,30},{0,30}}, color={0,127,255}));
        connect(fan2.port_b, val2.port_a)
          annotation (Line(points={{-20,-10},{0,-10}}, color={0,127,255}));
        connect(fan3.port_b, val3.port_a)
          annotation (Line(points={{-20,-50},{0,-50}}, color={0,127,255}));
        connect(fan4.port_b, val4.port_a)
          annotation (Line(points={{-20,-90},{0,-90}}, color={0,127,255}));
        connect(val.port_b, res.port_a) annotation (Line(points={{20,70},{50,70},
                {50,10},{80,10}}, color={0,127,255}));
        connect(val1.port_b, res.port_a) annotation (Line(points={{20,30},{50,
                30},{50,10},{80,10}}, color={0,127,255}));
        connect(val2.port_b, res.port_a) annotation (Line(points={{20,-10},{50,
                -10},{50,10},{80,10}}, color={0,127,255}));
        connect(val3.port_b, res.port_a) annotation (Line(points={{20,-50},{50,
                -50},{50,10},{80,10}}, color={0,127,255}));
        connect(val4.port_b, res.port_a) annotation (Line(points={{20,-90},{50,
                -90},{50,10},{80,10}}, color={0,127,255}));
        connect(res.port_b, sea_water.ports[6]) annotation (Line(points={{100,10},
                {120,10},{120,-120},{-70,-120},{-70,-32.2857},{-80,-32.2857}},
              color={0,127,255}));
        connect(sea_water.ports[7], senRelPre.port_a) annotation (Line(points={{-80,
                -33.4286},{-60,-33.4286},{-60,130},{-20,130}},      color={0,
                127,255}));
        connect(senRelPre.port_b, res.port_a) annotation (Line(points={{0,130},
                {50,130},{50,10},{80,10}}, color={0,127,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end pem;

      model pump_filter_dp
        Fluid.Sources.Boundary_pT           sou1(
          redeclare package Medium = Media.Sea_Water,
          use_p_in=false,
          p(displayUnit="bar") = 100000,
          T=298.15,
          nPorts=3) "Boundary condition for flow source"
          annotation (Placement(
              transformation(extent={{10,-10},{-10,10}},
              rotation=270,
              origin={-70,-90})));
        Fluid.FixedResistances.PressureDrop res(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=50,
          dp_nominal=30000)
          annotation (Placement(transformation(extent={{20,60},{40,40}})));
        Fluid.Movers.FlowControlled_dp fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=747.6*1025/3600,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          constantHead(displayUnit="Pa") = 60000)
          annotation (Placement(transformation(extent={{-40,40},{-20,60}})));
        Fluid.FixedResistances.PressureDrop res1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=50,
          dp_nominal=30000)
          annotation (Placement(transformation(extent={{60,60},{80,40}})));
        Fluid.FixedResistances.PressureDrop res2(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=100,
          dp_nominal=60000)
          annotation (Placement(transformation(extent={{40,20},{60,0}})));
      equation
        connect(sou1.ports[1], fan.port_a) annotation (Line(points={{-67.3333,
                -80},{-67.3333,50},{-40,50}},     color={0,127,255}));
        connect(res.port_b, res1.port_a)
          annotation (Line(points={{40,50},{60,50}}, color={0,127,255}));
        connect(fan.port_b, res2.port_a) annotation (Line(points={{-20,50},{-2,
                50},{-2,10},{40,10}}, color={0,127,255}));
        connect(fan.port_b, res.port_a) annotation (Line(points={{-20,50},{0,50},
                {0,50},{20,50}}, color={0,127,255}));
        connect(res2.port_b, sou1.ports[2]) annotation (Line(points={{60,10},{
                80,10},{80,-60},{-70,-60},{-70,-80}}, color={0,127,255}));
        connect(res1.port_b, sou1.ports[3]) annotation (Line(points={{80,50},{
                100,50},{100,-72},{-72.6667,-72},{-72.6667,-80}}, color={0,127,
                255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(StopTime=50, __Dymola_Algorithm="Dassl"));
      end pump_filter_dp;

      model pump_filter_dp2
        Fluid.Sources.Boundary_pT           sou1(
          redeclare package Medium = Media.Sea_Water,
          use_p_in=false,
          p(displayUnit="bar") = 100000,
          T=298.15,
          nPorts=2) "Boundary condition for flow source"
          annotation (Placement(
              transformation(extent={{10,-10},{-10,10}},
              rotation=270,
              origin={-90,-90})));
        Fluid.FixedResistances.PressureDrop res(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=50,
          dp_nominal=30000)
          annotation (Placement(transformation(extent={{0,60},{20,40}})));
        Fluid.Movers.FlowControlled_dp fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=747.6*1025/3600,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          constantHead(displayUnit="Pa") = 60000)
          annotation (Placement(transformation(extent={{-80,40},{-60,60}})));
        Fluid.FixedResistances.PressureDrop res1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=50,
          dp_nominal=30000)
          annotation (Placement(transformation(extent={{40,60},{60,40}})));
        Fluid.FixedResistances.PressureDrop res2(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=100,
          dp_nominal=60000)
          annotation (Placement(transformation(extent={{0,20},{20,0}})));
        Fluid.FixedResistances.Junction jun(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={50,-50,-50},
          dp_nominal={0,0,0})
          annotation (Placement(transformation(extent={{-40,40},{-20,60}})));
        Fluid.FixedResistances.Junction jun1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={50,-50,-50},
          dp_nominal={0,0,0}) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={70,10})));
      equation
        connect(sou1.ports[1], fan.port_a) annotation (Line(points={{-88,-80},{
                -88,50},{-80,50}},                color={0,127,255}));
        connect(res.port_b, res1.port_a)
          annotation (Line(points={{20,50},{40,50}}, color={0,127,255}));
        connect(fan.port_b, jun.port_1)
          annotation (Line(points={{-60,50},{-40,50}}, color={0,127,255}));
        connect(res.port_a, jun.port_2)
          annotation (Line(points={{0,50},{-20,50}}, color={0,127,255}));
        connect(jun.port_3, res2.port_a) annotation (Line(points={{-30,40},{-30,
                10},{0,10}}, color={0,127,255}));
        connect(res2.port_b, jun1.port_3)
          annotation (Line(points={{20,10},{60,10}}, color={0,127,255}));
        connect(res1.port_b, jun1.port_1) annotation (Line(points={{60,50},{70,
                50},{70,20}}, color={0,127,255}));
        connect(jun1.port_2, sou1.ports[2]) annotation (Line(points={{70,0},{72,
                0},{72,-42},{-92,-42},{-92,-80}}, color={0,127,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(StopTime=50, __Dymola_Algorithm="Dassl"));
      end pump_filter_dp2;
    end Pumps;

    package Valves
      model test_pump
        Fluid.Actuators.Valves.TwoWayLinear val(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=50,
          show_T=false,
          dpValve_nominal=1000,
          use_inputFilter=false)
          annotation (Placement(transformation(extent={{-10,0},{10,20}})));
        Fluid.Sources.MassFlowSource_T boundary(
          redeclare package Medium = Buildings.Media.Water,
          m_flow=50,
          T=293.15,
          nPorts=1)
          annotation (Placement(transformation(extent={{-100,0},{-80,20}})));
        Fluid.Sources.Boundary_pT bou(redeclare package Medium =
              Buildings.Media.Water, nPorts=1)
          annotation (Placement(transformation(extent={{100,0},{80,20}})));
        Fluid.FixedResistances.Junction jun(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={50,-50,-50},
          dp_nominal={0,0,0}) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-50,10})));
        Fluid.Actuators.Valves.TwoWayLinear val1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=50,
          dpValve_nominal=1000,
          use_inputFilter=false)
          annotation (Placement(transformation(extent={{-10,-40},{10,-20}})));
        Fluid.FixedResistances.Junction jun1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={50,-50,50},
          dp_nominal={0,0,0}) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={50,10})));
        Controls_a.opposite opposite
          annotation (Placement(transformation(extent={{-40,60},{-20,80}})));
        Modelica.Blocks.Sources.Step step(startTime=1000)
          annotation (Placement(transformation(extent={{-100,60},{-80,80}})));
      equation
        connect(boundary.ports[1], jun.port_1)
          annotation (Line(points={{-80,10},{-60,10}}, color={0,127,255}));
        connect(jun.port_2, val.port_a)
          annotation (Line(points={{-40,10},{-10,10}}, color={0,127,255}));
        connect(jun.port_3, val1.port_a) annotation (Line(points={{-50,0},{-50,
                -30},{-10,-30}}, color={0,127,255}));
        connect(val.port_b, jun1.port_1) annotation (Line(points={{10,10},{26,
                10},{26,10},{40,10}}, color={0,127,255}));
        connect(val1.port_b, jun1.port_3) annotation (Line(points={{10,-30},{50,
                -30},{50,0}}, color={0,127,255}));
        connect(jun1.port_2, bou.ports[1])
          annotation (Line(points={{60,10},{80,10}}, color={0,127,255}));
        connect(opposite.y, val.y)
          annotation (Line(points={{-19,70},{0,70},{0,22}}, color={0,0,127}));
        connect(step.y, opposite.u) annotation (Line(points={{-79,70},{-60,70},
                {-60,70},{-42,70}}, color={0,0,127}));
        connect(step.y, val1.y) annotation (Line(points={{-79,70},{-50,70},{-50,
                40},{-26,40},{-26,-10},{0,-10},{0,-18}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end test_pump;

      model test_pump1
        Fluid.Sources.Boundary_pT bou(redeclare package Medium =
              Buildings.Media.Water,
          p=100000,
          nPorts=2)
          annotation (Placement(transformation(extent={{100,0},{80,20}})));
        Fluid.Actuators.Valves.TwoWayLinear val1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=200,
          dpValve_nominal=1000,
          use_inputFilter=false)
          annotation (Placement(transformation(extent={{-10,0},{10,20}})));
        Modelica.Blocks.Sources.Ramp ramp(
          height=1,
          duration=3000,
          startTime=500)
          annotation (Placement(transformation(extent={{-100,60},{-80,80}})));
        Fluid.Movers.FlowControlled_dp fan1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=100,
          redeclare Fluid.Movers.Data.Pumps.Wilo.TopS40slash7 per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          use_inputFilter=true,
          dp_nominal=1000,
          constantHead=4000)
          annotation (Placement(transformation(extent={{-60,0},{-40,20}})));
      equation
        connect(val1.port_b, bou.ports[1]) annotation (Line(points={{10,10},{46,
                10},{46,12},{80,12}}, color={0,127,255}));
        connect(ramp.y, val1.y)
          annotation (Line(points={{-79,70},{0,70},{0,22}}, color={0,0,127}));
        connect(fan1.port_a, bou.ports[2]) annotation (Line(points={{-60,10},{
                -80,10},{-80,-20},{60,-20},{60,8},{80,8}}, color={0,127,255}));
        connect(fan1.port_b, val1.port_a)
          annotation (Line(points={{-40,10},{-10,10}}, color={0,127,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=4000,
            __Dymola_NumberOfIntervals=4000,
            __Dymola_Algorithm="Dassl"));
      end test_pump1;

      model test_kv
        Fluid.Sources.Boundary_pT           sou(
          redeclare package Medium = Buildings.Media.Water,
          use_p_in=false,
          p(displayUnit="Pa") = 200000,
          T=293.15,
          nPorts=3) "Boundary condition for flow source"
          annotation (Placement(
              transformation(extent={{-80,0},{-60,20}})));
        Fluid.Actuators.Valves.TwoWayLinear val1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=200,
          show_T=false,
          from_dp=false,
          linearized=false,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          Kv=1700,
          dpValve_nominal=100000,
          use_inputFilter=false,
          y_start=0)
          annotation (Placement(transformation(extent={{-20,2},{0,22}})));
        Fluid.Sources.Boundary_pT           sou1(
          redeclare package Medium = Buildings.Media.Water,
          use_p_in=false,
          p(displayUnit="Pa") = 100000,
          T=293.15,
          nPorts=3) "Boundary condition for flow source"
          annotation (Placement(
              transformation(extent={{80,0},{60,20}})));
        Modelica.Blocks.Sources.Ramp ramp(duration=3000, startTime=500)
          annotation (Placement(transformation(extent={{-60,40},{-40,60}})));
        Fluid.Actuators.Valves.TwoWayLinear val2(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=200,
          show_T=false,
          from_dp=false,
          linearized=true,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          Kv=1700,
          dpValve_nominal=100000,
          use_inputFilter=false,
          y_start=0)
          annotation (Placement(transformation(extent={{-20,-40},{0,-20}})));
        Modelica.Fluid.Valves.ValveLinear valveLinear(
          redeclare package Medium =
              Modelica.Media.Water.ConstantPropertyLiquidWater,
          dp_nominal(displayUnit="bar") = 100000,
          m_flow_nominal=200)
          annotation (Placement(transformation(extent={{-20,-80},{0,-60}})));
      equation
        connect(sou.ports[1], val1.port_a) annotation (Line(points={{-60,
                12.6667},{-40,12.6667},{-40,12},{-20,12}}, color={0,127,255}));
        connect(val1.port_b, sou1.ports[1]) annotation (Line(points={{0,12},{30,
                12},{30,12.6667},{60,12.6667}}, color={0,127,255}));
        connect(ramp.y, val1.y) annotation (Line(points={{-39,50},{-10,50},{-10,
                24}}, color={0,0,127}));
        connect(ramp.y, val2.y) annotation (Line(points={{-39,50},{-30,50},{-30,
                -18},{-10,-18}}, color={0,0,127}));
        connect(sou.ports[2], val2.port_a) annotation (Line(points={{-60,10},{
                -42,10},{-42,-30},{-20,-30}}, color={0,127,255}));
        connect(val2.port_b, sou1.ports[2]) annotation (Line(points={{0,-30},{
                30,-30},{30,10},{60,10}}, color={0,127,255}));
        connect(sou.ports[3], valveLinear.port_a) annotation (Line(points={{-60,
                7.33333},{-42,7.33333},{-42,-70},{-20,-70}}, color={0,127,255}));
        connect(valveLinear.port_b, sou1.ports[3]) annotation (Line(points={{0,
                -70},{30,-70},{30,7.33333},{60,7.33333}}, color={0,127,255}));
        connect(ramp.y, valveLinear.opening) annotation (Line(points={{-39,50},
                {-30,50},{-30,-54},{-10,-54},{-10,-62}}, color={0,0,127}));
        annotation (
          Icon(coordinateSystem(preserveAspectRatio=false)),
          Diagram(coordinateSystem(preserveAspectRatio=false)),
          experiment(StopTime=4000, __Dymola_Algorithm="Dassl"));
      end test_kv;

      model test_kv1
        Fluid.Sources.Boundary_pT           sou(
          redeclare package Medium = Buildings.Media.Water,
          use_p_in=false,
          p(displayUnit="Pa") = 1200000,
          T=293.15,
          nPorts=1) "Boundary condition for flow source"
          annotation (Placement(
              transformation(extent={{-100,0},{-80,20}})));
        Fluid.Actuators.Valves.TwoWayLinear val1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=200,
          show_T=false,
          from_dp=false,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          Kv=1700,
          dpValve_nominal=100000,
          use_inputFilter=false,
          y_start=0)
          annotation (Placement(transformation(extent={{-20,0},{0,20}})));
        Fluid.Sources.Boundary_pT           sou1(
          redeclare package Medium = Buildings.Media.Water,
          use_p_in=false,
          p(displayUnit="Pa") = 100000,
          T=293.15,
          nPorts=1) "Boundary condition for flow source"
          annotation (Placement(
              transformation(extent={{80,0},{60,20}})));
        Modelica.Blocks.Sources.Ramp ramp(duration=3000, startTime=500)
          annotation (Placement(transformation(extent={{-60,40},{-40,60}})));
        Fluid.Movers.FlowControlled_m_flow fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=213*991/3600,
          redeclare Fluid.Movers.Data.Pumps.Wilo.Stratos25slash1to4 per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          constantMassFlowRate=213*991/3600)
          annotation (Placement(transformation(extent={{-60,0},{-40,20}})));
      equation
        connect(val1.port_b, sou1.ports[1])
          annotation (Line(points={{0,10},{60,10}}, color={0,127,255}));
        connect(ramp.y, val1.y) annotation (Line(points={{-39,50},{-10,50},{-10,
                22}}, color={0,0,127}));
        connect(sou.ports[1], fan.port_a)
          annotation (Line(points={{-80,10},{-60,10}}, color={0,127,255}));
        connect(fan.port_b, val1.port_a)
          annotation (Line(points={{-40,10},{-20,10}}, color={0,127,255}));
        annotation (
          Icon(coordinateSystem(preserveAspectRatio=false)),
          Diagram(coordinateSystem(preserveAspectRatio=false)),
          experiment(StopTime=4000, __Dymola_Algorithm="Dassl"));
      end test_kv1;

      model TwoWayValveTable
        "Two way valve with nonlinear opening characteristics based on a table"
        extends Modelica.Icons.Example;
        package Medium = Buildings.Media.Water "Medium";

          Modelica.Blocks.Sources.Ramp y(
          height=1,
          duration=1,
          offset=0) "Control signal"
          annotation (Placement(transformation(extent={{-40,50},{-20,70}})));
        Buildings.Fluid.Sources.Boundary_pT sou(
          redeclare package Medium = Medium,
          use_p_in=false,
          p(displayUnit="bar") = 200000,
          T=293.15,
          nPorts=1) "Boundary condition for flow source"
          annotation (Placement(
              transformation(extent={{-90,10},{-70,30}})));
        Buildings.Fluid.Sources.Boundary_pT sin(
          redeclare package Medium = Medium,
          p(displayUnit="Pa") = 200000 - 1570,
          T=293.15,
          nPorts=1) "Boundary condition for flow sink"
          annotation (Placement(
              transformation(extent={{72,10},{52,30}})));
        Fluid.Actuators.Valves.TwoWayTable valTab(
          redeclare package Medium = Medium,
          use_inputFilter=false,
          from_dp=true,
          flowCharacteristics=Fluid.Actuators.Valves.Data.TFP_calc(),
          CvData=Buildings.Fluid.Types.CvTypes.Kv,
          Kv=2674.6,
          m_flow_nominal=213*991/3600)
          "Valve model with opening characteristics based on a table"
          annotation (Placement(transformation(extent={{-20,10},{0,30}})));

        parameter Fluid.Actuators.Valves.Data.Generic datVal(y={0,0.1667,0.3333,
              0.5,0.6667,1}, phi={0,0.19,0.35,0.45,0.5,0.65}/0.65)
          "Valve characteristics"
          annotation (Placement(transformation(extent={{60,60},{80,80}})));
        Modelica.Blocks.Math.UnitConversions.To_bar to_bar
          annotation (Placement(transformation(extent={{0,-46},{20,-26}})));
        Fluid.Sensors.RelativePressure senRelPre(redeclare package Medium =
              Medium) "Pressure differential sensor"
          annotation (Placement(transformation(extent={{-20,-20},{0,0}})));
        Fluid.Sensors.VolumeFlowRate senVolFlo(redeclare package Medium =
              Medium, m_flow_nominal=0.04) "Volume flow rate sensor"
          annotation (Placement(transformation(extent={{-60,10},{-40,30}})));
        Modelica.Blocks.Math.Sqrt sqrt1
          annotation (Placement(transformation(extent={{28,-46},{48,-26}})));
        Modelica.Blocks.Math.Gain to_m3_h(k=3600) "Conversion to m3/h"
          annotation (Placement(transformation(extent={{-10,-74},{10,-54}})));
        Modelica.Blocks.Math.Division kv "Kv-value"
          annotation (Placement(transformation(extent={{60,-80},{80,-60}})));
      equation
        connect(y.y,valTab. y) annotation (Line(
            points={{-19,60},{-19,60},{-10,60},{-10,32}},
            color={0,0,127}));
        connect(sou.ports[1], senVolFlo.port_a) annotation (Line(
            points={{-70,20},{-60,20}},
            color={0,127,255}));
        connect(senVolFlo.port_b, valTab.port_a) annotation (Line(
            points={{-40,20},{-20,20}},
            color={0,127,255}));
        connect(valTab.port_a, senRelPre.port_a) annotation (Line(
            points={{-20,20},{-20,-10}},
            color={0,127,255}));
        connect(valTab.port_b, senRelPre.port_b) annotation (Line(
            points={{4.44089e-16,20},{4.44089e-16,-10}},
            color={0,127,255}));
        connect(valTab.port_b, sin.ports[1]) annotation (Line(
            points={{4.44089e-16,20},{52,20}},
            color={0,127,255}));
        connect(to_bar.u, senRelPre.p_rel) annotation (Line(
            points={{-2,-36},{-10,-36},{-10,-19}},
            color={0,0,127}));
        connect(sqrt1.u, to_bar.y) annotation (Line(
            points={{26,-36},{21,-36}},
            color={0,0,127}));
        connect(senVolFlo.V_flow, to_m3_h.u) annotation (Line(
            points={{-50,31},{-50,36},{-30,36},{-30,-64},{-12,-64}},
            color={0,0,127}));
        connect(to_m3_h.y,kv. u1) annotation (Line(
            points={{11,-64},{58,-64}},
            color={0,0,127}));
        connect(sqrt1.y,kv. u2) annotation (Line(
            points={{49,-36},{54,-36},{54,-76},{58,-76}},
            color={0,0,127}));
          annotation (experiment(Tolerance=1e-6, StopTime=1.0),
      __Dymola_Commands(file="modelica://Buildings/Resources/Scripts/Dymola/Fluid/Actuators/Valves/Examples/TwoWayValveTable.mos"
              "Simulate and plot"),
          Documentation(info="<html>
<p>
Test model for a two way valve in which a table is used to specify the
opening characteristics.
The valve has the following opening characteristics, which is taken from a test case
of the IEA EBC Annex 60 project.
</p>
<table summary=\"summary\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\" style=\"border-collapse:collapse;\">
<tr><td><i>y</i></td>
  <td>0</td>  <td>0.1667</td>  <td>0.3333</td>  <td>0.5</td>  <td>0.6667</td>  <td>1</td>
</tr>
<tr><td><i>K<sub>v</sub></i></td>
  <td>0</td>  <td>0.19</td>  <td>0.35</td>  <td>0.45</td>  <td>0.5</td>  <td>0.65</td>       </tr>
</table>
<p>
The <i>K<sub>v</sub></i> value is the volume flow rate in m<sup>3</sup>/h at a pressure difference
of 1 bar.
Hence, the <i>K<sub>v</sub></i> value of the fully open valve is <i>K<sub>v</sub>=0.65</i>.
</p>
<p>
Plotting the variables <code>kv.y</code> versus <code>y.y</code> shows that the valve
reproduces the <i>K<sub>v</sub></i> values shown in the above table.
</p>
<p align=\"center\">
<img alt=\"image\" src=\"modelica://Buildings/Resources/Images/Fluid/Actuators/Valves/Examples/TwoWayValveTable_kv.png\"/>
</p>
<p>
The parameter <code>filterOpening</code> is set to <code>false</code>,
as this model is used to plot the flow at different opening signals
without taking into account the travel time of the actuator.
</p>
</html>",       revisions="<html>
<ul>
<li>
August 12, 2014 by Michael Wetter:<br/>
Added <code>parameter</code> keyword to <code>datVal</code>,
as this is needed to asssign <code>datVal</code> to a parameter
in the instance <code>valTab</code>.
This also avoids an error in OpenModelica.
</li>
<li>
April 2, 2014 by Michael Wetter:<br/>
First implementation.
</li>
</ul>
</html>"));
      end TwoWayValveTable;

      model test_linearized
        Fluid.Sources.Boundary_pT           sou(
          redeclare package Medium = Buildings.Media.Water,
          use_p_in=false,
          p(displayUnit="Pa") = 200000,
          T=293.15,
          nPorts=1) "Boundary condition for flow source"
          annotation (Placement(
              transformation(extent={{-80,0},{-60,20}})));
        Fluid.Sources.Boundary_pT           sou1(
          redeclare package Medium = Buildings.Media.Water,
          use_p_in=false,
          p(displayUnit="Pa") = 100000,
          T=293.15,
          nPorts=1) "Boundary condition for flow source"
          annotation (Placement(
              transformation(extent={{80,0},{60,20}})));
        Modelica.Blocks.Sources.Ramp ramp(duration=3000, startTime=500)
          annotation (Placement(transformation(extent={{-60,40},{-40,60}})));
        Fluid.Actuators.Valves.TwoWayLinear val2(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=200,
          show_T=false,
          from_dp=false,
          linearized=true,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          Kv=1700,
          dpValve_nominal=100000,
          use_inputFilter=false,
          y_start=0)
          annotation (Placement(transformation(extent={{-20,-40},{0,-20}})));
      equation
        connect(ramp.y, val2.y) annotation (Line(points={{-39,50},{-30,50},{-30,
                -18},{-10,-18}}, color={0,0,127}));
        connect(sou.ports[1], val2.port_a) annotation (Line(points={{-60,10},{
                -42,10},{-42,-30},{-20,-30}}, color={0,127,255}));
        connect(val2.port_b, sou1.ports[1]) annotation (Line(points={{0,-30},{
                30,-30},{30,10},{60,10}}, color={0,127,255}));
        annotation (
          Icon(coordinateSystem(preserveAspectRatio=false)),
          Diagram(coordinateSystem(preserveAspectRatio=false)),
          experiment(StopTime=4000, __Dymola_Algorithm="Dassl"));
      end test_linearized;

      model vanne_parrallele
        Fluid.Sources.Boundary_pT           sou(
          redeclare package Medium = Buildings.Media.Water,
          use_p_in=false,
          p(displayUnit="Pa") = 200000,
          T=293.15,
          nPorts=1) "Boundary condition for flow source"
          annotation (Placement(
              transformation(extent={{-100,20},{-80,40}})));
        Fluid.Actuators.Valves.TwoWayLinear val1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=200,
          show_T=false,
          from_dp=false,
          linearized=false,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          Kv=1700,
          dpValve_nominal=100000,
          use_inputFilter=false,
          y_start=0)
          annotation (Placement(transformation(extent={{-20,40},{0,60}})));
        Fluid.Sources.Boundary_pT           sou1(
          redeclare package Medium = Buildings.Media.Water,
          use_p_in=false,
          p(displayUnit="Pa") = 100000,
          T=293.15,
          nPorts=1) "Boundary condition for flow source"
          annotation (Placement(
              transformation(extent={{100,20},{80,40}})));
        Modelica.Blocks.Sources.Ramp ramp(duration=1000, startTime=1000)
          annotation (Placement(transformation(extent={{-80,80},{-60,100}})));
        Fluid.FixedResistances.Junction jun(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={200,-200,-200},
          dp_nominal={0,0,0}) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-50,30})));
        Fluid.Actuators.Valves.TwoWayLinear val2(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=200,
          show_T=false,
          from_dp=false,
          linearized=false,
          CvData=Buildings.Fluid.Types.CvTypes.OpPoint,
          Kv=1700,
          dpValve_nominal=50000,
          use_inputFilter=false,
          y_start=0)
          annotation (Placement(transformation(extent={{-20,-20},{0,0}})));
        Fluid.FixedResistances.Junction jun1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={200,200,-200},
          dp_nominal={0,0,0}) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={30,30})));
        Modelica.Blocks.Sources.Ramp ramp1(duration=500, startTime=200)
          annotation (Placement(transformation(extent={{-80,-40},{-60,-20}})));
      equation
        connect(ramp.y, val1.y) annotation (Line(points={{-59,90},{-10,90},{-10,
                62}}, color={0,0,127}));
        connect(sou.ports[1], jun.port_3)
          annotation (Line(points={{-80,30},{-60,30}}, color={0,127,255}));
        connect(jun.port_1, val1.port_a) annotation (Line(points={{-50,40},{-50,
                50},{-20,50}}, color={0,127,255}));
        connect(val1.port_b, jun1.port_2) annotation (Line(points={{0,50},{30,
                50},{30,40}}, color={0,127,255}));
        connect(jun.port_2, val2.port_a) annotation (Line(points={{-50,20},{-50,
                -10},{-20,-10}}, color={0,127,255}));
        connect(val2.port_b, jun1.port_1) annotation (Line(points={{0,-10},{30,
                -10},{30,20}}, color={0,127,255}));
        connect(jun1.port_3, sou1.ports[1])
          annotation (Line(points={{40,30},{80,30}}, color={0,127,255}));
        connect(ramp1.y, val2.y) annotation (Line(points={{-59,-30},{-32,-30},{
                -32,12},{-10,12},{-10,2}}, color={0,0,127}));
        annotation (
          Icon(coordinateSystem(preserveAspectRatio=false)),
          Diagram(coordinateSystem(preserveAspectRatio=false)),
          experiment(StopTime=4000, __Dymola_Algorithm="Dassl"));
      end vanne_parrallele;

      model test_vanne
        Fluid.Sources.Boundary_pT           sou(
          redeclare package Medium = Buildings.Media.Water,
          use_p_in=false,
          p(displayUnit="Pa") = 200000,
          T=293.15,
          nPorts=1) "Boundary condition for flow source"
          annotation (Placement(
              transformation(extent={{-80,20},{-60,40}})));
        Fluid.Sources.Boundary_pT           sou1(
          redeclare package Medium = Buildings.Media.Water,
          use_p_in=false,
          p(displayUnit="Pa") = 100000,
          T=293.15,
          nPorts=1) "Boundary condition for flow source"
          annotation (Placement(
              transformation(extent={{80,20},{60,40}})));
        Modelica.Blocks.Sources.Ramp ramp(duration=3000, startTime=500)
          annotation (Placement(transformation(extent={{-60,60},{-40,80}})));
        Fluid.Actuators.Valves.TwoWayPressureIndependent val(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=200,
          dpValve_nominal=10000)
          annotation (Placement(transformation(extent={{-20,20},{0,40}})));
      equation
        connect(ramp.y, val.y) annotation (Line(points={{-39,70},{-10,70},{-10,
                42}}, color={0,0,127}));
        connect(sou.ports[1], val.port_a)
          annotation (Line(points={{-60,30},{-20,30}}, color={0,127,255}));
        connect(val.port_b, sou1.ports[1])
          annotation (Line(points={{0,30},{60,30}}, color={0,127,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end test_vanne;

      model syst_edm
        Fluid.Sources.Boundary_pT           sou1(
          redeclare package Medium = Buildings.Media.Water,
          use_p_in=false,
          p(displayUnit="bar") = 100000,
          T=293.15,
          nPorts=2) "Boundary condition for flow source"
          annotation (Placement(
              transformation(extent={{10,-10},{-10,10}},
              rotation=270,
              origin={-90,-10})));
        Fluid.Actuators.Valves.TwoWayPressureIndependent val(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=865*1020/3600,
          dpValve_nominal(displayUnit="kPa") = 10000,
          dpFixed_nominal=65.9)
          annotation (Placement(transformation(extent={{20,40},{40,60}})));
        Fluid.Movers.FlowControlled_dp fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=720*991/3600,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          constantHead(displayUnit="bar") = 187000)
          annotation (Placement(transformation(extent={{-60,40},{-40,60}})));
        Modelica.Blocks.Sources.Constant const(k=1)
          annotation (Placement(transformation(extent={{-20,80},{0,100}})));
      equation
        connect(sou1.ports[1], fan.port_a) annotation (Line(points={{-88,
                -3.55271e-15},{-88,50},{-60,50}}, color={0,127,255}));
        connect(val.port_b, sou1.ports[2]) annotation (Line(points={{40,50},{80,
                50},{80,12},{-92,12},{-92,-3.55271e-15}}, color={0,127,255}));
        connect(const.y, val.y)
          annotation (Line(points={{1,90},{30,90},{30,62}}, color={0,0,127}));
        connect(fan.port_b, val.port_a)
          annotation (Line(points={{-40,50},{20,50}}, color={0,127,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end syst_edm;

      model test_vanne_1
        Fluid.Sources.Boundary_pT           sou1(
          redeclare package Medium = Buildings.Media.Water,
          use_p_in=false,
          p(displayUnit="Pa") = 100000,
          T=293.15,
          nPorts=1) "Boundary condition for flow source"
          annotation (Placement(
              transformation(extent={{80,20},{60,40}})));
        Modelica.Blocks.Sources.Ramp ramp(duration=3000, startTime=500)
          annotation (Placement(transformation(extent={{-60,60},{-40,80}})));
        Fluid.Actuators.Valves.TwoWayPressureIndependent val(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=200,
          dpValve_nominal=10000)
          annotation (Placement(transformation(extent={{-20,20},{0,40}})));
        Fluid.Sources.MassFlowSource_T boundary(
          redeclare package Medium = Buildings.Media.Water,
          use_m_flow_in=true,
          nPorts=1)
          annotation (Placement(transformation(extent={{-100,20},{-80,40}})));
        Modelica.Blocks.Sources.Ramp ramp1(
          height=200,
          duration=1000,
          startTime=3500)
          annotation (Placement(transformation(extent={{-140,60},{-120,80}})));
      equation
        connect(ramp.y, val.y) annotation (Line(points={{-39,70},{-10,70},{-10,
                42}}, color={0,0,127}));
        connect(val.port_b, sou1.ports[1])
          annotation (Line(points={{0,30},{60,30}}, color={0,127,255}));
        connect(boundary.ports[1], val.port_a)
          annotation (Line(points={{-80,30},{-20,30}}, color={0,127,255}));
        connect(ramp1.y, boundary.m_flow_in) annotation (Line(points={{-119,70},
                {-110,70},{-110,38},{-102,38}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end test_vanne_1;

      model syst_edm_0
        Fluid.Sources.Boundary_pT           sou1(
          redeclare package Medium = Buildings.Media.Water,
          use_p_in=false,
          p(displayUnit="bar") = 100000,
          T=293.15,
          nPorts=2) "Boundary condition for flow source"
          annotation (Placement(
              transformation(extent={{10,-10},{-10,10}},
              rotation=270,
              origin={-90,-10})));
        Fluid.Actuators.Valves.TwoWayPressureIndependent val(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=865*1020/3600,
          dpValve_nominal(displayUnit="kPa") = 10000)
          annotation (Placement(transformation(extent={{20,40},{40,60}})));
        Fluid.Movers.FlowControlled_dp fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=720*991/3600,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          constantHead(displayUnit="bar") = 187000)
          annotation (Placement(transformation(extent={{-60,40},{-40,60}})));
        Modelica.Blocks.Sources.Constant const(k=1)
          annotation (Placement(transformation(extent={{-20,80},{0,100}})));
        Fluid.FixedResistances.PressureDrop res(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=865*1020/3600,
          dp_nominal=65.9)
          annotation (Placement(transformation(extent={{-20,40},{0,60}})));
      equation
        connect(sou1.ports[1], fan.port_a) annotation (Line(points={{-88,
                -3.55271e-15},{-88,50},{-60,50}}, color={0,127,255}));
        connect(val.port_b, sou1.ports[2]) annotation (Line(points={{40,50},{80,
                50},{80,12},{-92,12},{-92,-3.55271e-15}}, color={0,127,255}));
        connect(const.y, val.y)
          annotation (Line(points={{1,90},{30,90},{30,62}}, color={0,0,127}));
        connect(fan.port_b, res.port_a)
          annotation (Line(points={{-40,50},{-20,50}}, color={0,127,255}));
        connect(res.port_b, val.port_a)
          annotation (Line(points={{0,50},{20,50}}, color={0,127,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end syst_edm_0;

      model syst_edm_simple
        Fluid.Sources.Boundary_pT           sou1(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          use_p_in=false,
          p(displayUnit="bar") = 100000,
          T=298.15,
          nPorts=2) "Boundary condition for flow source"
          annotation (Placement(
              transformation(extent={{10,-10},{-10,10}},
              rotation=270,
              origin={-90,-10})));
        Fluid.Movers.FlowControlled_dp fan(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal=720*991/3600,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          constantHead(displayUnit="bar") = 187000)
          annotation (Placement(transformation(extent={{-60,40},{-40,60}})));
        Modelica.Blocks.Sources.Constant const(k=0.23)
          annotation (Placement(transformation(extent={{-20,80},{0,100}})));
        Fluid.Actuators.Valves.TwoWayTable val(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal=865*1020/3600,
          dpValve_nominal=2250,
          y_start=0.23,
          dpFixed_nominal=65900,
          flowCharacteristics=Fluid.Actuators.Valves.Data.TFP_calc())
          annotation (Placement(transformation(extent={{20,40},{40,60}})));
      equation
        connect(sou1.ports[1], fan.port_a) annotation (Line(points={{-88,
                -3.55271e-15},{-88,50},{-60,50}}, color={0,127,255}));
        connect(fan.port_b, val.port_a)
          annotation (Line(points={{-40,50},{20,50}}, color={0,127,255}));
        connect(val.port_b, sou1.ports[2]) annotation (Line(points={{40,50},{
                100,50},{100,20},{-92,20},{-92,0}},
                                               color={0,127,255}));
        connect(const.y, val.y)
          annotation (Line(points={{1,90},{30,90},{30,62}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end syst_edm_simple;

      model valve_RJC
        Fluid.Sources.Boundary_pT           sou1(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          use_p_in=false,
          p(displayUnit="bar") = 100000,
          T=298.15,
          nPorts=2) "Boundary condition for flow source"
          annotation (Placement(
              transformation(extent={{10,-10},{-10,10}},
              rotation=270,
              origin={-90,-10})));
        Fluid.Movers.FlowControlled_dp fan(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal=720*991/3600,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          constantHead(displayUnit="bar") = 187000)
          annotation (Placement(transformation(extent={{-60,40},{-40,60}})));
        Modelica.Blocks.Sources.Constant const(k=0.23)
          annotation (Placement(transformation(extent={{-20,80},{0,100}})));
        Fluid.Actuators.Valves.TwoWayTable val(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal=865*1020/3600,
          dpValve_nominal=2250,
          y_start=0.23,
          dpFixed_nominal=69500,
          flowCharacteristics=Fluid.Actuators.Valves.Data.TFP_calc())
          annotation (Placement(transformation(extent={{20,40},{40,60}})));
      equation
        connect(sou1.ports[1], fan.port_a) annotation (Line(points={{-88,
                -3.55271e-15},{-88,50},{-60,50}}, color={0,127,255}));
        connect(fan.port_b, val.port_a)
          annotation (Line(points={{-40,50},{20,50}}, color={0,127,255}));
        connect(val.port_b, sou1.ports[2]) annotation (Line(points={{40,50},{
                100,50},{100,20},{-92,20},{-92,0}},
                                               color={0,127,255}));
        connect(const.y, val.y)
          annotation (Line(points={{1,90},{30,90},{30,62}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end valve_RJC;

      model valve_RJC_bis
        Fluid.Sources.Boundary_pT           sou1(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          use_p_in=false,
          p(displayUnit="bar") = 100000,
          T=298.15,
          nPorts=2) "Boundary condition for flow source"
          annotation (Placement(
              transformation(extent={{10,-10},{-10,10}},
              rotation=270,
              origin={-90,-10})));
        Fluid.Movers.FlowControlled_dp fan(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal=720*991/3600,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          use_inputFilter=false,
          constantHead(displayUnit="bar") = 187000)
          annotation (Placement(transformation(extent={{-60,40},{-40,60}})));
        Fluid.FixedResistances.PressureDrop res(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal=865*1020/3600,
          dp_nominal=69500)
          annotation (Placement(transformation(extent={{-20,40},{0,60}})));
        Modelica.Blocks.Sources.Ramp ramp(duration=500, startTime=50)
          annotation (Placement(transformation(extent={{-20,80},{0,100}})));
        Fluid.Actuators.Valves.TwoWayTable val(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal=865*1020/3600,
          dpValve_nominal=2250,
          use_inputFilter=false,
          flowCharacteristics=Fluid.Actuators.Valves.Data.TFP_data())
          annotation (Placement(transformation(extent={{40,40},{60,60}})));
      equation
        connect(sou1.ports[1], fan.port_a) annotation (Line(points={{-88,-3.55271e-15},
                {-88,50},{-60,50}},               color={0,127,255}));
        connect(fan.port_b, res.port_a)
          annotation (Line(points={{-40,50},{-20,50}}, color={0,127,255}));
        connect(res.port_b, val.port_a)
          annotation (Line(points={{0,50},{40,50}}, color={0,127,255}));
        connect(ramp.y, val.y)
          annotation (Line(points={{1,90},{50,90},{50,62}}, color={0,0,127}));
        connect(val.port_b, sou1.ports[2]) annotation (Line(points={{60,50},{70,50},{70,
                20},{-92,20},{-92,-3.55271e-15}}, color={0,127,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end valve_RJC_bis;

      model valve_RJF_bis
        Fluid.Sources.Boundary_pT           sou1(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          use_p_in=false,
          p(displayUnit="bar") = 100000,
          T=298.15,
          nPorts=4) "Boundary condition for flow source"
          annotation (Placement(
              transformation(extent={{10,-10},{-10,10}},
              rotation=270,
              origin={-90,-10})));
        Fluid.Movers.FlowControlled_dp fan(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal=747.6*1025/3600,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          use_inputFilter=false,
          constantHead(displayUnit="bar") = 187000)
          annotation (Placement(transformation(extent={{-60,40},{-40,60}})));
        Fluid.FixedResistances.PressureDrop res(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal=747.6*1025/3600,
          dp_nominal=65900)
          annotation (Placement(transformation(extent={{-20,40},{0,60}})));
        Fluid.Actuators.Valves.TwoWayTable val(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal=747.6*1025/3600,
          dpValve_nominal=2000,
          use_inputFilter=false,
          flowCharacteristics=Fluid.Actuators.Valves.Data.TFP_data())
          annotation (Placement(transformation(extent={{40,40},{60,60}})));
        Fluid.Sensors.VolumeFlowRate senVolFlo(redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water, m_flow_nominal=865*1020/3600)
          annotation (Placement(transformation(extent={{20,0},{0,20}})));
        Modelica.Blocks.Sources.Constant const(k=0.22)
          annotation (Placement(transformation(extent={{0,80},{20,100}})));
        Modelica.Blocks.Interfaces.RealOutput y
          annotation (Placement(transformation(extent={{100,20},{120,40}})));
        Fluid.Movers.SpeedControlled_y fan1(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          use_inputFilter=false)
          annotation (Placement(transformation(extent={{-60,-80},{-40,-60}})));
        Fluid.FixedResistances.PressureDrop res1(
          redeclare package Medium = Media.Sea_Water,
          m_flow_nominal=747.6*1025/3600,
          dp_nominal=65900)
          annotation (Placement(transformation(extent={{20,-80},{40,-60}})));
        Fluid.Actuators.Valves.TwoWayTable val1(
          redeclare package Medium = Media.Sea_Water,
          m_flow_nominal=747.6*1025/3600,
          dpValve_nominal=2000,
          use_inputFilter=false,
          flowCharacteristics=Fluid.Actuators.Valves.Data.TFP_data())
          annotation (Placement(transformation(extent={{80,-80},{100,-60}})));
        Fluid.Sensors.VolumeFlowRate senVolFlo1(redeclare package Medium =
              Media.Sea_Water, m_flow_nominal=865*1020/3600)
          annotation (Placement(transformation(extent={{0,-120},{-20,-100}})));
        Modelica.Blocks.Sources.Constant const1(k=0.22)
          annotation (Placement(transformation(extent={{40,-40},{60,-20}})));
        Fluid.Sensors.RelativePressure senRelPre
          annotation (Placement(transformation(extent={{-60,-40},{-40,-20}})));
        Modelica.Blocks.Sources.Constant const2(k=187000)
          annotation (Placement(transformation(extent={{-220,-60},{-200,-40}})));
        Controls.Continuous.LimPID           conPID(
          Td=1,
          k=0.5,
          Ti=15,
          reverseActing=true)
                 annotation (Placement(transformation(extent={{-160,-60},{-140,
                  -40}})));
        Modelica.Blocks.Math.Gain gain1(k=-1)
          annotation (Placement(transformation(extent={{-120,-100},{-140,-80}})));
      equation
        connect(sou1.ports[1], fan.port_a) annotation (Line(points={{-87,
                -3.55271e-15},{-87,50},{-60,50}}, color={0,127,255}));
        connect(fan.port_b, res.port_a)
          annotation (Line(points={{-40,50},{-20,50}}, color={0,127,255}));
        connect(res.port_b, val.port_a)
          annotation (Line(points={{0,50},{40,50}}, color={0,127,255}));
        connect(val.port_b, senVolFlo.port_a) annotation (Line(points={{60,50},{70,50},
                {70,10},{20,10}}, color={0,127,255}));
        connect(const.y, val.y)
          annotation (Line(points={{21,90},{50,90},{50,62}}, color={0,0,127}));
        y=senVolFlo.V_flow*3600;
        connect(res1.port_b, val1.port_a)
          annotation (Line(points={{40,-70},{80,-70}}, color={0,127,255}));
        connect(val1.port_b, senVolFlo1.port_a) annotation (Line(points={{100,-70},{110,
                -70},{110,-110},{0,-110}}, color={0,127,255}));
        connect(const1.y, val1.y)
          annotation (Line(points={{61,-30},{90,-30},{90,-58}}, color={0,0,127}));
        connect(fan1.port_b, res1.port_a)
          annotation (Line(points={{-40,-70},{20,-70}}, color={0,127,255}));
        connect(senRelPre.port_a, fan1.port_a) annotation (Line(points={{-60,-30},{-68,
                -30},{-68,-70},{-60,-70}}, color={0,127,255}));
        connect(senRelPre.port_b, fan1.port_b) annotation (Line(points={{-40,-30},{-28,
                -30},{-28,-70},{-40,-70}}, color={0,127,255}));
        connect(senVolFlo.port_b, sou1.ports[2]) annotation (Line(points={{0,10},
                {-44,10},{-44,0},{-89,0}}, color={0,127,255}));
        connect(senVolFlo1.port_b, sou1.ports[3]) annotation (Line(points={{-20,
                -110},{-112,-110},{-112,10},{-91,10},{-91,0}}, color={0,127,255}));
        connect(fan1.port_a, sou1.ports[4]) annotation (Line(points={{-60,-70},
                {-102,-70},{-102,0},{-93,0}}, color={0,127,255}));
        connect(const2.y, conPID.u_s) annotation (Line(points={{-199,-50},{-182,
                -50},{-182,-50},{-162,-50}}, color={0,0,127}));
        connect(conPID.y, fan1.y) annotation (Line(points={{-139,-50},{-50,-50},
                {-50,-58}}, color={0,0,127}));
        connect(senRelPre.p_rel, gain1.u) annotation (Line(points={{-50,-39},{
                -50,-44},{-88,-44},{-88,-90},{-118,-90}}, color={0,0,127}));
        connect(gain1.y, conPID.u_m) annotation (Line(points={{-141,-90},{-150,
                -90},{-150,-62}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end valve_RJF_bis;

      model valve_RJC_ter
        Fluid.Sources.Boundary_pT           sou1(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          use_p_in=false,
          p(displayUnit="bar") = 100000,
          T=298.15,
          nPorts=2) "Boundary condition for flow source"
          annotation (Placement(
              transformation(extent={{10,-10},{-10,10}},
              rotation=270,
              origin={-90,-10})));
        Fluid.Movers.FlowControlled_dp fan(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal=720*991/3600,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          use_inputFilter=false,
          constantHead(displayUnit="bar") = 187000)
          annotation (Placement(transformation(extent={{-60,40},{-40,60}})));
        Fluid.FixedResistances.PressureDrop res(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal=865*1020/3600,
          dp_nominal=69500)
          annotation (Placement(transformation(extent={{-20,40},{0,60}})));
        Fluid.Actuators.Valves.TwoWayTable val(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal=865*1020/3600,
          dpValve_nominal=2250,
          use_inputFilter=false,
          flowCharacteristics=Fluid.Actuators.Valves.Data.TFP_calc())
          annotation (Placement(transformation(extent={{40,40},{60,60}})));
        Modelica.Blocks.Sources.Constant const(k=0.23)
          annotation (Placement(transformation(extent={{0,80},{20,100}})));
      equation
        connect(sou1.ports[1], fan.port_a) annotation (Line(points={{-88,-3.55271e-15},
                {-88,50},{-60,50}},               color={0,127,255}));
        connect(fan.port_b, res.port_a)
          annotation (Line(points={{-40,50},{-20,50}}, color={0,127,255}));
        connect(res.port_b, val.port_a)
          annotation (Line(points={{0,50},{40,50}}, color={0,127,255}));
        connect(val.port_b, sou1.ports[2]) annotation (Line(points={{60,50},{70,50},{70,
                20},{-92,20},{-92,-3.55271e-15}}, color={0,127,255}));
        connect(const.y, val.y)
          annotation (Line(points={{21,90},{50,90},{50,62}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end valve_RJC_ter;

      model valve_RJF
        Fluid.Sources.Boundary_pT           sou1(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          use_p_in=false,
          p(displayUnit="bar") = 100000,
          T=298.15,
          nPorts=2) "Boundary condition for flow source"
          annotation (Placement(
              transformation(extent={{10,-10},{-10,10}},
              rotation=270,
              origin={-90,-10})));
        Fluid.Movers.FlowControlled_dp fan(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal=720*991/3600,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          use_inputFilter=false,
          constantHead(displayUnit="bar") = 187000)
          annotation (Placement(transformation(extent={{-60,40},{-40,60}})));
        Fluid.FixedResistances.PressureDrop res(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal=747.6*1025/3600,
          dp_nominal=69900)
          annotation (Placement(transformation(extent={{-20,40},{0,60}})));
        Fluid.Actuators.Valves.TwoWayTable val(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal=747.6*1025/3600,
          dpValve_nominal=1700,
          use_inputFilter=false,
          flowCharacteristics=Fluid.Actuators.Valves.Data.TFP_calc())
          annotation (Placement(transformation(extent={{40,40},{60,60}})));
        Modelica.Blocks.Sources.Constant const(k=0.23)
          annotation (Placement(transformation(extent={{0,80},{20,100}})));
      equation
        connect(sou1.ports[1], fan.port_a) annotation (Line(points={{-88,-3.55271e-15},
                {-88,50},{-60,50}},               color={0,127,255}));
        connect(fan.port_b, res.port_a)
          annotation (Line(points={{-40,50},{-20,50}}, color={0,127,255}));
        connect(res.port_b, val.port_a)
          annotation (Line(points={{0,50},{40,50}}, color={0,127,255}));
        connect(val.port_b, sou1.ports[2]) annotation (Line(points={{60,50},{70,50},{70,
                20},{-92,20},{-92,-3.55271e-15}}, color={0,127,255}));
        connect(const.y, val.y)
          annotation (Line(points={{21,90},{50,90},{50,62}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end valve_RJF;

      model test_pump2
        Fluid.Sources.Boundary_pT bou(redeclare package Medium =
              Buildings.Media.Water,
          p=100000,
          nPorts=2)
          annotation (Placement(transformation(extent={{100,0},{80,20}})));
        Fluid.Actuators.Valves.TwoWayLinear val1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=200,
          dpValve_nominal=2000,
          use_inputFilter=false)
          annotation (Placement(transformation(extent={{20,0},{40,20}})));
        Fluid.Movers.FlowControlled_dp fan1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=100,
          redeclare Fluid.Movers.Data.Pumps.Wilo.TopS40slash7 per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          use_inputFilter=true,
          dp_nominal=1000,
          constantHead=4000)
          annotation (Placement(transformation(extent={{-60,0},{-40,20}})));
        Fluid.Actuators.Valves.TwoWayLinear val2(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=200,
          dpValve_nominal=2000,
          use_inputFilter=false)
          annotation (Placement(transformation(extent={{-20,0},{0,20}})));
        Modelica.Blocks.Sources.RealExpression realExpression(y=1)
          annotation (Placement(transformation(extent={{-60,40},{-40,60}})));
        Fluid.FixedResistances.PressureDrop res(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=200,
          dp_nominal=2000)
          annotation (Placement(transformation(extent={{50,-50},{70,-30}})));
        Modelica.Blocks.Sources.Ramp ramp(duration=3000, startTime=500)
          annotation (Placement(transformation(extent={{-60,80},{-40,100}})));
      equation
        connect(fan1.port_a, bou.ports[1]) annotation (Line(points={{-60,10},{
                -80,10},{-80,-20},{60,-20},{60,12},{80,12}},
                                                           color={0,127,255}));
        connect(fan1.port_b, val2.port_a)
          annotation (Line(points={{-40,10},{-20,10}}, color={0,127,255}));
        connect(val1.port_a, val2.port_b)
          annotation (Line(points={{20,10},{0,10}}, color={0,127,255}));
        connect(realExpression.y, val2.y) annotation (Line(points={{-39,50},{
                -10,50},{-10,22}}, color={0,0,127}));
        connect(val1.port_b, res.port_a) annotation (Line(points={{40,10},{46,
                10},{46,-40},{50,-40}}, color={0,127,255}));
        connect(res.port_b, bou.ports[2]) annotation (Line(points={{70,-40},{78,
                -40},{78,8},{80,8}}, color={0,127,255}));
        connect(ramp.y, val1.y) annotation (Line(points={{-39,90},{30,90},{30,
                22}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=4000,
            __Dymola_NumberOfIntervals=4000,
            __Dymola_Algorithm="Dassl"));
      end test_pump2;

      model test_valve
        Fluid.FixedResistances.CheckValve cheVal(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=720*1025/3600,
          dpValve_nominal=3000)
          annotation (Placement(transformation(extent={{-20,0},{0,20}})));
        Fluid.Sources.Boundary_pT bou(
          redeclare package Medium = Buildings.Media.Water,
          p=200000,
          nPorts=2)
          annotation (Placement(transformation(extent={{60,0},{40,20}})));
        Fluid.Movers.FlowControlled_dp fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=747.6*1025/3600,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          constantHead(displayUnit="bar") = 287000)
          annotation (Placement(transformation(extent={{-60,0},{-40,20}})));
        Fluid.Movers.FlowControlled_dp fan1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=747.6*1025/3600,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          constantHead(displayUnit="bar") = 0)
          annotation (Placement(transformation(extent={{-60,40},{-40,60}})));
        Fluid.FixedResistances.CheckValve cheVal1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=720*1025/3600,
          dpValve_nominal=3000)
          annotation (Placement(transformation(extent={{-20,40},{0,60}})));
        Fluid.FixedResistances.Junction jun(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={200,-200,-200},
          dp_nominal={0,0,0}) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-90,10})));
        Fluid.FixedResistances.Junction jun1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={200,-200,200},
          dp_nominal={0,0,0}) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=180,
              origin={20,10})));
      equation
        connect(fan.port_b, cheVal.port_a)
          annotation (Line(points={{-40,10},{-20,10}}, color={0,127,255}));
        connect(jun.port_3, fan.port_a)
          annotation (Line(points={{-80,10},{-60,10}}, color={0,127,255}));
        connect(cheVal.port_b, jun1.port_1)
          annotation (Line(points={{0,10},{10,10}}, color={0,127,255}));
        connect(bou.ports[1], jun1.port_2) annotation (Line(points={{40,12},{36,
                12},{36,10},{30,10}}, color={0,127,255}));
        connect(cheVal1.port_b, jun1.port_3) annotation (Line(points={{0,50},{
                20,50},{20,20}}, color={0,127,255}));
        connect(fan1.port_b, cheVal1.port_a) annotation (Line(points={{-40,50},
                {-30,50},{-30,50},{-20,50}}, color={0,127,255}));
        connect(jun.port_2, fan1.port_a) annotation (Line(points={{-90,20},{-90,
                50},{-60,50}}, color={0,127,255}));
        connect(jun.port_1, bou.ports[2]) annotation (Line(points={{-90,0},{-90,
                -20},{40,-20},{40,8}}, color={0,127,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end test_valve;

      model linear
        Fluid.Sources.Boundary_pT bou(
          redeclare package Medium = Buildings.Media.Water,
          p=100000,
          nPorts=2)
          annotation (Placement(transformation(extent={{100,-20},{80,0}})));
        Fluid.Actuators.Valves.TwoWayEqualPercentage val(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=100,
          dpValve_nominal(displayUnit="bar") = 400000)
          annotation (Placement(transformation(extent={{0,-20},{20,0}})));
        Fluid.Sources.Boundary_pT bou1(
          redeclare package Medium = Buildings.Media.Water,
          p=500000,
          nPorts=2)
          annotation (Placement(transformation(extent={{-100,-20},{-80,0}})));
        Modelica.Blocks.Sources.Ramp ramp(duration=500)
          annotation (Placement(transformation(extent={{-60,20},{-40,40}})));
        Fluid.Actuators.Valves.TwoWayLinear val1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=100,
          dpValve_nominal(displayUnit="bar") = 400000)
          annotation (Placement(transformation(extent={{-20,-60},{0,-40}})));
      equation
        connect(bou1.ports[1], val.port_a) annotation (Line(points={{-80,-8},{
                -40,-8},{-40,-10},{0,-10}}, color={0,127,255}));
        connect(val.port_b, bou.ports[1]) annotation (Line(points={{20,-10},{50,
                -10},{50,-8},{80,-8}}, color={0,127,255}));
        connect(ramp.y, val.y)
          annotation (Line(points={{-39,30},{10,30},{10,2}}, color={0,0,127}));
        connect(bou1.ports[2], val1.port_a) annotation (Line(points={{-80,-12},
                {-52,-12},{-52,-50},{-20,-50}}, color={0,127,255}));
        connect(val1.port_b, bou.ports[2]) annotation (Line(points={{0,-50},{50,
                -50},{50,-12},{80,-12}}, color={0,127,255}));
        connect(ramp.y, val1.y) annotation (Line(points={{-39,30},{-39,-6},{-10,
                -6},{-10,-38}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end linear;

      model pump_valve_pid
        Fluid.Sources.Boundary_pT bou(
          redeclare package Medium = Buildings.Media.Water,
          p=100000,
          nPorts=4)
          annotation (Placement(transformation(extent={{100,0},{80,20}})));
        Fluid.Actuators.Valves.TwoWayLinear val1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=200,
          dpValve_nominal=3000,
          use_inputFilter=false)
          annotation (Placement(transformation(extent={{-10,0},{10,20}})));
        Modelica.Blocks.Sources.Ramp ramp(
          height=0.5,
          duration=500,
          offset=0.5,
          startTime=200)
          annotation (Placement(transformation(extent={{-100,60},{-80,80}})));
        Fluid.Movers.FlowControlled_m_flow fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=200,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_PEC per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          constantMassFlowRate=200)
          annotation (Placement(transformation(extent={{-70,0},{-50,20}})));
        Fluid.Actuators.Valves.TwoWayLinear val2(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=200,
          dpValve_nominal=3000,
          use_inputFilter=false)
          annotation (Placement(transformation(extent={{-10,-44},{10,-24}})));
        Controls.Continuous.LimPID conPID(reverseActing=false)
          annotation (Placement(transformation(extent={{80,60},{100,80}})));
        Fluid.Sensors.RelativePressure senRelPre
          annotation (Placement(transformation(extent={{12,36},{32,56}})));
        Modelica.Blocks.Sources.RealExpression realExpression(y=2000)
          annotation (Placement(transformation(extent={{40,60},{60,80}})));
        Modelica.Blocks.Sources.RealExpression realExpression1(y=0)
          annotation (Placement(transformation(extent={{-140,-20},{-120,0}})));
      equation
        connect(val1.port_b,bou. ports[1]) annotation (Line(points={{10,10},{46,
                10},{46,13},{80,13}}, color={0,127,255}));
        connect(ramp.y,val1. y)
          annotation (Line(points={{-79,70},{0,70},{0,22}}, color={0,0,127}));
        connect(fan.port_b, val1.port_a)
          annotation (Line(points={{-50,10},{-10,10}}, color={0,127,255}));
        connect(fan.port_a, bou.ports[2]) annotation (Line(points={{-70,10},{
                -80,10},{-80,-60},{80,-60},{80,11}}, color={0,127,255}));
        connect(fan.port_b, val2.port_a) annotation (Line(points={{-50,10},{-46,
                10},{-46,-34},{-10,-34}}, color={0,127,255}));
        connect(val2.port_b, bou.ports[3]) annotation (Line(points={{10,-34},{
                60,-34},{60,9},{80,9}}, color={0,127,255}));
        connect(senRelPre.port_a, val1.port_a) annotation (Line(points={{12,46},
                {-14,46},{-14,10},{-10,10}}, color={0,127,255}));
        connect(senRelPre.port_b, bou.ports[4]) annotation (Line(points={{32,46},
                {30,46},{30,10},{46,10},{46,12.6667},{80,12.6667},{80,7}},
              color={0,127,255}));
        connect(senRelPre.p_rel, conPID.u_m) annotation (Line(points={{22,37},{
                22,34},{90,34},{90,58}}, color={0,0,127}));
        connect(realExpression.y, conPID.u_s)
          annotation (Line(points={{61,70},{78,70}}, color={0,0,127}));
        connect(conPID.y, val2.y) annotation (Line(points={{101,70},{138,70},{
                138,-22},{0,-22}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end pump_valve_pid;

      model test_pump3
        Fluid.Sources.Boundary_pT bou(
          redeclare package Medium = Buildings.Media.Water,
          p=100000,
          nPorts=3)
          annotation (Placement(transformation(extent={{100,0},{80,20}})));
        Fluid.Actuators.Valves.TwoWayLinear val1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=200,
          dpValve_nominal=2000,
          use_inputFilter=false)
          annotation (Placement(transformation(extent={{-10,0},{10,20}})));
        Modelica.Blocks.Sources.RealExpression realExpression(y=0.5)
          annotation (Placement(transformation(extent={{-60,60},{-40,80}})));
        Fluid.Movers.FlowControlled_m_flow fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=200,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_PEC per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          constantMassFlowRate=200)
          annotation (Placement(transformation(extent={{-60,0},{-40,20}})));
        Fluid.Actuators.Valves.TwoWayLinear val2(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=200,
          dpValve_nominal=2000,
          use_inputFilter=false)
          annotation (Placement(transformation(extent={{-10,-40},{10,-20}})));
        Modelica.Blocks.Sources.RealExpression realExpression1(y=0)
          annotation (Placement(transformation(extent={{-60,34},{-40,54}})));
      equation
        connect(val1.port_b,bou. ports[1]) annotation (Line(points={{10,10},{46,
                10},{46,12.6667},{80,12.6667}},
                                      color={0,127,255}));
        connect(realExpression.y, val1.y)
          annotation (Line(points={{-39,70},{0,70},{0,22}}, color={0,0,127}));
        connect(val1.port_a, fan.port_b)
          annotation (Line(points={{-10,10},{-40,10}}, color={0,127,255}));
        connect(fan.port_a, bou.ports[2]) annotation (Line(points={{-60,10},{
                -84,10},{-84,-80},{60,-80},{60,10},{80,10}}, color={0,127,255}));
        connect(fan.port_b, val2.port_a) annotation (Line(points={{-40,10},{-26,
                10},{-26,-30},{-10,-30}}, color={0,127,255}));
        connect(val2.port_b, bou.ports[3]) annotation (Line(points={{10,-30},{
                46,-30},{46,7.33333},{80,7.33333}}, color={0,127,255}));
        connect(realExpression1.y, val2.y) annotation (Line(points={{-39,44},{
                -20,44},{-20,-10},{0,-10},{0,-18}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end test_pump3;

      model test_pump1b
        Fluid.Sources.Boundary_pT bou(redeclare package Medium =
              Buildings.Media.Water,
          p=100000,
          nPorts=2)
          annotation (Placement(transformation(extent={{100,0},{80,20}})));
        Fluid.Actuators.Valves.TwoWayLinear val1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=200,
          dpValve_nominal=1000,
          use_inputFilter=false)
          annotation (Placement(transformation(extent={{-10,0},{10,20}})));
        Modelica.Blocks.Sources.Ramp ramp(
          height=1,
          duration=3000,
          startTime=500)
          annotation (Placement(transformation(extent={{-100,60},{-80,80}})));
        Fluid.Movers.FlowControlled_m_flow fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=200,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_PEC per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          constantMassFlowRate=200)
          annotation (Placement(transformation(extent={{-80,0},{-60,20}})));
      equation
        connect(val1.port_b, bou.ports[1]) annotation (Line(points={{10,10},{46,
                10},{46,12},{80,12}}, color={0,127,255}));
        connect(ramp.y, val1.y)
          annotation (Line(points={{-79,70},{0,70},{0,22}}, color={0,0,127}));
        connect(fan.port_b, val1.port_a) annotation (Line(points={{-60,10},{-36,
                10},{-36,10},{-10,10}}, color={0,127,255}));
        connect(fan.port_a, bou.ports[2]) annotation (Line(points={{-80,10},{
                -90,10},{-90,-20},{80,-20},{80,8}}, color={0,127,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=4000,
            __Dymola_NumberOfIntervals=4000,
            __Dymola_Algorithm="Dassl"));
      end test_pump1b;

      model three_way
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end three_way;
    end Valves;

    package delta_p
      model p_loss
        Fluid.Sources.Boundary_pT bou(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          p=100000,
          nPorts=2)
          annotation (Placement(transformation(extent={{-100,-80},{-80,-60}})));
        Fluid.Movers.FlowControlled_dp fan1(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          p_start=100000,
          m_flow_nominal=2400,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          use_inputFilter=true,
          dp_nominal(displayUnit="bar") = 250000,
          constantHead(displayUnit="bar") = 260000)
          annotation (Placement(transformation(extent={{-60,-80},{-40,-60}})));
        PEM.Filters.filtrer_dp_linear filtrer_dp_linear(redeclare package
            Medium = Buildings.Applications.DHC_Thassalia.Media.Sea_Water, m_flow_nominal=2600/3.6)
          annotation (Placement(transformation(extent={{-20,-80},{0,-60}})));
        Fluid.FixedResistances.PressureDrop res(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal=864.9*1025/3600,
          dp_nominal=65600)
          annotation (Placement(transformation(extent={{60,-80},{80,-60}})));
        Fluid.Actuators.Valves.TwoWayLinear val(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal=864.9*1025/3600,
          dpValve_nominal=31367,
          dpFixed_nominal=77986)
          annotation (Placement(transformation(extent={{100,-80},{120,-60}})));
        Controls.Continuous.LimPID conPID(k=0.1, Ti=15)
          annotation (Placement(transformation(extent={{80,-40},{100,-20}})));
        Modelica.Blocks.Sources.RealExpression realExpression(y=864.9*1025/3600)
          annotation (Placement(transformation(extent={{40,-40},{60,-20}})));
        Fluid.Sensors.MassFlowRate senMasFlo(redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water)
          annotation (Placement(transformation(extent={{140,-80},{160,-60}})));
        Fluid.FixedResistances.Junction jun(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal={2400*1025/3600,-865*1025/3600,-(2400 - 865)*1025/3600},
          dp_nominal={0,0,0}) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=180,
              origin={30,-70})));
        Fluid.FixedResistances.Junction jun1(
          redeclare package Medium = Media.Sea_Water,
          m_flow_nominal={865*1025/3600,-2400*1025/3600,(2400 - 865)*1025/3600},
          dp_nominal={0,0,0}) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=180,
              origin={190,-70})));

        Fluid.FixedResistances.Junction jun2(
          redeclare package Medium = Media.Sea_Water,
          m_flow_nominal={(2400 - 865)*1025/3600,-750*1025/3600,-(2400 - 865 -
              750)*1025/3600},
          dp_nominal={0,0,0}) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={30,10})));
        Fluid.FixedResistances.PressureDrop res2(
          redeclare package Medium = Media.Sea_Water,
          m_flow_nominal=747.6*1025/3600,
          dp_nominal=69900)
          annotation (Placement(transformation(extent={{60,0},{80,20}})));
        Fluid.Actuators.Valves.TwoWayLinear val1(
          redeclare package Medium = Media.Sea_Water,
          m_flow_nominal=747.6*1025/3600,
          dpValve_nominal=22356,
          dpFixed_nominal=85369)
          annotation (Placement(transformation(extent={{100,0},{120,20}})));
        Controls.Continuous.LimPID conPID1(k=0.1, Ti=15)
          annotation (Placement(transformation(extent={{80,40},{100,60}})));
        Modelica.Blocks.Sources.RealExpression realExpression1(y=747.6*1025/
              3600)
          annotation (Placement(transformation(extent={{40,40},{60,60}})));
        Fluid.Sensors.MassFlowRate senMasFlo1(redeclare package Medium =
              Media.Sea_Water)
          annotation (Placement(transformation(extent={{140,0},{160,20}})));
        Fluid.FixedResistances.Junction jun3(
          redeclare package Medium = Media.Sea_Water,
          m_flow_nominal={(2400 - 865)*1025/3600,-750*1025/3600,-(2400 - 865 -
              750)*1025/3600},
          dp_nominal={0,0,0}) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={190,10})));
        Fluid.FixedResistances.PressureDrop res1(
          redeclare package Medium = Media.Sea_Water,
          m_flow_nominal=800*1025/3600,
          dp_nominal=38000)
          annotation (Placement(transformation(extent={{60,80},{80,100}})));
        Fluid.Actuators.Valves.TwoWayLinear val2(
          redeclare package Medium = Media.Sea_Water,
          m_flow_nominal=747.6*1025/3600,
          dpValve_nominal=22897,
          dpFixed_nominal=98026)
          annotation (Placement(transformation(extent={{100,80},{120,100}})));
        Controls.Continuous.LimPID conPID2(k=0.1, Ti=15)
          annotation (Placement(transformation(extent={{80,120},{100,140}})));
        Modelica.Blocks.Sources.RealExpression realExpression2(y=800*1025/3600)
          annotation (Placement(transformation(extent={{40,120},{60,140}})));
        Fluid.Sensors.MassFlowRate senMasFlo2(redeclare package Medium =
              Media.Sea_Water)
          annotation (Placement(transformation(extent={{140,80},{160,100}})));
      equation
        connect(bou.ports[1], fan1.port_a) annotation (Line(points={{-80,-68},{
                -70,-68},{-70,-70},{-60,-70}},
                                            color={0,127,255}));
        connect(fan1.port_b, filtrer_dp_linear.port_a)
          annotation (Line(points={{-40,-70},{-20,-70}},
                                                       color={0,127,255}));
        connect(res.port_b, val.port_a)
          annotation (Line(points={{80,-70},{100,-70}},
                                                     color={0,127,255}));
        connect(realExpression.y, conPID.u_s)
          annotation (Line(points={{61,-30},{78,-30}}, color={0,0,127}));
        connect(val.port_b, senMasFlo.port_a)
          annotation (Line(points={{120,-70},{140,-70}},
                                                      color={0,127,255}));
        connect(conPID.u_m, senMasFlo.m_flow)
          annotation (Line(points={{90,-42},{90,-50},{150,-50},{150,-59}},
                                                       color={0,0,127}));
        connect(conPID.y, val.y) annotation (Line(points={{101,-30},{110,-30},{
                110,-58}},        color={0,0,127}));
        connect(filtrer_dp_linear.port_b, jun.port_1)
          annotation (Line(points={{0,-70},{20,-70}},
                                                    color={0,127,255}));
        connect(res.port_a, jun.port_2)
          annotation (Line(points={{60,-70},{40,-70}},
                                                     color={0,127,255}));
        connect(senMasFlo.port_b, jun1.port_1)
          annotation (Line(points={{160,-70},{180,-70}}, color={0,127,255}));
        connect(jun1.port_2, bou.ports[2]) annotation (Line(points={{200,-70},{
                222,-70},{222,-100},{-80,-100},{-80,-72}}, color={0,127,255}));
        connect(jun2.port_1, jun.port_3)
          annotation (Line(points={{30,0},{30,-60}}, color={0,127,255}));
        connect(res2.port_b, val1.port_a)
          annotation (Line(points={{80,10},{100,10}}, color={0,127,255}));
        connect(realExpression1.y, conPID1.u_s)
          annotation (Line(points={{61,50},{78,50}}, color={0,0,127}));
        connect(val1.port_b, senMasFlo1.port_a)
          annotation (Line(points={{120,10},{140,10}}, color={0,127,255}));
        connect(conPID1.u_m, senMasFlo1.m_flow) annotation (Line(points={{90,38},
                {90,30},{150,30},{150,21}}, color={0,0,127}));
        connect(conPID1.y, val1.y) annotation (Line(points={{101,50},{110,50},{
                110,22}}, color={0,0,127}));
        connect(jun2.port_3, res2.port_a)
          annotation (Line(points={{40,10},{60,10}}, color={0,127,255}));
        connect(senMasFlo1.port_b, jun3.port_3)
          annotation (Line(points={{160,10},{180,10}}, color={0,127,255}));
        connect(jun3.port_2, jun1.port_3)
          annotation (Line(points={{190,0},{190,-60}}, color={0,127,255}));
        connect(res1.port_b, val2.port_a)
          annotation (Line(points={{80,90},{100,90}}, color={0,127,255}));
        connect(realExpression2.y, conPID2.u_s)
          annotation (Line(points={{61,130},{78,130}}, color={0,0,127}));
        connect(val2.port_b, senMasFlo2.port_a)
          annotation (Line(points={{120,90},{140,90}}, color={0,127,255}));
        connect(conPID2.u_m, senMasFlo2.m_flow) annotation (Line(points={{90,
                118},{90,110},{150,110},{150,101}}, color={0,0,127}));
        connect(conPID2.y, val2.y) annotation (Line(points={{101,130},{110,130},
                {110,102}}, color={0,0,127}));
        connect(jun2.port_2, res1.port_a) annotation (Line(points={{30,20},{30,
                90},{60,90}}, color={0,127,255}));
        connect(senMasFlo2.port_b, jun3.port_1) annotation (Line(points={{160,
                90},{190,90},{190,20}}, color={0,127,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(StopTime=300, __Dymola_Algorithm="Dassl"));
      end p_loss;

      model simple_m
        extends Buildings.Fluid.Interfaces.PartialTwoPortInterface;
      equation

        connect(port_a, port_b) annotation (Line(points={{-100,0},{0,0},{0,0},{
                100,0}}, color={0,127,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                Rectangle(
                extent={{-60,60},{60,-60}},
                lineColor={28,108,200},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid)}),                      Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end simple_m;

      model loss_circuit
        Fluid.Sources.Boundary_pT bou(
          redeclare package Medium = Media.Sea_Water,
          p=100000,
          nPorts=1) annotation (Placement(transformation(extent={{140,40},{120,60}})));
        Fluid.Sources.MassFlowSource_T boundary(
          redeclare package Medium = Media.Sea_Water,
          use_m_flow_in=true,
          m_flow=747.6*1025/3600,
          nPorts=1)
          annotation (Placement(transformation(extent={{-100,40},{-80,60}})));
        Fluid.HeatExchangers.PlateHeatExchangerEffectivenessNTU RJF(
          redeclare package Medium1 = Media.Sea_Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=747.6*1025/3600,
          m2_flow_nominal=726.2*1001/3600,
          dp1_nominal=69900,
          dp2_nominal=61900,
          configuration=Buildings.Fluid.Types.HeatExchangerConfiguration.CounterFlow,
          use_Q_flow_nominal=true,
          Q_flow_nominal=4250000,
          T_a1_nominal=283.65,
          T_a2_nominal=277.15)
          annotation (Placement(transformation(extent={{0,0},{20,20}})));

        Fluid.Sources.MassFlowSource_T boundary1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow=726.2*1001/3600,
          nPorts=1)
          annotation (Placement(transformation(extent={{100,-40},{80,-20}})));
        Fluid.Sources.Boundary_pT bou1(
          redeclare package Medium = Buildings.Media.Water,
          p=100000,
          nPorts=1)
          annotation (Placement(transformation(extent={{-100,-40},{-80,-20}})));
        Controls.Continuous.LimPID conPID(k=0.1, Ti=15)
          annotation (Placement(transformation(extent={{-30,100},{-10,120}})));
        Modelica.Blocks.Sources.RealExpression realExpression(y=747.6)
          annotation (Placement(transformation(extent={{-60,100},{-40,120}})));
        Modelica.Blocks.Math.Gain m_flow(k=747.6*1025/3600) "Proportional term"
          annotation (Placement(transformation(extent={{-140,60},{-120,80}})));
        Fluid.Sensors.VolumeFlowRate senVolFlo(redeclare package Medium =
              Media.Sea_Water, m_flow_nominal=747*1025/3600)
          annotation (Placement(transformation(extent={{-30,6},{-10,26}})));
        Modelica.Blocks.Math.Gain v_flow(k=3600) "Proportional term" annotation (
            Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-20,70})));
        Fluid.Actuators.Valves.TwoWayLinear val(
          redeclare package Medium = Media.Sea_Water,
          m_flow_nominal=747.6*1025/3600,
          dpValve_nominal=4488.511118,
          use_inputFilter=false,
          dpFixed_nominal=0)
          annotation (Placement(transformation(extent={{40,6},{60,26}})));
        PEM.Filters.filtrer_dp filtrer_dp(redeclare package Medium =
              Media.Sea_Water, m_flow_nominal=747*1025/3600)
          annotation (Placement(transformation(extent={{-60,6},{-40,26}})));
        Modelica.Blocks.Sources.Constant const(k=1)
          annotation (Placement(transformation(extent={{20,40},{40,60}})));
        Fluid.FixedResistances.PressureDrop res(
          redeclare package Medium = Media.Sea_Water,
          m_flow_nominal=747.6*1025/3600,
          dp_nominal=9104.32825)
          annotation (Placement(transformation(extent={{80,6},{100,26}})));
      equation
        connect(bou1.ports[1], RJF.port_b2) annotation (Line(points={{-80,-30},{-60,-30},
                {-60,4},{0,4}},   color={0,127,255}));
        connect(RJF.port_a2, boundary1.ports[1]) annotation (Line(points={{20,4},{40,4},
                {40,-28},{80,-28},{80,-30}}, color={0,127,255}));
        connect(realExpression.y, conPID.u_s)
          annotation (Line(points={{-39,110},{-32,110}},color={0,0,127}));
        connect(boundary.m_flow_in, m_flow.y) annotation (Line(points={{-102,58},{-110,
                58},{-110,70},{-119,70}}, color={0,0,127}));
        connect(m_flow.u, conPID.y) annotation (Line(points={{-142,70},{-160,70},{-160,
                140},{60,140},{60,110},{-9,110}}, color={0,0,127}));
        connect(senVolFlo.port_b, RJF.port_a1)
          annotation (Line(points={{-10,16},{0,16}}, color={0,127,255}));
        connect(senVolFlo.V_flow, v_flow.u)
          annotation (Line(points={{-20,27},{-20,58}}, color={0,0,127}));
        connect(conPID.u_m, v_flow.y)
          annotation (Line(points={{-20,98},{-20,81}}, color={0,0,127}));
        connect(RJF.port_b1, val.port_a)
          annotation (Line(points={{20,16},{40,16}},color={0,127,255}));
        connect(boundary.ports[1], filtrer_dp.port_a) annotation (Line(points={{-80,50},
                {-70,50},{-70,16},{-60,16}}, color={0,127,255}));
        connect(filtrer_dp.port_b, senVolFlo.port_a)
          annotation (Line(points={{-40,16},{-30,16}}, color={0,127,255}));
        connect(const.y, val.y)
          annotation (Line(points={{41,50},{50,50},{50,28}}, color={0,0,127}));
        connect(val.port_b, res.port_a)
          annotation (Line(points={{60,16},{80,16}}, color={0,127,255}));
        connect(res.port_b, bou.ports[1]) annotation (Line(points={{100,16},{110,16},{
                110,50},{120,50}}, color={0,127,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end loss_circuit;

      model loss_circuit_bis
        Fluid.Sources.Boundary_pT bou(
          redeclare package Medium = Media.Sea_Water,
          p=100000,
          nPorts=1) annotation (Placement(transformation(extent={{140,40},{120,60}})));
        Fluid.Sources.MassFlowSource_T boundary(
          redeclare package Medium = Media.Sea_Water,
          use_m_flow_in=true,
          m_flow=747.6*1025/3600,
          nPorts=1)
          annotation (Placement(transformation(extent={{-100,40},{-80,60}})));
        Fluid.HeatExchangers.PlateHeatExchangerEffectivenessNTU RJF(
          redeclare package Medium1 = Media.Sea_Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=747.6*1025/3600,
          m2_flow_nominal=726.2*1001/3600,
          dp1_nominal=69900,
          dp2_nominal=61900,
          configuration=Buildings.Fluid.Types.HeatExchangerConfiguration.CounterFlow,
          use_Q_flow_nominal=true,
          Q_flow_nominal=4250000,
          T_a1_nominal=283.65,
          T_a2_nominal=277.15)
          annotation (Placement(transformation(extent={{0,0},{20,20}})));

        Fluid.Sources.MassFlowSource_T boundary1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow=726.2*1001/3600,
          nPorts=1)
          annotation (Placement(transformation(extent={{100,-40},{80,-20}})));
        Fluid.Sources.Boundary_pT bou1(
          redeclare package Medium = Buildings.Media.Water,
          p=100000,
          nPorts=1)
          annotation (Placement(transformation(extent={{-100,-40},{-80,-20}})));
        Controls.Continuous.LimPID conPID(k=0.1, Ti=15)
          annotation (Placement(transformation(extent={{-30,100},{-10,120}})));
        Modelica.Blocks.Sources.RealExpression realExpression(y=747.6)
          annotation (Placement(transformation(extent={{-60,100},{-40,120}})));
        Modelica.Blocks.Math.Gain m_flow(k=747.6*1025/3600) "Proportional term"
          annotation (Placement(transformation(extent={{-140,60},{-120,80}})));
        Fluid.Sensors.VolumeFlowRate senVolFlo(redeclare package Medium =
              Media.Sea_Water, m_flow_nominal=747*1025/3600)
          annotation (Placement(transformation(extent={{-30,6},{-10,26}})));
        Modelica.Blocks.Math.Gain v_flow(k=3600) "Proportional term" annotation (
            Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-20,70})));
        Fluid.Actuators.Valves.TwoWayLinear val(
          redeclare package Medium = Media.Sea_Water,
          m_flow_nominal=747.6*1025/3600,
          CvData=Buildings.Fluid.Types.CvTypes.Kv,
          Kv=1100,
          use_inputFilter=false,
          dpFixed_nominal=0)
          annotation (Placement(transformation(extent={{40,6},{60,26}})));
        PEM.Filters.filtrer_dp filtrer_dp(redeclare package Medium =
              Media.Sea_Water, m_flow_nominal=747*1025/3600)
          annotation (Placement(transformation(extent={{-60,6},{-40,26}})));
        Modelica.Blocks.Sources.Constant const(k=1)
          annotation (Placement(transformation(extent={{20,40},{40,60}})));
      equation
        connect(bou1.ports[1], RJF.port_b2) annotation (Line(points={{-80,-30},{-60,-30},
                {-60,4},{0,4}},   color={0,127,255}));
        connect(RJF.port_a2, boundary1.ports[1]) annotation (Line(points={{20,4},{40,4},
                {40,-28},{80,-28},{80,-30}}, color={0,127,255}));
        connect(realExpression.y, conPID.u_s)
          annotation (Line(points={{-39,110},{-32,110}},color={0,0,127}));
        connect(boundary.m_flow_in, m_flow.y) annotation (Line(points={{-102,58},{-110,
                58},{-110,70},{-119,70}}, color={0,0,127}));
        connect(m_flow.u, conPID.y) annotation (Line(points={{-142,70},{-160,70},{-160,
                140},{60,140},{60,110},{-9,110}}, color={0,0,127}));
        connect(senVolFlo.port_b, RJF.port_a1)
          annotation (Line(points={{-10,16},{0,16}}, color={0,127,255}));
        connect(senVolFlo.V_flow, v_flow.u)
          annotation (Line(points={{-20,27},{-20,58}}, color={0,0,127}));
        connect(conPID.u_m, v_flow.y)
          annotation (Line(points={{-20,98},{-20,81}}, color={0,0,127}));
        connect(RJF.port_b1, val.port_a)
          annotation (Line(points={{20,16},{40,16}},color={0,127,255}));
        connect(boundary.ports[1], filtrer_dp.port_a) annotation (Line(points={{-80,50},
                {-70,50},{-70,16},{-60,16}}, color={0,127,255}));
        connect(filtrer_dp.port_b, senVolFlo.port_a)
          annotation (Line(points={{-40,16},{-30,16}}, color={0,127,255}));
        connect(const.y, val.y)
          annotation (Line(points={{41,50},{50,50},{50,28}}, color={0,0,127}));
        connect(val.port_b, bou.ports[1]) annotation (Line(points={{60,16},{90,
                16},{90,50},{120,50}}, color={0,127,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end loss_circuit_bis;

      model loss_bis
        Fluid.FixedResistances.PressureDrop res(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=1000,
          dp_nominal=100000)
          annotation (Placement(transformation(extent={{0,0},{20,20}})));
        Fluid.Sources.Boundary_pT bou(
          redeclare package Medium = Media.Sea_Water,
          p=100000,
          nPorts=2) annotation (Placement(transformation(extent={{100,0},{80,20}})));
        Fluid.Movers.FlowControlled_dp fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=1500,
          redeclare Fluid.Movers.Data.Generic per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          constantHead(displayUnit="Pa") = 200000)
          annotation (Placement(transformation(extent={{-100,0},{-80,20}})));
        Fluid.FixedResistances.PressureDrop res1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=1000,
          dp_nominal=20000)
          annotation (Placement(transformation(extent={{-40,0},{-20,20}})));
        Fluid.FixedResistances.PressureDrop res2(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=1000,
          dp_nominal=50000)
          annotation (Placement(transformation(extent={{-40,40},{-20,60}})));
        Fluid.FixedResistances.PressureDrop res3(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=1000,
          dp_nominal=50000)
          annotation (Placement(transformation(extent={{40,0},{60,20}})));
      equation
        connect(fan.port_a, bou.ports[1]) annotation (Line(points={{-100,10},{
                -120,10},{-120,-20},{80,-20},{80,12}}, color={0,127,255}));
        connect(res.port_a, res1.port_b)
          annotation (Line(points={{0,10},{-20,10}},color={0,127,255}));
        connect(res1.port_a, fan.port_b)
          annotation (Line(points={{-40,10},{-80,10}}, color={0,127,255}));
        connect(fan.port_b, res2.port_a) annotation (Line(points={{-80,10},{-60,
                10},{-60,50},{-40,50}}, color={0,127,255}));
        connect(res.port_b, res3.port_a)
          annotation (Line(points={{20,10},{40,10}}, color={0,127,255}));
        connect(res2.port_b, res3.port_a) annotation (Line(points={{-20,50},{30,
                50},{30,10},{40,10}}, color={0,127,255}));
        connect(res3.port_b, bou.ports[2]) annotation (Line(points={{60,10},{70,
                10},{70,8},{80,8}}, color={0,127,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end loss_bis;

      model loss_circuit_pump
        Fluid.Sources.Boundary_pT bou(
          redeclare package Medium = Media.Sea_Water,
          p=100000,
          nPorts=2) annotation (Placement(transformation(extent={{140,40},{120,60}})));
        Fluid.HeatExchangers.PlateHeatExchangerEffectivenessNTU RJF(
          redeclare package Medium1 = Media.Sea_Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=747.6*1025/3600,
          m2_flow_nominal=726.2*1001/3600,
          dp1_nominal=69900,
          dp2_nominal=61900,
          configuration=Buildings.Fluid.Types.HeatExchangerConfiguration.CounterFlow,
          use_Q_flow_nominal=true,
          Q_flow_nominal=4250000,
          T_a1_nominal=283.65,
          T_a2_nominal=277.15)
          annotation (Placement(transformation(extent={{0,0},{20,20}})));

        Fluid.Sources.MassFlowSource_T boundary1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow=726.2*1001/3600,
          nPorts=1)
          annotation (Placement(transformation(extent={{100,-40},{80,-20}})));
        Fluid.Sources.Boundary_pT bou1(
          redeclare package Medium = Buildings.Media.Water,
          p=100000,
          nPorts=1)
          annotation (Placement(transformation(extent={{-100,-40},{-80,-20}})));
        Controls.Continuous.LimPID conPID(k=0.1, Ti=15)
          annotation (Placement(transformation(extent={{-30,70},{-10,90}})));
        Fluid.Sensors.VolumeFlowRate senVolFlo(redeclare package Medium =
              Media.Sea_Water, m_flow_nominal=747*1025/3600)
          annotation (Placement(transformation(extent={{-30,6},{-10,26}})));
        Modelica.Blocks.Math.Gain v_flow(k=3600) "Proportional term" annotation (
            Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-20,50})));
        Fluid.Actuators.Valves.TwoWayLinear val(
          redeclare package Medium = Media.Sea_Water,
          m_flow_nominal=747.6*1025/3600,
          dpValve_nominal=3345.588326,
          use_inputFilter=false,
          y_start=0,
          dpFixed_nominal=0)
          annotation (Placement(transformation(extent={{40,6},{60,26}})));
        PEM.Filters.filtrer_dp filtrer_dp(redeclare package Medium =
              Media.Sea_Water, m_flow_nominal=747.6*1025/3600)
          annotation (Placement(transformation(extent={{-60,6},{-40,26}})));
        Fluid.FixedResistances.PressureDrop res(
          redeclare package Medium = Media.Sea_Water,
          m_flow_nominal=747.6*1025/3600,
          dp_nominal=44919.84424)
          annotation (Placement(transformation(extent={{80,6},{100,26}})));
        Modelica.Blocks.Sources.Ramp ramp(
          height=747.6 - 300,
          duration=2000,
          offset=300,
          startTime=200)
          annotation (Placement(transformation(extent={{-80,70},{-60,90}})));
        Fluid.Sources.Boundary_pT bou2(
          redeclare package Medium = Media.Sea_Water,
          p=240000,
          nPorts=1) annotation (Placement(transformation(extent={{-100,6},{-80,
                  26}})));
        Fluid.FixedResistances.PressureDrop res1(
          redeclare package Medium = Media.Sea_Water,
          m_flow_nominal=(2400 - 747.6)*1025/3600,
          dp_nominal=75000)
          annotation (Placement(transformation(extent={{-20,-60},{0,-40}})));
      equation
        connect(bou1.ports[1], RJF.port_b2) annotation (Line(points={{-80,-30},{-60,-30},
                {-60,4},{0,4}},   color={0,127,255}));
        connect(RJF.port_a2, boundary1.ports[1]) annotation (Line(points={{20,4},{40,4},
                {40,-28},{80,-28},{80,-30}}, color={0,127,255}));
        connect(senVolFlo.port_b, RJF.port_a1)
          annotation (Line(points={{-10,16},{0,16}}, color={0,127,255}));
        connect(senVolFlo.V_flow, v_flow.u)
          annotation (Line(points={{-20,27},{-20,38}}, color={0,0,127}));
        connect(conPID.u_m, v_flow.y)
          annotation (Line(points={{-20,68},{-20,61}}, color={0,0,127}));
        connect(RJF.port_b1, val.port_a)
          annotation (Line(points={{20,16},{40,16}},color={0,127,255}));
        connect(filtrer_dp.port_b, senVolFlo.port_a)
          annotation (Line(points={{-40,16},{-30,16}}, color={0,127,255}));
        connect(val.port_b, res.port_a)
          annotation (Line(points={{60,16},{80,16}}, color={0,127,255}));
        connect(res.port_b, bou.ports[1]) annotation (Line(points={{100,16},{
                110,16},{110,52},{120,52}},
                                   color={0,127,255}));
        connect(conPID.y, val.y)
          annotation (Line(points={{-9,80},{50,80},{50,28}}, color={0,0,127}));
        connect(conPID.u_s, ramp.y)
          annotation (Line(points={{-32,80},{-59,80}}, color={0,0,127}));
        connect(filtrer_dp.port_a, bou2.ports[1])
          annotation (Line(points={{-60,16},{-80,16}}, color={0,127,255}));
        connect(filtrer_dp.port_b, res1.port_a) annotation (Line(points={{-40,
                16},{-32,16},{-32,-50},{-20,-50}}, color={0,127,255}));
        connect(res1.port_b, bou.ports[2]) annotation (Line(points={{0,-50},{
                120,-50},{120,48}}, color={0,127,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end loss_circuit_pump;

      model loss_circuit_pump_bis
        Fluid.Sources.Boundary_pT bou(
          redeclare package Medium = Media.Sea_Water,
          p=100000,
          nPorts=2) annotation (Placement(transformation(extent={{140,60},{120,
                  40}})));
        Fluid.HeatExchangers.PlateHeatExchangerEffectivenessNTU RJF(
          redeclare package Medium1 = Media.Sea_Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=747.6*1025/3600,
          m2_flow_nominal=726.2*1001/3600,
          dp1_nominal=69900,
          dp2_nominal=61900,
          configuration=Buildings.Fluid.Types.HeatExchangerConfiguration.CounterFlow,
          use_Q_flow_nominal=true,
          Q_flow_nominal=4250000,
          T_a1_nominal=283.65,
          T_a2_nominal=277.15)
          annotation (Placement(transformation(extent={{0,0},{20,20}})));

        Fluid.Sources.MassFlowSource_T boundary1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow=726.2*1001/3600,
          nPorts=1)
          annotation (Placement(transformation(extent={{100,-40},{80,-20}})));
        Fluid.Sources.Boundary_pT bou1(
          redeclare package Medium = Buildings.Media.Water,
          p=100000,
          nPorts=1)
          annotation (Placement(transformation(extent={{-100,-40},{-80,-20}})));
        Controls.Continuous.LimPID conPID(k=0.1, Ti=15)
          annotation (Placement(transformation(extent={{-30,70},{-10,90}})));
        Fluid.Sensors.VolumeFlowRate senVolFlo(redeclare package Medium =
              Media.Sea_Water, m_flow_nominal=747*1025/3600)
          annotation (Placement(transformation(extent={{-30,6},{-10,26}})));
        Modelica.Blocks.Math.Gain v_flow(k=3600) "Proportional term" annotation (
            Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-20,50})));
        Fluid.Actuators.Valves.TwoWayLinear val(
          redeclare package Medium = Media.Sea_Water,
          m_flow_nominal=747.6*1025/3600,
          CvData=Buildings.Fluid.Types.CvTypes.Kv,
          Kv=3000,
          use_inputFilter=false,
          y_start=0,
          dpFixed_nominal=0)
          annotation (Placement(transformation(extent={{40,6},{60,26}})));
        PEM.Filters.filtrer_dp filtrer_dp(redeclare package Medium =
              Media.Sea_Water, m_flow_nominal=747.6*1025/3600)
          annotation (Placement(transformation(extent={{-60,6},{-40,26}})));
        Modelica.Blocks.Sources.Ramp ramp(
          height=747.6 - 300,
          duration=2000,
          offset=300,
          startTime=200)
          annotation (Placement(transformation(extent={{-80,70},{-60,90}})));
        Fluid.Sources.Boundary_pT bou2(
          redeclare package Medium = Media.Sea_Water,
          p=240000,
          nPorts=1) annotation (Placement(transformation(extent={{-100,26},{-80,
                  6}})));
        Fluid.FixedResistances.PressureDrop res1(
          redeclare package Medium = Media.Sea_Water,
          m_flow_nominal=(3600 - 747.6)*1025/3600,
          dp_nominal=60306.12284)
          annotation (Placement(transformation(extent={{-20,-60},{0,-40}})));
      equation
        connect(bou1.ports[1], RJF.port_b2) annotation (Line(points={{-80,-30},{-60,-30},
                {-60,4},{0,4}},   color={0,127,255}));
        connect(RJF.port_a2, boundary1.ports[1]) annotation (Line(points={{20,4},{40,4},
                {40,-28},{80,-28},{80,-30}}, color={0,127,255}));
        connect(senVolFlo.port_b, RJF.port_a1)
          annotation (Line(points={{-10,16},{0,16}}, color={0,127,255}));
        connect(senVolFlo.V_flow, v_flow.u)
          annotation (Line(points={{-20,27},{-20,38}}, color={0,0,127}));
        connect(conPID.u_m, v_flow.y)
          annotation (Line(points={{-20,68},{-20,61}}, color={0,0,127}));
        connect(RJF.port_b1, val.port_a)
          annotation (Line(points={{20,16},{40,16}},color={0,127,255}));
        connect(filtrer_dp.port_b, senVolFlo.port_a)
          annotation (Line(points={{-40,16},{-30,16}}, color={0,127,255}));
        connect(conPID.y, val.y)
          annotation (Line(points={{-9,80},{50,80},{50,28}}, color={0,0,127}));
        connect(conPID.u_s, ramp.y)
          annotation (Line(points={{-32,80},{-59,80}}, color={0,0,127}));
        connect(val.port_b, bou.ports[1]) annotation (Line(points={{60,16},{90,
                16},{90,48},{120,48}}, color={0,127,255}));
        connect(bou2.ports[1], filtrer_dp.port_a)
          annotation (Line(points={{-80,16},{-60,16}}, color={0,127,255}));
        connect(filtrer_dp.port_b, res1.port_a) annotation (Line(points={{-40,
                16},{-32,16},{-32,-50},{-20,-50}}, color={0,127,255}));
        connect(res1.port_b, bou.ports[2]) annotation (Line(points={{0,-50},{
                120,-50},{120,52}}, color={0,127,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end loss_circuit_pump_bis;

      model loss_ter
        Fluid.FixedResistances.PressureDrop res(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=1000,
          dp_nominal=100000)
          annotation (Placement(transformation(extent={{20,40},{40,60}})));
        Fluid.Sources.Boundary_pT bou(
          redeclare package Medium = Media.Sea_Water,
          p=100000,
          nPorts=2) annotation (Placement(transformation(extent={{100,40},{80,
                  60}})));
        Fluid.Movers.FlowControlled_dp fan(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=1500,
          redeclare Fluid.Movers.Data.Generic per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          constantHead(displayUnit="Pa") = 150000)
          annotation (Placement(transformation(extent={{-100,40},{-80,60}})));
        Fluid.FixedResistances.PressureDrop res1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=1000,
          dp_nominal=20000)
          annotation (Placement(transformation(extent={{-20,40},{0,60}})));
        Fluid.FixedResistances.PressureDrop res2(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=1000,
          dp_nominal=50000)
          annotation (Placement(transformation(extent={{-20,80},{0,100}})));
        Fluid.FixedResistances.Junction jun(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={1000,-1000,-1000},
          dp_nominal={0,0,0}) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=180,
              origin={-50,50})));
        Fluid.FixedResistances.Junction jun1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal={1000,-1000,1000},
          dp_nominal={0,0,0}) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=180,
              origin={60,50})));
        Fluid.FixedResistances.PressureDrop res3(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=1000,
          dp_nominal=100000)
          annotation (Placement(transformation(extent={{20,-60},{40,-40}})));
        Fluid.Sources.Boundary_pT bou1(
          redeclare package Medium = Media.Sea_Water,
          p=100000,
          nPorts=3) annotation (Placement(transformation(extent={{100,-60},{80,
                  -40}})));
        Fluid.Movers.FlowControlled_dp fan1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=1500,
          redeclare Fluid.Movers.Data.Generic per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          constantHead(displayUnit="Pa") = 150000)
          annotation (Placement(transformation(extent={{-100,-60},{-80,-40}})));
        Fluid.FixedResistances.PressureDrop res4(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=1000,
          dp_nominal=20000)
          annotation (Placement(transformation(extent={{-20,-60},{0,-40}})));
        Fluid.FixedResistances.PressureDrop res5(
          redeclare package Medium = Buildings.Media.Water,
          m_flow_nominal=1000,
          dp_nominal=50000)
          annotation (Placement(transformation(extent={{-20,-20},{0,0}})));
      equation
        connect(fan.port_a, bou.ports[1]) annotation (Line(points={{-100,50},{
                -120,50},{-120,20},{80,20},{80,52}},   color={0,127,255}));
        connect(res.port_a, res1.port_b)
          annotation (Line(points={{20,50},{0,50}}, color={0,127,255}));
        connect(fan.port_b, jun.port_1)
          annotation (Line(points={{-80,50},{-60,50}}, color={0,127,255}));
        connect(res2.port_a, jun.port_3) annotation (Line(points={{-20,90},{-50,
                90},{-50,60}}, color={0,127,255}));
        connect(res1.port_a, jun.port_2)
          annotation (Line(points={{-20,50},{-40,50}}, color={0,127,255}));
        connect(res.port_b, jun1.port_1)
          annotation (Line(points={{40,50},{50,50}}, color={0,127,255}));
        connect(bou.ports[2], jun1.port_2) annotation (Line(points={{80,48},{76,
                48},{76,50},{70,50}}, color={0,127,255}));
        connect(res2.port_b, jun1.port_3) annotation (Line(points={{0,90},{60,
                90},{60,60}}, color={0,127,255}));
        connect(res3.port_b, bou1.ports[1]) annotation (Line(points={{40,-50},{
                60,-50},{60,-47.3333},{80,-47.3333}}, color={0,127,255}));
        connect(fan1.port_a, bou1.ports[2]) annotation (Line(points={{-100,-50},
                {-120,-50},{-120,-80},{80,-80},{80,-50}}, color={0,127,255}));
        connect(res3.port_a, res4.port_b)
          annotation (Line(points={{20,-50},{0,-50}}, color={0,127,255}));
        connect(res4.port_a, fan1.port_b)
          annotation (Line(points={{-20,-50},{-80,-50}}, color={0,127,255}));
        connect(fan1.port_b, res5.port_a) annotation (Line(points={{-80,-50},{
                -50,-50},{-50,-10},{-20,-10}}, color={0,127,255}));
        connect(res5.port_b, bou1.ports[3]) annotation (Line(points={{0,-10},{
                52,-10},{52,-52.6667},{80,-52.6667}}, color={0,127,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end loss_ter;

      model p_loss_bis
        Fluid.Sources.Boundary_pT bou(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          p=100000,
          nPorts=1)
          annotation (Placement(transformation(extent={{-100,-50},{-80,-30}})));
        Fluid.Movers.FlowControlled_dp fan1(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          p_start=100000,
          m_flow_nominal=2400,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          use_inputFilter=true,
          dp_nominal(displayUnit="bar") = 250000,
          constantHead(displayUnit="bar") = 260000)
          annotation (Placement(transformation(extent={{-60,0},{-40,20}})));
        PEM.Filters.filtrer_dp_linear filtrer_dp_linear(redeclare package
            Medium = Buildings.Applications.DHC_Thassalia.Media.Sea_Water, m_flow_nominal=2600/3.6)
          annotation (Placement(transformation(extent={{-20,0},{0,20}})));
        Fluid.FixedResistances.PressureDrop res(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal=864.9*1025/3600,
          dp_nominal=65600)
          annotation (Placement(transformation(extent={{60,0},{80,20}})));
        Fluid.Actuators.Valves.TwoWayLinear val(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal=864.9*1025/3600,
          dpValve_nominal=10000,
          dpFixed_nominal=90000)
          annotation (Placement(transformation(extent={{100,0},{120,20}})));
        Fluid.FixedResistances.PressureDrop res1(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal=(2400 - 864.9)*1025/3600,
          dp_nominal(displayUnit="bar") = 99999.99999999999*(2.6 - 0.65))
          annotation (Placement(transformation(extent={{80,40},{100,60}})));
        Controls.Continuous.LimPID conPID(k=0.1, Ti=15)
          annotation (Placement(transformation(extent={{60,100},{80,120}})));
        Modelica.Blocks.Sources.RealExpression realExpression(y=300*1025/3600)
          annotation (Placement(transformation(extent={{20,100},{40,120}})));
        Fluid.Sensors.MassFlowRate senMasFlo(redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water)
          annotation (Placement(transformation(extent={{140,0},{160,20}})));
        Fluid.FixedResistances.Junction jun(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal={2400*1025/3600,-865*1025/3600,(2400 - 865)*1025/3600},
          dp_nominal={0,0,0}) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=180,
              origin={30,10})));
        Fluid.FixedResistances.Junction jun1(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal={865*1025/3600,-2400*1025/3600,(2400 - 865)*1025/3600},
          dp_nominal={0,0,0}) annotation (Placement(transformation(
              extent={{10,-10},{-10,10}},
              rotation=180,
              origin={190,10})));
        Fluid.Sources.MassFlowSource_T boundary(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow=300,
          nPorts=1) annotation (Placement(transformation(extent={{-100,0},{-80,20}})));
      equation
        connect(fan1.port_b, filtrer_dp_linear.port_a)
          annotation (Line(points={{-40,10},{-20,10}}, color={0,127,255}));
        connect(res.port_b, val.port_a)
          annotation (Line(points={{80,10},{100,10}},color={0,127,255}));
        connect(realExpression.y, conPID.u_s)
          annotation (Line(points={{41,110},{58,110}}, color={0,0,127}));
        connect(val.port_b, senMasFlo.port_a)
          annotation (Line(points={{120,10},{140,10}},color={0,127,255}));
        connect(conPID.u_m, senMasFlo.m_flow)
          annotation (Line(points={{70,98},{70,70},{150,70},{150,21}},
                                                       color={0,0,127}));
        connect(conPID.y, val.y) annotation (Line(points={{81,110},{110,110},{110,22}},
                                  color={0,0,127}));
        connect(filtrer_dp_linear.port_b, jun.port_1)
          annotation (Line(points={{0,10},{20,10}}, color={0,127,255}));
        connect(res.port_a, jun.port_2)
          annotation (Line(points={{60,10},{40,10}}, color={0,127,255}));
        connect(jun.port_3, res1.port_a)
          annotation (Line(points={{30,20},{30,50},{80,50}}, color={0,127,255}));
        connect(senMasFlo.port_b, jun1.port_1)
          annotation (Line(points={{160,10},{180,10}}, color={0,127,255}));
        connect(res1.port_b, jun1.port_3)
          annotation (Line(points={{100,50},{190,50},{190,20}}, color={0,127,255}));
        connect(jun1.port_2, bou.ports[1]) annotation (Line(points={{200,10},{
                222,10},{222,-40},{-80,-40}},   color={0,127,255}));
        connect(boundary.ports[1], fan1.port_a)
          annotation (Line(points={{-80,10},{-60,10}}, color={0,127,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end p_loss_bis;

      model p_loss_ter
        Fluid.Sources.Boundary_pT bou(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          p=100000,
          nPorts=2)
          annotation (Placement(transformation(extent={{-100,0},{-80,20}})));
        Fluid.Movers.FlowControlled_dp fan1(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          p_start=100000,
          m_flow_nominal=2400,
          redeclare Fluid.Movers.Data.Pumps.KSB.KSB_edm per,
          inputType=Buildings.Fluid.Types.InputType.Constant,
          use_inputFilter=true,
          dp_nominal(displayUnit="bar") = 250000,
          constantHead(displayUnit="bar") = 240000)
          annotation (Placement(transformation(extent={{-60,0},{-40,20}})));
        PEM.Filters.filtrer_dp_linear filtrer_dp_linear(redeclare package
            Medium = Buildings.Applications.DHC_Thassalia.Media.Sea_Water, m_flow_nominal=2600/3.6)
          annotation (Placement(transformation(extent={{-20,0},{0,20}})));
        Fluid.FixedResistances.PressureDrop res(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal=864.9*1025/3600,
          dp_nominal=65600)
          annotation (Placement(transformation(extent={{60,0},{80,20}})));
        Fluid.Actuators.Valves.TwoWayLinear val(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m_flow_nominal=864.9*1025/3600,
          dpValve_nominal=31367,
          dpFixed_nominal=77985)
          annotation (Placement(transformation(extent={{100,0},{120,20}})));
        Controls.Continuous.LimPID conPID(k=0.1, Ti=15)
          annotation (Placement(transformation(extent={{60,100},{80,120}})));
        Modelica.Blocks.Sources.RealExpression realExpression(y=600*1025/3600)
          annotation (Placement(transformation(extent={{20,100},{40,120}})));
        Fluid.Sensors.MassFlowRate senMasFlo(redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water)
          annotation (Placement(transformation(extent={{140,0},{160,20}})));
      equation
        connect(bou.ports[1], fan1.port_a) annotation (Line(points={{-80,12},{
                -70,12},{-70,10},{-60,10}}, color={0,127,255}));
        connect(fan1.port_b, filtrer_dp_linear.port_a)
          annotation (Line(points={{-40,10},{-20,10}}, color={0,127,255}));
        connect(res.port_b, val.port_a)
          annotation (Line(points={{80,10},{100,10}},color={0,127,255}));
        connect(realExpression.y, conPID.u_s)
          annotation (Line(points={{41,110},{58,110}}, color={0,0,127}));
        connect(val.port_b, senMasFlo.port_a)
          annotation (Line(points={{120,10},{140,10}},color={0,127,255}));
        connect(conPID.u_m, senMasFlo.m_flow)
          annotation (Line(points={{70,98},{70,70},{150,70},{150,21}},
                                                       color={0,0,127}));
        connect(conPID.y, val.y) annotation (Line(points={{81,110},{110,110},{110,22}},
                                  color={0,0,127}));
        connect(filtrer_dp_linear.port_b, res.port_a) annotation (Line(points={
                {0,10},{30,10},{30,10},{60,10}}, color={0,127,255}));
        connect(senMasFlo.port_b, bou.ports[2]) annotation (Line(points={{160,
                10},{180,10},{180,-20},{-74,-20},{-74,8},{-80,8}}, color={0,127,
                255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(StopTime=300, __Dymola_Algorithm="Dassl"));
      end p_loss_ter;

      model loss_gf
        Fluid.Sources.MassFlowSource_T boundary(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          use_m_flow_in=false,
          m_flow=600*1025/3600,
          T=288.15,
          nPorts=1)
          annotation (Placement(transformation(extent={{-100,40},{-80,60}})));
        Fluid.Sources.Boundary_pT bou(
          redeclare package Medium =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          p=100000,
          nPorts=1) annotation (Placement(transformation(extent={{100,40},{80,60}})));
        Fluid.Chillers.ElectricEIR chi(
          redeclare package Medium1 =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          redeclare package Medium2 = Buildings.Media.Water,
          m1_flow_nominal=800*1025/3600,
          m2_flow_nominal=500/3.6,
          dp1_nominal(displayUnit="bar") = 38000,
          dp2_nominal(displayUnit="bar") = 31000,
          per=Fluid.Chillers.Data.ElectricEIR.ElectricEIRChiller_McQuay_WSC_471kW_5_89COP_Vanes())
                  annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
        Fluid.Sources.MassFlowSource_T boundary1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow=500/3.6,
          T=283.15,
          nPorts=1)
          annotation (Placement(transformation(extent={{100,-40},{80,-20}})));
        Fluid.Sources.Boundary_pT bou1(
          redeclare package Medium = Buildings.Media.Water,
          p=100000,
          nPorts=1)
          annotation (Placement(transformation(extent={{-100,-40},{-80,-20}})));
        Modelica.Blocks.Sources.RealExpression realExpression(y=4 + 273.15)
          annotation (Placement(transformation(extent={{-140,-20},{-120,0}})));
        Modelica.Blocks.Sources.BooleanExpression booleanExpression(y=true)
          annotation (Placement(transformation(extent={{-140,20},{-120,40}})));
      equation
        connect(boundary.ports[1], chi.port_a1) annotation (Line(points={{-80,50},{-46,
                50},{-46,6},{-10,6}}, color={0,127,255}));
        connect(chi.port_b1, bou.ports[1]) annotation (Line(points={{10,6},{46,6},{46,
                50},{80,50}}, color={0,127,255}));
        connect(chi.port_a2, boundary1.ports[1]) annotation (Line(points={{10,-6},{46,
                -6},{46,-30},{80,-30}}, color={0,127,255}));
        connect(chi.port_b2, bou1.ports[1]) annotation (Line(points={{-10,-6},{-46,-6},
                {-46,-30},{-80,-30}}, color={0,127,255}));
        connect(booleanExpression.y, chi.on) annotation (Line(points={{-119,30},{-66,30},
                {-66,3},{-12,3}}, color={255,0,255}));
        connect(realExpression.y, chi.TSet) annotation (Line(points={{-119,-10},{-68,-10},
                {-68,-3},{-12,-3}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end loss_gf;
    end delta_p;

    package interface
      model test
        Modelica.Blocks.Interfaces.IntegerInput mode
          annotation (Placement(transformation(extent={{-100,-10},{-60,30}}),
              iconTransformation(extent={{-20,-20},{20,20}},
              rotation=90,
              origin={-80,-120})));
        Modelica.Blocks.Sources.IntegerExpression integerExpression(y=mode)
          annotation (Placement(transformation(extent={{-26,-8},{-6,12}})));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end test;

      model dd
        test test1
          annotation (Placement(transformation(extent={{-20,20},{0,40}})));
        Modelica.Blocks.Sources.IntegerExpression integerExpression(y=2)
          annotation (Placement(transformation(extent={{-54,-12},{-34,8}})));
      equation
        connect(integerExpression.y, test1.mode) annotation (Line(points={{-33,
                -2},{-18,-2},{-18,18}}, color={255,127,0}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end dd;
    end interface;

    package filter
      model back_0
        Modelica.Blocks.Sources.Pulse pulse(period=100)
          annotation (Placement(transformation(extent={{-60,60},{-40,80}})));
        Controls_a.WaitBefore waitBefore(
          t_threshold=10,
          threshold=0,
          superior=false)
          annotation (Placement(transformation(extent={{-20,60},{0,80}})));
      equation
        connect(pulse.y, waitBefore.u)
          annotation (Line(points={{-39,70},{-22,70}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end back_0;
    end filter;
  end Miscellaneous;

  package heat_exchanger
    extends Modelica.Icons.VariantsPackage;

    package Tests
    extends Modelica.Icons.ExamplesPackage;
      model sea_water

      package Med_mode = Modelica.Media.Water.ConstantPropertyLiquidWater;
      replaceable package Med_buil = Buildings.Media.Water;
      replaceable package espoir =
            Buildings.Applications.DHC_Thassalia.Media.Sea_Water;

        Fluid.HeatExchangers.PlateHeatExchangerEffectivenessNTU hex(
          redeclare replaceable package Medium1 = Med_mode,
          redeclare package Medium2 = espoir,
          m1_flow_nominal=50,
          m2_flow_nominal=50,
          dp1_nominal=10,
          dp2_nominal=12,
          configuration=Buildings.Fluid.Types.HeatExchangerConfiguration.CounterFlow,
          Q_flow_nominal=50,
          T_a1_nominal=303.15,
          T_a2_nominal=323.15)
          annotation (Placement(transformation(extent={{-20,0},{0,20}})));

        Fluid.Sources.MassFlowSource_T boundary(
          redeclare package Medium = Buildings.Media.Water,
          m_flow=60,
          nPorts=1)
          annotation (Placement(transformation(extent={{-100,40},{-80,60}})));
        Fluid.Sources.Boundary_pT bou(redeclare package Medium =
              Buildings.Media.Water,                                          nPorts=1)
          annotation (Placement(transformation(extent={{60,40},{40,60}})));
        Fluid.Sources.MassFlowSource_T boundary1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow=50,
          nPorts=1) annotation (Placement(transformation(extent={{60,-20},{40,0}})));
        Fluid.Sources.Boundary_pT bou1(redeclare package Medium =
              Buildings.Media.Water,                                         nPorts=
             1) annotation (Placement(transformation(extent={{-100,-20},{-80,0}})));
      equation
        connect(boundary.ports[1], hex.port_a1) annotation (Line(points={{-80,50},{-50,
                50},{-50,16},{-20,16}}, color={0,127,255}));
        connect(hex.port_b1, bou.ports[1]) annotation (Line(points={{0,16},{20,16},{20,
                50},{40,50}}, color={0,127,255}));
        connect(bou1.ports[1], hex.port_b2) annotation (Line(points={{-80,-10},{-50,-10},
                {-50,4},{-20,4}}, color={0,127,255}));
        connect(hex.port_a2, boundary1.ports[1]) annotation (Line(points={{0,4},{22,4},
                {22,-10},{40,-10}}, color={0,127,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end sea_water;

      model sea_water_bis

      package Med_mode = Modelica.Media.Water.ConstantPropertyLiquidWater;
      replaceable package Med_buil = Buildings.Media.Water;

        Fluid.HeatExchangers.PlateHeatExchangerEffectivenessNTU hex(
          redeclare replaceable package Medium1 = Med_mode,
          redeclare package Medium2 =
              Buildings.Applications.DHC_Thassalia.Media.Sea_Water,
          m1_flow_nominal=50,
          m2_flow_nominal=50,
          dp1_nominal=10,
          dp2_nominal=12,
          configuration=Buildings.Fluid.Types.HeatExchangerConfiguration.CounterFlow,
          Q_flow_nominal=50,
          T_a1_nominal=303.15,
          T_a2_nominal=323.15)
          annotation (Placement(transformation(extent={{-20,0},{0,20}})));

        Fluid.Sources.MassFlowSource_T boundary(
          redeclare package Medium = Buildings.Media.Water,
          m_flow=60,
          nPorts=1)
          annotation (Placement(transformation(extent={{-100,40},{-80,60}})));
        Fluid.Sources.Boundary_pT bou(redeclare package Medium =
              Buildings.Media.Water,                                          nPorts=1)
          annotation (Placement(transformation(extent={{60,40},{40,60}})));
        Fluid.Sources.MassFlowSource_T boundary1(
          redeclare package Medium = Buildings.Media.Water,
          m_flow=50,
          nPorts=1) annotation (Placement(transformation(extent={{60,-20},{40,0}})));
        Fluid.Sources.Boundary_pT bou1(redeclare package Medium =
              Buildings.Media.Water,                                         nPorts=
             1) annotation (Placement(transformation(extent={{-100,-20},{-80,0}})));
      equation
        connect(boundary.ports[1], hex.port_a1) annotation (Line(points={{-80,50},{-50,
                50},{-50,16},{-20,16}}, color={0,127,255}));
        connect(hex.port_b1, bou.ports[1]) annotation (Line(points={{0,16},{20,16},{20,
                50},{40,50}}, color={0,127,255}));
        connect(bou1.ports[1], hex.port_b2) annotation (Line(points={{-80,-10},{-50,-10},
                {-50,4},{-20,4}}, color={0,127,255}));
        connect(hex.port_a2, boundary1.ports[1]) annotation (Line(points={{0,4},{22,4},
                {22,-10},{40,-10}}, color={0,127,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end sea_water_bis;
    end Tests;
  end heat_exchanger;
  annotation ();
end DHC_Thassalia;
